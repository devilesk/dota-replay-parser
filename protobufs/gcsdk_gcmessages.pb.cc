// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSHA1Digest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSHA1Digest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOIDOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOIDOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOSingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOSingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOMultipleObjects_SingleObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribed_SubscribedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribedUpToDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscribedUpToDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheUnsubscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheSubscriptionRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCMultiplexMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterAck_Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterAck_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterStartupComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgMasterStartupComplete_GCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgRouted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgRouted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCToGCMsgRoutedReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCUpdateSubGCSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestSubGCSessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCRequestSubGCSessionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheHaveVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWelcome_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWelcome_Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgConnectionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgConnectionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCSOCacheSubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheUnsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCSOCacheUnsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClientPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClientPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCLoadSessionSOCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCacheResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCLoadSessionSOCacheResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCToGCUpdateSessionStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCToGCUpdateSessionStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_GetContributors_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorkshop_SetItemPaymentRules_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBroadcast_PostGameDataFrame_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBroadcast_PostGameDataFrame_Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ESourceEngine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartnerAccountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto() {
  protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gcsdk_gcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSHA1Digest_descriptor_ = file->message_type(0);
  static const int CMsgSHA1Digest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, block3_),
  };
  CMsgSHA1Digest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSHA1Digest_descriptor_,
      CMsgSHA1Digest::default_instance_,
      CMsgSHA1Digest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSHA1Digest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSHA1Digest, _internal_metadata_),
      -1);
  CMsgSOIDOwner_descriptor_ = file->message_type(1);
  static const int CMsgSOIDOwner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, id_),
  };
  CMsgSOIDOwner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOIDOwner_descriptor_,
      CMsgSOIDOwner::default_instance_,
      CMsgSOIDOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOIDOwner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _internal_metadata_),
      -1);
  CMsgSOSingleObject_descriptor_ = file->message_type(2);
  static const int CMsgSOSingleObject_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, object_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, owner_soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, service_id_),
  };
  CMsgSOSingleObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOSingleObject_descriptor_,
      CMsgSOSingleObject::default_instance_,
      CMsgSOSingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOSingleObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOSingleObject, _internal_metadata_),
      -1);
  CMsgSOMultipleObjects_descriptor_ = file->message_type(3);
  static const int CMsgSOMultipleObjects_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, objects_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, owner_soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, service_id_),
  };
  CMsgSOMultipleObjects_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOMultipleObjects_descriptor_,
      CMsgSOMultipleObjects::default_instance_,
      CMsgSOMultipleObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOMultipleObjects),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects, _internal_metadata_),
      -1);
  CMsgSOMultipleObjects_SingleObject_descriptor_ = CMsgSOMultipleObjects_descriptor_->nested_type(0);
  static const int CMsgSOMultipleObjects_SingleObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, object_data_),
  };
  CMsgSOMultipleObjects_SingleObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOMultipleObjects_SingleObject_descriptor_,
      CMsgSOMultipleObjects_SingleObject::default_instance_,
      CMsgSOMultipleObjects_SingleObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOMultipleObjects_SingleObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
      -1);
  CMsgSOCacheSubscribed_descriptor_ = file->message_type(4);
  static const int CMsgSOCacheSubscribed_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, service_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, sync_version_),
  };
  CMsgSOCacheSubscribed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheSubscribed_descriptor_,
      CMsgSOCacheSubscribed::default_instance_,
      CMsgSOCacheSubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheSubscribed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed, _internal_metadata_),
      -1);
  CMsgSOCacheSubscribed_SubscribedType_descriptor_ = CMsgSOCacheSubscribed_descriptor_->nested_type(0);
  static const int CMsgSOCacheSubscribed_SubscribedType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, object_data_),
  };
  CMsgSOCacheSubscribed_SubscribedType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheSubscribed_SubscribedType_descriptor_,
      CMsgSOCacheSubscribed_SubscribedType::default_instance_,
      CMsgSOCacheSubscribed_SubscribedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheSubscribed_SubscribedType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
      -1);
  CMsgSOCacheSubscribedUpToDate_descriptor_ = file->message_type(5);
  static const int CMsgSOCacheSubscribedUpToDate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, owner_soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, service_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, sync_version_),
  };
  CMsgSOCacheSubscribedUpToDate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheSubscribedUpToDate_descriptor_,
      CMsgSOCacheSubscribedUpToDate::default_instance_,
      CMsgSOCacheSubscribedUpToDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheSubscribedUpToDate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, _internal_metadata_),
      -1);
  CMsgSOCacheUnsubscribed_descriptor_ = file->message_type(6);
  static const int CMsgSOCacheUnsubscribed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, owner_soid_),
  };
  CMsgSOCacheUnsubscribed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheUnsubscribed_descriptor_,
      CMsgSOCacheUnsubscribed::default_instance_,
      CMsgSOCacheUnsubscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheUnsubscribed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheUnsubscribed, _internal_metadata_),
      -1);
  CMsgSOCacheSubscriptionCheck_descriptor_ = file->message_type(7);
  static const int CMsgSOCacheSubscriptionCheck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, owner_soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, service_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, sync_version_),
  };
  CMsgSOCacheSubscriptionCheck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheSubscriptionCheck_descriptor_,
      CMsgSOCacheSubscriptionCheck::default_instance_,
      CMsgSOCacheSubscriptionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheSubscriptionCheck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, _internal_metadata_),
      -1);
  CMsgSOCacheSubscriptionRefresh_descriptor_ = file->message_type(8);
  static const int CMsgSOCacheSubscriptionRefresh_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, owner_soid_),
  };
  CMsgSOCacheSubscriptionRefresh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheSubscriptionRefresh_descriptor_,
      CMsgSOCacheSubscriptionRefresh::default_instance_,
      CMsgSOCacheSubscriptionRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheSubscriptionRefresh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheSubscriptionRefresh, _internal_metadata_),
      -1);
  CMsgSOCacheVersion_descriptor_ = file->message_type(9);
  static const int CMsgSOCacheVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, version_),
  };
  CMsgSOCacheVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheVersion_descriptor_,
      CMsgSOCacheVersion::default_instance_,
      CMsgSOCacheVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheVersion, _internal_metadata_),
      -1);
  CMsgGCMultiplexMessage_descriptor_ = file->message_type(10);
  static const int CMsgGCMultiplexMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, steamids_),
  };
  CMsgGCMultiplexMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCMultiplexMessage_descriptor_,
      CMsgGCMultiplexMessage::default_instance_,
      CMsgGCMultiplexMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCMultiplexMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMultiplexMessage, _internal_metadata_),
      -1);
  CGCToGCMsgMasterAck_descriptor_ = file->message_type(11);
  static const int CGCToGCMsgMasterAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, dir_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, machine_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, directory_),
  };
  CGCToGCMsgMasterAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgMasterAck_descriptor_,
      CGCToGCMsgMasterAck::default_instance_,
      CGCToGCMsgMasterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgMasterAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck, _internal_metadata_),
      -1);
  CGCToGCMsgMasterAck_Process_descriptor_ = CGCToGCMsgMasterAck_descriptor_->nested_type(0);
  static const int CGCToGCMsgMasterAck_Process_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, dir_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, type_instances_),
  };
  CGCToGCMsgMasterAck_Process_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgMasterAck_Process_descriptor_,
      CGCToGCMsgMasterAck_Process::default_instance_,
      CGCToGCMsgMasterAck_Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgMasterAck_Process),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Process, _internal_metadata_),
      -1);
  CGCToGCMsgMasterAck_Response_descriptor_ = file->message_type(12);
  static const int CGCToGCMsgMasterAck_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, eresult_),
  };
  CGCToGCMsgMasterAck_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgMasterAck_Response_descriptor_,
      CGCToGCMsgMasterAck_Response::default_instance_,
      CGCToGCMsgMasterAck_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgMasterAck_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterAck_Response, _internal_metadata_),
      -1);
  CGCToGCMsgMasterStartupComplete_descriptor_ = file->message_type(13);
  static const int CGCToGCMsgMasterStartupComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, gc_info_),
  };
  CGCToGCMsgMasterStartupComplete_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgMasterStartupComplete_descriptor_,
      CGCToGCMsgMasterStartupComplete::default_instance_,
      CGCToGCMsgMasterStartupComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgMasterStartupComplete),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete, _internal_metadata_),
      -1);
  CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_ = CGCToGCMsgMasterStartupComplete_descriptor_->nested_type(0);
  static const int CGCToGCMsgMasterStartupComplete_GCInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, dir_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, machine_name_),
  };
  CGCToGCMsgMasterStartupComplete_GCInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_,
      CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_,
      CGCToGCMsgMasterStartupComplete_GCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgMasterStartupComplete_GCInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgMasterStartupComplete_GCInfo, _internal_metadata_),
      -1);
  CGCToGCMsgRouted_descriptor_ = file->message_type(14);
  static const int CGCToGCMsgRouted_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, net_message_),
  };
  CGCToGCMsgRouted_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgRouted_descriptor_,
      CGCToGCMsgRouted::default_instance_,
      CGCToGCMsgRouted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgRouted),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRouted, _internal_metadata_),
      -1);
  CGCToGCMsgRoutedReply_descriptor_ = file->message_type(15);
  static const int CGCToGCMsgRoutedReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, net_message_),
  };
  CGCToGCMsgRoutedReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CGCToGCMsgRoutedReply_descriptor_,
      CGCToGCMsgRoutedReply::default_instance_,
      CGCToGCMsgRoutedReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(CGCToGCMsgRoutedReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCToGCMsgRoutedReply, _internal_metadata_),
      -1);
  CMsgGCUpdateSubGCSessionInfo_descriptor_ = file->message_type(16);
  static const int CMsgGCUpdateSubGCSessionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, updates_),
  };
  CMsgGCUpdateSubGCSessionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCUpdateSubGCSessionInfo_descriptor_,
      CMsgGCUpdateSubGCSessionInfo::default_instance_,
      CMsgGCUpdateSubGCSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCUpdateSubGCSessionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo, _internal_metadata_),
      -1);
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_ = CMsgGCUpdateSubGCSessionInfo_descriptor_->nested_type(0);
  static const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_),
  };
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_,
      CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_,
      CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _internal_metadata_),
      -1);
  CMsgGCRequestSubGCSessionInfo_descriptor_ = file->message_type(17);
  static const int CMsgGCRequestSubGCSessionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, steamid_),
  };
  CMsgGCRequestSubGCSessionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCRequestSubGCSessionInfo_descriptor_,
      CMsgGCRequestSubGCSessionInfo::default_instance_,
      CMsgGCRequestSubGCSessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCRequestSubGCSessionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfo, _internal_metadata_),
      -1);
  CMsgGCRequestSubGCSessionInfoResponse_descriptor_ = file->message_type(18);
  static const int CMsgGCRequestSubGCSessionInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, trusted_),
  };
  CMsgGCRequestSubGCSessionInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCRequestSubGCSessionInfoResponse_descriptor_,
      CMsgGCRequestSubGCSessionInfoResponse::default_instance_,
      CMsgGCRequestSubGCSessionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCRequestSubGCSessionInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, _internal_metadata_),
      -1);
  CMsgSOCacheHaveVersion_descriptor_ = file->message_type(19);
  static const int CMsgSOCacheHaveVersion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, cached_file_version_),
  };
  CMsgSOCacheHaveVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgSOCacheHaveVersion_descriptor_,
      CMsgSOCacheHaveVersion::default_instance_,
      CMsgSOCacheHaveVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgSOCacheHaveVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _internal_metadata_),
      -1);
  CMsgClientHello_descriptor_ = file->message_type(20);
  static const int CMsgClientHello_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, socache_have_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, secret_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, engine_),
  };
  CMsgClientHello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgClientHello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _internal_metadata_),
      -1);
  CMsgClientWelcome_descriptor_ = file->message_type(21);
  static const int CMsgClientWelcome_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, outofdate_subscribed_caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, uptodate_subscribed_caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, save_game_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, item_schema_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, items_game_url_),
  };
  CMsgClientWelcome_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgClientWelcome_descriptor_,
      CMsgClientWelcome::default_instance_,
      CMsgClientWelcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgClientWelcome),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome, _internal_metadata_),
      -1);
  CMsgClientWelcome_Location_descriptor_ = CMsgClientWelcome_descriptor_->nested_type(0);
  static const int CMsgClientWelcome_Location_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, country_),
  };
  CMsgClientWelcome_Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgClientWelcome_Location_descriptor_,
      CMsgClientWelcome_Location::default_instance_,
      CMsgClientWelcome_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgClientWelcome_Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWelcome_Location, _internal_metadata_),
      -1);
  CMsgConnectionStatus_descriptor_ = file->message_type(22);
  static const int CMsgConnectionStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, wait_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  };
  CMsgConnectionStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgConnectionStatus_descriptor_,
      CMsgConnectionStatus::default_instance_,
      CMsgConnectionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgConnectionStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgConnectionStatus, _internal_metadata_),
      -1);
  CMsgGCToGCSOCacheSubscribe_descriptor_ = file->message_type(23);
  static const int CMsgGCToGCSOCacheSubscribe_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscriber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscribe_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, sync_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, have_versions_),
  };
  CMsgGCToGCSOCacheSubscribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCSOCacheSubscribe_descriptor_,
      CMsgGCToGCSOCacheSubscribe::default_instance_,
      CMsgGCToGCSOCacheSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCSOCacheSubscribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, _internal_metadata_),
      -1);
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_ = CMsgGCToGCSOCacheSubscribe_descriptor_->nested_type(0);
  static const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_),
  };
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_,
      CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_,
      CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _internal_metadata_),
      -1);
  CMsgGCToGCSOCacheUnsubscribe_descriptor_ = file->message_type(24);
  static const int CMsgGCToGCSOCacheUnsubscribe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, subscriber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_),
  };
  CMsgGCToGCSOCacheUnsubscribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCSOCacheUnsubscribe_descriptor_,
      CMsgGCToGCSOCacheUnsubscribe::default_instance_,
      CMsgGCToGCSOCacheUnsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCSOCacheUnsubscribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, _internal_metadata_),
      -1);
  CMsgGCClientPing_descriptor_ = file->message_type(25);
  static const int CMsgGCClientPing_offsets_[1] = {
  };
  CMsgGCClientPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCClientPing_descriptor_,
      CMsgGCClientPing::default_instance_,
      CMsgGCClientPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientPing, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCClientPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClientPing, _internal_metadata_),
      -1);
  CMsgGCToGCLoadSessionSOCache_descriptor_ = file->message_type(26);
  static const int CMsgGCToGCLoadSessionSOCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, account_id_),
  };
  CMsgGCToGCLoadSessionSOCache_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCLoadSessionSOCache_descriptor_,
      CMsgGCToGCLoadSessionSOCache::default_instance_,
      CMsgGCToGCLoadSessionSOCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCLoadSessionSOCache),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, _internal_metadata_),
      -1);
  CMsgGCToGCLoadSessionSOCacheResponse_descriptor_ = file->message_type(27);
  static const int CMsgGCToGCLoadSessionSOCacheResponse_offsets_[1] = {
  };
  CMsgGCToGCLoadSessionSOCacheResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCLoadSessionSOCacheResponse_descriptor_,
      CMsgGCToGCLoadSessionSOCacheResponse::default_instance_,
      CMsgGCToGCLoadSessionSOCacheResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCacheResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCLoadSessionSOCacheResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCacheResponse, _internal_metadata_),
      -1);
  CMsgGCToGCUpdateSessionStats_descriptor_ = file->message_type(28);
  static const int CMsgGCToGCUpdateSessionStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, user_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, server_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, in_logon_surge_),
  };
  CMsgGCToGCUpdateSessionStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMsgGCToGCUpdateSessionStats_descriptor_,
      CMsgGCToGCUpdateSessionStats::default_instance_,
      CMsgGCToGCUpdateSessionStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(CMsgGCToGCUpdateSessionStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, _internal_metadata_),
      -1);
  CWorkshop_PopulateItemDescriptions_Request_descriptor_ = file->message_type(29);
  static const int CWorkshop_PopulateItemDescriptions_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, languages_),
  };
  CWorkshop_PopulateItemDescriptions_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_PopulateItemDescriptions_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request, _internal_metadata_),
      -1);
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(0);
  static const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
  };
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _internal_metadata_),
      -1);
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_ = CWorkshop_PopulateItemDescriptions_Request_descriptor_->nested_type(1);
  static const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  };
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_,
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _internal_metadata_),
      -1);
  CWorkshop_GetContributors_Request_descriptor_ = file->message_type(30);
  static const int CWorkshop_GetContributors_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, gameitemid_),
  };
  CWorkshop_GetContributors_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_GetContributors_Request_descriptor_,
      CWorkshop_GetContributors_Request::default_instance_,
      CWorkshop_GetContributors_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_GetContributors_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Request, _internal_metadata_),
      -1);
  CWorkshop_GetContributors_Response_descriptor_ = file->message_type(31);
  static const int CWorkshop_GetContributors_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, contributors_),
  };
  CWorkshop_GetContributors_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_GetContributors_Response_descriptor_,
      CWorkshop_GetContributors_Response::default_instance_,
      CWorkshop_GetContributors_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_GetContributors_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_GetContributors_Response, _internal_metadata_),
      -1);
  CWorkshop_SetItemPaymentRules_Request_descriptor_ = file->message_type(32);
  static const int CWorkshop_SetItemPaymentRules_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, gameitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  };
  CWorkshop_SetItemPaymentRules_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_descriptor_,
      CWorkshop_SetItemPaymentRules_Request::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_SetItemPaymentRules_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, _internal_metadata_),
      -1);
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(0);
  static const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _internal_metadata_),
      -1);
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_ = CWorkshop_SetItemPaymentRules_Request_descriptor_->nested_type(1);
  static const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  };
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_,
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _internal_metadata_),
      -1);
  CWorkshop_SetItemPaymentRules_Response_descriptor_ = file->message_type(33);
  static const int CWorkshop_SetItemPaymentRules_Response_offsets_[1] = {
  };
  CWorkshop_SetItemPaymentRules_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorkshop_SetItemPaymentRules_Response_descriptor_,
      CWorkshop_SetItemPaymentRules_Response::default_instance_,
      CWorkshop_SetItemPaymentRules_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(CWorkshop_SetItemPaymentRules_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Response, _internal_metadata_),
      -1);
  CBroadcast_PostGameDataFrame_Request_descriptor_ = file->message_type(34);
  static const int CBroadcast_PostGameDataFrame_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, frame_data_),
  };
  CBroadcast_PostGameDataFrame_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CBroadcast_PostGameDataFrame_Request_descriptor_,
      CBroadcast_PostGameDataFrame_Request::default_instance_,
      CBroadcast_PostGameDataFrame_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(CBroadcast_PostGameDataFrame_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, _internal_metadata_),
      -1);
  ESourceEngine_descriptor_ = file->enum_type(0);
  PartnerAccountType_descriptor_ = file->enum_type(1);
  GCConnectionStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSHA1Digest_descriptor_, &CMsgSHA1Digest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOIDOwner_descriptor_, &CMsgSOIDOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOSingleObject_descriptor_, &CMsgSOSingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOMultipleObjects_descriptor_, &CMsgSOMultipleObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOMultipleObjects_SingleObject_descriptor_, &CMsgSOMultipleObjects_SingleObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheSubscribed_descriptor_, &CMsgSOCacheSubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheSubscribed_SubscribedType_descriptor_, &CMsgSOCacheSubscribed_SubscribedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheSubscribedUpToDate_descriptor_, &CMsgSOCacheSubscribedUpToDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheUnsubscribed_descriptor_, &CMsgSOCacheUnsubscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheSubscriptionCheck_descriptor_, &CMsgSOCacheSubscriptionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheSubscriptionRefresh_descriptor_, &CMsgSOCacheSubscriptionRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheVersion_descriptor_, &CMsgSOCacheVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCMultiplexMessage_descriptor_, &CMsgGCMultiplexMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgMasterAck_descriptor_, &CGCToGCMsgMasterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgMasterAck_Process_descriptor_, &CGCToGCMsgMasterAck_Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgMasterAck_Response_descriptor_, &CGCToGCMsgMasterAck_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgMasterStartupComplete_descriptor_, &CGCToGCMsgMasterStartupComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_, &CGCToGCMsgMasterStartupComplete_GCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgRouted_descriptor_, &CGCToGCMsgRouted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CGCToGCMsgRoutedReply_descriptor_, &CGCToGCMsgRoutedReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCUpdateSubGCSessionInfo_descriptor_, &CMsgGCUpdateSubGCSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_, &CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCRequestSubGCSessionInfo_descriptor_, &CMsgGCRequestSubGCSessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCRequestSubGCSessionInfoResponse_descriptor_, &CMsgGCRequestSubGCSessionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgSOCacheHaveVersion_descriptor_, &CMsgSOCacheHaveVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgClientWelcome_descriptor_, &CMsgClientWelcome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgClientWelcome_Location_descriptor_, &CMsgClientWelcome_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgConnectionStatus_descriptor_, &CMsgConnectionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCSOCacheSubscribe_descriptor_, &CMsgGCToGCSOCacheSubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_, &CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCSOCacheUnsubscribe_descriptor_, &CMsgGCToGCSOCacheUnsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCClientPing_descriptor_, &CMsgGCClientPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCLoadSessionSOCache_descriptor_, &CMsgGCToGCLoadSessionSOCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCLoadSessionSOCacheResponse_descriptor_, &CMsgGCToGCLoadSessionSOCacheResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMsgGCToGCUpdateSessionStats_descriptor_, &CMsgGCToGCUpdateSessionStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_PopulateItemDescriptions_Request_descriptor_, &CWorkshop_PopulateItemDescriptions_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_, &CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_GetContributors_Request_descriptor_, &CWorkshop_GetContributors_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_GetContributors_Response_descriptor_, &CWorkshop_GetContributors_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_SetItemPaymentRules_Request_descriptor_, &CWorkshop_SetItemPaymentRules_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_, &CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorkshop_SetItemPaymentRules_Response_descriptor_, &CWorkshop_SetItemPaymentRules_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CBroadcast_PostGameDataFrame_Request_descriptor_, &CBroadcast_PostGameDataFrame_Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto() {
  delete CMsgSHA1Digest::default_instance_;
  delete CMsgSHA1Digest_reflection_;
  delete CMsgSOIDOwner::default_instance_;
  delete CMsgSOIDOwner_reflection_;
  delete CMsgSOSingleObject::default_instance_;
  delete CMsgSOSingleObject_reflection_;
  delete CMsgSOMultipleObjects::default_instance_;
  delete CMsgSOMultipleObjects_reflection_;
  delete CMsgSOMultipleObjects_SingleObject::default_instance_;
  delete CMsgSOMultipleObjects_SingleObject_reflection_;
  delete CMsgSOCacheSubscribed::default_instance_;
  delete CMsgSOCacheSubscribed_reflection_;
  delete CMsgSOCacheSubscribed_SubscribedType::default_instance_;
  delete CMsgSOCacheSubscribed_SubscribedType_reflection_;
  delete CMsgSOCacheSubscribedUpToDate::default_instance_;
  delete CMsgSOCacheSubscribedUpToDate_reflection_;
  delete CMsgSOCacheUnsubscribed::default_instance_;
  delete CMsgSOCacheUnsubscribed_reflection_;
  delete CMsgSOCacheSubscriptionCheck::default_instance_;
  delete CMsgSOCacheSubscriptionCheck_reflection_;
  delete CMsgSOCacheSubscriptionRefresh::default_instance_;
  delete CMsgSOCacheSubscriptionRefresh_reflection_;
  delete CMsgSOCacheVersion::default_instance_;
  delete CMsgSOCacheVersion_reflection_;
  delete CMsgGCMultiplexMessage::default_instance_;
  delete CMsgGCMultiplexMessage_reflection_;
  delete CGCToGCMsgMasterAck::default_instance_;
  delete CGCToGCMsgMasterAck_reflection_;
  delete CGCToGCMsgMasterAck_Process::default_instance_;
  delete CGCToGCMsgMasterAck_Process_reflection_;
  delete CGCToGCMsgMasterAck_Response::default_instance_;
  delete CGCToGCMsgMasterAck_Response_reflection_;
  delete CGCToGCMsgMasterStartupComplete::default_instance_;
  delete CGCToGCMsgMasterStartupComplete_reflection_;
  delete CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_;
  delete CGCToGCMsgMasterStartupComplete_GCInfo_reflection_;
  delete CGCToGCMsgRouted::default_instance_;
  delete CGCToGCMsgRouted_reflection_;
  delete CGCToGCMsgRoutedReply::default_instance_;
  delete CGCToGCMsgRoutedReply_reflection_;
  delete CMsgGCUpdateSubGCSessionInfo::default_instance_;
  delete CMsgGCUpdateSubGCSessionInfo_reflection_;
  delete CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_;
  delete CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_reflection_;
  delete CMsgGCRequestSubGCSessionInfo::default_instance_;
  delete CMsgGCRequestSubGCSessionInfo_reflection_;
  delete CMsgGCRequestSubGCSessionInfoResponse::default_instance_;
  delete CMsgGCRequestSubGCSessionInfoResponse_reflection_;
  delete CMsgSOCacheHaveVersion::default_instance_;
  delete CMsgSOCacheHaveVersion_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
  delete CMsgClientWelcome::default_instance_;
  delete CMsgClientWelcome_reflection_;
  delete CMsgClientWelcome_Location::default_instance_;
  delete CMsgClientWelcome_Location_reflection_;
  delete CMsgConnectionStatus::default_instance_;
  delete CMsgConnectionStatus_reflection_;
  delete CMsgGCToGCSOCacheSubscribe::default_instance_;
  delete CMsgGCToGCSOCacheSubscribe_reflection_;
  delete CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_;
  delete CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_reflection_;
  delete CMsgGCToGCSOCacheUnsubscribe::default_instance_;
  delete CMsgGCToGCSOCacheUnsubscribe_reflection_;
  delete CMsgGCClientPing::default_instance_;
  delete CMsgGCClientPing_reflection_;
  delete CMsgGCToGCLoadSessionSOCache::default_instance_;
  delete CMsgGCToGCLoadSessionSOCache_reflection_;
  delete CMsgGCToGCLoadSessionSOCacheResponse::default_instance_;
  delete CMsgGCToGCLoadSessionSOCacheResponse_reflection_;
  delete CMsgGCToGCUpdateSessionStats::default_instance_;
  delete CMsgGCToGCUpdateSessionStats_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_;
  delete CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  delete CWorkshop_GetContributors_Request::default_instance_;
  delete CWorkshop_GetContributors_Request_reflection_;
  delete CWorkshop_GetContributors_Response::default_instance_;
  delete CWorkshop_GetContributors_Response_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  delete CWorkshop_SetItemPaymentRules_Response::default_instance_;
  delete CWorkshop_SetItemPaymentRules_Response_reflection_;
  delete CBroadcast_PostGameDataFrame_Request::default_instance_;
  delete CBroadcast_PostGameDataFrame_Request_reflection_;
}

void protobuf_AddDesc_gcsdk_5fgcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026gcsdk_gcmessages.proto\032\023steammessages."
    "proto\"@\n\016CMsgSHA1Digest\022\016\n\006block1\030\001 \002(\006\022"
    "\016\n\006block2\030\002 \002(\006\022\016\n\006block3\030\003 \002(\007\")\n\rCMsgS"
    "OIDOwner\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\"\203\001\n\022C"
    "MsgSOSingleObject\022\017\n\007type_id\030\002 \001(\005\022\023\n\013ob"
    "ject_data\030\003 \001(\014\022\017\n\007version\030\004 \001(\006\022\"\n\nowne"
    "r_soid\030\005 \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_"
    "id\030\006 \001(\r\"\333\002\n\025CMsgSOMultipleObjects\022=\n\020ob"
    "jects_modified\030\002 \003(\0132#.CMsgSOMultipleObj"
    "ects.SingleObject\022\017\n\007version\030\003 \001(\006\022:\n\rob"
    "jects_added\030\004 \003(\0132#.CMsgSOMultipleObject"
    "s.SingleObject\022<\n\017objects_removed\030\005 \003(\0132"
    "#.CMsgSOMultipleObjects.SingleObject\022\"\n\n"
    "owner_soid\030\006 \001(\0132\016.CMsgSOIDOwner\022\022\n\nserv"
    "ice_id\030\007 \001(\r\032@\n\014SingleObject\022\017\n\007type_id\030"
    "\001 \001(\005\022\023\n\013object_data\030\002 \001(\014:\n\200\246\035\200\002\210\246\035\200\010\"\374"
    "\001\n\025CMsgSOCacheSubscribed\0226\n\007objects\030\002 \003("
    "\0132%.CMsgSOCacheSubscribed.SubscribedType"
    "\022\017\n\007version\030\003 \001(\006\022\"\n\nowner_soid\030\004 \001(\0132\016."
    "CMsgSOIDOwner\022\022\n\nservice_id\030\005 \001(\r\022\024\n\014ser"
    "vice_list\030\006 \003(\r\022\024\n\014sync_version\030\007 \001(\006\0326\n"
    "\016SubscribedType\022\017\n\007type_id\030\001 \001(\005\022\023\n\013obje"
    "ct_data\030\002 \003(\014\"\224\001\n\035CMsgSOCacheSubscribedU"
    "pToDate\022\017\n\007version\030\001 \001(\006\022\"\n\nowner_soid\030\002"
    " \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\003 \001(\r"
    "\022\024\n\014service_list\030\004 \003(\r\022\024\n\014sync_version\030\005"
    " \001(\006\"=\n\027CMsgSOCacheUnsubscribed\022\"\n\nowner"
    "_soid\030\002 \001(\0132\016.CMsgSOIDOwner\"\223\001\n\034CMsgSOCa"
    "cheSubscriptionCheck\022\017\n\007version\030\002 \001(\006\022\"\n"
    "\nowner_soid\030\003 \001(\0132\016.CMsgSOIDOwner\022\022\n\nser"
    "vice_id\030\004 \001(\r\022\024\n\014service_list\030\005 \003(\r\022\024\n\014s"
    "ync_version\030\006 \001(\006\"D\n\036CMsgSOCacheSubscrip"
    "tionRefresh\022\"\n\nowner_soid\030\002 \001(\0132\016.CMsgSO"
    "IDOwner\"%\n\022CMsgSOCacheVersion\022\017\n\007version"
    "\030\001 \001(\006\"L\n\026CMsgGCMultiplexMessage\022\017\n\007msgt"
    "ype\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\022\020\n\010steamids\030\003"
    " \003(\006\"\273\001\n\023CGCToGCMsgMasterAck\022\021\n\tdir_inde"
    "x\030\001 \001(\r\022\024\n\014machine_name\030\003 \001(\t\022\024\n\014process"
    "_name\030\004 \001(\t\022/\n\tdirectory\030\006 \003(\0132\034.CGCToGC"
    "MsgMasterAck.Process\0324\n\007Process\022\021\n\tdir_i"
    "ndex\030\001 \001(\r\022\026\n\016type_instances\030\002 \003(\r\"2\n\034CG"
    "CToGCMsgMasterAck_Response\022\022\n\007eresult\030\001 "
    "\001(\005:\0012\"\216\001\n\037CGCToGCMsgMasterStartupComple"
    "te\0228\n\007gc_info\030\001 \003(\0132\'.CGCToGCMsgMasterSt"
    "artupComplete.GCInfo\0321\n\006GCInfo\022\021\n\tdir_in"
    "dex\030\001 \001(\r\022\024\n\014machine_name\030\002 \001(\t\"L\n\020CGCTo"
    "GCMsgRouted\022\020\n\010msg_type\030\001 \001(\r\022\021\n\tsender_"
    "id\030\002 \001(\006\022\023\n\013net_message\030\003 \001(\014\">\n\025CGCToGC"
    "MsgRoutedReply\022\020\n\010msg_type\030\001 \001(\r\022\023\n\013net_"
    "message\030\002 \001(\014\"\225\001\n\034CMsgGCUpdateSubGCSessi"
    "onInfo\0229\n\007updates\030\001 \003(\0132(.CMsgGCUpdateSu"
    "bGCSessionInfo.CMsgUpdate\032:\n\nCMsgUpdate\022"
    "\017\n\007steamid\030\001 \001(\006\022\n\n\002ip\030\002 \001(\007\022\017\n\007trusted\030"
    "\003 \001(\010\"0\n\035CMsgGCRequestSubGCSessionInfo\022\017"
    "\n\007steamid\030\001 \001(\006\"D\n%CMsgGCRequestSubGCSes"
    "sionInfoResponse\022\n\n\002ip\030\001 \001(\007\022\017\n\007trusted\030"
    "\002 \001(\010\"x\n\026CMsgSOCacheHaveVersion\022\034\n\004soid\030"
    "\001 \001(\0132\016.CMsgSOIDOwner\022\017\n\007version\030\002 \001(\006\022\022"
    "\n\nservice_id\030\003 \001(\r\022\033\n\023cached_file_versio"
    "n\030\004 \001(\r\"\217\002\n\017CMsgClientHello\022\017\n\007version\030\001"
    " \001(\r\0226\n\025socache_have_versions\030\002 \003(\0132\027.CM"
    "sgSOCacheHaveVersion\022\033\n\023client_session_n"
    "eed\030\003 \001(\r\022:\n\017client_launcher\030\004 \001(\0162\023.Par"
    "tnerAccountType:\014PARTNER_NONE\022\022\n\nsecret_"
    "key\030\005 \001(\t\022\027\n\017client_language\030\006 \001(\r\022-\n\006en"
    "gine\030\007 \001(\0162\016.ESourceEngine:\rk_ESE_Source"
    "1\"\360\002\n\021CMsgClientWelcome\022\017\n\007version\030\001 \001(\r"
    "\022\021\n\tgame_data\030\002 \001(\014\022;\n\033outofdate_subscri"
    "bed_caches\030\003 \003(\0132\026.CMsgSOCacheSubscribed"
    "\022A\n\032uptodate_subscribed_caches\030\004 \003(\0132\035.C"
    "MsgSOCacheSubscriptionCheck\022-\n\010location\030"
    "\005 \001(\0132\033.CMsgClientWelcome.Location\022\025\n\rsa"
    "ve_game_key\030\006 \001(\014\022\027\n\017item_schema_crc\030\007 \001"
    "(\007\022\026\n\016items_game_url\030\010 \001(\t\032@\n\010Location\022\020"
    "\n\010latitude\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\017\n\007c"
    "ountry\030\003 \001(\t\"\345\001\n\024CMsgConnectionStatus\022D\n"
    "\006status\030\001 \001(\0162\023.GCConnectionStatus:\037GCCo"
    "nnectionStatus_HAVE_SESSION\022\033\n\023client_se"
    "ssion_need\030\002 \001(\r\022\026\n\016queue_position\030\003 \001(\005"
    "\022\022\n\nqueue_size\030\004 \001(\005\022\024\n\014wait_seconds\030\005 \001"
    "(\005\022(\n estimated_wait_seconds_remaining\030\006"
    " \001(\005\"\332\001\n\032CMsgGCToGCSOCacheSubscribe\022\022\n\ns"
    "ubscriber\030\001 \001(\006\022\024\n\014subscribe_to\030\002 \001(\006\022\024\n"
    "\014sync_version\030\003 \001(\006\022C\n\rhave_versions\030\004 \003"
    "(\0132,.CMsgGCToGCSOCacheSubscribe.CMsgHave"
    "Versions\0327\n\020CMsgHaveVersions\022\022\n\nservice_"
    "id\030\001 \001(\r\022\017\n\007version\030\002 \001(\004\"L\n\034CMsgGCToGCS"
    "OCacheUnsubscribe\022\022\n\nsubscriber\030\001 \001(\006\022\030\n"
    "\020unsubscribe_from\030\002 \001(\006\"\022\n\020CMsgGCClientP"
    "ing\"2\n\034CMsgGCToGCLoadSessionSOCache\022\022\n\na"
    "ccount_id\030\001 \001(\r\"&\n$CMsgGCToGCLoadSession"
    "SOCacheResponse\"f\n\034CMsgGCToGCUpdateSessi"
    "onStats\022\025\n\ruser_sessions\030\001 \001(\r\022\027\n\017server"
    "_sessions\030\002 \001(\r\022\026\n\016in_logon_surge\030\003 \001(\010\""
    "\355\002\n*CWorkshop_PopulateItemDescriptions_R"
    "equest\022\r\n\005appid\030\001 \001(\r\022\\\n\tlanguages\030\002 \003(\013"
    "2I.CWorkshop_PopulateItemDescriptions_Re"
    "quest.ItemDescriptionsLanguageBlock\032E\n\025S"
    "ingleItemDescription\022\022\n\ngameitemid\030\001 \001(\r"
    "\022\030\n\020item_description\030\002 \001(\t\032\212\001\n\035ItemDescr"
    "iptionsLanguageBlock\022\020\n\010language\030\001 \001(\t\022W"
    "\n\014descriptions\030\002 \003(\0132A.CWorkshop_Populat"
    "eItemDescriptions_Request.SingleItemDesc"
    "ription\"F\n!CWorkshop_GetContributors_Req"
    "uest\022\r\n\005appid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\""
    ":\n\"CWorkshop_GetContributors_Response\022\024\n"
    "\014contributors\030\001 \003(\006\"\325\003\n%CWorkshop_SetIte"
    "mPaymentRules_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\n"
    "gameitemid\030\002 \001(\r\022a\n\031associated_workshop_"
    "files\030\003 \003(\0132>.CWorkshop_SetItemPaymentRu"
    "les_Request.WorkshopItemPaymentRule\022W\n\020p"
    "artner_accounts\030\004 \003(\0132=.CWorkshop_SetIte"
    "mPaymentRules_Request.PartnerItemPayment"
    "Rule\032i\n\027WorkshopItemPaymentRule\022\030\n\020works"
    "hop_file_id\030\001 \001(\004\022\032\n\022revenue_percentage\030"
    "\002 \001(\002\022\030\n\020rule_description\030\003 \001(\t\032b\n\026Partn"
    "erItemPaymentRule\022\022\n\naccount_id\030\001 \001(\r\022\032\n"
    "\022revenue_percentage\030\002 \001(\002\022\030\n\020rule_descri"
    "ption\030\003 \001(\t\"(\n&CWorkshop_SetItemPaymentR"
    "ules_Response\"p\n$CBroadcast_PostGameData"
    "Frame_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030"
    "\002 \001(\006\022\024\n\014broadcast_id\030\003 \001(\006\022\022\n\nframe_dat"
    "a\030\004 \001(\014*5\n\rESourceEngine\022\021\n\rk_ESE_Source"
    "1\020\000\022\021\n\rk_ESE_Source2\020\001*i\n\022PartnerAccount"
    "Type\022\020\n\014PARTNER_NONE\020\000\022\031\n\025PARTNER_PERFEC"
    "T_WORLD\020\001\022\021\n\rPARTNER_NEXON\020\002\022\023\n\017PARTNER_"
    "INVALID\020\003*\367\001\n\022GCConnectionStatus\022#\n\037GCCo"
    "nnectionStatus_HAVE_SESSION\020\000\022$\n GCConne"
    "ctionStatus_GC_GOING_DOWN\020\001\022!\n\035GCConnect"
    "ionStatus_NO_SESSION\020\002\0220\n,GCConnectionSt"
    "atus_NO_SESSION_IN_LOGON_QUEUE\020\003\022\037\n\033GCCo"
    "nnectionStatus_NO_STEAM\020\004\022 \n\034GCConnectio"
    "nStatus_SUSPENDED\020\005B\005H\001\200\001\000", 5306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsdk_gcmessages.proto", &protobuf_RegisterTypes);
  CMsgSHA1Digest::default_instance_ = new CMsgSHA1Digest();
  CMsgSOIDOwner::default_instance_ = new CMsgSOIDOwner();
  CMsgSOSingleObject::default_instance_ = new CMsgSOSingleObject();
  CMsgSOMultipleObjects::default_instance_ = new CMsgSOMultipleObjects();
  CMsgSOMultipleObjects_SingleObject::default_instance_ = new CMsgSOMultipleObjects_SingleObject();
  CMsgSOCacheSubscribed::default_instance_ = new CMsgSOCacheSubscribed();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_ = new CMsgSOCacheSubscribed_SubscribedType();
  CMsgSOCacheSubscribedUpToDate::default_instance_ = new CMsgSOCacheSubscribedUpToDate();
  CMsgSOCacheUnsubscribed::default_instance_ = new CMsgSOCacheUnsubscribed();
  CMsgSOCacheSubscriptionCheck::default_instance_ = new CMsgSOCacheSubscriptionCheck();
  CMsgSOCacheSubscriptionRefresh::default_instance_ = new CMsgSOCacheSubscriptionRefresh();
  CMsgSOCacheVersion::default_instance_ = new CMsgSOCacheVersion();
  CMsgGCMultiplexMessage::default_instance_ = new CMsgGCMultiplexMessage();
  CGCToGCMsgMasterAck::default_instance_ = new CGCToGCMsgMasterAck();
  CGCToGCMsgMasterAck_Process::default_instance_ = new CGCToGCMsgMasterAck_Process();
  CGCToGCMsgMasterAck_Response::default_instance_ = new CGCToGCMsgMasterAck_Response();
  CGCToGCMsgMasterStartupComplete::default_instance_ = new CGCToGCMsgMasterStartupComplete();
  CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_ = new CGCToGCMsgMasterStartupComplete_GCInfo();
  CGCToGCMsgRouted::default_instance_ = new CGCToGCMsgRouted();
  CGCToGCMsgRoutedReply::default_instance_ = new CGCToGCMsgRoutedReply();
  CMsgGCUpdateSubGCSessionInfo::default_instance_ = new CMsgGCUpdateSubGCSessionInfo();
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_ = new CMsgGCUpdateSubGCSessionInfo_CMsgUpdate();
  CMsgGCRequestSubGCSessionInfo::default_instance_ = new CMsgGCRequestSubGCSessionInfo();
  CMsgGCRequestSubGCSessionInfoResponse::default_instance_ = new CMsgGCRequestSubGCSessionInfoResponse();
  CMsgSOCacheHaveVersion::default_instance_ = new CMsgSOCacheHaveVersion();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgClientWelcome::default_instance_ = new CMsgClientWelcome();
  CMsgClientWelcome_Location::default_instance_ = new CMsgClientWelcome_Location();
  CMsgConnectionStatus::default_instance_ = new CMsgConnectionStatus();
  CMsgGCToGCSOCacheSubscribe::default_instance_ = new CMsgGCToGCSOCacheSubscribe();
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_ = new CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions();
  CMsgGCToGCSOCacheUnsubscribe::default_instance_ = new CMsgGCToGCSOCacheUnsubscribe();
  CMsgGCClientPing::default_instance_ = new CMsgGCClientPing();
  CMsgGCToGCLoadSessionSOCache::default_instance_ = new CMsgGCToGCLoadSessionSOCache();
  CMsgGCToGCLoadSessionSOCacheResponse::default_instance_ = new CMsgGCToGCLoadSessionSOCacheResponse();
  CMsgGCToGCUpdateSessionStats::default_instance_ = new CMsgGCToGCUpdateSessionStats();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock();
  CWorkshop_GetContributors_Request::default_instance_ = new CWorkshop_GetContributors_Request();
  CWorkshop_GetContributors_Response::default_instance_ = new CWorkshop_GetContributors_Response();
  CWorkshop_SetItemPaymentRules_Request::default_instance_ = new CWorkshop_SetItemPaymentRules_Request();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule();
  CWorkshop_SetItemPaymentRules_Response::default_instance_ = new CWorkshop_SetItemPaymentRules_Response();
  CBroadcast_PostGameDataFrame_Request::default_instance_ = new CBroadcast_PostGameDataFrame_Request();
  CMsgSHA1Digest::default_instance_->InitAsDefaultInstance();
  CMsgSOIDOwner::default_instance_->InitAsDefaultInstance();
  CMsgSOSingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects::default_instance_->InitAsDefaultInstance();
  CMsgSOMultipleObjects_SingleObject::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribed_SubscribedType::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscribedUpToDate::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheUnsubscribed::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionCheck::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheSubscriptionRefresh::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheVersion::default_instance_->InitAsDefaultInstance();
  CMsgGCMultiplexMessage::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterAck::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterAck_Process::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterAck_Response::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterStartupComplete::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgRouted::default_instance_->InitAsDefaultInstance();
  CGCToGCMsgRoutedReply::default_instance_->InitAsDefaultInstance();
  CMsgGCUpdateSubGCSessionInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestSubGCSessionInfo::default_instance_->InitAsDefaultInstance();
  CMsgGCRequestSubGCSessionInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheHaveVersion::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome::default_instance_->InitAsDefaultInstance();
  CMsgClientWelcome_Location::default_instance_->InitAsDefaultInstance();
  CMsgConnectionStatus::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCSOCacheSubscribe::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCSOCacheUnsubscribe::default_instance_->InitAsDefaultInstance();
  CMsgGCClientPing::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCLoadSessionSOCache::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCLoadSessionSOCacheResponse::default_instance_->InitAsDefaultInstance();
  CMsgGCToGCUpdateSessionStats::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_->InitAsDefaultInstance();
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_GetContributors_Response::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_->InitAsDefaultInstance();
  CWorkshop_SetItemPaymentRules_Response::default_instance_->InitAsDefaultInstance();
  CBroadcast_PostGameDataFrame_Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto {
  StaticDescriptorInitializer_gcsdk_5fgcmessages_2eproto() {
    protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  }
} static_descriptor_initializer_gcsdk_5fgcmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ESourceEngine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESourceEngine_descriptor_;
}
bool ESourceEngine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartnerAccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerAccountType_descriptor_;
}
bool PartnerAccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCConnectionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCConnectionStatus_descriptor_;
}
bool GCConnectionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CMsgSHA1Digest::kBlock1FieldNumber;
const int CMsgSHA1Digest::kBlock2FieldNumber;
const int CMsgSHA1Digest::kBlock3FieldNumber;
#endif  // !_MSC_VER

CMsgSHA1Digest::CMsgSHA1Digest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSHA1Digest)
}

void CMsgSHA1Digest::InitAsDefaultInstance() {
}

CMsgSHA1Digest::CMsgSHA1Digest(const CMsgSHA1Digest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSHA1Digest)
}

void CMsgSHA1Digest::SharedCtor() {
  _cached_size_ = 0;
  block1_ = GOOGLE_ULONGLONG(0);
  block2_ = GOOGLE_ULONGLONG(0);
  block3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSHA1Digest::~CMsgSHA1Digest() {
  // @@protoc_insertion_point(destructor:CMsgSHA1Digest)
  SharedDtor();
}

void CMsgSHA1Digest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSHA1Digest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSHA1Digest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSHA1Digest_descriptor_;
}

const CMsgSHA1Digest& CMsgSHA1Digest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSHA1Digest* CMsgSHA1Digest::default_instance_ = NULL;

CMsgSHA1Digest* CMsgSHA1Digest::New(::google::protobuf::Arena* arena) const {
  CMsgSHA1Digest* n = new CMsgSHA1Digest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSHA1Digest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSHA1Digest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(block1_, block3_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSHA1Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSHA1Digest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 block1 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block1_)));
          set_has_block1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_block2;
        break;
      }

      // required fixed64 block2 = 2;
      case 2: {
        if (tag == 17) {
         parse_block2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &block2_)));
          set_has_block2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_block3;
        break;
      }

      // required fixed32 block3 = 3;
      case 3: {
        if (tag == 29) {
         parse_block3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &block3_)));
          set_has_block3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSHA1Digest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSHA1Digest)
  return false;
#undef DO_
}

void CMsgSHA1Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSHA1Digest)
  // required fixed64 block1 = 1;
  if (has_block1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->block1(), output);
  }

  // required fixed64 block2 = 2;
  if (has_block2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->block2(), output);
  }

  // required fixed32 block3 = 3;
  if (has_block3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->block3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSHA1Digest)
}

::google::protobuf::uint8* CMsgSHA1Digest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSHA1Digest)
  // required fixed64 block1 = 1;
  if (has_block1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->block1(), target);
  }

  // required fixed64 block2 = 2;
  if (has_block2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->block2(), target);
  }

  // required fixed32 block3 = 3;
  if (has_block3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->block3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSHA1Digest)
  return target;
}

int CMsgSHA1Digest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_block1()) {
    // required fixed64 block1 = 1;
    total_size += 1 + 8;
  }

  if (has_block2()) {
    // required fixed64 block2 = 2;
    total_size += 1 + 8;
  }

  if (has_block3()) {
    // required fixed32 block3 = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int CMsgSHA1Digest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 block1 = 1;
    total_size += 1 + 8;

    // required fixed64 block2 = 2;
    total_size += 1 + 8;

    // required fixed32 block3 = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSHA1Digest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSHA1Digest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSHA1Digest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSHA1Digest::MergeFrom(const CMsgSHA1Digest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block1()) {
      set_block1(from.block1());
    }
    if (from.has_block2()) {
      set_block2(from.block2());
    }
    if (from.has_block3()) {
      set_block3(from.block3());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSHA1Digest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSHA1Digest::CopyFrom(const CMsgSHA1Digest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSHA1Digest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMsgSHA1Digest::Swap(CMsgSHA1Digest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSHA1Digest::InternalSwap(CMsgSHA1Digest* other) {
  std::swap(block1_, other->block1_);
  std::swap(block2_, other->block2_);
  std::swap(block3_, other->block3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSHA1Digest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSHA1Digest_descriptor_;
  metadata.reflection = CMsgSHA1Digest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSHA1Digest

// required fixed64 block1 = 1;
bool CMsgSHA1Digest::has_block1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSHA1Digest::set_has_block1() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSHA1Digest::clear_has_block1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSHA1Digest::clear_block1() {
  block1_ = GOOGLE_ULONGLONG(0);
  clear_has_block1();
}
 ::google::protobuf::uint64 CMsgSHA1Digest::block1() const {
  // @@protoc_insertion_point(field_get:CMsgSHA1Digest.block1)
  return block1_;
}
 void CMsgSHA1Digest::set_block1(::google::protobuf::uint64 value) {
  set_has_block1();
  block1_ = value;
  // @@protoc_insertion_point(field_set:CMsgSHA1Digest.block1)
}

// required fixed64 block2 = 2;
bool CMsgSHA1Digest::has_block2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSHA1Digest::set_has_block2() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSHA1Digest::clear_has_block2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSHA1Digest::clear_block2() {
  block2_ = GOOGLE_ULONGLONG(0);
  clear_has_block2();
}
 ::google::protobuf::uint64 CMsgSHA1Digest::block2() const {
  // @@protoc_insertion_point(field_get:CMsgSHA1Digest.block2)
  return block2_;
}
 void CMsgSHA1Digest::set_block2(::google::protobuf::uint64 value) {
  set_has_block2();
  block2_ = value;
  // @@protoc_insertion_point(field_set:CMsgSHA1Digest.block2)
}

// required fixed32 block3 = 3;
bool CMsgSHA1Digest::has_block3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSHA1Digest::set_has_block3() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSHA1Digest::clear_has_block3() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSHA1Digest::clear_block3() {
  block3_ = 0u;
  clear_has_block3();
}
 ::google::protobuf::uint32 CMsgSHA1Digest::block3() const {
  // @@protoc_insertion_point(field_get:CMsgSHA1Digest.block3)
  return block3_;
}
 void CMsgSHA1Digest::set_block3(::google::protobuf::uint32 value) {
  set_has_block3();
  block3_ = value;
  // @@protoc_insertion_point(field_set:CMsgSHA1Digest.block3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !_MSC_VER

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOIDOwner)
}

void CMsgSOIDOwner::InitAsDefaultInstance() {
}

CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOIDOwner)
}

void CMsgSOIDOwner::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:CMsgSOIDOwner)
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOIDOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOIDOwner_descriptor_;
}

const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOIDOwner* CMsgSOIDOwner::default_instance_ = NULL;

CMsgSOIDOwner* CMsgSOIDOwner::New(::google::protobuf::Arena* arena) const {
  CMsgSOIDOwner* n = new CMsgSOIDOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOIDOwner::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOIDOwner*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOIDOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOIDOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOIDOwner)
  return false;
#undef DO_
}

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOIDOwner)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOIDOwner)
}

::google::protobuf::uint8* CMsgSOIDOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOIDOwner)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOIDOwner)
  return target;
}

int CMsgSOIDOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOIDOwner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOIDOwner>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {

  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOIDOwner_descriptor_;
  metadata.reflection = CMsgSOIDOwner_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOIDOwner

// optional uint32 type = 1;
bool CMsgSOIDOwner::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOIDOwner::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOIDOwner::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOIDOwner::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 CMsgSOIDOwner::type() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.type)
  return type_;
}
 void CMsgSOIDOwner::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.type)
}

// optional uint64 id = 2;
bool CMsgSOIDOwner::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOIDOwner::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOIDOwner::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOIDOwner::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 CMsgSOIDOwner::id() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.id)
  return id_;
}
 void CMsgSOIDOwner::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOSingleObject::kTypeIdFieldNumber;
const int CMsgSOSingleObject::kObjectDataFieldNumber;
const int CMsgSOSingleObject::kVersionFieldNumber;
const int CMsgSOSingleObject::kOwnerSoidFieldNumber;
const int CMsgSOSingleObject::kServiceIdFieldNumber;
#endif  // !_MSC_VER

CMsgSOSingleObject::CMsgSOSingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOSingleObject)
}

void CMsgSOSingleObject::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOSingleObject)
}

void CMsgSOSingleObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_id_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  service_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOSingleObject)
  SharedDtor();
}

void CMsgSOSingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOSingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOSingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOSingleObject_descriptor_;
}

const CMsgSOSingleObject& CMsgSOSingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOSingleObject* CMsgSOSingleObject::default_instance_ = NULL;

CMsgSOSingleObject* CMsgSOSingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOSingleObject* n = new CMsgSOSingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOSingleObject::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOSingleObject*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(version_, service_id_);
    if (has_object_data()) {
      object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOSingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOSingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object_data;
        break;
      }

      // optional bytes object_data = 3;
      case 3: {
        if (tag == 26) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_version;
        break;
      }

      // optional fixed64 version = 4;
      case 4: {
        if (tag == 33) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 5;
      case 5: {
        if (tag == 42) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 6;
      case 6: {
        if (tag == 48) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOSingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOSingleObject)
  return false;
#undef DO_
}

void CMsgSOSingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOSingleObject)
  // optional int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes object_data = 3;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->object_data(), output);
  }

  // optional fixed64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 6;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOSingleObject)
}

::google::protobuf::uint8* CMsgSOSingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOSingleObject)
  // optional int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes object_data = 3;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->object_data(), target);
  }

  // optional fixed64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->owner_soid_, target);
  }

  // optional uint32 service_id = 6;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOSingleObject)
  return target;
}

int CMsgSOSingleObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes object_data = 3;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 5;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional uint32 service_id = 6;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOSingleObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOSingleObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOSingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {

  return true;
}

void CMsgSOSingleObject::Swap(CMsgSOSingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  std::swap(type_id_, other->type_id_);
  object_data_.Swap(&other->object_data_);
  std::swap(version_, other->version_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOSingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOSingleObject_descriptor_;
  metadata.reflection = CMsgSOSingleObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOSingleObject

// optional int32 type_id = 2;
bool CMsgSOSingleObject::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOSingleObject::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOSingleObject::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOSingleObject::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 CMsgSOSingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.type_id)
  return type_id_;
}
 void CMsgSOSingleObject::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.type_id)
}

// optional bytes object_data = 3;
bool CMsgSOSingleObject::has_object_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOSingleObject::set_has_object_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOSingleObject::clear_has_object_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOSingleObject::clear_object_data() {
  object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_data();
}
 const ::std::string& CMsgSOSingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.object_data)
  return object_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgSOSingleObject::set_object_data(const ::std::string& value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.object_data)
}
 void CMsgSOSingleObject::set_object_data(const char* value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSOSingleObject.object_data)
}
 void CMsgSOSingleObject::set_object_data(const void* value, size_t size) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSOSingleObject.object_data)
}
 ::std::string* CMsgSOSingleObject::mutable_object_data() {
  set_has_object_data();
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.object_data)
  return object_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgSOSingleObject::release_object_data() {
  clear_has_object_data();
  return object_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgSOSingleObject::set_allocated_object_data(::std::string* object_data) {
  if (object_data != NULL) {
    set_has_object_data();
  } else {
    clear_has_object_data();
  }
  object_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.object_data)
}

// optional fixed64 version = 4;
bool CMsgSOSingleObject::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOSingleObject::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOSingleObject::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOSingleObject::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOSingleObject::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.version)
  return version_;
}
 void CMsgSOSingleObject::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.version)
}

// optional .CMsgSOIDOwner owner_soid = 5;
bool CMsgSOSingleObject::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOSingleObject::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOSingleObject::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOSingleObject::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOSingleObject::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOSingleObject::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOSingleObject::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOSingleObject::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.owner_soid)
}

// optional uint32 service_id = 6;
bool CMsgSOSingleObject::has_service_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSOSingleObject::set_has_service_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSOSingleObject::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSOSingleObject::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOSingleObject::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.service_id)
  return service_id_;
}
 void CMsgSOSingleObject::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOMultipleObjects_SingleObject::kTypeIdFieldNumber;
const int CMsgSOMultipleObjects_SingleObject::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::InitAsDefaultInstance() {
}

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_id_ = 0;
  object_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects.SingleObject)
  SharedDtor();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  object_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects_SingleObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_SingleObject_descriptor_;
}

const CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects_SingleObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::default_instance_ = NULL;

CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects_SingleObject::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects_SingleObject* n = new CMsgSOMultipleObjects_SingleObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    type_id_ = 0;
    if (has_object_data()) {
      object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOMultipleObjects_SingleObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOMultipleObjects.SingleObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }

      // optional bytes object_data = 2;
      case 2: {
        if (tag == 18) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOMultipleObjects.SingleObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOMultipleObjects.SingleObject)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOMultipleObjects.SingleObject)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes object_data = 2;
  if (has_object_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOMultipleObjects.SingleObject)
}

::google::protobuf::uint8* CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects.SingleObject)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes object_data = 2;
  if (has_object_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects.SingleObject)
  return target;
}

int CMsgSOMultipleObjects_SingleObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes object_data = 2;
    if (has_object_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOMultipleObjects_SingleObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects_SingleObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_object_data()) {
      set_has_object_data();
      object_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {

  return true;
}

void CMsgSOMultipleObjects_SingleObject::Swap(CMsgSOMultipleObjects_SingleObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  std::swap(type_id_, other->type_id_);
  object_data_.Swap(&other->object_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_SingleObject_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_SingleObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOMultipleObjects::kObjectsModifiedFieldNumber;
const int CMsgSOMultipleObjects::kVersionFieldNumber;
const int CMsgSOMultipleObjects::kObjectsAddedFieldNumber;
const int CMsgSOMultipleObjects::kObjectsRemovedFieldNumber;
const int CMsgSOMultipleObjects::kOwnerSoidFieldNumber;
const int CMsgSOMultipleObjects::kServiceIdFieldNumber;
#endif  // !_MSC_VER

CMsgSOMultipleObjects::CMsgSOMultipleObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  service_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects)
  SharedDtor();
}

void CMsgSOMultipleObjects::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOMultipleObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOMultipleObjects_descriptor_;
}

const CMsgSOMultipleObjects& CMsgSOMultipleObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOMultipleObjects* CMsgSOMultipleObjects::default_instance_ = NULL;

CMsgSOMultipleObjects* CMsgSOMultipleObjects::New(::google::protobuf::Arena* arena) const {
  CMsgSOMultipleObjects* n = new CMsgSOMultipleObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOMultipleObjects::Clear() {
  if (_has_bits_[0 / 32] & 50u) {
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
    service_id_ = 0u;
  }
  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOMultipleObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOMultipleObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects_modified()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_objects_modified;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (tag == 25) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_objects_added;
        break;
      }

      // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4: {
        if (tag == 34) {
         parse_objects_added:
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_objects_added;
        if (input->ExpectTag(42)) goto parse_loop_objects_removed;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_objects_removed;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 6;
      case 6: {
        if (tag == 50) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 7;
      case 7: {
        if (tag == 56) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOMultipleObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOMultipleObjects)
  return false;
#undef DO_
}

void CMsgSOMultipleObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOMultipleObjects)
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0, n = this->objects_modified_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects_modified(i), output);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0, n = this->objects_added_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objects_added(i), output);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0, n = this->objects_removed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->objects_removed(i), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 7;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOMultipleObjects)
}

::google::protobuf::uint8* CMsgSOMultipleObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects)
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0, n = this->objects_modified_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects_modified(i), target);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0, n = this->objects_added_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->objects_added(i), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0, n = this->objects_removed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->objects_removed(i), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->owner_soid_, target);
  }

  // optional uint32 service_id = 7;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects)
  return target;
}

int CMsgSOMultipleObjects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 50u) {
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 6;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional uint32 service_id = 7;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

  }
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  total_size += 1 * this->objects_modified_size();
  for (int i = 0; i < this->objects_modified_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_modified(i));
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  total_size += 1 * this->objects_added_size();
  for (int i = 0; i < this->objects_added_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_added(i));
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  total_size += 1 * this->objects_removed_size();
  for (int i = 0; i < this->objects_removed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects_removed(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOMultipleObjects* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOMultipleObjects>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOMultipleObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {

  return true;
}

void CMsgSOMultipleObjects::Swap(CMsgSOMultipleObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  objects_modified_.UnsafeArenaSwap(&other->objects_modified_);
  std::swap(version_, other->version_);
  objects_added_.UnsafeArenaSwap(&other->objects_added_);
  objects_removed_.UnsafeArenaSwap(&other->objects_removed_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(service_id_, other->service_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOMultipleObjects_descriptor_;
  metadata.reflection = CMsgSOMultipleObjects_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOMultipleObjects_SingleObject

// optional int32 type_id = 1;
bool CMsgSOMultipleObjects_SingleObject::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOMultipleObjects_SingleObject::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOMultipleObjects_SingleObject::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOMultipleObjects_SingleObject::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 CMsgSOMultipleObjects_SingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.type_id)
  return type_id_;
}
 void CMsgSOMultipleObjects_SingleObject::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.type_id)
}

// optional bytes object_data = 2;
bool CMsgSOMultipleObjects_SingleObject::has_object_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOMultipleObjects_SingleObject::set_has_object_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOMultipleObjects_SingleObject::clear_has_object_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOMultipleObjects_SingleObject::clear_object_data() {
  object_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_data();
}
 const ::std::string& CMsgSOMultipleObjects_SingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.object_data)
  return object_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgSOMultipleObjects_SingleObject::set_object_data(const ::std::string& value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.object_data)
}
 void CMsgSOMultipleObjects_SingleObject::set_object_data(const char* value) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSOMultipleObjects.SingleObject.object_data)
}
 void CMsgSOMultipleObjects_SingleObject::set_object_data(const void* value, size_t size) {
  set_has_object_data();
  object_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSOMultipleObjects.SingleObject.object_data)
}
 ::std::string* CMsgSOMultipleObjects_SingleObject::mutable_object_data() {
  set_has_object_data();
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.SingleObject.object_data)
  return object_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgSOMultipleObjects_SingleObject::release_object_data() {
  clear_has_object_data();
  return object_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgSOMultipleObjects_SingleObject::set_allocated_object_data(::std::string* object_data) {
  if (object_data != NULL) {
    set_has_object_data();
  } else {
    clear_has_object_data();
  }
  object_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.SingleObject.object_data)
}

// -------------------------------------------------------------------

// CMsgSOMultipleObjects

// repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
int CMsgSOMultipleObjects::objects_modified_size() const {
  return objects_modified_.size();
}
void CMsgSOMultipleObjects::clear_objects_modified() {
  objects_modified_.Clear();
}
const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_modified(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Get(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_modified(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Mutable(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_modified() {
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_modified() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_modified)
  return &objects_modified_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_modified() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_;
}

// optional fixed64 version = 3;
bool CMsgSOMultipleObjects::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOMultipleObjects::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOMultipleObjects::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOMultipleObjects::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOMultipleObjects::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.version)
  return version_;
}
 void CMsgSOMultipleObjects::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.version)
}

// repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
int CMsgSOMultipleObjects::objects_added_size() const {
  return objects_added_.size();
}
void CMsgSOMultipleObjects::clear_objects_added() {
  objects_added_.Clear();
}
const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_added(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_added)
  return objects_added_.Get(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_added(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_added)
  return objects_added_.Mutable(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_added() {
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_added)
  return objects_added_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_added() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_added)
  return &objects_added_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_added() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_added)
  return objects_added_;
}

// repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
int CMsgSOMultipleObjects::objects_removed_size() const {
  return objects_removed_.size();
}
void CMsgSOMultipleObjects::clear_objects_removed() {
  objects_removed_.Clear();
}
const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_removed(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Get(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_removed(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Mutable(index);
}
::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_removed() {
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_removed() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_removed)
  return &objects_removed_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_removed() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_;
}

// optional .CMsgSOIDOwner owner_soid = 6;
bool CMsgSOMultipleObjects::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSOMultipleObjects::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSOMultipleObjects::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSOMultipleObjects::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOMultipleObjects::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOMultipleObjects::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOMultipleObjects::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOMultipleObjects::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.owner_soid)
}

// optional uint32 service_id = 7;
bool CMsgSOMultipleObjects::has_service_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSOMultipleObjects::set_has_service_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSOMultipleObjects::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSOMultipleObjects::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOMultipleObjects::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.service_id)
  return service_id_;
}
 void CMsgSOMultipleObjects::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed_SubscribedType::kTypeIdFieldNumber;
const int CMsgSOCacheSubscribed_SubscribedType::kObjectDataFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::InitAsDefaultInstance() {
}

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed.SubscribedType)
  SharedDtor();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed_SubscribedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_SubscribedType_descriptor_;
}

const CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed_SubscribedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::default_instance_ = NULL;

CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed_SubscribedType::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed_SubscribedType* n = new CMsgSOCacheSubscribed_SubscribedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
  type_id_ = 0;
  object_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheSubscribed_SubscribedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribed.SubscribedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        break;
      }

      // repeated bytes object_data = 2;
      case 2: {
        if (tag == 18) {
         parse_object_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_object_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribed.SubscribedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribed.SubscribedType)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribed.SubscribedType)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribed.SubscribedType)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed.SubscribedType)
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0; i < this->object_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->object_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

int CMsgSOCacheSubscribed_SubscribedType::ByteSize() const {
  int total_size = 0;

  // optional int32 type_id = 1;
  if (has_type_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  // repeated bytes object_data = 2;
  total_size += 1 * this->object_data_size();
  for (int i = 0; i < this->object_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->object_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheSubscribed_SubscribedType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed_SubscribedType>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  object_data_.MergeFrom(from.object_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  std::swap(type_id_, other->type_id_);
  object_data_.UnsafeArenaSwap(&other->object_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_SubscribedType_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_SubscribedType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSOCacheSubscribed::kObjectsFieldNumber;
const int CMsgSOCacheSubscribed::kVersionFieldNumber;
const int CMsgSOCacheSubscribed::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribed::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribed::kServiceListFieldNumber;
const int CMsgSOCacheSubscribed::kSyncVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  service_id_ = 0u;
  sync_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed)
  SharedDtor();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribed_descriptor_;
}

const CMsgSOCacheSubscribed& CMsgSOCacheSubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::default_instance_ = NULL;

CMsgSOCacheSubscribed* CMsgSOCacheSubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribed* n = new CMsgSOCacheSubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribed::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOCacheSubscribed*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 46u) {
    ZR_(sync_version_, service_id_);
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  objects_.Clear();
  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_objects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(25)) goto parse_version;
        break;
      }

      // optional fixed64 version = 3;
      case 3: {
        if (tag == 25) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 4;
      case 4: {
        if (tag == 34) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 5;
      case 5: {
        if (tag == 40) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_service_list;
        break;
      }

      // repeated uint32 service_list = 6;
      case 6: {
        if (tag == 48) {
         parse_service_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_service_list())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_service_list;
        if (input->ExpectTag(57)) goto parse_sync_version;
        break;
      }

      // optional fixed64 sync_version = 7;
      case 7: {
        if (tag == 57) {
         parse_sync_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
          set_has_sync_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribed)
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->service_id(), output);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 7;
  if (has_sync_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribed)
}

::google::protobuf::uint8* CMsgSOCacheSubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed)
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }

  // optional fixed64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->owner_soid_, target);
  }

  // optional uint32 service_id = 5;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->service_id(), target);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0; i < this->service_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->service_list(i), target);
  }

  // optional fixed64 sync_version = 7;
  if (has_sync_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed)
  return target;
}

int CMsgSOCacheSubscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 46u) {
    // optional fixed64 version = 3;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 4;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional uint32 service_id = 5;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional fixed64 sync_version = 7;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated uint32 service_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_list(i));
    }
    total_size += 1 * this->service_list_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheSubscribed* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribed>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_sync_version()) {
      set_sync_version(from.sync_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheSubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscribed::Swap(CMsgSOCacheSubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  objects_.UnsafeArenaSwap(&other->objects_);
  std::swap(version_, other->version_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(service_id_, other->service_id_);
  service_list_.UnsafeArenaSwap(&other->service_list_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscribed_SubscribedType

// optional int32 type_id = 1;
bool CMsgSOCacheSubscribed_SubscribedType::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscribed_SubscribedType::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscribed_SubscribedType::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscribed_SubscribedType::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
 ::google::protobuf::int32 CMsgSOCacheSubscribed_SubscribedType::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.type_id)
  return type_id_;
}
 void CMsgSOCacheSubscribed_SubscribedType::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.type_id)
}

// repeated bytes object_data = 2;
int CMsgSOCacheSubscribed_SubscribedType::object_data_size() const {
  return object_data_.size();
}
void CMsgSOCacheSubscribed_SubscribedType::clear_object_data() {
  object_data_.Clear();
}
 const ::std::string& CMsgSOCacheSubscribed_SubscribedType::object_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Get(index);
}
 ::std::string* CMsgSOCacheSubscribed_SubscribedType::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Mutable(index);
}
 void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.object_data)
  object_data_.Mutable(index)->assign(value);
}
 void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const char* value) {
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
 void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
 ::std::string* CMsgSOCacheSubscribed_SubscribedType::add_object_data() {
  return object_data_.Add();
}
 void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const ::std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
 void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const char* value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
 void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgSOCacheSubscribed_SubscribedType::object_data() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgSOCacheSubscribed_SubscribedType::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return &object_data_;
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribed

// repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
int CMsgSOCacheSubscribed::objects_size() const {
  return objects_.size();
}
void CMsgSOCacheSubscribed::clear_objects() {
  objects_.Clear();
}
const ::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::objects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.objects)
  return objects_.Get(index);
}
::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.objects)
  return objects_.Mutable(index);
}
::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::add_objects() {
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >*
CMsgSOCacheSubscribed::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >&
CMsgSOCacheSubscribed::objects() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.objects)
  return objects_;
}

// optional fixed64 version = 3;
bool CMsgSOCacheSubscribed::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscribed::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscribed::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscribed::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscribed::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.version)
  return version_;
}
 void CMsgSOCacheSubscribed::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.version)
}

// optional .CMsgSOIDOwner owner_soid = 4;
bool CMsgSOCacheSubscribed::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscribed::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscribed::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscribed::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheSubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscribed::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscribed::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscribed::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscribed.owner_soid)
}

// optional uint32 service_id = 5;
bool CMsgSOCacheSubscribed::has_service_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheSubscribed::set_has_service_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheSubscribed::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheSubscribed::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscribed::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_id)
  return service_id_;
}
 void CMsgSOCacheSubscribed::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_id)
}

// repeated uint32 service_list = 6;
int CMsgSOCacheSubscribed::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscribed::clear_service_list() {
  service_list_.Clear();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscribed::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_list)
  return service_list_.Get(index);
}
 void CMsgSOCacheSubscribed::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_list)
}
 void CMsgSOCacheSubscribed::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.service_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscribed::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.service_list)
  return service_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscribed::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 7;
bool CMsgSOCacheSubscribed::has_sync_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSOCacheSubscribed::set_has_sync_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSOCacheSubscribed::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSOCacheSubscribed::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscribed::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.sync_version)
  return sync_version_;
}
 void CMsgSOCacheSubscribed::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscribedUpToDate::kVersionFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceIdFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kServiceListFieldNumber;
const int CMsgSOCacheSubscribedUpToDate::kSyncVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  service_id_ = 0u;
  sync_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribedUpToDate)
  SharedDtor();
}

void CMsgSOCacheSubscribedUpToDate::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscribedUpToDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscribedUpToDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscribedUpToDate_descriptor_;
}

const CMsgSOCacheSubscribedUpToDate& CMsgSOCacheSubscribedUpToDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscribedUpToDate* CMsgSOCacheSubscribedUpToDate::default_instance_ = NULL;

CMsgSOCacheSubscribedUpToDate* CMsgSOCacheSubscribedUpToDate::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscribedUpToDate* n = new CMsgSOCacheSubscribedUpToDate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscribedUpToDate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOCacheSubscribedUpToDate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(sync_version_, service_id_);
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheSubscribedUpToDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscribedUpToDate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (tag == 18) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (tag == 24) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_service_list;
        break;
      }

      // repeated uint32 service_list = 4;
      case 4: {
        if (tag == 32) {
         parse_service_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_service_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_service_list;
        if (input->ExpectTag(41)) goto parse_sync_version;
        break;
      }

      // optional fixed64 sync_version = 5;
      case 5: {
        if (tag == 41) {
         parse_sync_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
          set_has_sync_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscribedUpToDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscribedUpToDate)
  return false;
#undef DO_
}

void CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscribedUpToDate)
  // optional fixed64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 5;
  if (has_sync_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscribedUpToDate)
}

::google::protobuf::uint8* CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribedUpToDate)
  // optional fixed64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->owner_soid_, target);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0; i < this->service_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->service_list(i), target);
  }

  // optional fixed64 sync_version = 5;
  if (has_sync_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribedUpToDate)
  return target;
}

int CMsgSOCacheSubscribedUpToDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional fixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 2;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional fixed64 sync_version = 5;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

  }
  // repeated uint32 service_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_list(i));
    }
    total_size += 1 * this->service_list_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheSubscribedUpToDate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscribedUpToDate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const CMsgSOCacheSubscribedUpToDate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  service_list_.MergeFrom(from.service_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_sync_version()) {
      set_sync_version(from.sync_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const CMsgSOCacheSubscribedUpToDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribedUpToDate::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscribedUpToDate::Swap(CMsgSOCacheSubscribedUpToDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscribedUpToDate::InternalSwap(CMsgSOCacheSubscribedUpToDate* other) {
  std::swap(version_, other->version_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(service_id_, other->service_id_);
  service_list_.UnsafeArenaSwap(&other->service_list_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscribedUpToDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscribedUpToDate_descriptor_;
  metadata.reflection = CMsgSOCacheSubscribedUpToDate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscribedUpToDate

// optional fixed64 version = 1;
bool CMsgSOCacheSubscribedUpToDate::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscribedUpToDate::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscribedUpToDate::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.version)
  return version_;
}
 void CMsgSOCacheSubscribedUpToDate::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.version)
}

// optional .CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheSubscribedUpToDate::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscribedUpToDate::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheSubscribedUpToDate::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribedUpToDate.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscribedUpToDate::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscribedUpToDate::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscribedUpToDate.owner_soid)
}

// optional uint32 service_id = 3;
bool CMsgSOCacheSubscribedUpToDate::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscribedUpToDate::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscribedUpToDate::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.service_id)
  return service_id_;
}
 void CMsgSOCacheSubscribedUpToDate::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.service_id)
}

// repeated uint32 service_list = 4;
int CMsgSOCacheSubscribedUpToDate::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscribedUpToDate::clear_service_list() {
  service_list_.Clear();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscribedUpToDate::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.service_list)
  return service_list_.Get(index);
}
 void CMsgSOCacheSubscribedUpToDate::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.service_list)
}
 void CMsgSOCacheSubscribedUpToDate::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribedUpToDate.service_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscribedUpToDate::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribedUpToDate.service_list)
  return service_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscribedUpToDate::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribedUpToDate.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 5;
bool CMsgSOCacheSubscribedUpToDate::has_sync_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSOCacheSubscribedUpToDate::set_has_sync_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSOCacheSubscribedUpToDate::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSOCacheSubscribedUpToDate::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscribedUpToDate::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribedUpToDate.sync_version)
  return sync_version_;
}
 void CMsgSOCacheSubscribedUpToDate::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribedUpToDate.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheUnsubscribed::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheUnsubscribed)
  SharedDtor();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheUnsubscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheUnsubscribed_descriptor_;
}

const CMsgSOCacheUnsubscribed& CMsgSOCacheUnsubscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::default_instance_ = NULL;

CMsgSOCacheUnsubscribed* CMsgSOCacheUnsubscribed::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheUnsubscribed* n = new CMsgSOCacheUnsubscribed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheUnsubscribed::Clear() {
  if (has_owner_soid()) {
    if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheUnsubscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheUnsubscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheUnsubscribed)
  return false;
#undef DO_
}

void CMsgSOCacheUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheUnsubscribed)
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheUnsubscribed)
}

::google::protobuf::uint8* CMsgSOCacheUnsubscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheUnsubscribed)
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->owner_soid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheUnsubscribed)
  return target;
}

int CMsgSOCacheUnsubscribed::ByteSize() const {
  int total_size = 0;

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_soid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheUnsubscribed* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheUnsubscribed>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {

  return true;
}

void CMsgSOCacheUnsubscribed::Swap(CMsgSOCacheUnsubscribed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheUnsubscribed::InternalSwap(CMsgSOCacheUnsubscribed* other) {
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheUnsubscribed_descriptor_;
  metadata.reflection = CMsgSOCacheUnsubscribed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheUnsubscribed

// optional .CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheUnsubscribed::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheUnsubscribed::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheUnsubscribed::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheUnsubscribed::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheUnsubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheUnsubscribed.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheUnsubscribed::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheUnsubscribed.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheUnsubscribed::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheUnsubscribed::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheUnsubscribed.owner_soid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionCheck::kVersionFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kOwnerSoidFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceIdFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kServiceListFieldNumber;
const int CMsgSOCacheSubscriptionCheck::kSyncVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  owner_soid_ = NULL;
  service_id_ = 0u;
  sync_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionCheck)
  SharedDtor();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionCheck_descriptor_;
}

const CMsgSOCacheSubscriptionCheck& CMsgSOCacheSubscriptionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::default_instance_ = NULL;

CMsgSOCacheSubscriptionCheck* CMsgSOCacheSubscriptionCheck::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionCheck* n = new CMsgSOCacheSubscriptionCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionCheck::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOCacheSubscriptionCheck*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(sync_version_, service_id_);
    version_ = GOOGLE_ULONGLONG(0);
    if (has_owner_soid()) {
      if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  service_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheSubscriptionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscriptionCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner_soid;
        break;
      }

      // optional .CMsgSOIDOwner owner_soid = 3;
      case 3: {
        if (tag == 26) {
         parse_owner_soid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 4;
      case 4: {
        if (tag == 32) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_service_list;
        break;
      }

      // repeated uint32 service_list = 5;
      case 5: {
        if (tag == 40) {
         parse_service_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_service_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_service_list;
        if (input->ExpectTag(49)) goto parse_sync_version;
        break;
      }

      // optional fixed64 sync_version = 6;
      case 6: {
        if (tag == 49) {
         parse_sync_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
          set_has_sync_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscriptionCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscriptionCheck)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscriptionCheck)
  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->owner_soid_, output);
  }

  // optional uint32 service_id = 4;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_id(), output);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0; i < this->service_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->service_list(i), output);
  }

  // optional fixed64 sync_version = 6;
  if (has_sync_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->sync_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscriptionCheck)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionCheck)
  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->owner_soid_, target);
  }

  // optional uint32 service_id = 4;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_id(), target);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0; i < this->service_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->service_list(i), target);
  }

  // optional fixed64 sync_version = 6;
  if (has_sync_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->sync_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionCheck)
  return target;
}

int CMsgSOCacheSubscriptionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional .CMsgSOIDOwner owner_soid = 3;
    if (has_owner_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owner_soid_);
    }

    // optional uint32 service_id = 4;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional fixed64 sync_version = 6;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

  }
  // repeated uint32 service_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_list(i));
    }
    total_size += 1 * this->service_list_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheSubscriptionCheck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionCheck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  service_list_.MergeFrom(from.service_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_sync_version()) {
      set_sync_version(from.sync_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscriptionCheck::Swap(CMsgSOCacheSubscriptionCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionCheck::InternalSwap(CMsgSOCacheSubscriptionCheck* other) {
  std::swap(version_, other->version_);
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(service_id_, other->service_id_);
  service_list_.UnsafeArenaSwap(&other->service_list_);
  std::swap(sync_version_, other->sync_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionCheck_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionCheck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscriptionCheck

// optional fixed64 version = 2;
bool CMsgSOCacheSubscriptionCheck::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscriptionCheck::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscriptionCheck::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.version)
  return version_;
}
 void CMsgSOCacheSubscriptionCheck::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.version)
}

// optional .CMsgSOIDOwner owner_soid = 3;
bool CMsgSOCacheSubscriptionCheck::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheSubscriptionCheck::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionCheck::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscriptionCheck.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscriptionCheck::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscriptionCheck::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscriptionCheck.owner_soid)
}

// optional uint32 service_id = 4;
bool CMsgSOCacheSubscriptionCheck::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheSubscriptionCheck::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscriptionCheck::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.service_id)
  return service_id_;
}
 void CMsgSOCacheSubscriptionCheck::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.service_id)
}

// repeated uint32 service_list = 5;
int CMsgSOCacheSubscriptionCheck::service_list_size() const {
  return service_list_.size();
}
void CMsgSOCacheSubscriptionCheck::clear_service_list() {
  service_list_.Clear();
}
 ::google::protobuf::uint32 CMsgSOCacheSubscriptionCheck::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.service_list)
  return service_list_.Get(index);
}
 void CMsgSOCacheSubscriptionCheck::set_service_list(int index, ::google::protobuf::uint32 value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.service_list)
}
 void CMsgSOCacheSubscriptionCheck::add_service_list(::google::protobuf::uint32 value) {
  service_list_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscriptionCheck.service_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSOCacheSubscriptionCheck::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscriptionCheck.service_list)
  return service_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSOCacheSubscriptionCheck::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscriptionCheck.service_list)
  return &service_list_;
}

// optional fixed64 sync_version = 6;
bool CMsgSOCacheSubscriptionCheck::has_sync_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSOCacheSubscriptionCheck::set_has_sync_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSOCacheSubscriptionCheck::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSOCacheSubscriptionCheck::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
 ::google::protobuf::uint64 CMsgSOCacheSubscriptionCheck::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionCheck.sync_version)
  return sync_version_;
}
 void CMsgSOCacheSubscriptionCheck::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscriptionCheck.sync_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheSubscriptionRefresh::kOwnerSoidFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::InitAsDefaultInstance() {
  owner_soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
  _cached_size_ = 0;
  owner_soid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionRefresh)
  SharedDtor();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  if (this != default_instance_) {
    delete owner_soid_;
  }
}

void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheSubscriptionRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheSubscriptionRefresh_descriptor_;
}

const CMsgSOCacheSubscriptionRefresh& CMsgSOCacheSubscriptionRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::default_instance_ = NULL;

CMsgSOCacheSubscriptionRefresh* CMsgSOCacheSubscriptionRefresh::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheSubscriptionRefresh* n = new CMsgSOCacheSubscriptionRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
  if (has_owner_soid()) {
    if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheSubscriptionRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheSubscriptionRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheSubscriptionRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheSubscriptionRefresh)
  return false;
#undef DO_
}

void CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheSubscriptionRefresh)
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_soid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheSubscriptionRefresh)
}

::google::protobuf::uint8* CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionRefresh)
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->owner_soid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionRefresh)
  return target;
}

int CMsgSOCacheSubscriptionRefresh::ByteSize() const {
  int total_size = 0;

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (has_owner_soid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_soid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheSubscriptionRefresh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheSubscriptionRefresh>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_soid()) {
      mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from.owner_soid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {

  return true;
}

void CMsgSOCacheSubscriptionRefresh::Swap(CMsgSOCacheSubscriptionRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheSubscriptionRefresh::InternalSwap(CMsgSOCacheSubscriptionRefresh* other) {
  std::swap(owner_soid_, other->owner_soid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheSubscriptionRefresh_descriptor_;
  metadata.reflection = CMsgSOCacheSubscriptionRefresh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheSubscriptionRefresh

// optional .CMsgSOIDOwner owner_soid = 2;
bool CMsgSOCacheSubscriptionRefresh::has_owner_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheSubscriptionRefresh::set_has_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheSubscriptionRefresh::clear_has_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheSubscriptionRefresh::clear_owner_soid() {
  if (owner_soid_ != NULL) owner_soid_->::CMsgSOIDOwner::Clear();
  clear_has_owner_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheSubscriptionRefresh::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscriptionRefresh.owner_soid)
  return owner_soid_ != NULL ? *owner_soid_ : *default_instance_->owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::mutable_owner_soid() {
  set_has_owner_soid();
  if (owner_soid_ == NULL) {
    owner_soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscriptionRefresh.owner_soid)
  return owner_soid_;
}
::CMsgSOIDOwner* CMsgSOCacheSubscriptionRefresh::release_owner_soid() {
  clear_has_owner_soid();
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = NULL;
  return temp;
}
void CMsgSOCacheSubscriptionRefresh::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  delete owner_soid_;
  owner_soid_ = owner_soid;
  if (owner_soid) {
    set_has_owner_soid();
  } else {
    clear_has_owner_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscriptionRefresh.owner_soid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheVersion::CMsgSOCacheVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::InitAsDefaultInstance() {
}

CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheVersion)
  SharedDtor();
}

void CMsgSOCacheVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOCacheVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheVersion_descriptor_;
}

const CMsgSOCacheVersion& CMsgSOCacheVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheVersion* CMsgSOCacheVersion::default_instance_ = NULL;

CMsgSOCacheVersion* CMsgSOCacheVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheVersion* n = new CMsgSOCacheVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheVersion::Clear() {
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 version = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheVersion)
  return false;
#undef DO_
}

void CMsgSOCacheVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheVersion)
  // optional fixed64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheVersion)
}

::google::protobuf::uint8* CMsgSOCacheVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheVersion)
  // optional fixed64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheVersion)
  return target;
}

int CMsgSOCacheVersion::ByteSize() const {
  int total_size = 0;

  // optional fixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheVersion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {

  return true;
}

void CMsgSOCacheVersion::Swap(CMsgSOCacheVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheVersion::InternalSwap(CMsgSOCacheVersion* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheVersion_descriptor_;
  metadata.reflection = CMsgSOCacheVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheVersion

// optional fixed64 version = 1;
bool CMsgSOCacheVersion::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheVersion::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheVersion::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOCacheVersion::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheVersion.version)
  return version_;
}
 void CMsgSOCacheVersion::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheVersion.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCMultiplexMessage::kMsgtypeFieldNumber;
const int CMsgGCMultiplexMessage::kPayloadFieldNumber;
const int CMsgGCMultiplexMessage::kSteamidsFieldNumber;
#endif  // !_MSC_VER

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::InitAsDefaultInstance() {
}

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 0u;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  // @@protoc_insertion_point(destructor:CMsgGCMultiplexMessage)
  SharedDtor();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMultiplexMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCMultiplexMessage_descriptor_;
}

const CMsgGCMultiplexMessage& CMsgGCMultiplexMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::default_instance_ = NULL;

CMsgGCMultiplexMessage* CMsgGCMultiplexMessage::New(::google::protobuf::Arena* arena) const {
  CMsgGCMultiplexMessage* n = new CMsgGCMultiplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMultiplexMessage::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    msgtype_ = 0u;
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  steamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCMultiplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCMultiplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_steamids;
        break;
      }

      // repeated fixed64 steamids = 3;
      case 3: {
        if (tag == 25) {
         parse_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steamids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_steamids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCMultiplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCMultiplexMessage)
  return false;
#undef DO_
}

void CMsgGCMultiplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCMultiplexMessage)
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0; i < this->steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCMultiplexMessage)
}

::google::protobuf::uint8* CMsgGCMultiplexMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMultiplexMessage)
  // optional uint32 msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgtype(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0; i < this->steamids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->steamids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMultiplexMessage)
  return target;
}

int CMsgGCMultiplexMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  // repeated fixed64 steamids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steamids_size();
    total_size += 1 * this->steamids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCMultiplexMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMultiplexMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  steamids_.MergeFrom(from.steamids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCMultiplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {

  return true;
}

void CMsgGCMultiplexMessage::Swap(CMsgGCMultiplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMultiplexMessage::InternalSwap(CMsgGCMultiplexMessage* other) {
  std::swap(msgtype_, other->msgtype_);
  payload_.Swap(&other->payload_);
  steamids_.UnsafeArenaSwap(&other->steamids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCMultiplexMessage_descriptor_;
  metadata.reflection = CMsgGCMultiplexMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMultiplexMessage

// optional uint32 msgtype = 1;
bool CMsgGCMultiplexMessage::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMultiplexMessage::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMultiplexMessage::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMultiplexMessage::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
 ::google::protobuf::uint32 CMsgGCMultiplexMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.msgtype)
  return msgtype_;
}
 void CMsgGCMultiplexMessage::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.msgtype)
}

// optional bytes payload = 2;
bool CMsgGCMultiplexMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMultiplexMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMultiplexMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMultiplexMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& CMsgGCMultiplexMessage::payload() const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCMultiplexMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.payload)
}
 void CMsgGCMultiplexMessage::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgGCMultiplexMessage.payload)
}
 void CMsgGCMultiplexMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgGCMultiplexMessage.payload)
}
 ::std::string* CMsgGCMultiplexMessage::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:CMsgGCMultiplexMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgGCMultiplexMessage::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgGCMultiplexMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:CMsgGCMultiplexMessage.payload)
}

// repeated fixed64 steamids = 3;
int CMsgGCMultiplexMessage::steamids_size() const {
  return steamids_.size();
}
void CMsgGCMultiplexMessage::clear_steamids() {
  steamids_.Clear();
}
 ::google::protobuf::uint64 CMsgGCMultiplexMessage::steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCMultiplexMessage.steamids)
  return steamids_.Get(index);
}
 void CMsgGCMultiplexMessage::set_steamids(int index, ::google::protobuf::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCMultiplexMessage.steamids)
}
 void CMsgGCMultiplexMessage::add_steamids(::google::protobuf::uint64 value) {
  steamids_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgGCMultiplexMessage.steamids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCMultiplexMessage::steamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCMultiplexMessage.steamids)
  return steamids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCMultiplexMessage::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCMultiplexMessage.steamids)
  return &steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgMasterAck_Process::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck_Process::kTypeInstancesFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterAck.Process)
}

void CGCToGCMsgMasterAck_Process::InitAsDefaultInstance() {
}

CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(const CGCToGCMsgMasterAck_Process& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck.Process)
}

void CGCToGCMsgMasterAck_Process::SharedCtor() {
  _cached_size_ = 0;
  dir_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterAck_Process::~CGCToGCMsgMasterAck_Process() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck.Process)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Process::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterAck_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterAck_Process_descriptor_;
}

const CGCToGCMsgMasterAck_Process& CGCToGCMsgMasterAck_Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck_Process::default_instance_ = NULL;

CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck_Process::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck_Process* n = new CGCToGCMsgMasterAck_Process;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck_Process::Clear() {
  dir_index_ = 0u;
  type_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgMasterAck_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterAck.Process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
          set_has_dir_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_instances;
        break;
      }

      // repeated uint32 type_instances = 2;
      case 2: {
        if (tag == 16) {
         parse_type_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_type_instances())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type_instances())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_instances;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterAck.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterAck.Process)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterAck.Process)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // repeated uint32 type_instances = 2;
  for (int i = 0; i < this->type_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->type_instances(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterAck.Process)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck.Process)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // repeated uint32 type_instances = 2;
  for (int i = 0; i < this->type_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->type_instances(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck.Process)
  return target;
}

int CGCToGCMsgMasterAck_Process::ByteSize() const {
  int total_size = 0;

  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  // repeated uint32 type_instances = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_instances_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->type_instances(i));
    }
    total_size += 1 * this->type_instances_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgMasterAck_Process* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck_Process>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const CGCToGCMsgMasterAck_Process& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  type_instances_.MergeFrom(from.type_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_index()) {
      set_dir_index(from.dir_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const CGCToGCMsgMasterAck_Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Process::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterAck_Process::Swap(CGCToGCMsgMasterAck_Process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Process::InternalSwap(CGCToGCMsgMasterAck_Process* other) {
  std::swap(dir_index_, other->dir_index_);
  type_instances_.UnsafeArenaSwap(&other->type_instances_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterAck_Process_descriptor_;
  metadata.reflection = CGCToGCMsgMasterAck_Process_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGCToGCMsgMasterAck::kDirIndexFieldNumber;
const int CGCToGCMsgMasterAck::kMachineNameFieldNumber;
const int CGCToGCMsgMasterAck::kProcessNameFieldNumber;
const int CGCToGCMsgMasterAck::kDirectoryFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::InitAsDefaultInstance() {
}

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dir_index_ = 0u;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck)
  SharedDtor();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterAck_descriptor_;
}

const CGCToGCMsgMasterAck& CGCToGCMsgMasterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::default_instance_ = NULL;

CGCToGCMsgMasterAck* CGCToGCMsgMasterAck::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck* n = new CGCToGCMsgMasterAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    dir_index_ = 0u;
    if (has_machine_name()) {
      machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_process_name()) {
      process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  directory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
          set_has_dir_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (tag == 26) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterAck.machine_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_process_name;
        break;
      }

      // optional string process_name = 4;
      case 4: {
        if (tag == 34) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterAck.process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_directory;
        break;
      }

      // repeated .CGCToGCMsgMasterAck.Process directory = 6;
      case 6: {
        if (tag == 50) {
         parse_directory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_directory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_directory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterAck)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterAck)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 3;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine_name(), output);
  }

  // optional string process_name = 4;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_name(), output);
  }

  // repeated .CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0, n = this->directory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->directory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterAck)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 3;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_name(), target);
  }

  // optional string process_name = 4;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->process_name(), target);
  }

  // repeated .CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0, n = this->directory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->directory(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck)
  return target;
}

int CGCToGCMsgMasterAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

    // optional string machine_name = 3;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string process_name = 4;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

  }
  // repeated .CGCToGCMsgMasterAck.Process directory = 6;
  total_size += 1 * this->directory_size();
  for (int i = 0; i < this->directory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->directory(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgMasterAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  directory_.MergeFrom(from.directory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_index()) {
      set_dir_index(from.dir_index());
    }
    if (from.has_machine_name()) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
    if (from.has_process_name()) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterAck::Swap(CGCToGCMsgMasterAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck::InternalSwap(CGCToGCMsgMasterAck* other) {
  std::swap(dir_index_, other->dir_index_);
  machine_name_.Swap(&other->machine_name_);
  process_name_.Swap(&other->process_name_);
  directory_.UnsafeArenaSwap(&other->directory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterAck_descriptor_;
  metadata.reflection = CGCToGCMsgMasterAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterAck_Process

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterAck_Process::has_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck_Process::set_has_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck_Process::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck_Process::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
 ::google::protobuf::uint32 CGCToGCMsgMasterAck_Process::dir_index() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.Process.dir_index)
  return dir_index_;
}
 void CGCToGCMsgMasterAck_Process::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.Process.dir_index)
}

// repeated uint32 type_instances = 2;
int CGCToGCMsgMasterAck_Process::type_instances_size() const {
  return type_instances_.size();
}
void CGCToGCMsgMasterAck_Process::clear_type_instances() {
  type_instances_.Clear();
}
 ::google::protobuf::uint32 CGCToGCMsgMasterAck_Process::type_instances(int index) const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.Process.type_instances)
  return type_instances_.Get(index);
}
 void CGCToGCMsgMasterAck_Process::set_type_instances(int index, ::google::protobuf::uint32 value) {
  type_instances_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.Process.type_instances)
}
 void CGCToGCMsgMasterAck_Process::add_type_instances(::google::protobuf::uint32 value) {
  type_instances_.Add(value);
  // @@protoc_insertion_point(field_add:CGCToGCMsgMasterAck.Process.type_instances)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CGCToGCMsgMasterAck_Process::type_instances() const {
  // @@protoc_insertion_point(field_list:CGCToGCMsgMasterAck.Process.type_instances)
  return type_instances_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CGCToGCMsgMasterAck_Process::mutable_type_instances() {
  // @@protoc_insertion_point(field_mutable_list:CGCToGCMsgMasterAck.Process.type_instances)
  return &type_instances_;
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterAck

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterAck::has_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck::set_has_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
 ::google::protobuf::uint32 CGCToGCMsgMasterAck::dir_index() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.dir_index)
  return dir_index_;
}
 void CGCToGCMsgMasterAck::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.dir_index)
}

// optional string machine_name = 3;
bool CGCToGCMsgMasterAck::has_machine_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgMasterAck::set_has_machine_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgMasterAck::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgMasterAck::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
 const ::std::string& CGCToGCMsgMasterAck::machine_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.machine_name)
  return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterAck::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.machine_name)
}
 void CGCToGCMsgMasterAck::set_machine_name(const char* value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGCToGCMsgMasterAck.machine_name)
}
 void CGCToGCMsgMasterAck::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGCToGCMsgMasterAck.machine_name)
}
 ::std::string* CGCToGCMsgMasterAck::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterAck.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGCToGCMsgMasterAck::release_machine_name() {
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterAck::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterAck.machine_name)
}

// optional string process_name = 4;
bool CGCToGCMsgMasterAck::has_process_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCToGCMsgMasterAck::set_has_process_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCToGCMsgMasterAck::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCToGCMsgMasterAck::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
 const ::std::string& CGCToGCMsgMasterAck::process_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.process_name)
  return process_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterAck::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck.process_name)
}
 void CGCToGCMsgMasterAck::set_process_name(const char* value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGCToGCMsgMasterAck.process_name)
}
 void CGCToGCMsgMasterAck::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGCToGCMsgMasterAck.process_name)
}
 ::std::string* CGCToGCMsgMasterAck::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterAck.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGCToGCMsgMasterAck::release_process_name() {
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterAck::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterAck.process_name)
}

// repeated .CGCToGCMsgMasterAck.Process directory = 6;
int CGCToGCMsgMasterAck::directory_size() const {
  return directory_.size();
}
void CGCToGCMsgMasterAck::clear_directory() {
  directory_.Clear();
}
const ::CGCToGCMsgMasterAck_Process& CGCToGCMsgMasterAck::directory(int index) const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck.directory)
  return directory_.Get(index);
}
::CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck::mutable_directory(int index) {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterAck.directory)
  return directory_.Mutable(index);
}
::CGCToGCMsgMasterAck_Process* CGCToGCMsgMasterAck::add_directory() {
  // @@protoc_insertion_point(field_add:CGCToGCMsgMasterAck.directory)
  return directory_.Add();
}
::google::protobuf::RepeatedPtrField< ::CGCToGCMsgMasterAck_Process >*
CGCToGCMsgMasterAck::mutable_directory() {
  // @@protoc_insertion_point(field_mutable_list:CGCToGCMsgMasterAck.directory)
  return &directory_;
}
const ::google::protobuf::RepeatedPtrField< ::CGCToGCMsgMasterAck_Process >&
CGCToGCMsgMasterAck::directory() const {
  // @@protoc_insertion_point(field_list:CGCToGCMsgMasterAck.directory)
  return directory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgMasterAck_Response::kEresultFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::InitAsDefaultInstance() {
}

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck_Response)
  SharedDtor();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterAck_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterAck_Response_descriptor_;
}

const CGCToGCMsgMasterAck_Response& CGCToGCMsgMasterAck_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::default_instance_ = NULL;

CGCToGCMsgMasterAck_Response* CGCToGCMsgMasterAck_Response::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterAck_Response* n = new CGCToGCMsgMasterAck_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterAck_Response::Clear() {
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgMasterAck_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterAck_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterAck_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterAck_Response)
  return false;
#undef DO_
}

void CGCToGCMsgMasterAck_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterAck_Response)
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterAck_Response)
}

::google::protobuf::uint8* CGCToGCMsgMasterAck_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck_Response)
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck_Response)
  return target;
}

int CGCToGCMsgMasterAck_Response::ByteSize() const {
  int total_size = 0;

  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgMasterAck_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterAck_Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterAck_Response::Swap(CGCToGCMsgMasterAck_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterAck_Response::InternalSwap(CGCToGCMsgMasterAck_Response* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterAck_Response_descriptor_;
  metadata.reflection = CGCToGCMsgMasterAck_Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterAck_Response

// optional int32 eresult = 1 [default = 2];
bool CGCToGCMsgMasterAck_Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterAck_Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterAck_Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterAck_Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
 ::google::protobuf::int32 CGCToGCMsgMasterAck_Response::eresult() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterAck_Response.eresult)
  return eresult_;
}
 void CGCToGCMsgMasterAck_Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterAck_Response.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgMasterStartupComplete_GCInfo::kDirIndexFieldNumber;
const int CGCToGCMsgMasterStartupComplete_GCInfo::kMachineNameFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::InitAsDefaultInstance() {
}

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dir_index_ = 0u;
  machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete.GCInfo)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedDtor() {
  machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete_GCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_;
}

const CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete_GCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_ = NULL;

CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete_GCInfo::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete_GCInfo* n = new CGCToGCMsgMasterStartupComplete_GCInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    dir_index_ = 0u;
    if (has_machine_name()) {
      machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
          set_has_dir_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 2;
      case 2: {
        if (tag == 18) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterStartupComplete.GCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterStartupComplete.GCInfo)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string machine_name = 2;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machine_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterStartupComplete.GCInfo)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string machine_name = 2;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machine_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete.GCInfo)
  return target;
}

int CGCToGCMsgMasterStartupComplete_GCInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

    // optional string machine_name = 2;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgMasterStartupComplete_GCInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete_GCInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_index()) {
      set_dir_index(from.dir_index());
    }
    if (from.has_machine_name()) {
      set_has_machine_name();
      machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Swap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete_GCInfo::InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  std::swap(dir_index_, other->dir_index_);
  machine_name_.Swap(&other->machine_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_;
  metadata.reflection = CGCToGCMsgMasterStartupComplete_GCInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGCToGCMsgMasterStartupComplete::kGcInfoFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::InitAsDefaultInstance() {
}

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete)
  SharedDtor();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgMasterStartupComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgMasterStartupComplete_descriptor_;
}

const CGCToGCMsgMasterStartupComplete& CGCToGCMsgMasterStartupComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::default_instance_ = NULL;

CGCToGCMsgMasterStartupComplete* CGCToGCMsgMasterStartupComplete::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgMasterStartupComplete* n = new CGCToGCMsgMasterStartupComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgMasterStartupComplete::Clear() {
  gc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgMasterStartupComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgMasterStartupComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_gc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gc_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_gc_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgMasterStartupComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgMasterStartupComplete)
  return false;
#undef DO_
}

void CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgMasterStartupComplete)
  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0, n = this->gc_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gc_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgMasterStartupComplete)
}

::google::protobuf::uint8* CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete)
  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0, n = this->gc_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gc_info(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete)
  return target;
}

int CGCToGCMsgMasterStartupComplete::ByteSize() const {
  int total_size = 0;

  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  total_size += 1 * this->gc_info_size();
  for (int i = 0; i < this->gc_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gc_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgMasterStartupComplete* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgMasterStartupComplete>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  gc_info_.MergeFrom(from.gc_info_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {

  return true;
}

void CGCToGCMsgMasterStartupComplete::Swap(CGCToGCMsgMasterStartupComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgMasterStartupComplete::InternalSwap(CGCToGCMsgMasterStartupComplete* other) {
  gc_info_.UnsafeArenaSwap(&other->gc_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgMasterStartupComplete_descriptor_;
  metadata.reflection = CGCToGCMsgMasterStartupComplete_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgMasterStartupComplete_GCInfo

// optional uint32 dir_index = 1;
bool CGCToGCMsgMasterStartupComplete_GCInfo::has_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_has_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
 ::google::protobuf::uint32 CGCToGCMsgMasterStartupComplete_GCInfo::dir_index() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
  return dir_index_;
}
 void CGCToGCMsgMasterStartupComplete_GCInfo::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterStartupComplete.GCInfo.dir_index)
}

// optional string machine_name = 2;
bool CGCToGCMsgMasterStartupComplete_GCInfo::has_machine_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::set_has_machine_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
 const ::std::string& CGCToGCMsgMasterStartupComplete_GCInfo::machine_name() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
 void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const char* value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
 void CGCToGCMsgMasterStartupComplete_GCInfo::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}
 ::std::string* CGCToGCMsgMasterStartupComplete_GCInfo::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGCToGCMsgMasterStartupComplete_GCInfo::release_machine_name() {
  clear_has_machine_name();
  return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgMasterStartupComplete_GCInfo::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgMasterStartupComplete.GCInfo.machine_name)
}

// -------------------------------------------------------------------

// CGCToGCMsgMasterStartupComplete

// repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
int CGCToGCMsgMasterStartupComplete::gc_info_size() const {
  return gc_info_.size();
}
void CGCToGCMsgMasterStartupComplete::clear_gc_info() {
  gc_info_.Clear();
}
const ::CGCToGCMsgMasterStartupComplete_GCInfo& CGCToGCMsgMasterStartupComplete::gc_info(int index) const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Get(index);
}
::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::mutable_gc_info(int index) {
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Mutable(index);
}
::CGCToGCMsgMasterStartupComplete_GCInfo* CGCToGCMsgMasterStartupComplete::add_gc_info() {
  // @@protoc_insertion_point(field_add:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >*
CGCToGCMsgMasterStartupComplete::mutable_gc_info() {
  // @@protoc_insertion_point(field_mutable_list:CGCToGCMsgMasterStartupComplete.gc_info)
  return &gc_info_;
}
const ::google::protobuf::RepeatedPtrField< ::CGCToGCMsgMasterStartupComplete_GCInfo >&
CGCToGCMsgMasterStartupComplete::gc_info() const {
  // @@protoc_insertion_point(field_list:CGCToGCMsgMasterStartupComplete.gc_info)
  return gc_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgRouted::kMsgTypeFieldNumber;
const int CGCToGCMsgRouted::kSenderIdFieldNumber;
const int CGCToGCMsgRouted::kNetMessageFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgRouted::CGCToGCMsgRouted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::InitAsDefaultInstance() {
}

CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0u;
  sender_id_ = GOOGLE_ULONGLONG(0);
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRouted)
  SharedDtor();
}

void CGCToGCMsgRouted::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGCToGCMsgRouted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRouted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgRouted_descriptor_;
}

const CGCToGCMsgRouted& CGCToGCMsgRouted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgRouted* CGCToGCMsgRouted::default_instance_ = NULL;

CGCToGCMsgRouted* CGCToGCMsgRouted::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRouted* n = new CGCToGCMsgRouted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRouted::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    msg_type_ = 0u;
    sender_id_ = GOOGLE_ULONGLONG(0);
    if (has_net_message()) {
      net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgRouted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgRouted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sender_id;
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (tag == 17) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_net_message;
        break;
      }

      // optional bytes net_message = 3;
      case 3: {
        if (tag == 26) {
         parse_net_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgRouted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgRouted)
  return false;
#undef DO_
}

void CGCToGCMsgRouted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgRouted)
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional bytes net_message = 3;
  if (has_net_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgRouted)
}

::google::protobuf::uint8* CGCToGCMsgRouted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRouted)
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (has_net_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRouted)
  return target;
}

int CGCToGCMsgRouted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional bytes net_message = 3;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgRouted* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRouted>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_net_message()) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgRouted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {

  return true;
}

void CGCToGCMsgRouted::Swap(CGCToGCMsgRouted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRouted::InternalSwap(CGCToGCMsgRouted* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(sender_id_, other->sender_id_);
  net_message_.Swap(&other->net_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRouted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgRouted_descriptor_;
  metadata.reflection = CGCToGCMsgRouted_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgRouted

// optional uint32 msg_type = 1;
bool CGCToGCMsgRouted::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgRouted::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgRouted::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgRouted::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
 ::google::protobuf::uint32 CGCToGCMsgRouted::msg_type() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.msg_type)
  return msg_type_;
}
 void CGCToGCMsgRouted::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.msg_type)
}

// optional fixed64 sender_id = 2;
bool CGCToGCMsgRouted::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgRouted::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgRouted::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgRouted::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
 ::google::protobuf::uint64 CGCToGCMsgRouted::sender_id() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.sender_id)
  return sender_id_;
}
 void CGCToGCMsgRouted::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.sender_id)
}

// optional bytes net_message = 3;
bool CGCToGCMsgRouted::has_net_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCToGCMsgRouted::set_has_net_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCToGCMsgRouted::clear_has_net_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCToGCMsgRouted::clear_net_message() {
  net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_message();
}
 const ::std::string& CGCToGCMsgRouted::net_message() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRouted.net_message)
  return net_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgRouted::set_net_message(const ::std::string& value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgRouted.net_message)
}
 void CGCToGCMsgRouted::set_net_message(const char* value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGCToGCMsgRouted.net_message)
}
 void CGCToGCMsgRouted::set_net_message(const void* value, size_t size) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGCToGCMsgRouted.net_message)
}
 ::std::string* CGCToGCMsgRouted::mutable_net_message() {
  set_has_net_message();
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgRouted.net_message)
  return net_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGCToGCMsgRouted::release_net_message() {
  clear_has_net_message();
  return net_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgRouted::set_allocated_net_message(::std::string* net_message) {
  if (net_message != NULL) {
    set_has_net_message();
  } else {
    clear_has_net_message();
  }
  net_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_message);
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgRouted.net_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CGCToGCMsgRoutedReply::kMsgTypeFieldNumber;
const int CGCToGCMsgRoutedReply::kNetMessageFieldNumber;
#endif  // !_MSC_VER

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::InitAsDefaultInstance() {
}

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0u;
  net_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRoutedReply)
  SharedDtor();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  net_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCToGCMsgRoutedReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCToGCMsgRoutedReply_descriptor_;
}

const CGCToGCMsgRoutedReply& CGCToGCMsgRoutedReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::default_instance_ = NULL;

CGCToGCMsgRoutedReply* CGCToGCMsgRoutedReply::New(::google::protobuf::Arena* arena) const {
  CGCToGCMsgRoutedReply* n = new CGCToGCMsgRoutedReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCToGCMsgRoutedReply::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    msg_type_ = 0u;
    if (has_net_message()) {
      net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CGCToGCMsgRoutedReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCToGCMsgRoutedReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net_message;
        break;
      }

      // optional bytes net_message = 2;
      case 2: {
        if (tag == 18) {
         parse_net_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCToGCMsgRoutedReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCToGCMsgRoutedReply)
  return false;
#undef DO_
}

void CGCToGCMsgRoutedReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCToGCMsgRoutedReply)
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional bytes net_message = 2;
  if (has_net_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->net_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCToGCMsgRoutedReply)
}

::google::protobuf::uint8* CGCToGCMsgRoutedReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRoutedReply)
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (has_net_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRoutedReply)
  return target;
}

int CGCToGCMsgRoutedReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // optional bytes net_message = 2;
    if (has_net_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->net_message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CGCToGCMsgRoutedReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCToGCMsgRoutedReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_net_message()) {
      set_has_net_message();
      net_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {

  return true;
}

void CGCToGCMsgRoutedReply::Swap(CGCToGCMsgRoutedReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCToGCMsgRoutedReply::InternalSwap(CGCToGCMsgRoutedReply* other) {
  std::swap(msg_type_, other->msg_type_);
  net_message_.Swap(&other->net_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCToGCMsgRoutedReply_descriptor_;
  metadata.reflection = CGCToGCMsgRoutedReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCToGCMsgRoutedReply

// optional uint32 msg_type = 1;
bool CGCToGCMsgRoutedReply::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCToGCMsgRoutedReply::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCToGCMsgRoutedReply::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCToGCMsgRoutedReply::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
 ::google::protobuf::uint32 CGCToGCMsgRoutedReply::msg_type() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRoutedReply.msg_type)
  return msg_type_;
}
 void CGCToGCMsgRoutedReply::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:CGCToGCMsgRoutedReply.msg_type)
}

// optional bytes net_message = 2;
bool CGCToGCMsgRoutedReply::has_net_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCToGCMsgRoutedReply::set_has_net_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCToGCMsgRoutedReply::clear_has_net_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCToGCMsgRoutedReply::clear_net_message() {
  net_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_message();
}
 const ::std::string& CGCToGCMsgRoutedReply::net_message() const {
  // @@protoc_insertion_point(field_get:CGCToGCMsgRoutedReply.net_message)
  return net_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgRoutedReply::set_net_message(const ::std::string& value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CGCToGCMsgRoutedReply.net_message)
}
 void CGCToGCMsgRoutedReply::set_net_message(const char* value) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CGCToGCMsgRoutedReply.net_message)
}
 void CGCToGCMsgRoutedReply::set_net_message(const void* value, size_t size) {
  set_has_net_message();
  net_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CGCToGCMsgRoutedReply.net_message)
}
 ::std::string* CGCToGCMsgRoutedReply::mutable_net_message() {
  set_has_net_message();
  // @@protoc_insertion_point(field_mutable:CGCToGCMsgRoutedReply.net_message)
  return net_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CGCToGCMsgRoutedReply::release_net_message() {
  clear_has_net_message();
  return net_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CGCToGCMsgRoutedReply::set_allocated_net_message(::std::string* net_message) {
  if (net_message != NULL) {
    set_has_net_message();
  } else {
    clear_has_net_message();
  }
  net_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_message);
  // @@protoc_insertion_point(field_set_allocated:CGCToGCMsgRoutedReply.net_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kSteamidFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kIpFieldNumber;
const int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::kTrustedFieldNumber;
#endif  // !_MSC_VER

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InitAsDefaultInstance() {
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ip_ = 0u;
  trusted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_;
}

const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_ = NULL;

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* n = new CMsgGCUpdateSubGCSessionInfo_CMsgUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(steamid_, trusted_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ip;
        break;
      }

      // optional fixed32 ip = 2;
      case 2: {
        if (tag == 21) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trusted;
        break;
      }

      // optional bool trusted = 3;
      case 3: {
        if (tag == 24) {
         parse_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
          set_has_trusted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // optional bool trusted = 3;
  if (has_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // optional bool trusted = 3;
  if (has_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return target;
}

int CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 3;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_trusted()) {
      set_trusted(from.trusted());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const {

  return true;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Swap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(ip_, other->ip_);
  std::swap(trusted_, other->trusted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_;
  metadata.reflection = CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCUpdateSubGCSessionInfo::kUpdatesFieldNumber;
#endif  // !_MSC_VER

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::InitAsDefaultInstance() {
}

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCUpdateSubGCSessionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCUpdateSubGCSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCUpdateSubGCSessionInfo_descriptor_;
}

const CMsgGCUpdateSubGCSessionInfo& CMsgGCUpdateSubGCSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCUpdateSubGCSessionInfo* CMsgGCUpdateSubGCSessionInfo::default_instance_ = NULL;

CMsgGCUpdateSubGCSessionInfo* CMsgGCUpdateSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCUpdateSubGCSessionInfo* n = new CMsgGCUpdateSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCUpdateSubGCSessionInfo::Clear() {
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCUpdateSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCUpdateSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_updates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCUpdateSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCUpdateSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCUpdateSubGCSessionInfo)
  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCUpdateSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo)
  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updates(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo)
  return target;
}

int CMsgGCUpdateSubGCSessionInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCUpdateSubGCSessionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCUpdateSubGCSessionInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  updates_.MergeFrom(from.updates_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo::IsInitialized() const {

  return true;
}

void CMsgGCUpdateSubGCSessionInfo::Swap(CMsgGCUpdateSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCUpdateSubGCSessionInfo::InternalSwap(CMsgGCUpdateSubGCSessionInfo* other) {
  updates_.UnsafeArenaSwap(&other->updates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCUpdateSubGCSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCUpdateSubGCSessionInfo_descriptor_;
  metadata.reflection = CMsgGCUpdateSubGCSessionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCUpdateSubGCSessionInfo_CMsgUpdate

// optional fixed64 steamid = 1;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
 ::google::protobuf::uint64 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
  return steamid_;
}
 void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.steamid)
}

// optional fixed32 ip = 2;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
 ::google::protobuf::uint32 CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
  return ip_;
}
 void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.ip)
}

// optional bool trusted = 3;
bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::has_trusted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_has_trusted() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_has_trusted() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::clear_trusted() {
  trusted_ = false;
  clear_has_trusted();
}
 bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::trusted() const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
  return trusted_;
}
 void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::set_trusted(bool value) {
  set_has_trusted();
  trusted_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate.trusted)
}

// -------------------------------------------------------------------

// CMsgGCUpdateSubGCSessionInfo

// repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
int CMsgGCUpdateSubGCSessionInfo::updates_size() const {
  return updates_.size();
}
void CMsgGCUpdateSubGCSessionInfo::clear_updates() {
  updates_.Clear();
}
const ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& CMsgGCUpdateSubGCSessionInfo::updates(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Get(index);
}
::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Mutable(index);
}
::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* CMsgGCUpdateSubGCSessionInfo::add_updates() {
  // @@protoc_insertion_point(field_add:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >*
CMsgGCUpdateSubGCSessionInfo::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCUpdateSubGCSessionInfo.updates)
  return &updates_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >&
CMsgGCUpdateSubGCSessionInfo::updates() const {
  // @@protoc_insertion_point(field_list:CMsgGCUpdateSubGCSessionInfo.updates)
  return updates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestSubGCSessionInfo::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::InitAsDefaultInstance() {
}

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfo)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestSubGCSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestSubGCSessionInfo_descriptor_;
}

const CMsgGCRequestSubGCSessionInfo& CMsgGCRequestSubGCSessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCRequestSubGCSessionInfo* CMsgGCRequestSubGCSessionInfo::default_instance_ = NULL;

CMsgGCRequestSubGCSessionInfo* CMsgGCRequestSubGCSessionInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfo* n = new CMsgGCRequestSubGCSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfo::Clear() {
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCRequestSubGCSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRequestSubGCSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRequestSubGCSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRequestSubGCSessionInfo)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRequestSubGCSessionInfo)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRequestSubGCSessionInfo)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfo)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfo)
  return target;
}

int CMsgGCRequestSubGCSessionInfo::ByteSize() const {
  int total_size = 0;

  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCRequestSubGCSessionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const CMsgGCRequestSubGCSessionInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const CMsgGCRequestSubGCSessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfo::IsInitialized() const {

  return true;
}

void CMsgGCRequestSubGCSessionInfo::Swap(CMsgGCRequestSubGCSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfo::InternalSwap(CMsgGCRequestSubGCSessionInfo* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestSubGCSessionInfo_descriptor_;
  metadata.reflection = CMsgGCRequestSubGCSessionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRequestSubGCSessionInfo

// optional fixed64 steamid = 1;
bool CMsgGCRequestSubGCSessionInfo::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRequestSubGCSessionInfo::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRequestSubGCSessionInfo::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRequestSubGCSessionInfo::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
 ::google::protobuf::uint64 CMsgGCRequestSubGCSessionInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfo.steamid)
  return steamid_;
}
 void CMsgGCRequestSubGCSessionInfo::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfo.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCRequestSubGCSessionInfoResponse::kIpFieldNumber;
const int CMsgGCRequestSubGCSessionInfoResponse::kTrustedFieldNumber;
#endif  // !_MSC_VER

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::InitAsDefaultInstance() {
}

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  trusted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfoResponse)
  SharedDtor();
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRequestSubGCSessionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCRequestSubGCSessionInfoResponse_descriptor_;
}

const CMsgGCRequestSubGCSessionInfoResponse& CMsgGCRequestSubGCSessionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCRequestSubGCSessionInfoResponse* CMsgGCRequestSubGCSessionInfoResponse::default_instance_ = NULL;

CMsgGCRequestSubGCSessionInfoResponse* CMsgGCRequestSubGCSessionInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCRequestSubGCSessionInfoResponse* n = new CMsgGCRequestSubGCSessionInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRequestSubGCSessionInfoResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCRequestSubGCSessionInfoResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ip_, trusted_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCRequestSubGCSessionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCRequestSubGCSessionInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trusted;
        break;
      }

      // optional bool trusted = 2;
      case 2: {
        if (tag == 16) {
         parse_trusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_)));
          set_has_trusted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCRequestSubGCSessionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCRequestSubGCSessionInfoResponse)
  return false;
#undef DO_
}

void CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCRequestSubGCSessionInfoResponse)
  // optional fixed32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional bool trusted = 2;
  if (has_trusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCRequestSubGCSessionInfoResponse)
}

::google::protobuf::uint8* CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfoResponse)
  // optional fixed32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional bool trusted = 2;
  if (has_trusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfoResponse)
  return target;
}

int CMsgGCRequestSubGCSessionInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 2;
    if (has_trusted()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCRequestSubGCSessionInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRequestSubGCSessionInfoResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_trusted()) {
      set_trusted(from.trusted());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const {

  return true;
}

void CMsgGCRequestSubGCSessionInfoResponse::Swap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRequestSubGCSessionInfoResponse::InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  std::swap(ip_, other->ip_);
  std::swap(trusted_, other->trusted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCRequestSubGCSessionInfoResponse_descriptor_;
  metadata.reflection = CMsgGCRequestSubGCSessionInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRequestSubGCSessionInfoResponse

// optional fixed32 ip = 1;
bool CMsgGCRequestSubGCSessionInfoResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
 ::google::protobuf::uint32 CMsgGCRequestSubGCSessionInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfoResponse.ip)
  return ip_;
}
 void CMsgGCRequestSubGCSessionInfoResponse::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfoResponse.ip)
}

// optional bool trusted = 2;
bool CMsgGCRequestSubGCSessionInfoResponse::has_trusted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCRequestSubGCSessionInfoResponse::set_has_trusted() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_has_trusted() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCRequestSubGCSessionInfoResponse::clear_trusted() {
  trusted_ = false;
  clear_has_trusted();
}
 bool CMsgGCRequestSubGCSessionInfoResponse::trusted() const {
  // @@protoc_insertion_point(field_get:CMsgGCRequestSubGCSessionInfoResponse.trusted)
  return trusted_;
}
 void CMsgGCRequestSubGCSessionInfoResponse::set_trusted(bool value) {
  set_has_trusted();
  trusted_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCRequestSubGCSessionInfoResponse.trusted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
const int CMsgSOCacheHaveVersion::kServiceIdFieldNumber;
const int CMsgSOCacheHaveVersion::kCachedFileVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::InitAsDefaultInstance() {
  soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  _cached_size_ = 0;
  soid_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  service_id_ = 0u;
  cached_file_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheHaveVersion)
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != default_instance_) {
    delete soid_;
  }
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheHaveVersion_descriptor_;
}

const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::default_instance_ = NULL;

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::New(::google::protobuf::Arena* arena) const {
  CMsgSOCacheHaveVersion* n = new CMsgSOCacheHaveVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSOCacheHaveVersion::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgSOCacheHaveVersion*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, cached_file_version_);
    if (has_soid()) {
      if (soid_ != NULL) soid_->::CMsgSOIDOwner::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSOCacheHaveVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (tag == 17) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }

      // optional uint32 service_id = 3;
      case 3: {
        if (tag == 24) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cached_file_version;
        break;
      }

      // optional uint32 cached_file_version = 4;
      case 4: {
        if (tag == 32) {
         parse_cached_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cached_file_version_)));
          set_has_cached_file_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSOCacheHaveVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSOCacheHaveVersion)
  return false;
#undef DO_
}

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSOCacheHaveVersion)
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->soid_, output);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // optional uint32 cached_file_version = 4;
  if (has_cached_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cached_file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSOCacheHaveVersion)
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheHaveVersion)
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->soid_, target);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // optional uint32 cached_file_version = 4;
  if (has_cached_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cached_file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheHaveVersion)
  return target;
}

int CMsgSOCacheHaveVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .CMsgSOIDOwner soid = 1;
    if (has_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->soid_);
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 cached_file_version = 4;
    if (has_cached_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cached_file_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgSOCacheHaveVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSOCacheHaveVersion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soid()) {
      mutable_soid()->::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_cached_file_version()) {
      set_cached_file_version(from.cached_file_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {

  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  std::swap(soid_, other->soid_);
  std::swap(version_, other->version_);
  std::swap(service_id_, other->service_id_);
  std::swap(cached_file_version_, other->cached_file_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheHaveVersion_descriptor_;
  metadata.reflection = CMsgSOCacheHaveVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSOCacheHaveVersion

// optional .CMsgSOIDOwner soid = 1;
bool CMsgSOCacheHaveVersion::has_soid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_soid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSOCacheHaveVersion::clear_has_soid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSOCacheHaveVersion::clear_soid() {
  if (soid_ != NULL) soid_->::CMsgSOIDOwner::Clear();
  clear_has_soid();
}
const ::CMsgSOIDOwner& CMsgSOCacheHaveVersion::soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.soid)
  return soid_ != NULL ? *soid_ : *default_instance_->soid_;
}
::CMsgSOIDOwner* CMsgSOCacheHaveVersion::mutable_soid() {
  set_has_soid();
  if (soid_ == NULL) {
    soid_ = new ::CMsgSOIDOwner;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheHaveVersion.soid)
  return soid_;
}
::CMsgSOIDOwner* CMsgSOCacheHaveVersion::release_soid() {
  clear_has_soid();
  ::CMsgSOIDOwner* temp = soid_;
  soid_ = NULL;
  return temp;
}
void CMsgSOCacheHaveVersion::set_allocated_soid(::CMsgSOIDOwner* soid) {
  delete soid_;
  soid_ = soid;
  if (soid) {
    set_has_soid();
  } else {
    clear_has_soid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheHaveVersion.soid)
}

// optional fixed64 version = 2;
bool CMsgSOCacheHaveVersion::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSOCacheHaveVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSOCacheHaveVersion::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgSOCacheHaveVersion::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.version)
  return version_;
}
 void CMsgSOCacheHaveVersion::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.version)
}

// optional uint32 service_id = 3;
bool CMsgSOCacheHaveVersion::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSOCacheHaveVersion::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSOCacheHaveVersion::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgSOCacheHaveVersion::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.service_id)
  return service_id_;
}
 void CMsgSOCacheHaveVersion::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.service_id)
}

// optional uint32 cached_file_version = 4;
bool CMsgSOCacheHaveVersion::has_cached_file_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSOCacheHaveVersion::set_has_cached_file_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSOCacheHaveVersion::clear_has_cached_file_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSOCacheHaveVersion::clear_cached_file_version() {
  cached_file_version_ = 0u;
  clear_has_cached_file_version();
}
 ::google::protobuf::uint32 CMsgSOCacheHaveVersion::cached_file_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.cached_file_version)
  return cached_file_version_;
}
 void CMsgSOCacheHaveVersion::set_cached_file_version(::google::protobuf::uint32 value) {
  set_has_cached_file_version();
  cached_file_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.cached_file_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kVersionFieldNumber;
const int CMsgClientHello::kSocacheHaveVersionsFieldNumber;
const int CMsgClientHello::kClientSessionNeedFieldNumber;
const int CMsgClientHello::kClientLauncherFieldNumber;
const int CMsgClientHello::kSecretKeyFieldNumber;
const int CMsgClientHello::kClientLanguageFieldNumber;
const int CMsgClientHello::kEngineFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientHello)
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientHello)
}

void CMsgClientHello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  client_session_need_ = 0u;
  client_launcher_ = 0;
  secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_language_ = 0u;
  engine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  // @@protoc_insertion_point(destructor:CMsgClientHello)
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New(::google::protobuf::Arena* arena) const {
  CMsgClientHello* n = new CMsgClientHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientHello::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgClientHello*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 125u) {
    ZR_(version_, client_session_need_);
    ZR_(client_launcher_, engine_);
    if (has_secret_key()) {
      secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  socache_have_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        break;
      }

      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (tag == 18) {
         parse_socache_have_versions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_socache_have_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_socache_have_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_socache_have_versions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_client_session_need;
        break;
      }

      // optional uint32 client_session_need = 3;
      case 3: {
        if (tag == 24) {
         parse_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
          set_has_client_session_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_launcher;
        break;
      }

      // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4: {
        if (tag == 32) {
         parse_client_launcher:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PartnerAccountType_IsValid(value)) {
            set_client_launcher(static_cast< ::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_secret_key;
        break;
      }

      // optional string secret_key = 5;
      case 5: {
        if (tag == 42) {
         parse_secret_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret_key().data(), this->secret_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgClientHello.secret_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_client_language;
        break;
      }

      // optional uint32 client_language = 6;
      case 6: {
        if (tag == 48) {
         parse_client_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_language_)));
          set_has_client_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_engine;
        break;
      }

      // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7: {
        if (tag == 56) {
         parse_engine:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ESourceEngine_IsValid(value)) {
            set_engine(static_cast< ::ESourceEngine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientHello)
  return false;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientHello)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0, n = this->socache_have_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socache_have_versions(i), output);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_session_need(), output);
  }

  // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (has_client_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_launcher(), output);
  }

  // optional string secret_key = 5;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.secret_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->secret_key(), output);
  }

  // optional uint32 client_language = 6;
  if (has_client_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_language(), output);
  }

  // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (has_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientHello)
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientHello)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0, n = this->socache_have_versions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->socache_have_versions(i), target);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_session_need(), target);
  }

  // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (has_client_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_launcher(), target);
  }

  // optional string secret_key = 5;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.secret_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->secret_key(), target);
  }

  // optional uint32 client_language = 6;
  if (has_client_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_language(), target);
  }

  // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (has_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientHello)
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 125u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 client_session_need = 3;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
    if (has_client_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_launcher());
    }

    // optional string secret_key = 5;
    if (has_secret_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

    // optional uint32 client_language = 6;
    if (has_client_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_language());
    }

    // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1 * this->socache_have_versions_size();
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socache_have_versions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgClientHello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientHello>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_client_session_need()) {
      set_client_session_need(from.client_session_need());
    }
    if (from.has_client_launcher()) {
      set_client_launcher(from.client_launcher());
    }
    if (from.has_secret_key()) {
      set_has_secret_key();
      secret_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_key_);
    }
    if (from.has_client_language()) {
      set_client_language(from.client_language());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {

  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHello::InternalSwap(CMsgClientHello* other) {
  std::swap(version_, other->version_);
  socache_have_versions_.UnsafeArenaSwap(&other->socache_have_versions_);
  std::swap(client_session_need_, other->client_session_need_);
  std::swap(client_launcher_, other->client_launcher_);
  secret_key_.Swap(&other->secret_key_);
  std::swap(client_language_, other->client_language_);
  std::swap(engine_, other->engine_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientHello

// optional uint32 version = 1;
bool CMsgClientHello::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientHello::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientHello::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientHello::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 CMsgClientHello::version() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.version)
  return version_;
}
 void CMsgClientHello::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientHello.version)
}

// repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
int CMsgClientHello::socache_have_versions_size() const {
  return socache_have_versions_.size();
}
void CMsgClientHello::clear_socache_have_versions() {
  socache_have_versions_.Clear();
}
const ::CMsgSOCacheHaveVersion& CMsgClientHello::socache_have_versions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Get(index);
}
::CMsgSOCacheHaveVersion* CMsgClientHello::mutable_socache_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Mutable(index);
}
::CMsgSOCacheHaveVersion* CMsgClientHello::add_socache_have_versions() {
  // @@protoc_insertion_point(field_add:CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOCacheHaveVersion >*
CMsgClientHello::mutable_socache_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientHello.socache_have_versions)
  return &socache_have_versions_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOCacheHaveVersion >&
CMsgClientHello::socache_have_versions() const {
  // @@protoc_insertion_point(field_list:CMsgClientHello.socache_have_versions)
  return socache_have_versions_;
}

// optional uint32 client_session_need = 3;
bool CMsgClientHello::has_client_session_need() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientHello::set_has_client_session_need() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientHello::clear_has_client_session_need() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientHello::clear_client_session_need() {
  client_session_need_ = 0u;
  clear_has_client_session_need();
}
 ::google::protobuf::uint32 CMsgClientHello::client_session_need() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_session_need)
  return client_session_need_;
}
 void CMsgClientHello::set_client_session_need(::google::protobuf::uint32 value) {
  set_has_client_session_need();
  client_session_need_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_session_need)
}

// optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
bool CMsgClientHello::has_client_launcher() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientHello::set_has_client_launcher() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientHello::clear_has_client_launcher() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientHello::clear_client_launcher() {
  client_launcher_ = 0;
  clear_has_client_launcher();
}
 ::PartnerAccountType CMsgClientHello::client_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_launcher)
  return static_cast< ::PartnerAccountType >(client_launcher_);
}
 void CMsgClientHello::set_client_launcher(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  set_has_client_launcher();
  client_launcher_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_launcher)
}

// optional string secret_key = 5;
bool CMsgClientHello::has_secret_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientHello::set_has_secret_key() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientHello::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientHello::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret_key();
}
 const ::std::string& CMsgClientHello::secret_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.secret_key)
  return secret_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientHello::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.secret_key)
}
 void CMsgClientHello::set_secret_key(const char* value) {
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientHello.secret_key)
}
 void CMsgClientHello::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientHello.secret_key)
}
 ::std::string* CMsgClientHello::mutable_secret_key() {
  set_has_secret_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgClientHello::release_secret_key() {
  clear_has_secret_key();
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientHello::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != NULL) {
    set_has_secret_key();
  } else {
    clear_has_secret_key();
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientHello.secret_key)
}

// optional uint32 client_language = 6;
bool CMsgClientHello::has_client_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientHello::set_has_client_language() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientHello::clear_has_client_language() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientHello::clear_client_language() {
  client_language_ = 0u;
  clear_has_client_language();
}
 ::google::protobuf::uint32 CMsgClientHello::client_language() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_language)
  return client_language_;
}
 void CMsgClientHello::set_client_language(::google::protobuf::uint32 value) {
  set_has_client_language();
  client_language_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_language)
}

// optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
bool CMsgClientHello::has_engine() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientHello::set_has_engine() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientHello::clear_has_engine() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientHello::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
 ::ESourceEngine CMsgClientHello::engine() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.engine)
  return static_cast< ::ESourceEngine >(engine_);
}
 void CMsgClientHello::set_engine(::ESourceEngine value) {
  assert(::ESourceEngine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientHello.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientWelcome_Location::kLatitudeFieldNumber;
const int CMsgClientWelcome_Location::kLongitudeFieldNumber;
const int CMsgClientWelcome_Location::kCountryFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome_Location::CMsgClientWelcome_Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientWelcome.Location)
}

void CMsgClientWelcome_Location::InitAsDefaultInstance() {
}

CMsgClientWelcome_Location::CMsgClientWelcome_Location(const CMsgClientWelcome_Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientWelcome.Location)
}

void CMsgClientWelcome_Location::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome_Location::~CMsgClientWelcome_Location() {
  // @@protoc_insertion_point(destructor:CMsgClientWelcome.Location)
  SharedDtor();
}

void CMsgClientWelcome_Location::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CMsgClientWelcome_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_Location_descriptor_;
}

const CMsgClientWelcome_Location& CMsgClientWelcome_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientWelcome_Location* CMsgClientWelcome_Location::default_instance_ = NULL;

CMsgClientWelcome_Location* CMsgClientWelcome_Location::New(::google::protobuf::Arena* arena) const {
  CMsgClientWelcome_Location* n = new CMsgClientWelcome_Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientWelcome_Location::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgClientWelcome_Location*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(latitude_, longitude_);
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgClientWelcome_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientWelcome.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float latitude = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (tag == 26) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgClientWelcome.Location.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientWelcome.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientWelcome.Location)
  return false;
#undef DO_
}

void CMsgClientWelcome_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientWelcome.Location)
  // optional float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.Location.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientWelcome.Location)
}

::google::protobuf::uint8* CMsgClientWelcome_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientWelcome.Location)
  // optional float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.Location.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientWelcome.Location)
  return target;
}

int CMsgClientWelcome_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome_Location::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgClientWelcome_Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientWelcome_Location>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome_Location::MergeFrom(const CMsgClientWelcome_Location& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgClientWelcome_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::CopyFrom(const CMsgClientWelcome_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome_Location::IsInitialized() const {

  return true;
}

void CMsgClientWelcome_Location::Swap(CMsgClientWelcome_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome_Location::InternalSwap(CMsgClientWelcome_Location* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  country_.Swap(&other->country_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientWelcome_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_Location_descriptor_;
  metadata.reflection = CMsgClientWelcome_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientWelcome::kVersionFieldNumber;
const int CMsgClientWelcome::kGameDataFieldNumber;
const int CMsgClientWelcome::kOutofdateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kUptodateSubscribedCachesFieldNumber;
const int CMsgClientWelcome::kLocationFieldNumber;
const int CMsgClientWelcome::kSaveGameKeyFieldNumber;
const int CMsgClientWelcome::kItemSchemaCrcFieldNumber;
const int CMsgClientWelcome::kItemsGameUrlFieldNumber;
#endif  // !_MSC_VER

CMsgClientWelcome::CMsgClientWelcome()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClientWelcome)
}

void CMsgClientWelcome::InitAsDefaultInstance() {
  location_ = const_cast< ::CMsgClientWelcome_Location*>(&::CMsgClientWelcome_Location::default_instance());
}

CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClientWelcome)
}

void CMsgClientWelcome::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  game_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  save_game_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_schema_crc_ = 0u;
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  // @@protoc_insertion_point(destructor:CMsgClientWelcome)
  SharedDtor();
}

void CMsgClientWelcome::SharedDtor() {
  game_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_game_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete location_;
  }
}

void CMsgClientWelcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWelcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWelcome_descriptor_;
}

const CMsgClientWelcome& CMsgClientWelcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgClientWelcome* CMsgClientWelcome::default_instance_ = NULL;

CMsgClientWelcome* CMsgClientWelcome::New(::google::protobuf::Arena* arena) const {
  CMsgClientWelcome* n = new CMsgClientWelcome;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientWelcome::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgClientWelcome*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 243u) {
    ZR_(version_, item_schema_crc_);
    if (has_game_data()) {
      game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_location()) {
      if (location_ != NULL) location_->::CMsgClientWelcome_Location::Clear();
    }
    if (has_save_game_key()) {
      save_game_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_items_game_url()) {
      items_game_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  outofdate_subscribed_caches_.Clear();
  uptodate_subscribed_caches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgClientWelcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClientWelcome)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_data;
        break;
      }

      // optional bytes game_data = 2;
      case 2: {
        if (tag == 18) {
         parse_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_outofdate_subscribed_caches;
        break;
      }

      // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3: {
        if (tag == 26) {
         parse_outofdate_subscribed_caches:
          DO_(input->IncrementRecursionDepth());
         parse_loop_outofdate_subscribed_caches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outofdate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_outofdate_subscribed_caches;
        if (input->ExpectTag(34)) goto parse_loop_uptodate_subscribed_caches;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_uptodate_subscribed_caches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_uptodate_subscribed_caches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_uptodate_subscribed_caches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }

      // optional .CMsgClientWelcome.Location location = 5;
      case 5: {
        if (tag == 42) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_save_game_key;
        break;
      }

      // optional bytes save_game_key = 6;
      case 6: {
        if (tag == 50) {
         parse_save_game_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_save_game_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_item_schema_crc;
        break;
      }

      // optional fixed32 item_schema_crc = 7;
      case 7: {
        if (tag == 61) {
         parse_item_schema_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_crc_)));
          set_has_item_schema_crc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_items_game_url;
        break;
      }

      // optional string items_game_url = 8;
      case 8: {
        if (tag == 66) {
         parse_items_game_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items_game_url().data(), this->items_game_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgClientWelcome.items_game_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClientWelcome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClientWelcome)
  return false;
#undef DO_
}

void CMsgClientWelcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClientWelcome)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes game_data = 2;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->game_data(), output);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0, n = this->outofdate_subscribed_caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->outofdate_subscribed_caches(i), output);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0, n = this->uptodate_subscribed_caches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->uptodate_subscribed_caches(i), output);
  }

  // optional .CMsgClientWelcome.Location location = 5;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->location_, output);
  }

  // optional bytes save_game_key = 6;
  if (has_save_game_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->save_game_key(), output);
  }

  // optional fixed32 item_schema_crc = 7;
  if (has_item_schema_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->item_schema_crc(), output);
  }

  // optional string items_game_url = 8;
  if (has_items_game_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.items_game_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->items_game_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClientWelcome)
}

::google::protobuf::uint8* CMsgClientWelcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientWelcome)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bytes game_data = 2;
  if (has_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->game_data(), target);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0, n = this->outofdate_subscribed_caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->outofdate_subscribed_caches(i), target);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0, n = this->uptodate_subscribed_caches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->uptodate_subscribed_caches(i), target);
  }

  // optional .CMsgClientWelcome.Location location = 5;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->location_, target);
  }

  // optional bytes save_game_key = 6;
  if (has_save_game_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->save_game_key(), target);
  }

  // optional fixed32 item_schema_crc = 7;
  if (has_item_schema_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->item_schema_crc(), target);
  }

  // optional string items_game_url = 8;
  if (has_items_game_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), this->items_game_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.items_game_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->items_game_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientWelcome)
  return target;
}

int CMsgClientWelcome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 243u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bytes game_data = 2;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }

    // optional .CMsgClientWelcome.Location location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional bytes save_game_key = 6;
    if (has_save_game_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->save_game_key());
    }

    // optional fixed32 item_schema_crc = 7;
    if (has_item_schema_crc()) {
      total_size += 1 + 4;
    }

    // optional string items_game_url = 8;
    if (has_items_game_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }

  }
  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  total_size += 1 * this->outofdate_subscribed_caches_size();
  for (int i = 0; i < this->outofdate_subscribed_caches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outofdate_subscribed_caches(i));
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  total_size += 1 * this->uptodate_subscribed_caches_size();
  for (int i = 0; i < this->uptodate_subscribed_caches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uptodate_subscribed_caches(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgClientWelcome* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientWelcome>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  outofdate_subscribed_caches_.MergeFrom(from.outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.MergeFrom(from.uptodate_subscribed_caches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_game_data()) {
      set_has_game_data();
      game_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_);
    }
    if (from.has_location()) {
      mutable_location()->::CMsgClientWelcome_Location::MergeFrom(from.location());
    }
    if (from.has_save_game_key()) {
      set_has_save_game_key();
      save_game_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_game_key_);
    }
    if (from.has_item_schema_crc()) {
      set_item_schema_crc(from.item_schema_crc());
    }
    if (from.has_items_game_url()) {
      set_has_items_game_url();
      items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgClientWelcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {

  return true;
}

void CMsgClientWelcome::Swap(CMsgClientWelcome* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientWelcome::InternalSwap(CMsgClientWelcome* other) {
  std::swap(version_, other->version_);
  game_data_.Swap(&other->game_data_);
  outofdate_subscribed_caches_.UnsafeArenaSwap(&other->outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.UnsafeArenaSwap(&other->uptodate_subscribed_caches_);
  std::swap(location_, other->location_);
  save_game_key_.Swap(&other->save_game_key_);
  std::swap(item_schema_crc_, other->item_schema_crc_);
  items_game_url_.Swap(&other->items_game_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientWelcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWelcome_descriptor_;
  metadata.reflection = CMsgClientWelcome_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientWelcome_Location

// optional float latitude = 1;
bool CMsgClientWelcome_Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientWelcome_Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientWelcome_Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientWelcome_Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 float CMsgClientWelcome_Location::latitude() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.Location.latitude)
  return latitude_;
}
 void CMsgClientWelcome_Location::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.Location.latitude)
}

// optional float longitude = 2;
bool CMsgClientWelcome_Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientWelcome_Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientWelcome_Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientWelcome_Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 float CMsgClientWelcome_Location::longitude() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.Location.longitude)
  return longitude_;
}
 void CMsgClientWelcome_Location::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.Location.longitude)
}

// optional string country = 3;
bool CMsgClientWelcome_Location::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientWelcome_Location::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientWelcome_Location::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientWelcome_Location::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& CMsgClientWelcome_Location::country() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.Location.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome_Location::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.Location.country)
}
 void CMsgClientWelcome_Location::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientWelcome.Location.country)
}
 void CMsgClientWelcome_Location::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientWelcome.Location.country)
}
 ::std::string* CMsgClientWelcome_Location::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.Location.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgClientWelcome_Location::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome_Location::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientWelcome.Location.country)
}

// -------------------------------------------------------------------

// CMsgClientWelcome

// optional uint32 version = 1;
bool CMsgClientWelcome::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientWelcome::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientWelcome::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientWelcome::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 CMsgClientWelcome::version() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.version)
  return version_;
}
 void CMsgClientWelcome::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.version)
}

// optional bytes game_data = 2;
bool CMsgClientWelcome::has_game_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientWelcome::set_has_game_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientWelcome::clear_has_game_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientWelcome::clear_game_data() {
  game_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data();
}
 const ::std::string& CMsgClientWelcome::game_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.game_data)
  return game_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_game_data(const ::std::string& value) {
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.game_data)
}
 void CMsgClientWelcome::set_game_data(const char* value) {
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientWelcome.game_data)
}
 void CMsgClientWelcome::set_game_data(const void* value, size_t size) {
  set_has_game_data();
  game_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientWelcome.game_data)
}
 ::std::string* CMsgClientWelcome::mutable_game_data() {
  set_has_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.game_data)
  return game_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgClientWelcome::release_game_data() {
  clear_has_game_data();
  return game_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_allocated_game_data(::std::string* game_data) {
  if (game_data != NULL) {
    set_has_game_data();
  } else {
    clear_has_game_data();
  }
  game_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientWelcome.game_data)
}

// repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
int CMsgClientWelcome::outofdate_subscribed_caches_size() const {
  return outofdate_subscribed_caches_.size();
}
void CMsgClientWelcome::clear_outofdate_subscribed_caches() {
  outofdate_subscribed_caches_.Clear();
}
const ::CMsgSOCacheSubscribed& CMsgClientWelcome::outofdate_subscribed_caches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Get(index);
}
::CMsgSOCacheSubscribed* CMsgClientWelcome::mutable_outofdate_subscribed_caches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Mutable(index);
}
::CMsgSOCacheSubscribed* CMsgClientWelcome::add_outofdate_subscribed_caches() {
  // @@protoc_insertion_point(field_add:CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscribed >*
CMsgClientWelcome::mutable_outofdate_subscribed_caches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientWelcome.outofdate_subscribed_caches)
  return &outofdate_subscribed_caches_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscribed >&
CMsgClientWelcome::outofdate_subscribed_caches() const {
  // @@protoc_insertion_point(field_list:CMsgClientWelcome.outofdate_subscribed_caches)
  return outofdate_subscribed_caches_;
}

// repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
int CMsgClientWelcome::uptodate_subscribed_caches_size() const {
  return uptodate_subscribed_caches_.size();
}
void CMsgClientWelcome::clear_uptodate_subscribed_caches() {
  uptodate_subscribed_caches_.Clear();
}
const ::CMsgSOCacheSubscriptionCheck& CMsgClientWelcome::uptodate_subscribed_caches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Get(index);
}
::CMsgSOCacheSubscriptionCheck* CMsgClientWelcome::mutable_uptodate_subscribed_caches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Mutable(index);
}
::CMsgSOCacheSubscriptionCheck* CMsgClientWelcome::add_uptodate_subscribed_caches() {
  // @@protoc_insertion_point(field_add:CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscriptionCheck >*
CMsgClientWelcome::mutable_uptodate_subscribed_caches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientWelcome.uptodate_subscribed_caches)
  return &uptodate_subscribed_caches_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgSOCacheSubscriptionCheck >&
CMsgClientWelcome::uptodate_subscribed_caches() const {
  // @@protoc_insertion_point(field_list:CMsgClientWelcome.uptodate_subscribed_caches)
  return uptodate_subscribed_caches_;
}

// optional .CMsgClientWelcome.Location location = 5;
bool CMsgClientWelcome::has_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientWelcome::set_has_location() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientWelcome::clear_has_location() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientWelcome::clear_location() {
  if (location_ != NULL) location_->::CMsgClientWelcome_Location::Clear();
  clear_has_location();
}
const ::CMsgClientWelcome_Location& CMsgClientWelcome::location() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::CMsgClientWelcome_Location* CMsgClientWelcome::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::CMsgClientWelcome_Location;
  }
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.location)
  return location_;
}
::CMsgClientWelcome_Location* CMsgClientWelcome::release_location() {
  clear_has_location();
  ::CMsgClientWelcome_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgClientWelcome::set_allocated_location(::CMsgClientWelcome_Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgClientWelcome.location)
}

// optional bytes save_game_key = 6;
bool CMsgClientWelcome::has_save_game_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientWelcome::set_has_save_game_key() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientWelcome::clear_has_save_game_key() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientWelcome::clear_save_game_key() {
  save_game_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_game_key();
}
 const ::std::string& CMsgClientWelcome::save_game_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.save_game_key)
  return save_game_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_save_game_key(const ::std::string& value) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.save_game_key)
}
 void CMsgClientWelcome::set_save_game_key(const char* value) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientWelcome.save_game_key)
}
 void CMsgClientWelcome::set_save_game_key(const void* value, size_t size) {
  set_has_save_game_key();
  save_game_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientWelcome.save_game_key)
}
 ::std::string* CMsgClientWelcome::mutable_save_game_key() {
  set_has_save_game_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.save_game_key)
  return save_game_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgClientWelcome::release_save_game_key() {
  clear_has_save_game_key();
  return save_game_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_allocated_save_game_key(::std::string* save_game_key) {
  if (save_game_key != NULL) {
    set_has_save_game_key();
  } else {
    clear_has_save_game_key();
  }
  save_game_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_game_key);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientWelcome.save_game_key)
}

// optional fixed32 item_schema_crc = 7;
bool CMsgClientWelcome::has_item_schema_crc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgClientWelcome::set_has_item_schema_crc() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgClientWelcome::clear_has_item_schema_crc() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgClientWelcome::clear_item_schema_crc() {
  item_schema_crc_ = 0u;
  clear_has_item_schema_crc();
}
 ::google::protobuf::uint32 CMsgClientWelcome::item_schema_crc() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.item_schema_crc)
  return item_schema_crc_;
}
 void CMsgClientWelcome::set_item_schema_crc(::google::protobuf::uint32 value) {
  set_has_item_schema_crc();
  item_schema_crc_ = value;
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.item_schema_crc)
}

// optional string items_game_url = 8;
bool CMsgClientWelcome::has_items_game_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgClientWelcome::set_has_items_game_url() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgClientWelcome::clear_has_items_game_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgClientWelcome::clear_items_game_url() {
  items_game_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_items_game_url();
}
 const ::std::string& CMsgClientWelcome::items_game_url() const {
  // @@protoc_insertion_point(field_get:CMsgClientWelcome.items_game_url)
  return items_game_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_items_game_url(const ::std::string& value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgClientWelcome.items_game_url)
}
 void CMsgClientWelcome::set_items_game_url(const char* value) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgClientWelcome.items_game_url)
}
 void CMsgClientWelcome::set_items_game_url(const char* value, size_t size) {
  set_has_items_game_url();
  items_game_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgClientWelcome.items_game_url)
}
 ::std::string* CMsgClientWelcome::mutable_items_game_url() {
  set_has_items_game_url();
  // @@protoc_insertion_point(field_mutable:CMsgClientWelcome.items_game_url)
  return items_game_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMsgClientWelcome::release_items_game_url() {
  clear_has_items_game_url();
  return items_game_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMsgClientWelcome::set_allocated_items_game_url(::std::string* items_game_url) {
  if (items_game_url != NULL) {
    set_has_items_game_url();
  } else {
    clear_has_items_game_url();
  }
  items_game_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), items_game_url);
  // @@protoc_insertion_point(field_set_allocated:CMsgClientWelcome.items_game_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgConnectionStatus::kStatusFieldNumber;
const int CMsgConnectionStatus::kClientSessionNeedFieldNumber;
const int CMsgConnectionStatus::kQueuePositionFieldNumber;
const int CMsgConnectionStatus::kQueueSizeFieldNumber;
const int CMsgConnectionStatus::kWaitSecondsFieldNumber;
const int CMsgConnectionStatus::kEstimatedWaitSecondsRemainingFieldNumber;
#endif  // !_MSC_VER

CMsgConnectionStatus::CMsgConnectionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgConnectionStatus)
}

void CMsgConnectionStatus::InitAsDefaultInstance() {
}

CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgConnectionStatus)
}

void CMsgConnectionStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  client_session_need_ = 0u;
  queue_position_ = 0;
  queue_size_ = 0;
  wait_seconds_ = 0;
  estimated_wait_seconds_remaining_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  // @@protoc_insertion_point(destructor:CMsgConnectionStatus)
  SharedDtor();
}

void CMsgConnectionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgConnectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgConnectionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgConnectionStatus_descriptor_;
}

const CMsgConnectionStatus& CMsgConnectionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgConnectionStatus* CMsgConnectionStatus::default_instance_ = NULL;

CMsgConnectionStatus* CMsgConnectionStatus::New(::google::protobuf::Arena* arena) const {
  CMsgConnectionStatus* n = new CMsgConnectionStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgConnectionStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgConnectionStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(status_, estimated_wait_seconds_remaining_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgConnectionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GCConnectionStatus_IsValid(value)) {
            set_status(static_cast< ::GCConnectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_client_session_need;
        break;
      }

      // optional uint32 client_session_need = 2;
      case 2: {
        if (tag == 16) {
         parse_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
          set_has_client_session_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_queue_position;
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (tag == 24) {
         parse_queue_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
          set_has_queue_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queue_size;
        break;
      }

      // optional int32 queue_size = 4;
      case 4: {
        if (tag == 32) {
         parse_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_size_)));
          set_has_queue_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wait_seconds;
        break;
      }

      // optional int32 wait_seconds = 5;
      case 5: {
        if (tag == 40) {
         parse_wait_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_seconds_)));
          set_has_wait_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_estimated_wait_seconds_remaining;
        break;
      }

      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6: {
        if (tag == 48) {
         parse_estimated_wait_seconds_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_wait_seconds_remaining_)));
          set_has_estimated_wait_seconds_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgConnectionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgConnectionStatus)
  return false;
#undef DO_
}

void CMsgConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgConnectionStatus)
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 client_session_need = 2;
  if (has_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_session_need(), output);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 queue_size = 4;
  if (has_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queue_size(), output);
  }

  // optional int32 wait_seconds = 5;
  if (has_wait_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_seconds(), output);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (has_estimated_wait_seconds_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_wait_seconds_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgConnectionStatus)
}

::google::protobuf::uint8* CMsgConnectionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectionStatus)
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (has_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (has_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (has_wait_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (has_estimated_wait_seconds_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_wait_seconds_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectionStatus)
  return target;
}

int CMsgConnectionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 client_session_need = 2;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional int32 queue_position = 3;
    if (has_queue_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 queue_size = 4;
    if (has_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (has_wait_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (has_estimated_wait_seconds_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_wait_seconds_remaining());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgConnectionStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgConnectionStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_client_session_need()) {
      set_client_session_need(from.client_session_need());
    }
    if (from.has_queue_position()) {
      set_queue_position(from.queue_position());
    }
    if (from.has_queue_size()) {
      set_queue_size(from.queue_size());
    }
    if (from.has_wait_seconds()) {
      set_wait_seconds(from.wait_seconds());
    }
    if (from.has_estimated_wait_seconds_remaining()) {
      set_estimated_wait_seconds_remaining(from.estimated_wait_seconds_remaining());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {

  return true;
}

void CMsgConnectionStatus::Swap(CMsgConnectionStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConnectionStatus::InternalSwap(CMsgConnectionStatus* other) {
  std::swap(status_, other->status_);
  std::swap(client_session_need_, other->client_session_need_);
  std::swap(queue_position_, other->queue_position_);
  std::swap(queue_size_, other->queue_size_);
  std::swap(wait_seconds_, other->wait_seconds_);
  std::swap(estimated_wait_seconds_remaining_, other->estimated_wait_seconds_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgConnectionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgConnectionStatus_descriptor_;
  metadata.reflection = CMsgConnectionStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgConnectionStatus

// optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
bool CMsgConnectionStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgConnectionStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgConnectionStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgConnectionStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::GCConnectionStatus CMsgConnectionStatus::status() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.status)
  return static_cast< ::GCConnectionStatus >(status_);
}
 void CMsgConnectionStatus::set_status(::GCConnectionStatus value) {
  assert(::GCConnectionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.status)
}

// optional uint32 client_session_need = 2;
bool CMsgConnectionStatus::has_client_session_need() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgConnectionStatus::set_has_client_session_need() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgConnectionStatus::clear_has_client_session_need() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgConnectionStatus::clear_client_session_need() {
  client_session_need_ = 0u;
  clear_has_client_session_need();
}
 ::google::protobuf::uint32 CMsgConnectionStatus::client_session_need() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.client_session_need)
  return client_session_need_;
}
 void CMsgConnectionStatus::set_client_session_need(::google::protobuf::uint32 value) {
  set_has_client_session_need();
  client_session_need_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.client_session_need)
}

// optional int32 queue_position = 3;
bool CMsgConnectionStatus::has_queue_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgConnectionStatus::set_has_queue_position() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgConnectionStatus::clear_has_queue_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgConnectionStatus::clear_queue_position() {
  queue_position_ = 0;
  clear_has_queue_position();
}
 ::google::protobuf::int32 CMsgConnectionStatus::queue_position() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.queue_position)
  return queue_position_;
}
 void CMsgConnectionStatus::set_queue_position(::google::protobuf::int32 value) {
  set_has_queue_position();
  queue_position_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.queue_position)
}

// optional int32 queue_size = 4;
bool CMsgConnectionStatus::has_queue_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgConnectionStatus::set_has_queue_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgConnectionStatus::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgConnectionStatus::clear_queue_size() {
  queue_size_ = 0;
  clear_has_queue_size();
}
 ::google::protobuf::int32 CMsgConnectionStatus::queue_size() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.queue_size)
  return queue_size_;
}
 void CMsgConnectionStatus::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.queue_size)
}

// optional int32 wait_seconds = 5;
bool CMsgConnectionStatus::has_wait_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgConnectionStatus::set_has_wait_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgConnectionStatus::clear_has_wait_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgConnectionStatus::clear_wait_seconds() {
  wait_seconds_ = 0;
  clear_has_wait_seconds();
}
 ::google::protobuf::int32 CMsgConnectionStatus::wait_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.wait_seconds)
  return wait_seconds_;
}
 void CMsgConnectionStatus::set_wait_seconds(::google::protobuf::int32 value) {
  set_has_wait_seconds();
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.wait_seconds)
}

// optional int32 estimated_wait_seconds_remaining = 6;
bool CMsgConnectionStatus::has_estimated_wait_seconds_remaining() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgConnectionStatus::set_has_estimated_wait_seconds_remaining() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgConnectionStatus::clear_has_estimated_wait_seconds_remaining() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgConnectionStatus::clear_estimated_wait_seconds_remaining() {
  estimated_wait_seconds_remaining_ = 0;
  clear_has_estimated_wait_seconds_remaining();
}
 ::google::protobuf::int32 CMsgConnectionStatus::estimated_wait_seconds_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgConnectionStatus.estimated_wait_seconds_remaining)
  return estimated_wait_seconds_remaining_;
}
 void CMsgConnectionStatus::set_estimated_wait_seconds_remaining(::google::protobuf::int32 value) {
  set_has_estimated_wait_seconds_remaining();
  estimated_wait_seconds_remaining_ = value;
  // @@protoc_insertion_point(field_set:CMsgConnectionStatus.estimated_wait_seconds_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kServiceIdFieldNumber;
const int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InitAsDefaultInstance() {
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = 0u;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_;
}

const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_ = NULL;

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* n = new CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, service_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }

  // optional uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return target;
}

int CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const {

  return true;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Swap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  std::swap(service_id_, other->service_id_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_;
  metadata.reflection = CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGCToGCSOCacheSubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSubscribeToFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kSyncVersionFieldNumber;
const int CMsgGCToGCSOCacheSubscribe::kHaveVersionsFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::InitAsDefaultInstance() {
}

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::SharedCtor() {
  _cached_size_ = 0;
  subscriber_ = GOOGLE_ULONGLONG(0);
  subscribe_to_ = GOOGLE_ULONGLONG(0);
  sync_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheSubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCSOCacheSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCSOCacheSubscribe_descriptor_;
}

const CMsgGCToGCSOCacheSubscribe& CMsgGCToGCSOCacheSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCSOCacheSubscribe* CMsgGCToGCSOCacheSubscribe::default_instance_ = NULL;

CMsgGCToGCSOCacheSubscribe* CMsgGCToGCSOCacheSubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheSubscribe* n = new CMsgGCToGCSOCacheSubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheSubscribe::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToGCSOCacheSubscribe*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(subscriber_, sync_version_);

#undef ZR_HELPER_
#undef ZR_

  have_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCSOCacheSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
          set_has_subscriber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_subscribe_to;
        break;
      }

      // optional fixed64 subscribe_to = 2;
      case 2: {
        if (tag == 17) {
         parse_subscribe_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscribe_to_)));
          set_has_subscribe_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_sync_version;
        break;
      }

      // optional fixed64 sync_version = 3;
      case 3: {
        if (tag == 25) {
         parse_sync_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sync_version_)));
          set_has_sync_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_have_versions;
        break;
      }

      // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4: {
        if (tag == 34) {
         parse_have_versions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_have_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_have_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_have_versions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheSubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheSubscribe)
  // optional fixed64 subscriber = 1;
  if (has_subscriber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 subscribe_to = 2;
  if (has_subscribe_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->subscribe_to(), output);
  }

  // optional fixed64 sync_version = 3;
  if (has_sync_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->sync_version(), output);
  }

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0, n = this->have_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->have_versions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheSubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe)
  // optional fixed64 subscriber = 1;
  if (has_subscriber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 subscribe_to = 2;
  if (has_subscribe_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->subscribe_to(), target);
  }

  // optional fixed64 sync_version = 3;
  if (has_sync_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->sync_version(), target);
  }

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0, n = this->have_versions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->have_versions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe)
  return target;
}

int CMsgGCToGCSOCacheSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 subscribe_to = 2;
    if (has_subscribe_to()) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 3;
    if (has_sync_version()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  total_size += 1 * this->have_versions_size();
  for (int i = 0; i < this->have_versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->have_versions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCSOCacheSubscribe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheSubscribe>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const CMsgGCToGCSOCacheSubscribe& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  have_versions_.MergeFrom(from.have_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber()) {
      set_subscriber(from.subscriber());
    }
    if (from.has_subscribe_to()) {
      set_subscribe_to(from.subscribe_to());
    }
    if (from.has_sync_version()) {
      set_sync_version(from.sync_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const CMsgGCToGCSOCacheSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe::IsInitialized() const {

  return true;
}

void CMsgGCToGCSOCacheSubscribe::Swap(CMsgGCToGCSOCacheSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheSubscribe::InternalSwap(CMsgGCToGCSOCacheSubscribe* other) {
  std::swap(subscriber_, other->subscriber_);
  std::swap(subscribe_to_, other->subscribe_to_);
  std::swap(sync_version_, other->sync_version_);
  have_versions_.UnsafeArenaSwap(&other->have_versions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCSOCacheSubscribe_descriptor_;
  metadata.reflection = CMsgGCToGCSOCacheSubscribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions

// optional uint32 service_id = 1;
bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
 ::google::protobuf::uint32 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
  return service_id_;
}
 void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.service_id)
}

// optional uint64 version = 2;
bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
  return version_;
}
 void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions.version)
}

// -------------------------------------------------------------------

// CMsgGCToGCSOCacheSubscribe

// optional fixed64 subscriber = 1;
bool CMsgGCToGCSOCacheSubscribe::has_subscriber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_subscriber() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_subscriber() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheSubscribe::clear_subscriber() {
  subscriber_ = GOOGLE_ULONGLONG(0);
  clear_has_subscriber();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.subscriber)
  return subscriber_;
}
 void CMsgGCToGCSOCacheSubscribe::set_subscriber(::google::protobuf::uint64 value) {
  set_has_subscriber();
  subscriber_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.subscriber)
}

// optional fixed64 subscribe_to = 2;
bool CMsgGCToGCSOCacheSubscribe::has_subscribe_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_subscribe_to() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_subscribe_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheSubscribe::clear_subscribe_to() {
  subscribe_to_ = GOOGLE_ULONGLONG(0);
  clear_has_subscribe_to();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::subscribe_to() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.subscribe_to)
  return subscribe_to_;
}
 void CMsgGCToGCSOCacheSubscribe::set_subscribe_to(::google::protobuf::uint64 value) {
  set_has_subscribe_to();
  subscribe_to_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.subscribe_to)
}

// optional fixed64 sync_version = 3;
bool CMsgGCToGCSOCacheSubscribe::has_sync_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCSOCacheSubscribe::set_has_sync_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCSOCacheSubscribe::clear_has_sync_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCSOCacheSubscribe::clear_sync_version() {
  sync_version_ = GOOGLE_ULONGLONG(0);
  clear_has_sync_version();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheSubscribe::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.sync_version)
  return sync_version_;
}
 void CMsgGCToGCSOCacheSubscribe::set_sync_version(::google::protobuf::uint64 value) {
  set_has_sync_version();
  sync_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheSubscribe.sync_version)
}

// repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
int CMsgGCToGCSOCacheSubscribe::have_versions_size() const {
  return have_versions_.size();
}
void CMsgGCToGCSOCacheSubscribe::clear_have_versions() {
  have_versions_.Clear();
}
const ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& CMsgGCToGCSOCacheSubscribe::have_versions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Get(index);
}
::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::mutable_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Mutable(index);
}
::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* CMsgGCToGCSOCacheSubscribe::add_have_versions() {
  // @@protoc_insertion_point(field_add:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >*
CMsgGCToGCSOCacheSubscribe::mutable_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToGCSOCacheSubscribe.have_versions)
  return &have_versions_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >&
CMsgGCToGCSOCacheSubscribe::have_versions() const {
  // @@protoc_insertion_point(field_list:CMsgGCToGCSOCacheSubscribe.have_versions)
  return have_versions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCSOCacheUnsubscribe::kSubscriberFieldNumber;
const int CMsgGCToGCSOCacheUnsubscribe::kUnsubscribeFromFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::InitAsDefaultInstance() {
}

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  subscriber_ = GOOGLE_ULONGLONG(0);
  unsubscribe_from_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheUnsubscribe)
  SharedDtor();
}

void CMsgGCToGCSOCacheUnsubscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCSOCacheUnsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCSOCacheUnsubscribe_descriptor_;
}

const CMsgGCToGCSOCacheUnsubscribe& CMsgGCToGCSOCacheUnsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCSOCacheUnsubscribe* CMsgGCToGCSOCacheUnsubscribe::default_instance_ = NULL;

CMsgGCToGCSOCacheUnsubscribe* CMsgGCToGCSOCacheUnsubscribe::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCSOCacheUnsubscribe* n = new CMsgGCToGCSOCacheUnsubscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCSOCacheUnsubscribe::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToGCSOCacheUnsubscribe*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(subscriber_, unsubscribe_from_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCSOCacheUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCSOCacheUnsubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 subscriber = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &subscriber_)));
          set_has_subscriber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_unsubscribe_from;
        break;
      }

      // optional fixed64 unsubscribe_from = 2;
      case 2: {
        if (tag == 17) {
         parse_unsubscribe_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &unsubscribe_from_)));
          set_has_unsubscribe_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCSOCacheUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCSOCacheUnsubscribe)
  return false;
#undef DO_
}

void CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCSOCacheUnsubscribe)
  // optional fixed64 subscriber = 1;
  if (has_subscriber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->subscriber(), output);
  }

  // optional fixed64 unsubscribe_from = 2;
  if (has_unsubscribe_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->unsubscribe_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCSOCacheUnsubscribe)
}

::google::protobuf::uint8* CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheUnsubscribe)
  // optional fixed64 subscriber = 1;
  if (has_subscriber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->subscriber(), target);
  }

  // optional fixed64 unsubscribe_from = 2;
  if (has_unsubscribe_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->unsubscribe_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheUnsubscribe)
  return target;
}

int CMsgGCToGCSOCacheUnsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 subscriber = 1;
    if (has_subscriber()) {
      total_size += 1 + 8;
    }

    // optional fixed64 unsubscribe_from = 2;
    if (has_unsubscribe_from()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCSOCacheUnsubscribe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCSOCacheUnsubscribe>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber()) {
      set_subscriber(from.subscriber());
    }
    if (from.has_unsubscribe_from()) {
      set_unsubscribe_from(from.unsubscribe_from());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const {

  return true;
}

void CMsgGCToGCSOCacheUnsubscribe::Swap(CMsgGCToGCSOCacheUnsubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCSOCacheUnsubscribe::InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
  std::swap(subscriber_, other->subscriber_);
  std::swap(unsubscribe_from_, other->unsubscribe_from_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCSOCacheUnsubscribe_descriptor_;
  metadata.reflection = CMsgGCToGCSOCacheUnsubscribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCSOCacheUnsubscribe

// optional fixed64 subscriber = 1;
bool CMsgGCToGCSOCacheUnsubscribe::has_subscriber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCSOCacheUnsubscribe::set_has_subscriber() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_has_subscriber() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_subscriber() {
  subscriber_ = GOOGLE_ULONGLONG(0);
  clear_has_subscriber();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheUnsubscribe::subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheUnsubscribe.subscriber)
  return subscriber_;
}
 void CMsgGCToGCSOCacheUnsubscribe::set_subscriber(::google::protobuf::uint64 value) {
  set_has_subscriber();
  subscriber_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheUnsubscribe.subscriber)
}

// optional fixed64 unsubscribe_from = 2;
bool CMsgGCToGCSOCacheUnsubscribe::has_unsubscribe_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCSOCacheUnsubscribe::set_has_unsubscribe_from() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_has_unsubscribe_from() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCSOCacheUnsubscribe::clear_unsubscribe_from() {
  unsubscribe_from_ = GOOGLE_ULONGLONG(0);
  clear_has_unsubscribe_from();
}
 ::google::protobuf::uint64 CMsgGCToGCSOCacheUnsubscribe::unsubscribe_from() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from)
  return unsubscribe_from_;
}
 void CMsgGCToGCSOCacheUnsubscribe::set_unsubscribe_from(::google::protobuf::uint64 value) {
  set_has_unsubscribe_from();
  unsubscribe_from_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCSOCacheUnsubscribe.unsubscribe_from)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCClientPing::CMsgGCClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCClientPing)
}

void CMsgGCClientPing::InitAsDefaultInstance() {
}

CMsgGCClientPing::CMsgGCClientPing(const CMsgGCClientPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientPing)
}

void CMsgGCClientPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClientPing::~CMsgGCClientPing() {
  // @@protoc_insertion_point(destructor:CMsgGCClientPing)
  SharedDtor();
}

void CMsgGCClientPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCClientPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClientPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClientPing_descriptor_;
}

const CMsgGCClientPing& CMsgGCClientPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCClientPing* CMsgGCClientPing::default_instance_ = NULL;

CMsgGCClientPing* CMsgGCClientPing::New(::google::protobuf::Arena* arena) const {
  CMsgGCClientPing* n = new CMsgGCClientPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCClientPing::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCClientPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCClientPing)
  return false;
#undef DO_
}

void CMsgGCClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCClientPing)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCClientPing)
}

::google::protobuf::uint8* CMsgGCClientPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientPing)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientPing)
  return target;
}

int CMsgGCClientPing::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClientPing::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCClientPing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCClientPing>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClientPing::MergeFrom(const CMsgGCClientPing& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCClientPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientPing::CopyFrom(const CMsgGCClientPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientPing::IsInitialized() const {

  return true;
}

void CMsgGCClientPing::Swap(CMsgGCClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientPing::InternalSwap(CMsgGCClientPing* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCClientPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClientPing_descriptor_;
  metadata.reflection = CMsgGCClientPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCClientPing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCLoadSessionSOCache::kAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCLoadSessionSOCache)
}

void CMsgGCToGCLoadSessionSOCache::InitAsDefaultInstance() {
}

CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(const CMsgGCToGCLoadSessionSOCache& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCLoadSessionSOCache)
}

void CMsgGCToGCLoadSessionSOCache::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCLoadSessionSOCache::~CMsgGCToGCLoadSessionSOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCLoadSessionSOCache)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCLoadSessionSOCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCLoadSessionSOCache_descriptor_;
}

const CMsgGCToGCLoadSessionSOCache& CMsgGCToGCLoadSessionSOCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCLoadSessionSOCache* CMsgGCToGCLoadSessionSOCache::default_instance_ = NULL;

CMsgGCToGCLoadSessionSOCache* CMsgGCToGCLoadSessionSOCache::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCLoadSessionSOCache* n = new CMsgGCToGCLoadSessionSOCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCLoadSessionSOCache::Clear() {
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCLoadSessionSOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCLoadSessionSOCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCLoadSessionSOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCLoadSessionSOCache)
  return false;
#undef DO_
}

void CMsgGCToGCLoadSessionSOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCLoadSessionSOCache)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCLoadSessionSOCache)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCLoadSessionSOCache)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCLoadSessionSOCache)
  return target;
}

int CMsgGCToGCLoadSessionSOCache::ByteSize() const {
  int total_size = 0;

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCLoadSessionSOCache* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCLoadSessionSOCache>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const CMsgGCToGCLoadSessionSOCache& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const CMsgGCToGCLoadSessionSOCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCache::IsInitialized() const {

  return true;
}

void CMsgGCToGCLoadSessionSOCache::Swap(CMsgGCToGCLoadSessionSOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCache::InternalSwap(CMsgGCToGCLoadSessionSOCache* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCLoadSessionSOCache_descriptor_;
  metadata.reflection = CMsgGCToGCLoadSessionSOCache_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCLoadSessionSOCache

// optional uint32 account_id = 1;
bool CMsgGCToGCLoadSessionSOCache::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCLoadSessionSOCache::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCLoadSessionSOCache::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCLoadSessionSOCache::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CMsgGCToGCLoadSessionSOCache::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCLoadSessionSOCache.account_id)
  return account_id_;
}
 void CMsgGCToGCLoadSessionSOCache::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCLoadSessionSOCache.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCLoadSessionSOCacheResponse)
}

void CMsgGCToGCLoadSessionSOCacheResponse::InitAsDefaultInstance() {
}

CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(const CMsgGCToGCLoadSessionSOCacheResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCLoadSessionSOCacheResponse)
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCLoadSessionSOCacheResponse::~CMsgGCToGCLoadSessionSOCacheResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCLoadSessionSOCacheResponse)
  SharedDtor();
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCLoadSessionSOCacheResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCLoadSessionSOCacheResponse_descriptor_;
}

const CMsgGCToGCLoadSessionSOCacheResponse& CMsgGCToGCLoadSessionSOCacheResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCLoadSessionSOCacheResponse* CMsgGCToGCLoadSessionSOCacheResponse::default_instance_ = NULL;

CMsgGCToGCLoadSessionSOCacheResponse* CMsgGCToGCLoadSessionSOCacheResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCLoadSessionSOCacheResponse* n = new CMsgGCToGCLoadSessionSOCacheResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCLoadSessionSOCacheResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCLoadSessionSOCacheResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCLoadSessionSOCacheResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCLoadSessionSOCacheResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCLoadSessionSOCacheResponse)
  return false;
#undef DO_
}

void CMsgGCToGCLoadSessionSOCacheResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCLoadSessionSOCacheResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCLoadSessionSOCacheResponse)
}

::google::protobuf::uint8* CMsgGCToGCLoadSessionSOCacheResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCLoadSessionSOCacheResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCLoadSessionSOCacheResponse)
  return target;
}

int CMsgGCToGCLoadSessionSOCacheResponse::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCLoadSessionSOCacheResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCLoadSessionSOCacheResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCacheResponse::IsInitialized() const {

  return true;
}

void CMsgGCToGCLoadSessionSOCacheResponse::Swap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCLoadSessionSOCacheResponse::InternalSwap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCLoadSessionSOCacheResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCLoadSessionSOCacheResponse_descriptor_;
  metadata.reflection = CMsgGCToGCLoadSessionSOCacheResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCLoadSessionSOCacheResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CMsgGCToGCUpdateSessionStats::kUserSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kServerSessionsFieldNumber;
const int CMsgGCToGCUpdateSessionStats::kInLogonSurgeFieldNumber;
#endif  // !_MSC_VER

CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCToGCUpdateSessionStats)
}

void CMsgGCToGCUpdateSessionStats::InitAsDefaultInstance() {
}

CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(const CMsgGCToGCUpdateSessionStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSessionStats)
}

void CMsgGCToGCUpdateSessionStats::SharedCtor() {
  _cached_size_ = 0;
  user_sessions_ = 0u;
  server_sessions_ = 0u;
  in_logon_surge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCToGCUpdateSessionStats::~CMsgGCToGCUpdateSessionStats() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSessionStats)
  SharedDtor();
}

void CMsgGCToGCUpdateSessionStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGCToGCUpdateSessionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCUpdateSessionStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCToGCUpdateSessionStats_descriptor_;
}

const CMsgGCToGCUpdateSessionStats& CMsgGCToGCUpdateSessionStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CMsgGCToGCUpdateSessionStats* CMsgGCToGCUpdateSessionStats::default_instance_ = NULL;

CMsgGCToGCUpdateSessionStats* CMsgGCToGCUpdateSessionStats::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCUpdateSessionStats* n = new CMsgGCToGCUpdateSessionStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCUpdateSessionStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMsgGCToGCUpdateSessionStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_sessions_, in_logon_surge_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CMsgGCToGCUpdateSessionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCToGCUpdateSessionStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_sessions = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
          set_has_user_sessions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_sessions;
        break;
      }

      // optional uint32 server_sessions = 2;
      case 2: {
        if (tag == 16) {
         parse_server_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_sessions_)));
          set_has_server_sessions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_in_logon_surge;
        break;
      }

      // optional bool in_logon_surge = 3;
      case 3: {
        if (tag == 24) {
         parse_in_logon_surge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_logon_surge_)));
          set_has_in_logon_surge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCToGCUpdateSessionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCToGCUpdateSessionStats)
  return false;
#undef DO_
}

void CMsgGCToGCUpdateSessionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCToGCUpdateSessionStats)
  // optional uint32 user_sessions = 1;
  if (has_user_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_sessions(), output);
  }

  // optional uint32 server_sessions = 2;
  if (has_server_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_sessions(), output);
  }

  // optional bool in_logon_surge = 3;
  if (has_in_logon_surge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->in_logon_surge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCToGCUpdateSessionStats)
}

::google::protobuf::uint8* CMsgGCToGCUpdateSessionStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSessionStats)
  // optional uint32 user_sessions = 1;
  if (has_user_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_sessions(), target);
  }

  // optional uint32 server_sessions = 2;
  if (has_server_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_sessions(), target);
  }

  // optional bool in_logon_surge = 3;
  if (has_in_logon_surge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->in_logon_surge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSessionStats)
  return target;
}

int CMsgGCToGCUpdateSessionStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 user_sessions = 1;
    if (has_user_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 server_sessions = 2;
    if (has_server_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_sessions());
    }

    // optional bool in_logon_surge = 3;
    if (has_in_logon_surge()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMsgGCToGCUpdateSessionStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCUpdateSessionStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const CMsgGCToGCUpdateSessionStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_sessions()) {
      set_user_sessions(from.user_sessions());
    }
    if (from.has_server_sessions()) {
      set_server_sessions(from.server_sessions());
    }
    if (from.has_in_logon_surge()) {
      set_in_logon_surge(from.in_logon_surge());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const CMsgGCToGCUpdateSessionStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSessionStats::IsInitialized() const {

  return true;
}

void CMsgGCToGCUpdateSessionStats::Swap(CMsgGCToGCUpdateSessionStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUpdateSessionStats::InternalSwap(CMsgGCToGCUpdateSessionStats* other) {
  std::swap(user_sessions_, other->user_sessions_);
  std::swap(server_sessions_, other->server_sessions_);
  std::swap(in_logon_surge_, other->in_logon_surge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCUpdateSessionStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCToGCUpdateSessionStats_descriptor_;
  metadata.reflection = CMsgGCToGCUpdateSessionStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCUpdateSessionStats

// optional uint32 user_sessions = 1;
bool CMsgGCToGCUpdateSessionStats::has_user_sessions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_user_sessions() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_user_sessions() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCUpdateSessionStats::clear_user_sessions() {
  user_sessions_ = 0u;
  clear_has_user_sessions();
}
 ::google::protobuf::uint32 CMsgGCToGCUpdateSessionStats::user_sessions() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateSessionStats.user_sessions)
  return user_sessions_;
}
 void CMsgGCToGCUpdateSessionStats::set_user_sessions(::google::protobuf::uint32 value) {
  set_has_user_sessions();
  user_sessions_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateSessionStats.user_sessions)
}

// optional uint32 server_sessions = 2;
bool CMsgGCToGCUpdateSessionStats::has_server_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_server_sessions() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_server_sessions() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCUpdateSessionStats::clear_server_sessions() {
  server_sessions_ = 0u;
  clear_has_server_sessions();
}
 ::google::protobuf::uint32 CMsgGCToGCUpdateSessionStats::server_sessions() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateSessionStats.server_sessions)
  return server_sessions_;
}
 void CMsgGCToGCUpdateSessionStats::set_server_sessions(::google::protobuf::uint32 value) {
  set_has_server_sessions();
  server_sessions_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateSessionStats.server_sessions)
}

// optional bool in_logon_surge = 3;
bool CMsgGCToGCUpdateSessionStats::has_in_logon_surge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToGCUpdateSessionStats::set_has_in_logon_surge() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToGCUpdateSessionStats::clear_has_in_logon_surge() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToGCUpdateSessionStats::clear_in_logon_surge() {
  in_logon_surge_ = false;
  clear_has_in_logon_surge();
}
 bool CMsgGCToGCUpdateSessionStats::in_logon_surge() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCUpdateSessionStats.in_logon_surge)
  return in_logon_surge_;
}
 void CMsgGCToGCUpdateSessionStats::set_in_logon_surge(bool value) {
  set_has_in_logon_surge();
  in_logon_surge_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCToGCUpdateSessionStats.in_logon_surge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kGameitemidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::kItemDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameitemid_ = 0u;
  item_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  item_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* n = new CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    gameitemid_ = 0u;
    if (has_item_description()) {
      item_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameitemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_description;
        break;
      }

      // optional string item_description = 2;
      case 2: {
        if (tag == 18) {
         parse_item_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_description().data(), this->item_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  // optional uint32 gameitemid = 1;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameitemid(), output);
  }

  // optional string item_description = 2;
  if (has_item_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  // optional uint32 gameitemid = 1;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameitemid(), target);
  }

  // optional string item_description = 2;
  if (has_item_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_description().data(), this->item_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 gameitemid = 1;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

    // optional string item_description = 2;
    if (has_item_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_description());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
    if (from.has_item_description()) {
      set_has_item_description();
      item_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Swap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  std::swap(gameitemid_, other->gameitemid_);
  item_description_.Swap(&other->item_description_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kLanguageFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::kDescriptionsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* n = new CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
  if (has_language()) {
    language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  descriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_descriptions;
        break;
      }

      // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2: {
        if (tag == 18) {
         parse_descriptions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_descriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_descriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_descriptions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0, n = this->descriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  // optional string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0, n = this->descriptions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSize() const {
  int total_size = 0;

  // optional string language = 1;
  if (has_language()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  total_size += 1 * this->descriptions_size();
  for (int i = 0; i < this->descriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  descriptions_.MergeFrom(from.descriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Swap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  language_.Swap(&other->language_);
  descriptions_.UnsafeArenaSwap(&other->descriptions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_PopulateItemDescriptions_Request::kAppidFieldNumber;
const int CWorkshop_PopulateItemDescriptions_Request::kLanguagesFieldNumber;
#endif  // !_MSC_VER

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_PopulateItemDescriptions_Request)
}

void CWorkshop_PopulateItemDescriptions_Request::InitAsDefaultInstance() {
}

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request)
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request)
  SharedDtor();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_PopulateItemDescriptions_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_PopulateItemDescriptions_Request_descriptor_;
}

const CWorkshop_PopulateItemDescriptions_Request& CWorkshop_PopulateItemDescriptions_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::default_instance_ = NULL;

CWorkshop_PopulateItemDescriptions_Request* CWorkshop_PopulateItemDescriptions_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_PopulateItemDescriptions_Request* n = new CWorkshop_PopulateItemDescriptions_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_PopulateItemDescriptions_Request::Clear() {
  appid_ = 0u;
  languages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_PopulateItemDescriptions_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_PopulateItemDescriptions_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_languages;
        break;
      }

      // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2: {
        if (tag == 18) {
         parse_languages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_languages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_languages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_languages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_PopulateItemDescriptions_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_PopulateItemDescriptions_Request)
  return false;
#undef DO_
}

void CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_PopulateItemDescriptions_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0, n = this->languages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->languages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_PopulateItemDescriptions_Request)
}

::google::protobuf::uint8* CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0, n = this->languages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->languages(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request)
  return target;
}

int CWorkshop_PopulateItemDescriptions_Request::ByteSize() const {
  int total_size = 0;

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  total_size += 1 * this->languages_size();
  for (int i = 0; i < this->languages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->languages(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_PopulateItemDescriptions_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_PopulateItemDescriptions_Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  languages_.MergeFrom(from.languages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {

  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::Swap(CWorkshop_PopulateItemDescriptions_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_PopulateItemDescriptions_Request::InternalSwap(CWorkshop_PopulateItemDescriptions_Request* other) {
  std::swap(appid_, other->appid_);
  languages_.UnsafeArenaSwap(&other->languages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_PopulateItemDescriptions_Request_descriptor_;
  metadata.reflection = CWorkshop_PopulateItemDescriptions_Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription

// optional uint32 gameitemid = 1;
bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
 ::google::protobuf::uint32 CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.gameitemid)
  return gameitemid_;
}
 void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.gameitemid)
}

// optional string item_description = 2;
bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::has_item_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_has_item_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_has_item_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::clear_item_description() {
  item_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_description();
}
 const ::std::string& CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::item_description() const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
  return item_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const ::std::string& value) {
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
 void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const char* value) {
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
 void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_item_description(const char* value, size_t size) {
  set_has_item_description();
  item_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}
 ::std::string* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::mutable_item_description() {
  set_has_item_description();
  // @@protoc_insertion_point(field_mutable:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
  return item_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::release_item_description() {
  clear_has_item_description();
  return item_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::set_allocated_item_description(::std::string* item_description) {
  if (item_description != NULL) {
    set_has_item_description();
  } else {
    clear_has_item_description();
  }
  item_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_description);
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description)
}

// -------------------------------------------------------------------

// CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock

// optional string language = 1;
bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
 const ::std::string& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::language() const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
 void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const char* value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
 void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}
 ::std::string* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::release_language() {
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language)
}

// repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
int CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions_size() const {
  return descriptions_.size();
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::clear_descriptions() {
  descriptions_.Clear();
}
const ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Get(index);
}
::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Mutable(index);
}
::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::add_descriptions() {
  // @@protoc_insertion_point(field_add:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >*
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return &descriptions_;
}
const ::google::protobuf::RepeatedPtrField< ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >&
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::descriptions() const {
  // @@protoc_insertion_point(field_list:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.descriptions)
  return descriptions_;
}

// -------------------------------------------------------------------

// CWorkshop_PopulateItemDescriptions_Request

// optional uint32 appid = 1;
bool CWorkshop_PopulateItemDescriptions_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_PopulateItemDescriptions_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_PopulateItemDescriptions_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
 ::google::protobuf::uint32 CWorkshop_PopulateItemDescriptions_Request::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.appid)
  return appid_;
}
 void CWorkshop_PopulateItemDescriptions_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_PopulateItemDescriptions_Request.appid)
}

// repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
int CWorkshop_PopulateItemDescriptions_Request::languages_size() const {
  return languages_.size();
}
void CWorkshop_PopulateItemDescriptions_Request::clear_languages() {
  languages_.Clear();
}
const ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& CWorkshop_PopulateItemDescriptions_Request::languages(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Get(index);
}
::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Mutable(index);
}
::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* CWorkshop_PopulateItemDescriptions_Request::add_languages() {
  // @@protoc_insertion_point(field_add:CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_.Add();
}
::google::protobuf::RepeatedPtrField< ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >*
CWorkshop_PopulateItemDescriptions_Request::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_PopulateItemDescriptions_Request.languages)
  return &languages_;
}
const ::google::protobuf::RepeatedPtrField< ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >&
CWorkshop_PopulateItemDescriptions_Request::languages() const {
  // @@protoc_insertion_point(field_list:CWorkshop_PopulateItemDescriptions_Request.languages)
  return languages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Request::kAppidFieldNumber;
const int CWorkshop_GetContributors_Request::kGameitemidFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_GetContributors_Request)
}

void CWorkshop_GetContributors_Request::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetContributors_Request)
}

void CWorkshop_GetContributors_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetContributors_Request)
  SharedDtor();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Request_descriptor_;
}

const CWorkshop_GetContributors_Request& CWorkshop_GetContributors_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::default_instance_ = NULL;

CWorkshop_GetContributors_Request* CWorkshop_GetContributors_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_GetContributors_Request* n = new CWorkshop_GetContributors_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_GetContributors_Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CWorkshop_GetContributors_Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(appid_, gameitemid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_GetContributors_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_GetContributors_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_GetContributors_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_GetContributors_Request)
  return false;
#undef DO_
}

void CWorkshop_GetContributors_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_GetContributors_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_GetContributors_Request)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetContributors_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetContributors_Request)
  return target;
}

int CWorkshop_GetContributors_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_GetContributors_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_GetContributors_Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {

  return true;
}

void CWorkshop_GetContributors_Request::Swap(CWorkshop_GetContributors_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Request::InternalSwap(CWorkshop_GetContributors_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(gameitemid_, other->gameitemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Request_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_GetContributors_Request

// optional uint32 appid = 1;
bool CWorkshop_GetContributors_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_GetContributors_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_GetContributors_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_GetContributors_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
 ::google::protobuf::uint32 CWorkshop_GetContributors_Request::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetContributors_Request.appid)
  return appid_;
}
 void CWorkshop_GetContributors_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_GetContributors_Request.appid)
}

// optional uint32 gameitemid = 2;
bool CWorkshop_GetContributors_Request::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_GetContributors_Request::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_GetContributors_Request::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_GetContributors_Request::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
 ::google::protobuf::uint32 CWorkshop_GetContributors_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetContributors_Request.gameitemid)
  return gameitemid_;
}
 void CWorkshop_GetContributors_Request::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_GetContributors_Request.gameitemid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_GetContributors_Response::kContributorsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_GetContributors_Response)
}

void CWorkshop_GetContributors_Response::InitAsDefaultInstance() {
}

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetContributors_Response)
}

void CWorkshop_GetContributors_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetContributors_Response)
  SharedDtor();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_GetContributors_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_GetContributors_Response_descriptor_;
}

const CWorkshop_GetContributors_Response& CWorkshop_GetContributors_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::default_instance_ = NULL;

CWorkshop_GetContributors_Response* CWorkshop_GetContributors_Response::New(::google::protobuf::Arena* arena) const {
  CWorkshop_GetContributors_Response* n = new CWorkshop_GetContributors_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_GetContributors_Response::Clear() {
  contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_GetContributors_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_GetContributors_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 contributors = 1;
      case 1: {
        if (tag == 9) {
         parse_contributors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_contributors())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_contributors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_contributors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_GetContributors_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_GetContributors_Response)
  return false;
#undef DO_
}

void CWorkshop_GetContributors_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_GetContributors_Response)
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->contributors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_GetContributors_Response)
}

::google::protobuf::uint8* CWorkshop_GetContributors_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetContributors_Response)
  // repeated fixed64 contributors = 1;
  for (int i = 0; i < this->contributors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->contributors(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetContributors_Response)
  return target;
}

int CWorkshop_GetContributors_Response::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 contributors = 1;
  {
    int data_size = 0;
    data_size = 8 * this->contributors_size();
    total_size += 1 * this->contributors_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_GetContributors_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_GetContributors_Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contributors_.MergeFrom(from.contributors_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {

  return true;
}

void CWorkshop_GetContributors_Response::Swap(CWorkshop_GetContributors_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_GetContributors_Response::InternalSwap(CWorkshop_GetContributors_Response* other) {
  contributors_.UnsafeArenaSwap(&other->contributors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_GetContributors_Response_descriptor_;
  metadata.reflection = CWorkshop_GetContributors_Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_GetContributors_Response

// repeated fixed64 contributors = 1;
int CWorkshop_GetContributors_Response::contributors_size() const {
  return contributors_.size();
}
void CWorkshop_GetContributors_Response::clear_contributors() {
  contributors_.Clear();
}
 ::google::protobuf::uint64 CWorkshop_GetContributors_Response::contributors(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_GetContributors_Response.contributors)
  return contributors_.Get(index);
}
 void CWorkshop_GetContributors_Response::set_contributors(int index, ::google::protobuf::uint64 value) {
  contributors_.Set(index, value);
  // @@protoc_insertion_point(field_set:CWorkshop_GetContributors_Response.contributors)
}
 void CWorkshop_GetContributors_Response::add_contributors(::google::protobuf::uint64 value) {
  contributors_.Add(value);
  // @@protoc_insertion_point(field_add:CWorkshop_GetContributors_Response.contributors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CWorkshop_GetContributors_Response::contributors() const {
  // @@protoc_insertion_point(field_list:CWorkshop_GetContributors_Response.contributors)
  return contributors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CWorkshop_GetContributors_Response::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_GetContributors_Response.contributors)
  return &contributors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kWorkshopFileIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  workshop_file_id_ = GOOGLE_ULONGLONG(0);
  revenue_percentage_ = 0;
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* n = new CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    workshop_file_id_ = GOOGLE_ULONGLONG(0);
    revenue_percentage_ = 0;
    if (has_rule_description()) {
      rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 workshop_file_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &workshop_file_id_)));
          set_has_workshop_file_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (tag == 21) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          set_has_revenue_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (tag == 26) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  // optional uint64 workshop_file_id = 1;
  if (has_workshop_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->workshop_file_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  // optional uint64 workshop_file_id = 1;
  if (has_workshop_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->workshop_file_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 workshop_file_id = 1;
    if (has_workshop_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->workshop_file_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workshop_file_id()) {
      set_workshop_file_id(from.workshop_file_id());
    }
    if (from.has_revenue_percentage()) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from.has_rule_description()) {
      set_has_rule_description();
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  std::swap(workshop_file_id_, other->workshop_file_id_);
  std::swap(revenue_percentage_, other->revenue_percentage_);
  rule_description_.Swap(&other->rule_description_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kAccountIdFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRevenuePercentageFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::kRuleDescriptionFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = 0u;
  revenue_percentage_ = 0;
  rule_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  rule_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* n = new CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(account_id_, revenue_percentage_);
    if (has_rule_description()) {
      rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_revenue_percentage;
        break;
      }

      // optional float revenue_percentage = 2;
      case 2: {
        if (tag == 21) {
         parse_revenue_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &revenue_percentage_)));
          set_has_revenue_percentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rule_description;
        break;
      }

      // optional string rule_description = 3;
      case 3: {
        if (tag == 26) {
         parse_rule_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_description().data(), this->rule_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->revenue_percentage(), output);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (has_revenue_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (has_rule_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_description().data(), this->rule_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rule_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return target;
}

int CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float revenue_percentage = 2;
    if (has_revenue_percentage()) {
      total_size += 1 + 4;
    }

    // optional string rule_description = 3;
    if (has_rule_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_description());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_revenue_percentage()) {
      set_revenue_percentage(from.revenue_percentage());
    }
    if (from.has_rule_description()) {
      set_has_rule_description();
      rule_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rule_description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Swap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(revenue_percentage_, other->revenue_percentage_);
  rule_description_.Swap(&other->rule_description_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CWorkshop_SetItemPaymentRules_Request::kAppidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kGameitemidFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kAssociatedWorkshopFilesFieldNumber;
const int CWorkshop_SetItemPaymentRules_Request::kPartnerAccountsFieldNumber;
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_SetItemPaymentRules_Request)
}

void CWorkshop_SetItemPaymentRules_Request::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request)
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  gameitemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Request_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Request& CWorkshop_SetItemPaymentRules_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Request* CWorkshop_SetItemPaymentRules_Request::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Request* n = new CWorkshop_SetItemPaymentRules_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CWorkshop_SetItemPaymentRules_Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(appid_, gameitemid_);

#undef ZR_HELPER_
#undef ZR_

  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_SetItemPaymentRules_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_SetItemPaymentRules_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameitemid;
        break;
      }

      // optional uint32 gameitemid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameitemid_)));
          set_has_gameitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_associated_workshop_files;
        break;
      }

      // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3: {
        if (tag == 26) {
         parse_associated_workshop_files:
          DO_(input->IncrementRecursionDepth());
         parse_loop_associated_workshop_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_associated_workshop_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_associated_workshop_files;
        if (input->ExpectTag(34)) goto parse_loop_partner_accounts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_partner_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partner_accounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_partner_accounts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_SetItemPaymentRules_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_SetItemPaymentRules_Request)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_SetItemPaymentRules_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameitemid(), output);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0, n = this->associated_workshop_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->associated_workshop_files(i), output);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0, n = this->partner_accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partner_accounts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_SetItemPaymentRules_Request)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (has_gameitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameitemid(), target);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0, n = this->associated_workshop_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->associated_workshop_files(i), target);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0, n = this->partner_accounts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partner_accounts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request)
  return target;
}

int CWorkshop_SetItemPaymentRules_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 gameitemid = 2;
    if (has_gameitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameitemid());
    }

  }
  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  total_size += 1 * this->associated_workshop_files_size();
  for (int i = 0; i < this->associated_workshop_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->associated_workshop_files(i));
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  total_size += 1 * this->partner_accounts_size();
  for (int i = 0; i < this->partner_accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_accounts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_SetItemPaymentRules_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_gameitemid()) {
      set_gameitemid(from.gameitemid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Request::Swap(CWorkshop_SetItemPaymentRules_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Request::InternalSwap(CWorkshop_SetItemPaymentRules_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(gameitemid_, other->gameitemid_);
  associated_workshop_files_.UnsafeArenaSwap(&other->associated_workshop_files_);
  partner_accounts_.UnsafeArenaSwap(&other->partner_accounts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Request_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule

// optional uint64 workshop_file_id = 1;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_workshop_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_workshop_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_workshop_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_workshop_file_id() {
  workshop_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_workshop_file_id();
}
 ::google::protobuf::uint64 CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::workshop_file_id() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.workshop_file_id)
  return workshop_file_id_;
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_workshop_file_id(::google::protobuf::uint64 value) {
  set_has_workshop_file_id();
  workshop_file_id_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.workshop_file_id)
}

// optional float revenue_percentage = 2;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_revenue_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_revenue_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_revenue_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_revenue_percentage() {
  revenue_percentage_ = 0;
  clear_has_revenue_percentage();
}
 float CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::revenue_percentage() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.revenue_percentage)
  return revenue_percentage_;
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_revenue_percentage(float value) {
  set_has_revenue_percentage();
  revenue_percentage_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.revenue_percentage)
}

// optional string rule_description = 3;
bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::has_rule_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_has_rule_description() {
  _has_bits_[0] |= 0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_has_rule_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::clear_rule_description() {
  rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule_description();
}
 const ::std::string& CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::rule_description() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
  return rule_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const ::std::string& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const char* value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_rule_description(const char* value, size_t size) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}
 ::std::string* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::mutable_rule_description() {
  set_has_rule_description();
  // @@protoc_insertion_point(field_mutable:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
  return rule_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::release_rule_description() {
  clear_has_rule_description();
  return rule_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::set_allocated_rule_description(::std::string* rule_description) {
  if (rule_description != NULL) {
    set_has_rule_description();
  } else {
    clear_has_rule_description();
  }
  rule_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_description);
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description)
}

// -------------------------------------------------------------------

// CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule

// optional uint32 account_id = 1;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
 ::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::account_id() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.account_id)
  return account_id_;
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.account_id)
}

// optional float revenue_percentage = 2;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_revenue_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_revenue_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_revenue_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_revenue_percentage() {
  revenue_percentage_ = 0;
  clear_has_revenue_percentage();
}
 float CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::revenue_percentage() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.revenue_percentage)
  return revenue_percentage_;
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_revenue_percentage(float value) {
  set_has_revenue_percentage();
  revenue_percentage_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.revenue_percentage)
}

// optional string rule_description = 3;
bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::has_rule_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_has_rule_description() {
  _has_bits_[0] |= 0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_has_rule_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::clear_rule_description() {
  rule_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rule_description();
}
 const ::std::string& CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::rule_description() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
  return rule_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const ::std::string& value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const char* value) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_rule_description(const char* value, size_t size) {
  set_has_rule_description();
  rule_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}
 ::std::string* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::mutable_rule_description() {
  set_has_rule_description();
  // @@protoc_insertion_point(field_mutable:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
  return rule_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::release_rule_description() {
  clear_has_rule_description();
  return rule_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::set_allocated_rule_description(::std::string* rule_description) {
  if (rule_description != NULL) {
    set_has_rule_description();
  } else {
    clear_has_rule_description();
  }
  rule_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_description);
  // @@protoc_insertion_point(field_set_allocated:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description)
}

// -------------------------------------------------------------------

// CWorkshop_SetItemPaymentRules_Request

// optional uint32 appid = 1;
bool CWorkshop_SetItemPaymentRules_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
 ::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request::appid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.appid)
  return appid_;
}
 void CWorkshop_SetItemPaymentRules_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.appid)
}

// optional uint32 gameitemid = 2;
bool CWorkshop_SetItemPaymentRules_Request::has_gameitemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CWorkshop_SetItemPaymentRules_Request::set_has_gameitemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_has_gameitemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CWorkshop_SetItemPaymentRules_Request::clear_gameitemid() {
  gameitemid_ = 0u;
  clear_has_gameitemid();
}
 ::google::protobuf::uint32 CWorkshop_SetItemPaymentRules_Request::gameitemid() const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.gameitemid)
  return gameitemid_;
}
 void CWorkshop_SetItemPaymentRules_Request::set_gameitemid(::google::protobuf::uint32 value) {
  set_has_gameitemid();
  gameitemid_ = value;
  // @@protoc_insertion_point(field_set:CWorkshop_SetItemPaymentRules_Request.gameitemid)
}

// repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
int CWorkshop_SetItemPaymentRules_Request::associated_workshop_files_size() const {
  return associated_workshop_files_.size();
}
void CWorkshop_SetItemPaymentRules_Request::clear_associated_workshop_files() {
  associated_workshop_files_.Clear();
}
const ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& CWorkshop_SetItemPaymentRules_Request::associated_workshop_files(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Get(index);
}
::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::mutable_associated_workshop_files(int index) {
  // @@protoc_insertion_point(field_mutable:CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Mutable(index);
}
::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::add_associated_workshop_files() {
  // @@protoc_insertion_point(field_add:CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >*
CWorkshop_SetItemPaymentRules_Request::mutable_associated_workshop_files() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return &associated_workshop_files_;
}
const ::google::protobuf::RepeatedPtrField< ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >&
CWorkshop_SetItemPaymentRules_Request::associated_workshop_files() const {
  // @@protoc_insertion_point(field_list:CWorkshop_SetItemPaymentRules_Request.associated_workshop_files)
  return associated_workshop_files_;
}

// repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
int CWorkshop_SetItemPaymentRules_Request::partner_accounts_size() const {
  return partner_accounts_.size();
}
void CWorkshop_SetItemPaymentRules_Request::clear_partner_accounts() {
  partner_accounts_.Clear();
}
const ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& CWorkshop_SetItemPaymentRules_Request::partner_accounts(int index) const {
  // @@protoc_insertion_point(field_get:CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Get(index);
}
::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::mutable_partner_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Mutable(index);
}
::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* CWorkshop_SetItemPaymentRules_Request::add_partner_accounts() {
  // @@protoc_insertion_point(field_add:CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_.Add();
}
::google::protobuf::RepeatedPtrField< ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >*
CWorkshop_SetItemPaymentRules_Request::mutable_partner_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return &partner_accounts_;
}
const ::google::protobuf::RepeatedPtrField< ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >&
CWorkshop_SetItemPaymentRules_Request::partner_accounts() const {
  // @@protoc_insertion_point(field_list:CWorkshop_SetItemPaymentRules_Request.partner_accounts)
  return partner_accounts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorkshop_SetItemPaymentRules_Response)
}

void CWorkshop_SetItemPaymentRules_Response::InitAsDefaultInstance() {
}

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Response)
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Response)
  SharedDtor();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorkshop_SetItemPaymentRules_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorkshop_SetItemPaymentRules_Response_descriptor_;
}

const CWorkshop_SetItemPaymentRules_Response& CWorkshop_SetItemPaymentRules_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::default_instance_ = NULL;

CWorkshop_SetItemPaymentRules_Response* CWorkshop_SetItemPaymentRules_Response::New(::google::protobuf::Arena* arena) const {
  CWorkshop_SetItemPaymentRules_Response* n = new CWorkshop_SetItemPaymentRules_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorkshop_SetItemPaymentRules_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CWorkshop_SetItemPaymentRules_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorkshop_SetItemPaymentRules_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CWorkshop_SetItemPaymentRules_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorkshop_SetItemPaymentRules_Response)
  return false;
#undef DO_
}

void CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorkshop_SetItemPaymentRules_Response)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CWorkshop_SetItemPaymentRules_Response)
}

::google::protobuf::uint8* CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Response)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Response)
  return target;
}

int CWorkshop_SetItemPaymentRules_Response::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorkshop_SetItemPaymentRules_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorkshop_SetItemPaymentRules_Response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {

  return true;
}

void CWorkshop_SetItemPaymentRules_Response::Swap(CWorkshop_SetItemPaymentRules_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorkshop_SetItemPaymentRules_Response::InternalSwap(CWorkshop_SetItemPaymentRules_Response* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorkshop_SetItemPaymentRules_Response_descriptor_;
  metadata.reflection = CWorkshop_SetItemPaymentRules_Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorkshop_SetItemPaymentRules_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CBroadcast_PostGameDataFrame_Request::kAppidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kSteamidFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kBroadcastIdFieldNumber;
const int CBroadcast_PostGameDataFrame_Request::kFrameDataFieldNumber;
#endif  // !_MSC_VER

CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBroadcast_PostGameDataFrame_Request)
}

void CBroadcast_PostGameDataFrame_Request::InitAsDefaultInstance() {
}

CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(const CBroadcast_PostGameDataFrame_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostGameDataFrame_Request)
}

void CBroadcast_PostGameDataFrame_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  steamid_ = GOOGLE_ULONGLONG(0);
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  frame_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBroadcast_PostGameDataFrame_Request::~CBroadcast_PostGameDataFrame_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostGameDataFrame_Request)
  SharedDtor();
}

void CBroadcast_PostGameDataFrame_Request::SharedDtor() {
  frame_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CBroadcast_PostGameDataFrame_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_PostGameDataFrame_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBroadcast_PostGameDataFrame_Request_descriptor_;
}

const CBroadcast_PostGameDataFrame_Request& CBroadcast_PostGameDataFrame_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gcsdk_5fgcmessages_2eproto();
  return *default_instance_;
}

CBroadcast_PostGameDataFrame_Request* CBroadcast_PostGameDataFrame_Request::default_instance_ = NULL;

CBroadcast_PostGameDataFrame_Request* CBroadcast_PostGameDataFrame_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_PostGameDataFrame_Request* n = new CBroadcast_PostGameDataFrame_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_PostGameDataFrame_Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CBroadcast_PostGameDataFrame_Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(steamid_, broadcast_id_);
    appid_ = 0u;
    if (has_frame_data()) {
      frame_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CBroadcast_PostGameDataFrame_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBroadcast_PostGameDataFrame_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (tag == 17) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_broadcast_id;
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (tag == 25) {
         parse_broadcast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
          set_has_broadcast_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frame_data;
        break;
      }

      // optional bytes frame_data = 4;
      case 4: {
        if (tag == 34) {
         parse_frame_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBroadcast_PostGameDataFrame_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBroadcast_PostGameDataFrame_Request)
  return false;
#undef DO_
}

void CBroadcast_PostGameDataFrame_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBroadcast_PostGameDataFrame_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional bytes frame_data = 4;
  if (has_frame_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->frame_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBroadcast_PostGameDataFrame_Request)
}

::google::protobuf::uint8* CBroadcast_PostGameDataFrame_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostGameDataFrame_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (has_broadcast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional bytes frame_data = 4;
  if (has_frame_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->frame_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostGameDataFrame_Request)
  return target;
}

int CBroadcast_PostGameDataFrame_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 3;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional bytes frame_data = 4;
    if (has_frame_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CBroadcast_PostGameDataFrame_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostGameDataFrame_Request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const CBroadcast_PostGameDataFrame_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_frame_data()) {
      set_has_frame_data();
      frame_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const CBroadcast_PostGameDataFrame_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostGameDataFrame_Request::IsInitialized() const {

  return true;
}

void CBroadcast_PostGameDataFrame_Request::Swap(CBroadcast_PostGameDataFrame_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostGameDataFrame_Request::InternalSwap(CBroadcast_PostGameDataFrame_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(steamid_, other->steamid_);
  std::swap(broadcast_id_, other->broadcast_id_);
  frame_data_.Swap(&other->frame_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_PostGameDataFrame_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBroadcast_PostGameDataFrame_Request_descriptor_;
  metadata.reflection = CBroadcast_PostGameDataFrame_Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_PostGameDataFrame_Request

// optional uint32 appid = 1;
bool CBroadcast_PostGameDataFrame_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_PostGameDataFrame_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
 ::google::protobuf::uint32 CBroadcast_PostGameDataFrame_Request::appid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostGameDataFrame_Request.appid)
  return appid_;
}
 void CBroadcast_PostGameDataFrame_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CBroadcast_PostGameDataFrame_Request.appid)
}

// optional fixed64 steamid = 2;
bool CBroadcast_PostGameDataFrame_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_PostGameDataFrame_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
 ::google::protobuf::uint64 CBroadcast_PostGameDataFrame_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostGameDataFrame_Request.steamid)
  return steamid_;
}
 void CBroadcast_PostGameDataFrame_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CBroadcast_PostGameDataFrame_Request.steamid)
}

// optional fixed64 broadcast_id = 3;
bool CBroadcast_PostGameDataFrame_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_PostGameDataFrame_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
 ::google::protobuf::uint64 CBroadcast_PostGameDataFrame_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostGameDataFrame_Request.broadcast_id)
  return broadcast_id_;
}
 void CBroadcast_PostGameDataFrame_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:CBroadcast_PostGameDataFrame_Request.broadcast_id)
}

// optional bytes frame_data = 4;
bool CBroadcast_PostGameDataFrame_Request::has_frame_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_PostGameDataFrame_Request::set_has_frame_data() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_PostGameDataFrame_Request::clear_has_frame_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_PostGameDataFrame_Request::clear_frame_data() {
  frame_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_data();
}
 const ::std::string& CBroadcast_PostGameDataFrame_Request::frame_data() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostGameDataFrame_Request.frame_data)
  return frame_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CBroadcast_PostGameDataFrame_Request::set_frame_data(const ::std::string& value) {
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostGameDataFrame_Request.frame_data)
}
 void CBroadcast_PostGameDataFrame_Request::set_frame_data(const char* value) {
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBroadcast_PostGameDataFrame_Request.frame_data)
}
 void CBroadcast_PostGameDataFrame_Request::set_frame_data(const void* value, size_t size) {
  set_has_frame_data();
  frame_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBroadcast_PostGameDataFrame_Request.frame_data)
}
 ::std::string* CBroadcast_PostGameDataFrame_Request::mutable_frame_data() {
  set_has_frame_data();
  // @@protoc_insertion_point(field_mutable:CBroadcast_PostGameDataFrame_Request.frame_data)
  return frame_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CBroadcast_PostGameDataFrame_Request::release_frame_data() {
  clear_has_frame_data();
  return frame_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CBroadcast_PostGameDataFrame_Request::set_allocated_frame_data(::std::string* frame_data) {
  if (frame_data != NULL) {
    set_has_frame_data();
  } else {
    clear_has_frame_data();
  }
  frame_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_data);
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_PostGameDataFrame_Request.frame_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
