// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networksystem_protomessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "networksystem_protomessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetMessageSplitscreenUserChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessageSplitscreenUserChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetMessageConnectionClosed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessageConnectionClosed_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetMessageConnectionCrashed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessageConnectionCrashed_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetMessagePacketStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessagePacketStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetMessagePacketEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetMessagePacketEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_networksystem_5fprotomessages_2eproto() {
  protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "networksystem_protomessages.proto");
  GOOGLE_CHECK(file != NULL);
  NetMessageSplitscreenUserChanged_descriptor_ = file->message_type(0);
  static const int NetMessageSplitscreenUserChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageSplitscreenUserChanged, slot_),
  };
  NetMessageSplitscreenUserChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessageSplitscreenUserChanged_descriptor_,
      NetMessageSplitscreenUserChanged::default_instance_,
      NetMessageSplitscreenUserChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageSplitscreenUserChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageSplitscreenUserChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessageSplitscreenUserChanged));
  NetMessageConnectionClosed_descriptor_ = file->message_type(1);
  static const int NetMessageConnectionClosed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionClosed, reason_),
  };
  NetMessageConnectionClosed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessageConnectionClosed_descriptor_,
      NetMessageConnectionClosed::default_instance_,
      NetMessageConnectionClosed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionClosed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionClosed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessageConnectionClosed));
  NetMessageConnectionCrashed_descriptor_ = file->message_type(2);
  static const int NetMessageConnectionCrashed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionCrashed, reason_),
  };
  NetMessageConnectionCrashed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessageConnectionCrashed_descriptor_,
      NetMessageConnectionCrashed::default_instance_,
      NetMessageConnectionCrashed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionCrashed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessageConnectionCrashed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessageConnectionCrashed));
  NetMessagePacketStart_descriptor_ = file->message_type(3);
  static const int NetMessagePacketStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketStart, incoming_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketStart, outgoing_acknowledged_),
  };
  NetMessagePacketStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessagePacketStart_descriptor_,
      NetMessagePacketStart::default_instance_,
      NetMessagePacketStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessagePacketStart));
  NetMessagePacketEnd_descriptor_ = file->message_type(4);
  static const int NetMessagePacketEnd_offsets_[1] = {
  };
  NetMessagePacketEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetMessagePacketEnd_descriptor_,
      NetMessagePacketEnd::default_instance_,
      NetMessagePacketEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetMessagePacketEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetMessagePacketEnd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_networksystem_5fprotomessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessageSplitscreenUserChanged_descriptor_, &NetMessageSplitscreenUserChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessageConnectionClosed_descriptor_, &NetMessageConnectionClosed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessageConnectionCrashed_descriptor_, &NetMessageConnectionCrashed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessagePacketStart_descriptor_, &NetMessagePacketStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetMessagePacketEnd_descriptor_, &NetMessagePacketEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_networksystem_5fprotomessages_2eproto() {
  delete NetMessageSplitscreenUserChanged::default_instance_;
  delete NetMessageSplitscreenUserChanged_reflection_;
  delete NetMessageConnectionClosed::default_instance_;
  delete NetMessageConnectionClosed_reflection_;
  delete NetMessageConnectionCrashed::default_instance_;
  delete NetMessageConnectionCrashed_reflection_;
  delete NetMessagePacketStart::default_instance_;
  delete NetMessagePacketStart_reflection_;
  delete NetMessagePacketEnd::default_instance_;
  delete NetMessagePacketEnd_reflection_;
}

void protobuf_AddDesc_networksystem_5fprotomessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!networksystem_protomessages.proto\"0\n N"
    "etMessageSplitscreenUserChanged\022\014\n\004slot\030"
    "\001 \001(\r\",\n\032NetMessageConnectionClosed\022\016\n\006r"
    "eason\030\001 \001(\r\"-\n\033NetMessageConnectionCrash"
    "ed\022\016\n\006reason\030\001 \001(\r\"Q\n\025NetMessagePacketSt"
    "art\022\031\n\021incoming_sequence\030\001 \001(\r\022\035\n\025outgoi"
    "ng_acknowledged\030\002 \001(\r\"\025\n\023NetMessagePacke"
    "tEndB\003\200\001\000", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networksystem_protomessages.proto", &protobuf_RegisterTypes);
  NetMessageSplitscreenUserChanged::default_instance_ = new NetMessageSplitscreenUserChanged();
  NetMessageConnectionClosed::default_instance_ = new NetMessageConnectionClosed();
  NetMessageConnectionCrashed::default_instance_ = new NetMessageConnectionCrashed();
  NetMessagePacketStart::default_instance_ = new NetMessagePacketStart();
  NetMessagePacketEnd::default_instance_ = new NetMessagePacketEnd();
  NetMessageSplitscreenUserChanged::default_instance_->InitAsDefaultInstance();
  NetMessageConnectionClosed::default_instance_->InitAsDefaultInstance();
  NetMessageConnectionCrashed::default_instance_->InitAsDefaultInstance();
  NetMessagePacketStart::default_instance_->InitAsDefaultInstance();
  NetMessagePacketEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_networksystem_5fprotomessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_networksystem_5fprotomessages_2eproto {
  StaticDescriptorInitializer_networksystem_5fprotomessages_2eproto() {
    protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  }
} static_descriptor_initializer_networksystem_5fprotomessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetMessageSplitscreenUserChanged::kSlotFieldNumber;
#endif  // !_MSC_VER

NetMessageSplitscreenUserChanged::NetMessageSplitscreenUserChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessageSplitscreenUserChanged)
}

void NetMessageSplitscreenUserChanged::InitAsDefaultInstance() {
}

NetMessageSplitscreenUserChanged::NetMessageSplitscreenUserChanged(const NetMessageSplitscreenUserChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessageSplitscreenUserChanged)
}

void NetMessageSplitscreenUserChanged::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessageSplitscreenUserChanged::~NetMessageSplitscreenUserChanged() {
  // @@protoc_insertion_point(destructor:NetMessageSplitscreenUserChanged)
  SharedDtor();
}

void NetMessageSplitscreenUserChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetMessageSplitscreenUserChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessageSplitscreenUserChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessageSplitscreenUserChanged_descriptor_;
}

const NetMessageSplitscreenUserChanged& NetMessageSplitscreenUserChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  return *default_instance_;
}

NetMessageSplitscreenUserChanged* NetMessageSplitscreenUserChanged::default_instance_ = NULL;

NetMessageSplitscreenUserChanged* NetMessageSplitscreenUserChanged::New() const {
  return new NetMessageSplitscreenUserChanged;
}

void NetMessageSplitscreenUserChanged::Clear() {
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessageSplitscreenUserChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessageSplitscreenUserChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessageSplitscreenUserChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessageSplitscreenUserChanged)
  return false;
#undef DO_
}

void NetMessageSplitscreenUserChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessageSplitscreenUserChanged)
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMessageSplitscreenUserChanged)
}

::google::protobuf::uint8* NetMessageSplitscreenUserChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageSplitscreenUserChanged)
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageSplitscreenUserChanged)
  return target;
}

int NetMessageSplitscreenUserChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessageSplitscreenUserChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessageSplitscreenUserChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessageSplitscreenUserChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessageSplitscreenUserChanged::MergeFrom(const NetMessageSplitscreenUserChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessageSplitscreenUserChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageSplitscreenUserChanged::CopyFrom(const NetMessageSplitscreenUserChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageSplitscreenUserChanged::IsInitialized() const {

  return true;
}

void NetMessageSplitscreenUserChanged::Swap(NetMessageSplitscreenUserChanged* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessageSplitscreenUserChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessageSplitscreenUserChanged_descriptor_;
  metadata.reflection = NetMessageSplitscreenUserChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetMessageConnectionClosed::kReasonFieldNumber;
#endif  // !_MSC_VER

NetMessageConnectionClosed::NetMessageConnectionClosed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessageConnectionClosed)
}

void NetMessageConnectionClosed::InitAsDefaultInstance() {
}

NetMessageConnectionClosed::NetMessageConnectionClosed(const NetMessageConnectionClosed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessageConnectionClosed)
}

void NetMessageConnectionClosed::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessageConnectionClosed::~NetMessageConnectionClosed() {
  // @@protoc_insertion_point(destructor:NetMessageConnectionClosed)
  SharedDtor();
}

void NetMessageConnectionClosed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetMessageConnectionClosed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessageConnectionClosed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessageConnectionClosed_descriptor_;
}

const NetMessageConnectionClosed& NetMessageConnectionClosed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  return *default_instance_;
}

NetMessageConnectionClosed* NetMessageConnectionClosed::default_instance_ = NULL;

NetMessageConnectionClosed* NetMessageConnectionClosed::New() const {
  return new NetMessageConnectionClosed;
}

void NetMessageConnectionClosed::Clear() {
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessageConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessageConnectionClosed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessageConnectionClosed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessageConnectionClosed)
  return false;
#undef DO_
}

void NetMessageConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessageConnectionClosed)
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMessageConnectionClosed)
}

::google::protobuf::uint8* NetMessageConnectionClosed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageConnectionClosed)
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageConnectionClosed)
  return target;
}

int NetMessageConnectionClosed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessageConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessageConnectionClosed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessageConnectionClosed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessageConnectionClosed::MergeFrom(const NetMessageConnectionClosed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessageConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageConnectionClosed::CopyFrom(const NetMessageConnectionClosed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageConnectionClosed::IsInitialized() const {

  return true;
}

void NetMessageConnectionClosed::Swap(NetMessageConnectionClosed* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessageConnectionClosed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessageConnectionClosed_descriptor_;
  metadata.reflection = NetMessageConnectionClosed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetMessageConnectionCrashed::kReasonFieldNumber;
#endif  // !_MSC_VER

NetMessageConnectionCrashed::NetMessageConnectionCrashed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessageConnectionCrashed)
}

void NetMessageConnectionCrashed::InitAsDefaultInstance() {
}

NetMessageConnectionCrashed::NetMessageConnectionCrashed(const NetMessageConnectionCrashed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessageConnectionCrashed)
}

void NetMessageConnectionCrashed::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessageConnectionCrashed::~NetMessageConnectionCrashed() {
  // @@protoc_insertion_point(destructor:NetMessageConnectionCrashed)
  SharedDtor();
}

void NetMessageConnectionCrashed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetMessageConnectionCrashed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessageConnectionCrashed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessageConnectionCrashed_descriptor_;
}

const NetMessageConnectionCrashed& NetMessageConnectionCrashed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  return *default_instance_;
}

NetMessageConnectionCrashed* NetMessageConnectionCrashed::default_instance_ = NULL;

NetMessageConnectionCrashed* NetMessageConnectionCrashed::New() const {
  return new NetMessageConnectionCrashed;
}

void NetMessageConnectionCrashed::Clear() {
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessageConnectionCrashed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessageConnectionCrashed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessageConnectionCrashed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessageConnectionCrashed)
  return false;
#undef DO_
}

void NetMessageConnectionCrashed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessageConnectionCrashed)
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMessageConnectionCrashed)
}

::google::protobuf::uint8* NetMessageConnectionCrashed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageConnectionCrashed)
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageConnectionCrashed)
  return target;
}

int NetMessageConnectionCrashed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessageConnectionCrashed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessageConnectionCrashed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessageConnectionCrashed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessageConnectionCrashed::MergeFrom(const NetMessageConnectionCrashed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessageConnectionCrashed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageConnectionCrashed::CopyFrom(const NetMessageConnectionCrashed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageConnectionCrashed::IsInitialized() const {

  return true;
}

void NetMessageConnectionCrashed::Swap(NetMessageConnectionCrashed* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessageConnectionCrashed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessageConnectionCrashed_descriptor_;
  metadata.reflection = NetMessageConnectionCrashed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetMessagePacketStart::kIncomingSequenceFieldNumber;
const int NetMessagePacketStart::kOutgoingAcknowledgedFieldNumber;
#endif  // !_MSC_VER

NetMessagePacketStart::NetMessagePacketStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessagePacketStart)
}

void NetMessagePacketStart::InitAsDefaultInstance() {
}

NetMessagePacketStart::NetMessagePacketStart(const NetMessagePacketStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessagePacketStart)
}

void NetMessagePacketStart::SharedCtor() {
  _cached_size_ = 0;
  incoming_sequence_ = 0u;
  outgoing_acknowledged_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessagePacketStart::~NetMessagePacketStart() {
  // @@protoc_insertion_point(destructor:NetMessagePacketStart)
  SharedDtor();
}

void NetMessagePacketStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetMessagePacketStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessagePacketStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessagePacketStart_descriptor_;
}

const NetMessagePacketStart& NetMessagePacketStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  return *default_instance_;
}

NetMessagePacketStart* NetMessagePacketStart::default_instance_ = NULL;

NetMessagePacketStart* NetMessagePacketStart::New() const {
  return new NetMessagePacketStart;
}

void NetMessagePacketStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetMessagePacketStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(incoming_sequence_, outgoing_acknowledged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessagePacketStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessagePacketStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 incoming_sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_sequence_)));
          set_has_incoming_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_outgoing_acknowledged;
        break;
      }

      // optional uint32 outgoing_acknowledged = 2;
      case 2: {
        if (tag == 16) {
         parse_outgoing_acknowledged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outgoing_acknowledged_)));
          set_has_outgoing_acknowledged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessagePacketStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessagePacketStart)
  return false;
#undef DO_
}

void NetMessagePacketStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessagePacketStart)
  // optional uint32 incoming_sequence = 1;
  if (has_incoming_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->incoming_sequence(), output);
  }

  // optional uint32 outgoing_acknowledged = 2;
  if (has_outgoing_acknowledged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->outgoing_acknowledged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMessagePacketStart)
}

::google::protobuf::uint8* NetMessagePacketStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessagePacketStart)
  // optional uint32 incoming_sequence = 1;
  if (has_incoming_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->incoming_sequence(), target);
  }

  // optional uint32 outgoing_acknowledged = 2;
  if (has_outgoing_acknowledged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->outgoing_acknowledged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessagePacketStart)
  return target;
}

int NetMessagePacketStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 incoming_sequence = 1;
    if (has_incoming_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_sequence());
    }

    // optional uint32 outgoing_acknowledged = 2;
    if (has_outgoing_acknowledged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outgoing_acknowledged());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessagePacketStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessagePacketStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessagePacketStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessagePacketStart::MergeFrom(const NetMessagePacketStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incoming_sequence()) {
      set_incoming_sequence(from.incoming_sequence());
    }
    if (from.has_outgoing_acknowledged()) {
      set_outgoing_acknowledged(from.outgoing_acknowledged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessagePacketStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessagePacketStart::CopyFrom(const NetMessagePacketStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessagePacketStart::IsInitialized() const {

  return true;
}

void NetMessagePacketStart::Swap(NetMessagePacketStart* other) {
  if (other != this) {
    std::swap(incoming_sequence_, other->incoming_sequence_);
    std::swap(outgoing_acknowledged_, other->outgoing_acknowledged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessagePacketStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessagePacketStart_descriptor_;
  metadata.reflection = NetMessagePacketStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NetMessagePacketEnd::NetMessagePacketEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessagePacketEnd)
}

void NetMessagePacketEnd::InitAsDefaultInstance() {
}

NetMessagePacketEnd::NetMessagePacketEnd(const NetMessagePacketEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessagePacketEnd)
}

void NetMessagePacketEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetMessagePacketEnd::~NetMessagePacketEnd() {
  // @@protoc_insertion_point(destructor:NetMessagePacketEnd)
  SharedDtor();
}

void NetMessagePacketEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetMessagePacketEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetMessagePacketEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetMessagePacketEnd_descriptor_;
}

const NetMessagePacketEnd& NetMessagePacketEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networksystem_5fprotomessages_2eproto();
  return *default_instance_;
}

NetMessagePacketEnd* NetMessagePacketEnd::default_instance_ = NULL;

NetMessagePacketEnd* NetMessagePacketEnd::New() const {
  return new NetMessagePacketEnd;
}

void NetMessagePacketEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetMessagePacketEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessagePacketEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessagePacketEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessagePacketEnd)
  return false;
#undef DO_
}

void NetMessagePacketEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessagePacketEnd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetMessagePacketEnd)
}

::google::protobuf::uint8* NetMessagePacketEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessagePacketEnd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessagePacketEnd)
  return target;
}

int NetMessagePacketEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetMessagePacketEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetMessagePacketEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetMessagePacketEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetMessagePacketEnd::MergeFrom(const NetMessagePacketEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetMessagePacketEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessagePacketEnd::CopyFrom(const NetMessagePacketEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessagePacketEnd::IsInitialized() const {

  return true;
}

void NetMessagePacketEnd::Swap(NetMessagePacketEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetMessagePacketEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetMessagePacketEnd_descriptor_;
  metadata.reflection = NetMessagePacketEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
