// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rendermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rendermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgBeginFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBeginFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEndFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEndFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClearBackbuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClearBackbuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDeleteTexture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDeleteTexture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDeletePanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDeletePanel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDeleteParticleSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDeleteParticleSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMatrix4x4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMatrix4x4_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRadiusData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRadiusData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRadiusData_CCornerRadius_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRadiusData_CCornerRadius_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBorderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBorderData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBorderData_CBorderSide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBorderData_CBorderSide_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBoxShadowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBoxShadowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTextShadowData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTextShadowData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRadialClipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRadialClipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPushCompositingLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPushCompositingLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopCompositingLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopCompositingLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFreeCompositingLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFreeCompositingLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTransitionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTransitionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAnimationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAnimationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPointWithTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPointWithTransition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPointWithTransition_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPointWithTransition_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgColor_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgColor_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgColorStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgColorStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLinearGradient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLinearGradient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRadialGradient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRadialGradient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgParticleSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgParticleSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFillBrush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFillBrush_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFillBrushCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFillBrushCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFillBrushCollection_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFillBrushCollection_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderFillBrushCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderFillBrushCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPanelPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPanelPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPanelPosition_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPanelPosition_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpacity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpacity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpacity_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpacity_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRotate2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRotate2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRotate2D_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRotate2D_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpacityMaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpacityMaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpacityMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpacityMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgOpacityMask_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgOpacityMask_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHueShift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHueShift_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgHueShift_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHueShift_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSaturation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSaturation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSaturation_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSaturation_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrightness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrightness_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBrightness_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBrightness_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgContrast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgContrast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgContrast_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgContrast_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGaussianValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGaussianValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGaussianBlur_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGaussianBlur_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGaussianBlur_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGaussianBlur_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformPerspective_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformPerspective_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformPerspective_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformPerspective_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformPerspectiveOrigin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformPerspectiveOrigin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformPerspectiveOrigin_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTransformOriginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTransformOriginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformOrigin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformOrigin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformOrigin_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformOrigin_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsg3DTransformMatrix_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsg3DTransformMatrix_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBorderRadius_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBorderRadius_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBorderRadius_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBorderRadius_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBorder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBorder_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBorder_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBorder_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBoxShadow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBoxShadow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBoxShadow_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBoxShadow_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTextShadow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTextShadow_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTextShadow_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTextShadow_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClip_AnimationFrameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClip_AnimationFrameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPushClipLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPushClipLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopClipLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopClipLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPushPanelContextInLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPushPanelContextInLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopPanelContextInLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopPanelContextInLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPushAAndTContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPushAAndTContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPopAAndTContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPopAAndTContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBeginPaintBackground_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBeginPaintBackground_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEndPaintBackground_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEndPaintBackground_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBeginPaintLast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBeginPaintLast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgEndPaintLast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgEndPaintLast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDrawFilledRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDrawFilledRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderFilledRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderFilledRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDrawTexturedRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDrawTexturedRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderTexturedRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderTexturedRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgLockTexture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgLockTexture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTextInlineObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTextInlineObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTextFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTextFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTextRangeFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTextRangeFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderTextFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderTextFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderTextRangeFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderTextRangeFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDrawTextRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDrawTextRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRenderTextRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRenderTextRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgRequestRenderCallback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgRequestRenderCallback_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rendermessages_2eproto() {
  protobuf_AddDesc_rendermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rendermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgBeginFrame_descriptor_ = file->message_type(0);
  static const int CMsgBeginFrame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, frame_paint_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, surface_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, surface_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, render_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, ui_scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, empty_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, clear_gpu_resources_before_frame_),
  };
  CMsgBeginFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBeginFrame_descriptor_,
      CMsgBeginFrame::default_instance_,
      CMsgBeginFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBeginFrame));
  CMsgEndFrame_descriptor_ = file->message_type(1);
  static const int CMsgEndFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndFrame, mouse_cursor_texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndFrame, mouse_cursor_hotspot_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndFrame, mouse_cursor_hotspot_y_),
  };
  CMsgEndFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEndFrame_descriptor_,
      CMsgEndFrame::default_instance_,
      CMsgEndFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEndFrame));
  CMsgClearBackbuffer_descriptor_ = file->message_type(2);
  static const int CMsgClearBackbuffer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearBackbuffer, clear_color_rgba_),
  };
  CMsgClearBackbuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClearBackbuffer_descriptor_,
      CMsgClearBackbuffer::default_instance_,
      CMsgClearBackbuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearBackbuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearBackbuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClearBackbuffer));
  CMsgDeleteTexture_descriptor_ = file->message_type(3);
  static const int CMsgDeleteTexture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteTexture, texture_pointer_),
  };
  CMsgDeleteTexture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDeleteTexture_descriptor_,
      CMsgDeleteTexture::default_instance_,
      CMsgDeleteTexture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteTexture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteTexture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDeleteTexture));
  CMsgDeletePanel_descriptor_ = file->message_type(4);
  static const int CMsgDeletePanel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeletePanel, context_id_),
  };
  CMsgDeletePanel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDeletePanel_descriptor_,
      CMsgDeletePanel::default_instance_,
      CMsgDeletePanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeletePanel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeletePanel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDeletePanel));
  CMsgDeleteParticleSystem_descriptor_ = file->message_type(5);
  static const int CMsgDeleteParticleSystem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteParticleSystem, panel_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteParticleSystem, brush_index_),
  };
  CMsgDeleteParticleSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDeleteParticleSystem_descriptor_,
      CMsgDeleteParticleSystem::default_instance_,
      CMsgDeleteParticleSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteParticleSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDeleteParticleSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDeleteParticleSystem));
  CMsgPoint_descriptor_ = file->message_type(6);
  static const int CMsgPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoint, z_),
  };
  CMsgPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPoint_descriptor_,
      CMsgPoint::default_instance_,
      CMsgPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPoint));
  CMsgMatrix4x4_descriptor_ = file->message_type(7);
  static const int CMsgMatrix4x4_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m30_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, m33_),
  };
  CMsgMatrix4x4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMatrix4x4_descriptor_,
      CMsgMatrix4x4::default_instance_,
      CMsgMatrix4x4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMatrix4x4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMatrix4x4));
  CRadiusData_descriptor_ = file->message_type(8);
  static const int CRadiusData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, top_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, bottom_left_),
  };
  CRadiusData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRadiusData_descriptor_,
      CRadiusData::default_instance_,
      CRadiusData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRadiusData));
  CRadiusData_CCornerRadius_descriptor_ = CRadiusData_descriptor_->nested_type(0);
  static const int CRadiusData_CCornerRadius_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData_CCornerRadius, horizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData_CCornerRadius, vertical_),
  };
  CRadiusData_CCornerRadius_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRadiusData_CCornerRadius_descriptor_,
      CRadiusData_CCornerRadius::default_instance_,
      CRadiusData_CCornerRadius_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData_CCornerRadius, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadiusData_CCornerRadius, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRadiusData_CCornerRadius));
  CBorderData_descriptor_ = file->message_type(9);
  static const int CBorderData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, left_),
  };
  CBorderData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBorderData_descriptor_,
      CBorderData::default_instance_,
      CBorderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBorderData));
  CBorderData_CBorderSide_descriptor_ = CBorderData_descriptor_->nested_type(0);
  static const int CBorderData_CBorderSide_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData_CBorderSide, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData_CBorderSide, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData_CBorderSide, color_),
  };
  CBorderData_CBorderSide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBorderData_CBorderSide_descriptor_,
      CBorderData_CBorderSide::default_instance_,
      CBorderData_CBorderSide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData_CBorderSide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBorderData_CBorderSide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBorderData_CBorderSide));
  CBoxShadowData_descriptor_ = file->message_type(10);
  static const int CBoxShadowData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, inset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, horizontal_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, vertical_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, blur_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, spread_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, animating_),
  };
  CBoxShadowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBoxShadowData_descriptor_,
      CBoxShadowData::default_instance_,
      CBoxShadowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBoxShadowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBoxShadowData));
  CTextShadowData_descriptor_ = file->message_type(11);
  static const int CTextShadowData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, horizontal_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, vertical_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, blur_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, animating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, strength_),
  };
  CTextShadowData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTextShadowData_descriptor_,
      CTextShadowData::default_instance_,
      CTextShadowData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTextShadowData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTextShadowData));
  CRadialClipData_descriptor_ = file->message_type(12);
  static const int CRadialClipData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, center_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, center_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, start_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, sector_angle_),
  };
  CRadialClipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRadialClipData_descriptor_,
      CRadialClipData::default_instance_,
      CRadialClipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRadialClipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRadialClipData));
  CMsgClipData_descriptor_ = file->message_type(13);
  static const int CMsgClipData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, rect_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, radial_clip_),
  };
  CMsgClipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClipData_descriptor_,
      CMsgClipData::default_instance_,
      CMsgClipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClipData));
  CMsgPushCompositingLayer_descriptor_ = file->message_type(14);
  static const int CMsgPushCompositingLayer_offsets_[61] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_left_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_left_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_left_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_right_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_right_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_top_right_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_left_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_left_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_left_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_right_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_right_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, layer_quad_bottom_right_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m30_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, transform_m33_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, perspective_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, composition_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, hue_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, opacity_mask_texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, opacity_mask_opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, border_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, box_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, gaussianblur_passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, gaussianblur_stddevhor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, gaussianblur_stddevver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, scale_2d_factors_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, scale_2d_factors_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, rotate_2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, needs_clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, needs_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, needs_intermediate_texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, needs_redraw_every_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, text_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, mix_blend_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, occluded_left_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, occluded_top_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, occluded_right_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, occluded_bottom_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, radial_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, composition_layer_texture_name_),
  };
  CMsgPushCompositingLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPushCompositingLayer_descriptor_,
      CMsgPushCompositingLayer::default_instance_,
      CMsgPushCompositingLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushCompositingLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPushCompositingLayer));
  CMsgPopCompositingLayer_descriptor_ = file->message_type(15);
  static const int CMsgPopCompositingLayer_offsets_[1] = {
  };
  CMsgPopCompositingLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopCompositingLayer_descriptor_,
      CMsgPopCompositingLayer::default_instance_,
      CMsgPopCompositingLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopCompositingLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopCompositingLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopCompositingLayer));
  CMsgFreeCompositingLayer_descriptor_ = file->message_type(16);
  static const int CMsgFreeCompositingLayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFreeCompositingLayer, layer_id_),
  };
  CMsgFreeCompositingLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFreeCompositingLayer_descriptor_,
      CMsgFreeCompositingLayer::default_instance_,
      CMsgFreeCompositingLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFreeCompositingLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFreeCompositingLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFreeCompositingLayer));
  CMsgTransitionData_descriptor_ = file->message_type(17);
  static const int CMsgTransitionData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, delay_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, duration_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, timing_func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, cubic_bezier_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, cubic_bezier_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, cubic_bezier_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, cubic_bezier_3_),
  };
  CMsgTransitionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTransitionData_descriptor_,
      CMsgTransitionData::default_instance_,
      CMsgTransitionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransitionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTransitionData));
  CMsgAnimationData_descriptor_ = file->message_type(18);
  static const int CMsgAnimationData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, delay_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, duration_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, timing_func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, cubic_bezier_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, cubic_bezier_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, cubic_bezier_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, cubic_bezier_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, frames_),
  };
  CMsgAnimationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAnimationData_descriptor_,
      CMsgAnimationData::default_instance_,
      CMsgAnimationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAnimationData));
  CMsgAnimationFrameData_descriptor_ = file->message_type(19);
  static const int CMsgAnimationFrameData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, timing_func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, cubic_bezier_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, cubic_bezier_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, cubic_bezier_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, cubic_bezier_3_),
  };
  CMsgAnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAnimationFrameData_descriptor_,
      CMsgAnimationFrameData::default_instance_,
      CMsgAnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAnimationFrameData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAnimationFrameData));
  CMsgPointWithTransition_descriptor_ = file->message_type(20);
  static const int CMsgPointWithTransition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, animations_),
  };
  CMsgPointWithTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPointWithTransition_descriptor_,
      CMsgPointWithTransition::default_instance_,
      CMsgPointWithTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPointWithTransition));
  CMsgPointWithTransition_AnimationFrameData_descriptor_ = CMsgPointWithTransition_descriptor_->nested_type(0);
  static const int CMsgPointWithTransition_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition_AnimationFrameData, data_),
  };
  CMsgPointWithTransition_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPointWithTransition_AnimationFrameData_descriptor_,
      CMsgPointWithTransition_AnimationFrameData::default_instance_,
      CMsgPointWithTransition_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPointWithTransition_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPointWithTransition_AnimationFrameData));
  CMsgColor_descriptor_ = file->message_type(21);
  static const int CMsgColor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, animations_),
  };
  CMsgColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgColor_descriptor_,
      CMsgColor::default_instance_,
      CMsgColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgColor));
  CMsgColor_AnimationFrameData_descriptor_ = CMsgColor_descriptor_->nested_type(0);
  static const int CMsgColor_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor_AnimationFrameData, data_),
  };
  CMsgColor_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgColor_AnimationFrameData_descriptor_,
      CMsgColor_AnimationFrameData::default_instance_,
      CMsgColor_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColor_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgColor_AnimationFrameData));
  CMsgColorStop_descriptor_ = file->message_type(22);
  static const int CMsgColorStop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColorStop, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColorStop, color_rgba_),
  };
  CMsgColorStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgColorStop_descriptor_,
      CMsgColorStop::default_instance_,
      CMsgColorStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColorStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgColorStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgColorStop));
  CMsgLinearGradient_descriptor_ = file->message_type(23);
  static const int CMsgLinearGradient_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinearGradient, start_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinearGradient, end_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinearGradient, color_stop_),
  };
  CMsgLinearGradient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLinearGradient_descriptor_,
      CMsgLinearGradient::default_instance_,
      CMsgLinearGradient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinearGradient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLinearGradient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLinearGradient));
  CMsgRadialGradient_descriptor_ = file->message_type(24);
  static const int CMsgRadialGradient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, center_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, offset_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, radii_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, color_stop_),
  };
  CMsgRadialGradient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRadialGradient_descriptor_,
      CMsgRadialGradient::default_instance_,
      CMsgRadialGradient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRadialGradient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRadialGradient));
  CMsgParticle_descriptor_ = file->message_type(25);
  static const int CMsgParticle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, particle_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, particle_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, particle_sharpness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, color_rgba_),
  };
  CMsgParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgParticle_descriptor_,
      CMsgParticle::default_instance_,
      CMsgParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgParticle));
  CMsgParticleSystem_descriptor_ = file->message_type(26);
  static const int CMsgParticleSystem_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, base_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, base_position_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_size_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particles_per_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particles_per_second_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_lifespan_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_lifespan_seconds_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_initial_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_initial_velocity_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, gravity_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, gravity_acceleration_particle_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, color_start_rgba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, color_start_rgba_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, color_end_rgba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, color_end_rgba_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, parent_panel_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, parent_brush_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_sharpness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_sharpness_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_flicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_flicker_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_velocity_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particle_velocity_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, particles_),
  };
  CMsgParticleSystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgParticleSystem_descriptor_,
      CMsgParticleSystem::default_instance_,
      CMsgParticleSystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgParticleSystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgParticleSystem));
  CMsgFillBrush_descriptor_ = file->message_type(27);
  static const int CMsgFillBrush_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, color_rgba_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, linear_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, radial_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, particle_system_),
  };
  CMsgFillBrush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFillBrush_descriptor_,
      CMsgFillBrush::default_instance_,
      CMsgFillBrush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFillBrush));
  CMsgFillBrushCollection_descriptor_ = file->message_type(28);
  static const int CMsgFillBrushCollection_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, animations_),
  };
  CMsgFillBrushCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFillBrushCollection_descriptor_,
      CMsgFillBrushCollection::default_instance_,
      CMsgFillBrushCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFillBrushCollection));
  CMsgFillBrushCollection_AnimationFrameData_descriptor_ = CMsgFillBrushCollection_descriptor_->nested_type(0);
  static const int CMsgFillBrushCollection_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection_AnimationFrameData, data_),
  };
  CMsgFillBrushCollection_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFillBrushCollection_AnimationFrameData_descriptor_,
      CMsgFillBrushCollection_AnimationFrameData::default_instance_,
      CMsgFillBrushCollection_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFillBrushCollection_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFillBrushCollection_AnimationFrameData));
  CMsgRenderFillBrushCollection_descriptor_ = file->message_type(29);
  static const int CMsgRenderFillBrushCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFillBrushCollection, fill_brush_),
  };
  CMsgRenderFillBrushCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderFillBrushCollection_descriptor_,
      CMsgRenderFillBrushCollection::default_instance_,
      CMsgRenderFillBrushCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFillBrushCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFillBrushCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderFillBrushCollection));
  CMsgPanelPosition_descriptor_ = file->message_type(30);
  static const int CMsgPanelPosition_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, animations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, scroll_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, scroll_offset_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, scroll_transition_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, scroll_transition_y_),
  };
  CMsgPanelPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPanelPosition_descriptor_,
      CMsgPanelPosition::default_instance_,
      CMsgPanelPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPanelPosition));
  CMsgPanelPosition_AnimationFrameData_descriptor_ = CMsgPanelPosition_descriptor_->nested_type(0);
  static const int CMsgPanelPosition_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition_AnimationFrameData, data_),
  };
  CMsgPanelPosition_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPanelPosition_AnimationFrameData_descriptor_,
      CMsgPanelPosition_AnimationFrameData::default_instance_,
      CMsgPanelPosition_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPanelPosition_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPanelPosition_AnimationFrameData));
  CMsgOpacity_descriptor_ = file->message_type(31);
  static const int CMsgOpacity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, animations_),
  };
  CMsgOpacity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpacity_descriptor_,
      CMsgOpacity::default_instance_,
      CMsgOpacity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpacity));
  CMsgOpacity_AnimationFrameData_descriptor_ = CMsgOpacity_descriptor_->nested_type(0);
  static const int CMsgOpacity_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity_AnimationFrameData, data_),
  };
  CMsgOpacity_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpacity_AnimationFrameData_descriptor_,
      CMsgOpacity_AnimationFrameData::default_instance_,
      CMsgOpacity_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacity_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpacity_AnimationFrameData));
  CMsgRotate2D_descriptor_ = file->message_type(32);
  static const int CMsgRotate2D_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, animations_),
  };
  CMsgRotate2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRotate2D_descriptor_,
      CMsgRotate2D::default_instance_,
      CMsgRotate2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRotate2D));
  CMsgRotate2D_AnimationFrameData_descriptor_ = CMsgRotate2D_descriptor_->nested_type(0);
  static const int CMsgRotate2D_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D_AnimationFrameData, data_),
  };
  CMsgRotate2D_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRotate2D_AnimationFrameData_descriptor_,
      CMsgRotate2D_AnimationFrameData::default_instance_,
      CMsgRotate2D_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRotate2D_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRotate2D_AnimationFrameData));
  CMsgOpacityMaskData_descriptor_ = file->message_type(33);
  static const int CMsgOpacityMaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMaskData, opacity_mask_texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMaskData, opacity_mask_opacity_),
  };
  CMsgOpacityMaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpacityMaskData_descriptor_,
      CMsgOpacityMaskData::default_instance_,
      CMsgOpacityMaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpacityMaskData));
  CMsgOpacityMask_descriptor_ = file->message_type(34);
  static const int CMsgOpacityMask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, animations_),
  };
  CMsgOpacityMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpacityMask_descriptor_,
      CMsgOpacityMask::default_instance_,
      CMsgOpacityMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpacityMask));
  CMsgOpacityMask_AnimationFrameData_descriptor_ = CMsgOpacityMask_descriptor_->nested_type(0);
  static const int CMsgOpacityMask_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask_AnimationFrameData, data_),
  };
  CMsgOpacityMask_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgOpacityMask_AnimationFrameData_descriptor_,
      CMsgOpacityMask_AnimationFrameData::default_instance_,
      CMsgOpacityMask_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgOpacityMask_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgOpacityMask_AnimationFrameData));
  CMsgHueShift_descriptor_ = file->message_type(35);
  static const int CMsgHueShift_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, animations_),
  };
  CMsgHueShift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHueShift_descriptor_,
      CMsgHueShift::default_instance_,
      CMsgHueShift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHueShift));
  CMsgHueShift_AnimationFrameData_descriptor_ = CMsgHueShift_descriptor_->nested_type(0);
  static const int CMsgHueShift_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift_AnimationFrameData, data_),
  };
  CMsgHueShift_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHueShift_AnimationFrameData_descriptor_,
      CMsgHueShift_AnimationFrameData::default_instance_,
      CMsgHueShift_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHueShift_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHueShift_AnimationFrameData));
  CMsgSaturation_descriptor_ = file->message_type(36);
  static const int CMsgSaturation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, animations_),
  };
  CMsgSaturation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSaturation_descriptor_,
      CMsgSaturation::default_instance_,
      CMsgSaturation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSaturation));
  CMsgSaturation_AnimationFrameData_descriptor_ = CMsgSaturation_descriptor_->nested_type(0);
  static const int CMsgSaturation_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation_AnimationFrameData, data_),
  };
  CMsgSaturation_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSaturation_AnimationFrameData_descriptor_,
      CMsgSaturation_AnimationFrameData::default_instance_,
      CMsgSaturation_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSaturation_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSaturation_AnimationFrameData));
  CMsgBrightness_descriptor_ = file->message_type(37);
  static const int CMsgBrightness_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, animations_),
  };
  CMsgBrightness_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrightness_descriptor_,
      CMsgBrightness::default_instance_,
      CMsgBrightness_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrightness));
  CMsgBrightness_AnimationFrameData_descriptor_ = CMsgBrightness_descriptor_->nested_type(0);
  static const int CMsgBrightness_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness_AnimationFrameData, data_),
  };
  CMsgBrightness_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBrightness_AnimationFrameData_descriptor_,
      CMsgBrightness_AnimationFrameData::default_instance_,
      CMsgBrightness_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBrightness_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBrightness_AnimationFrameData));
  CMsgContrast_descriptor_ = file->message_type(38);
  static const int CMsgContrast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, animations_),
  };
  CMsgContrast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgContrast_descriptor_,
      CMsgContrast::default_instance_,
      CMsgContrast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgContrast));
  CMsgContrast_AnimationFrameData_descriptor_ = CMsgContrast_descriptor_->nested_type(0);
  static const int CMsgContrast_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast_AnimationFrameData, data_),
  };
  CMsgContrast_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgContrast_AnimationFrameData_descriptor_,
      CMsgContrast_AnimationFrameData::default_instance_,
      CMsgContrast_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgContrast_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgContrast_AnimationFrameData));
  CMsgGaussianValues_descriptor_ = file->message_type(39);
  static const int CMsgGaussianValues_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianValues, passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianValues, stddev_hor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianValues, stddev_ver_),
  };
  CMsgGaussianValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGaussianValues_descriptor_,
      CMsgGaussianValues::default_instance_,
      CMsgGaussianValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGaussianValues));
  CMsgGaussianBlur_descriptor_ = file->message_type(40);
  static const int CMsgGaussianBlur_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, animations_),
  };
  CMsgGaussianBlur_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGaussianBlur_descriptor_,
      CMsgGaussianBlur::default_instance_,
      CMsgGaussianBlur_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGaussianBlur));
  CMsgGaussianBlur_AnimationFrameData_descriptor_ = CMsgGaussianBlur_descriptor_->nested_type(0);
  static const int CMsgGaussianBlur_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur_AnimationFrameData, data_),
  };
  CMsgGaussianBlur_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGaussianBlur_AnimationFrameData_descriptor_,
      CMsgGaussianBlur_AnimationFrameData::default_instance_,
      CMsgGaussianBlur_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGaussianBlur_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGaussianBlur_AnimationFrameData));
  CMsg3DTransformPerspective_descriptor_ = file->message_type(41);
  static const int CMsg3DTransformPerspective_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, animations_),
  };
  CMsg3DTransformPerspective_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformPerspective_descriptor_,
      CMsg3DTransformPerspective::default_instance_,
      CMsg3DTransformPerspective_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformPerspective));
  CMsg3DTransformPerspective_AnimationFrameData_descriptor_ = CMsg3DTransformPerspective_descriptor_->nested_type(0);
  static const int CMsg3DTransformPerspective_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective_AnimationFrameData, data_),
  };
  CMsg3DTransformPerspective_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformPerspective_AnimationFrameData_descriptor_,
      CMsg3DTransformPerspective_AnimationFrameData::default_instance_,
      CMsg3DTransformPerspective_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspective_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformPerspective_AnimationFrameData));
  CMsg3DTransformPerspectiveOrigin_descriptor_ = file->message_type(42);
  static const int CMsg3DTransformPerspectiveOrigin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, animations_),
  };
  CMsg3DTransformPerspectiveOrigin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformPerspectiveOrigin_descriptor_,
      CMsg3DTransformPerspectiveOrigin::default_instance_,
      CMsg3DTransformPerspectiveOrigin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformPerspectiveOrigin));
  CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_ = CMsg3DTransformPerspectiveOrigin_descriptor_->nested_type(0);
  static const int CMsg3DTransformPerspectiveOrigin_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin_AnimationFrameData, data_),
  };
  CMsg3DTransformPerspectiveOrigin_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_,
      CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance_,
      CMsg3DTransformPerspectiveOrigin_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformPerspectiveOrigin_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformPerspectiveOrigin_AnimationFrameData));
  CMsgTransformOriginData_descriptor_ = file->message_type(43);
  static const int CMsgTransformOriginData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, x_is_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, y_is_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, is_parent_relative_),
  };
  CMsgTransformOriginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTransformOriginData_descriptor_,
      CMsgTransformOriginData::default_instance_,
      CMsgTransformOriginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTransformOriginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTransformOriginData));
  CMsg3DTransformOrigin_descriptor_ = file->message_type(44);
  static const int CMsg3DTransformOrigin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, animations_),
  };
  CMsg3DTransformOrigin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformOrigin_descriptor_,
      CMsg3DTransformOrigin::default_instance_,
      CMsg3DTransformOrigin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformOrigin));
  CMsg3DTransformOrigin_AnimationFrameData_descriptor_ = CMsg3DTransformOrigin_descriptor_->nested_type(0);
  static const int CMsg3DTransformOrigin_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin_AnimationFrameData, data_),
  };
  CMsg3DTransformOrigin_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformOrigin_AnimationFrameData_descriptor_,
      CMsg3DTransformOrigin_AnimationFrameData::default_instance_,
      CMsg3DTransformOrigin_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformOrigin_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformOrigin_AnimationFrameData));
  CMsg3DTransformMatrix_descriptor_ = file->message_type(45);
  static const int CMsg3DTransformMatrix_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, animations_),
  };
  CMsg3DTransformMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformMatrix_descriptor_,
      CMsg3DTransformMatrix::default_instance_,
      CMsg3DTransformMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformMatrix));
  CMsg3DTransformMatrix_AnimationFrameData_descriptor_ = CMsg3DTransformMatrix_descriptor_->nested_type(0);
  static const int CMsg3DTransformMatrix_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix_AnimationFrameData, data_),
  };
  CMsg3DTransformMatrix_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsg3DTransformMatrix_AnimationFrameData_descriptor_,
      CMsg3DTransformMatrix_AnimationFrameData::default_instance_,
      CMsg3DTransformMatrix_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg3DTransformMatrix_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsg3DTransformMatrix_AnimationFrameData));
  CMsgBorderRadius_descriptor_ = file->message_type(46);
  static const int CMsgBorderRadius_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, animations_),
  };
  CMsgBorderRadius_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBorderRadius_descriptor_,
      CMsgBorderRadius::default_instance_,
      CMsgBorderRadius_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBorderRadius));
  CMsgBorderRadius_AnimationFrameData_descriptor_ = CMsgBorderRadius_descriptor_->nested_type(0);
  static const int CMsgBorderRadius_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius_AnimationFrameData, data_),
  };
  CMsgBorderRadius_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBorderRadius_AnimationFrameData_descriptor_,
      CMsgBorderRadius_AnimationFrameData::default_instance_,
      CMsgBorderRadius_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorderRadius_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBorderRadius_AnimationFrameData));
  CMsgBorder_descriptor_ = file->message_type(47);
  static const int CMsgBorder_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, animations_),
  };
  CMsgBorder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBorder_descriptor_,
      CMsgBorder::default_instance_,
      CMsgBorder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBorder));
  CMsgBorder_AnimationFrameData_descriptor_ = CMsgBorder_descriptor_->nested_type(0);
  static const int CMsgBorder_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder_AnimationFrameData, data_),
  };
  CMsgBorder_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBorder_AnimationFrameData_descriptor_,
      CMsgBorder_AnimationFrameData::default_instance_,
      CMsgBorder_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBorder_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBorder_AnimationFrameData));
  CMsgBoxShadow_descriptor_ = file->message_type(48);
  static const int CMsgBoxShadow_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, animations_),
  };
  CMsgBoxShadow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBoxShadow_descriptor_,
      CMsgBoxShadow::default_instance_,
      CMsgBoxShadow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBoxShadow));
  CMsgBoxShadow_AnimationFrameData_descriptor_ = CMsgBoxShadow_descriptor_->nested_type(0);
  static const int CMsgBoxShadow_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow_AnimationFrameData, data_),
  };
  CMsgBoxShadow_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBoxShadow_AnimationFrameData_descriptor_,
      CMsgBoxShadow_AnimationFrameData::default_instance_,
      CMsgBoxShadow_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBoxShadow_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBoxShadow_AnimationFrameData));
  CMsgTextShadow_descriptor_ = file->message_type(49);
  static const int CMsgTextShadow_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, animations_),
  };
  CMsgTextShadow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTextShadow_descriptor_,
      CMsgTextShadow::default_instance_,
      CMsgTextShadow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTextShadow));
  CMsgTextShadow_AnimationFrameData_descriptor_ = CMsgTextShadow_descriptor_->nested_type(0);
  static const int CMsgTextShadow_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow_AnimationFrameData, data_),
  };
  CMsgTextShadow_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTextShadow_AnimationFrameData_descriptor_,
      CMsgTextShadow_AnimationFrameData::default_instance_,
      CMsgTextShadow_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextShadow_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTextShadow_AnimationFrameData));
  CMsgClip_descriptor_ = file->message_type(50);
  static const int CMsgClip_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, transition_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, style_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, animations_),
  };
  CMsgClip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClip_descriptor_,
      CMsgClip::default_instance_,
      CMsgClip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClip));
  CMsgClip_AnimationFrameData_descriptor_ = CMsgClip_descriptor_->nested_type(0);
  static const int CMsgClip_AnimationFrameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip_AnimationFrameData, data_),
  };
  CMsgClip_AnimationFrameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClip_AnimationFrameData_descriptor_,
      CMsgClip_AnimationFrameData::default_instance_,
      CMsgClip_AnimationFrameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip_AnimationFrameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClip_AnimationFrameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClip_AnimationFrameData));
  CMsgPushClipLayer_descriptor_ = file->message_type(51);
  static const int CMsgPushClipLayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushClipLayer, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushClipLayer, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushClipLayer, border_radius_),
  };
  CMsgPushClipLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPushClipLayer_descriptor_,
      CMsgPushClipLayer::default_instance_,
      CMsgPushClipLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushClipLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushClipLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPushClipLayer));
  CMsgPopClipLayer_descriptor_ = file->message_type(52);
  static const int CMsgPopClipLayer_offsets_[1] = {
  };
  CMsgPopClipLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopClipLayer_descriptor_,
      CMsgPopClipLayer::default_instance_,
      CMsgPopClipLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopClipLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopClipLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopClipLayer));
  CMsgPushPanelContextInLayer_descriptor_ = file->message_type(53);
  static const int CMsgPushPanelContextInLayer_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m30_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, transform_m33_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, box_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, position_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, scroll_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, scroll_y_),
  };
  CMsgPushPanelContextInLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPushPanelContextInLayer_descriptor_,
      CMsgPushPanelContextInLayer::default_instance_,
      CMsgPushPanelContextInLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushPanelContextInLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPushPanelContextInLayer));
  CMsgPopPanelContextInLayer_descriptor_ = file->message_type(54);
  static const int CMsgPopPanelContextInLayer_offsets_[1] = {
  };
  CMsgPopPanelContextInLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopPanelContextInLayer_descriptor_,
      CMsgPopPanelContextInLayer::default_instance_,
      CMsgPopPanelContextInLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopPanelContextInLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopPanelContextInLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopPanelContextInLayer));
  CMsgPushAAndTContext_descriptor_ = file->message_type(55);
  static const int CMsgPushAAndTContext_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, chilren_have_3dtransforms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, zindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, panel_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, transform_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, transform_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, transform_perspective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, transform_perspective_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, wash_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, hue_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, opacity_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, border_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, gaussian_blur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, box_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, scale_2d_centered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, rotate_2d_centered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, text_shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, suppress_clip_to_bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, needs_full_repaint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, needs_intermediate_texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, clip_after_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, wants_hit_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, wants_hit_test_children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, mix_blend_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, opaque_background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, child_panel_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, wants_screenspace_quad_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, composition_layer_texture_name_),
  };
  CMsgPushAAndTContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPushAAndTContext_descriptor_,
      CMsgPushAAndTContext::default_instance_,
      CMsgPushAAndTContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPushAAndTContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPushAAndTContext));
  CMsgPopAAndTContext_descriptor_ = file->message_type(56);
  static const int CMsgPopAAndTContext_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopAAndTContext, context_id_),
  };
  CMsgPopAAndTContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPopAAndTContext_descriptor_,
      CMsgPopAAndTContext::default_instance_,
      CMsgPopAAndTContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopAAndTContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPopAAndTContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPopAAndTContext));
  CMsgBeginPaintBackground_descriptor_ = file->message_type(57);
  static const int CMsgBeginPaintBackground_offsets_[1] = {
  };
  CMsgBeginPaintBackground_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBeginPaintBackground_descriptor_,
      CMsgBeginPaintBackground::default_instance_,
      CMsgBeginPaintBackground_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginPaintBackground, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginPaintBackground, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBeginPaintBackground));
  CMsgEndPaintBackground_descriptor_ = file->message_type(58);
  static const int CMsgEndPaintBackground_offsets_[1] = {
  };
  CMsgEndPaintBackground_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEndPaintBackground_descriptor_,
      CMsgEndPaintBackground::default_instance_,
      CMsgEndPaintBackground_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndPaintBackground, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndPaintBackground, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEndPaintBackground));
  CMsgBeginPaintLast_descriptor_ = file->message_type(59);
  static const int CMsgBeginPaintLast_offsets_[1] = {
  };
  CMsgBeginPaintLast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBeginPaintLast_descriptor_,
      CMsgBeginPaintLast::default_instance_,
      CMsgBeginPaintLast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginPaintLast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBeginPaintLast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBeginPaintLast));
  CMsgEndPaintLast_descriptor_ = file->message_type(60);
  static const int CMsgEndPaintLast_offsets_[1] = {
  };
  CMsgEndPaintLast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgEndPaintLast_descriptor_,
      CMsgEndPaintLast::default_instance_,
      CMsgEndPaintLast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndPaintLast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEndPaintLast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgEndPaintLast));
  CMsgDrawFilledRect_descriptor_ = file->message_type(61);
  static const int CMsgDrawFilledRect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, fill_brush_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, antialiasing_),
  };
  CMsgDrawFilledRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDrawFilledRect_descriptor_,
      CMsgDrawFilledRect::default_instance_,
      CMsgDrawFilledRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawFilledRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDrawFilledRect));
  CMsgRenderFilledRect_descriptor_ = file->message_type(62);
  static const int CMsgRenderFilledRect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, fill_brush_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, antialiasing_),
  };
  CMsgRenderFilledRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderFilledRect_descriptor_,
      CMsgRenderFilledRect::default_instance_,
      CMsgRenderFilledRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderFilledRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderFilledRect));
  CMsgDrawTexturedRect_descriptor_ = file->message_type(63);
  static const int CMsgDrawTexturedRect_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_sample_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, texture_opacity_),
  };
  CMsgDrawTexturedRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDrawTexturedRect_descriptor_,
      CMsgDrawTexturedRect::default_instance_,
      CMsgDrawTexturedRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTexturedRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDrawTexturedRect));
  CMsgRenderTexturedRect_descriptor_ = file->message_type(64);
  static const int CMsgRenderTexturedRect_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_sample_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, texture_opacity_),
  };
  CMsgRenderTexturedRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderTexturedRect_descriptor_,
      CMsgRenderTexturedRect::default_instance_,
      CMsgRenderTexturedRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTexturedRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderTexturedRect));
  CMsgLockTexture_descriptor_ = file->message_type(65);
  static const int CMsgLockTexture_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLockTexture, texture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLockTexture, texture_serial_),
  };
  CMsgLockTexture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgLockTexture_descriptor_,
      CMsgLockTexture::default_instance_,
      CMsgLockTexture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLockTexture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLockTexture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgLockTexture));
  CMsgTextInlineObject_descriptor_ = file->message_type(66);
  static const int CMsgTextInlineObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextInlineObject, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextInlineObject, height_),
  };
  CMsgTextInlineObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTextInlineObject_descriptor_,
      CMsgTextInlineObject::default_instance_,
      CMsgTextInlineObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextInlineObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextInlineObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTextInlineObject));
  CMsgTextFormat_descriptor_ = file->message_type(67);
  static const int CMsgTextFormat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, font_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, font_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, strikethrough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, fill_brush_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, letter_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, inline_object_),
  };
  CMsgTextFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTextFormat_descriptor_,
      CMsgTextFormat::default_instance_,
      CMsgTextFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTextFormat));
  CMsgTextRangeFormat_descriptor_ = file->message_type(68);
  static const int CMsgTextRangeFormat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextRangeFormat, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextRangeFormat, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextRangeFormat, format_),
  };
  CMsgTextRangeFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTextRangeFormat_descriptor_,
      CMsgTextRangeFormat::default_instance_,
      CMsgTextRangeFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextRangeFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTextRangeFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTextRangeFormat));
  CMsgRenderTextFormat_descriptor_ = file->message_type(69);
  static const int CMsgRenderTextFormat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, font_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, font_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, strikethrough_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, fill_brush_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, letter_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, inline_object_),
  };
  CMsgRenderTextFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderTextFormat_descriptor_,
      CMsgRenderTextFormat::default_instance_,
      CMsgRenderTextFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderTextFormat));
  CMsgRenderTextRangeFormat_descriptor_ = file->message_type(70);
  static const int CMsgRenderTextRangeFormat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRangeFormat, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRangeFormat, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRangeFormat, format_),
  };
  CMsgRenderTextRangeFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderTextRangeFormat_descriptor_,
      CMsgRenderTextRangeFormat::default_instance_,
      CMsgRenderTextRangeFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRangeFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRangeFormat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderTextRangeFormat));
  CMsgDrawTextRegion_descriptor_ = file->message_type(71);
  static const int CMsgDrawTextRegion_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, raw_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, text_chars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, text_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, default_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, text_align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, line_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, wrapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, ellipsis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, range_formats_),
  };
  CMsgDrawTextRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDrawTextRegion_descriptor_,
      CMsgDrawTextRegion::default_instance_,
      CMsgDrawTextRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDrawTextRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDrawTextRegion));
  CMsgRenderTextRegion_descriptor_ = file->message_type(72);
  static const int CMsgRenderTextRegion_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, raw_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, text_chars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, text_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, default_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, text_align_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, line_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, wrapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, ellipsis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, range_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, text_shadow_),
  };
  CMsgRenderTextRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRenderTextRegion_descriptor_,
      CMsgRenderTextRegion::default_instance_,
      CMsgRenderTextRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRenderTextRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRenderTextRegion));
  CMsgRequestRenderCallback_descriptor_ = file->message_type(73);
  static const int CMsgRequestRenderCallback_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, callback_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, bottom_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, top_left_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, bottom_right_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, needs_redraw_every_frame_),
  };
  CMsgRequestRenderCallback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgRequestRenderCallback_descriptor_,
      CMsgRequestRenderCallback::default_instance_,
      CMsgRequestRenderCallback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestRenderCallback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgRequestRenderCallback));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rendermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBeginFrame_descriptor_, &CMsgBeginFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEndFrame_descriptor_, &CMsgEndFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClearBackbuffer_descriptor_, &CMsgClearBackbuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDeleteTexture_descriptor_, &CMsgDeleteTexture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDeletePanel_descriptor_, &CMsgDeletePanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDeleteParticleSystem_descriptor_, &CMsgDeleteParticleSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPoint_descriptor_, &CMsgPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMatrix4x4_descriptor_, &CMsgMatrix4x4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRadiusData_descriptor_, &CRadiusData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRadiusData_CCornerRadius_descriptor_, &CRadiusData_CCornerRadius::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBorderData_descriptor_, &CBorderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBorderData_CBorderSide_descriptor_, &CBorderData_CBorderSide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBoxShadowData_descriptor_, &CBoxShadowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTextShadowData_descriptor_, &CTextShadowData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRadialClipData_descriptor_, &CRadialClipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClipData_descriptor_, &CMsgClipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPushCompositingLayer_descriptor_, &CMsgPushCompositingLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopCompositingLayer_descriptor_, &CMsgPopCompositingLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFreeCompositingLayer_descriptor_, &CMsgFreeCompositingLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTransitionData_descriptor_, &CMsgTransitionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAnimationData_descriptor_, &CMsgAnimationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAnimationFrameData_descriptor_, &CMsgAnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPointWithTransition_descriptor_, &CMsgPointWithTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPointWithTransition_AnimationFrameData_descriptor_, &CMsgPointWithTransition_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgColor_descriptor_, &CMsgColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgColor_AnimationFrameData_descriptor_, &CMsgColor_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgColorStop_descriptor_, &CMsgColorStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLinearGradient_descriptor_, &CMsgLinearGradient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRadialGradient_descriptor_, &CMsgRadialGradient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgParticle_descriptor_, &CMsgParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgParticleSystem_descriptor_, &CMsgParticleSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFillBrush_descriptor_, &CMsgFillBrush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFillBrushCollection_descriptor_, &CMsgFillBrushCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFillBrushCollection_AnimationFrameData_descriptor_, &CMsgFillBrushCollection_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderFillBrushCollection_descriptor_, &CMsgRenderFillBrushCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPanelPosition_descriptor_, &CMsgPanelPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPanelPosition_AnimationFrameData_descriptor_, &CMsgPanelPosition_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpacity_descriptor_, &CMsgOpacity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpacity_AnimationFrameData_descriptor_, &CMsgOpacity_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRotate2D_descriptor_, &CMsgRotate2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRotate2D_AnimationFrameData_descriptor_, &CMsgRotate2D_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpacityMaskData_descriptor_, &CMsgOpacityMaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpacityMask_descriptor_, &CMsgOpacityMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgOpacityMask_AnimationFrameData_descriptor_, &CMsgOpacityMask_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHueShift_descriptor_, &CMsgHueShift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHueShift_AnimationFrameData_descriptor_, &CMsgHueShift_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSaturation_descriptor_, &CMsgSaturation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSaturation_AnimationFrameData_descriptor_, &CMsgSaturation_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrightness_descriptor_, &CMsgBrightness::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBrightness_AnimationFrameData_descriptor_, &CMsgBrightness_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgContrast_descriptor_, &CMsgContrast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgContrast_AnimationFrameData_descriptor_, &CMsgContrast_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGaussianValues_descriptor_, &CMsgGaussianValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGaussianBlur_descriptor_, &CMsgGaussianBlur::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGaussianBlur_AnimationFrameData_descriptor_, &CMsgGaussianBlur_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformPerspective_descriptor_, &CMsg3DTransformPerspective::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformPerspective_AnimationFrameData_descriptor_, &CMsg3DTransformPerspective_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformPerspectiveOrigin_descriptor_, &CMsg3DTransformPerspectiveOrigin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_, &CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTransformOriginData_descriptor_, &CMsgTransformOriginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformOrigin_descriptor_, &CMsg3DTransformOrigin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformOrigin_AnimationFrameData_descriptor_, &CMsg3DTransformOrigin_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformMatrix_descriptor_, &CMsg3DTransformMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsg3DTransformMatrix_AnimationFrameData_descriptor_, &CMsg3DTransformMatrix_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBorderRadius_descriptor_, &CMsgBorderRadius::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBorderRadius_AnimationFrameData_descriptor_, &CMsgBorderRadius_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBorder_descriptor_, &CMsgBorder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBorder_AnimationFrameData_descriptor_, &CMsgBorder_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBoxShadow_descriptor_, &CMsgBoxShadow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBoxShadow_AnimationFrameData_descriptor_, &CMsgBoxShadow_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTextShadow_descriptor_, &CMsgTextShadow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTextShadow_AnimationFrameData_descriptor_, &CMsgTextShadow_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClip_descriptor_, &CMsgClip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClip_AnimationFrameData_descriptor_, &CMsgClip_AnimationFrameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPushClipLayer_descriptor_, &CMsgPushClipLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopClipLayer_descriptor_, &CMsgPopClipLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPushPanelContextInLayer_descriptor_, &CMsgPushPanelContextInLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopPanelContextInLayer_descriptor_, &CMsgPopPanelContextInLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPushAAndTContext_descriptor_, &CMsgPushAAndTContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPopAAndTContext_descriptor_, &CMsgPopAAndTContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBeginPaintBackground_descriptor_, &CMsgBeginPaintBackground::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEndPaintBackground_descriptor_, &CMsgEndPaintBackground::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBeginPaintLast_descriptor_, &CMsgBeginPaintLast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgEndPaintLast_descriptor_, &CMsgEndPaintLast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDrawFilledRect_descriptor_, &CMsgDrawFilledRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderFilledRect_descriptor_, &CMsgRenderFilledRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDrawTexturedRect_descriptor_, &CMsgDrawTexturedRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderTexturedRect_descriptor_, &CMsgRenderTexturedRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgLockTexture_descriptor_, &CMsgLockTexture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTextInlineObject_descriptor_, &CMsgTextInlineObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTextFormat_descriptor_, &CMsgTextFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTextRangeFormat_descriptor_, &CMsgTextRangeFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderTextFormat_descriptor_, &CMsgRenderTextFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderTextRangeFormat_descriptor_, &CMsgRenderTextRangeFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDrawTextRegion_descriptor_, &CMsgDrawTextRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRenderTextRegion_descriptor_, &CMsgRenderTextRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgRequestRenderCallback_descriptor_, &CMsgRequestRenderCallback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rendermessages_2eproto() {
  delete CMsgBeginFrame::default_instance_;
  delete CMsgBeginFrame_reflection_;
  delete CMsgEndFrame::default_instance_;
  delete CMsgEndFrame_reflection_;
  delete CMsgClearBackbuffer::default_instance_;
  delete CMsgClearBackbuffer_reflection_;
  delete CMsgDeleteTexture::default_instance_;
  delete CMsgDeleteTexture_reflection_;
  delete CMsgDeletePanel::default_instance_;
  delete CMsgDeletePanel_reflection_;
  delete CMsgDeleteParticleSystem::default_instance_;
  delete CMsgDeleteParticleSystem_reflection_;
  delete CMsgPoint::default_instance_;
  delete CMsgPoint_reflection_;
  delete CMsgMatrix4x4::default_instance_;
  delete CMsgMatrix4x4_reflection_;
  delete CRadiusData::default_instance_;
  delete CRadiusData_reflection_;
  delete CRadiusData_CCornerRadius::default_instance_;
  delete CRadiusData_CCornerRadius_reflection_;
  delete CBorderData::default_instance_;
  delete CBorderData_reflection_;
  delete CBorderData_CBorderSide::default_instance_;
  delete CBorderData_CBorderSide_reflection_;
  delete CBoxShadowData::default_instance_;
  delete CBoxShadowData_reflection_;
  delete CTextShadowData::default_instance_;
  delete CTextShadowData_reflection_;
  delete CRadialClipData::default_instance_;
  delete CRadialClipData_reflection_;
  delete CMsgClipData::default_instance_;
  delete CMsgClipData_reflection_;
  delete CMsgPushCompositingLayer::default_instance_;
  delete CMsgPushCompositingLayer_reflection_;
  delete CMsgPopCompositingLayer::default_instance_;
  delete CMsgPopCompositingLayer_reflection_;
  delete CMsgFreeCompositingLayer::default_instance_;
  delete CMsgFreeCompositingLayer_reflection_;
  delete CMsgTransitionData::default_instance_;
  delete CMsgTransitionData_reflection_;
  delete CMsgAnimationData::default_instance_;
  delete CMsgAnimationData_reflection_;
  delete CMsgAnimationFrameData::default_instance_;
  delete CMsgAnimationFrameData_reflection_;
  delete CMsgPointWithTransition::default_instance_;
  delete CMsgPointWithTransition_reflection_;
  delete CMsgPointWithTransition_AnimationFrameData::default_instance_;
  delete CMsgPointWithTransition_AnimationFrameData_reflection_;
  delete CMsgColor::default_instance_;
  delete CMsgColor_reflection_;
  delete CMsgColor_AnimationFrameData::default_instance_;
  delete CMsgColor_AnimationFrameData_reflection_;
  delete CMsgColorStop::default_instance_;
  delete CMsgColorStop_reflection_;
  delete CMsgLinearGradient::default_instance_;
  delete CMsgLinearGradient_reflection_;
  delete CMsgRadialGradient::default_instance_;
  delete CMsgRadialGradient_reflection_;
  delete CMsgParticle::default_instance_;
  delete CMsgParticle_reflection_;
  delete CMsgParticleSystem::default_instance_;
  delete CMsgParticleSystem_reflection_;
  delete CMsgFillBrush::default_instance_;
  delete CMsgFillBrush_reflection_;
  delete CMsgFillBrushCollection::default_instance_;
  delete CMsgFillBrushCollection_reflection_;
  delete CMsgFillBrushCollection_AnimationFrameData::default_instance_;
  delete CMsgFillBrushCollection_AnimationFrameData_reflection_;
  delete CMsgRenderFillBrushCollection::default_instance_;
  delete CMsgRenderFillBrushCollection_reflection_;
  delete CMsgPanelPosition::default_instance_;
  delete CMsgPanelPosition_reflection_;
  delete CMsgPanelPosition_AnimationFrameData::default_instance_;
  delete CMsgPanelPosition_AnimationFrameData_reflection_;
  delete CMsgOpacity::default_instance_;
  delete CMsgOpacity_reflection_;
  delete CMsgOpacity_AnimationFrameData::default_instance_;
  delete CMsgOpacity_AnimationFrameData_reflection_;
  delete CMsgRotate2D::default_instance_;
  delete CMsgRotate2D_reflection_;
  delete CMsgRotate2D_AnimationFrameData::default_instance_;
  delete CMsgRotate2D_AnimationFrameData_reflection_;
  delete CMsgOpacityMaskData::default_instance_;
  delete CMsgOpacityMaskData_reflection_;
  delete CMsgOpacityMask::default_instance_;
  delete CMsgOpacityMask_reflection_;
  delete CMsgOpacityMask_AnimationFrameData::default_instance_;
  delete CMsgOpacityMask_AnimationFrameData_reflection_;
  delete CMsgHueShift::default_instance_;
  delete CMsgHueShift_reflection_;
  delete CMsgHueShift_AnimationFrameData::default_instance_;
  delete CMsgHueShift_AnimationFrameData_reflection_;
  delete CMsgSaturation::default_instance_;
  delete CMsgSaturation_reflection_;
  delete CMsgSaturation_AnimationFrameData::default_instance_;
  delete CMsgSaturation_AnimationFrameData_reflection_;
  delete CMsgBrightness::default_instance_;
  delete CMsgBrightness_reflection_;
  delete CMsgBrightness_AnimationFrameData::default_instance_;
  delete CMsgBrightness_AnimationFrameData_reflection_;
  delete CMsgContrast::default_instance_;
  delete CMsgContrast_reflection_;
  delete CMsgContrast_AnimationFrameData::default_instance_;
  delete CMsgContrast_AnimationFrameData_reflection_;
  delete CMsgGaussianValues::default_instance_;
  delete CMsgGaussianValues_reflection_;
  delete CMsgGaussianBlur::default_instance_;
  delete CMsgGaussianBlur_reflection_;
  delete CMsgGaussianBlur_AnimationFrameData::default_instance_;
  delete CMsgGaussianBlur_AnimationFrameData_reflection_;
  delete CMsg3DTransformPerspective::default_instance_;
  delete CMsg3DTransformPerspective_reflection_;
  delete CMsg3DTransformPerspective_AnimationFrameData::default_instance_;
  delete CMsg3DTransformPerspective_AnimationFrameData_reflection_;
  delete CMsg3DTransformPerspectiveOrigin::default_instance_;
  delete CMsg3DTransformPerspectiveOrigin_reflection_;
  delete CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance_;
  delete CMsg3DTransformPerspectiveOrigin_AnimationFrameData_reflection_;
  delete CMsgTransformOriginData::default_instance_;
  delete CMsgTransformOriginData_reflection_;
  delete CMsg3DTransformOrigin::default_instance_;
  delete CMsg3DTransformOrigin_reflection_;
  delete CMsg3DTransformOrigin_AnimationFrameData::default_instance_;
  delete CMsg3DTransformOrigin_AnimationFrameData_reflection_;
  delete CMsg3DTransformMatrix::default_instance_;
  delete CMsg3DTransformMatrix_reflection_;
  delete CMsg3DTransformMatrix_AnimationFrameData::default_instance_;
  delete CMsg3DTransformMatrix_AnimationFrameData_reflection_;
  delete CMsgBorderRadius::default_instance_;
  delete CMsgBorderRadius_reflection_;
  delete CMsgBorderRadius_AnimationFrameData::default_instance_;
  delete CMsgBorderRadius_AnimationFrameData_reflection_;
  delete CMsgBorder::default_instance_;
  delete CMsgBorder_reflection_;
  delete CMsgBorder_AnimationFrameData::default_instance_;
  delete CMsgBorder_AnimationFrameData_reflection_;
  delete CMsgBoxShadow::default_instance_;
  delete CMsgBoxShadow_reflection_;
  delete CMsgBoxShadow_AnimationFrameData::default_instance_;
  delete CMsgBoxShadow_AnimationFrameData_reflection_;
  delete CMsgTextShadow::default_instance_;
  delete CMsgTextShadow_reflection_;
  delete CMsgTextShadow_AnimationFrameData::default_instance_;
  delete CMsgTextShadow_AnimationFrameData_reflection_;
  delete CMsgClip::default_instance_;
  delete CMsgClip_reflection_;
  delete CMsgClip_AnimationFrameData::default_instance_;
  delete CMsgClip_AnimationFrameData_reflection_;
  delete CMsgPushClipLayer::default_instance_;
  delete CMsgPushClipLayer_reflection_;
  delete CMsgPopClipLayer::default_instance_;
  delete CMsgPopClipLayer_reflection_;
  delete CMsgPushPanelContextInLayer::default_instance_;
  delete CMsgPushPanelContextInLayer_reflection_;
  delete CMsgPopPanelContextInLayer::default_instance_;
  delete CMsgPopPanelContextInLayer_reflection_;
  delete CMsgPushAAndTContext::default_instance_;
  delete CMsgPushAAndTContext_reflection_;
  delete CMsgPopAAndTContext::default_instance_;
  delete CMsgPopAAndTContext_reflection_;
  delete CMsgBeginPaintBackground::default_instance_;
  delete CMsgBeginPaintBackground_reflection_;
  delete CMsgEndPaintBackground::default_instance_;
  delete CMsgEndPaintBackground_reflection_;
  delete CMsgBeginPaintLast::default_instance_;
  delete CMsgBeginPaintLast_reflection_;
  delete CMsgEndPaintLast::default_instance_;
  delete CMsgEndPaintLast_reflection_;
  delete CMsgDrawFilledRect::default_instance_;
  delete CMsgDrawFilledRect_reflection_;
  delete CMsgRenderFilledRect::default_instance_;
  delete CMsgRenderFilledRect_reflection_;
  delete CMsgDrawTexturedRect::default_instance_;
  delete CMsgDrawTexturedRect_reflection_;
  delete CMsgRenderTexturedRect::default_instance_;
  delete CMsgRenderTexturedRect_reflection_;
  delete CMsgLockTexture::default_instance_;
  delete CMsgLockTexture_reflection_;
  delete CMsgTextInlineObject::default_instance_;
  delete CMsgTextInlineObject_reflection_;
  delete CMsgTextFormat::default_instance_;
  delete CMsgTextFormat_reflection_;
  delete CMsgTextRangeFormat::default_instance_;
  delete CMsgTextRangeFormat_reflection_;
  delete CMsgRenderTextFormat::default_instance_;
  delete CMsgRenderTextFormat_reflection_;
  delete CMsgRenderTextRangeFormat::default_instance_;
  delete CMsgRenderTextRangeFormat_reflection_;
  delete CMsgDrawTextRegion::default_instance_;
  delete CMsgDrawTextRegion_reflection_;
  delete CMsgRenderTextRegion::default_instance_;
  delete CMsgRenderTextRegion_reflection_;
  delete CMsgRequestRenderCallback::default_instance_;
  delete CMsgRequestRenderCallback_reflection_;
}

void protobuf_AddDesc_rendermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024rendermessages.proto\"\310\001\n\016CMsgBeginFram"
    "e\022\030\n\020frame_paint_time\030\001 \001(\001\022\025\n\rsurface_w"
    "idth\030\002 \001(\r\022\026\n\016surface_height\030\003 \001(\r\022\025\n\rre"
    "nder_target\030\004 \001(\r\022\027\n\017ui_scale_factor\030\005 \001"
    "(\001\022\023\n\013empty_frame\030\006 \001(\010\022(\n clear_gpu_res"
    "ources_before_frame\030\007 \001(\010\"o\n\014CMsgEndFram"
    "e\022\037\n\027mouse_cursor_texture_id\030\001 \001(\r\022\036\n\026mo"
    "use_cursor_hotspot_x\030\002 \001(\002\022\036\n\026mouse_curs"
    "or_hotspot_y\030\003 \001(\002\"/\n\023CMsgClearBackbuffe"
    "r\022\030\n\020clear_color_rgba\030\001 \001(\r\",\n\021CMsgDelet"
    "eTexture\022\027\n\017texture_pointer\030\001 \001(\004\"%\n\017CMs"
    "gDeletePanel\022\022\n\ncontext_id\030\001 \001(\004\"E\n\030CMsg"
    "DeleteParticleSystem\022\024\n\014panel_handle\030\001 \001"
    "(\004\022\023\n\013brush_index\030\002 \001(\r\",\n\tCMsgPoint\022\t\n\001"
    "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\337\001\n\rCMsgMa"
    "trix4x4\022\013\n\003m00\030\001 \001(\001\022\013\n\003m01\030\002 \001(\001\022\013\n\003m02"
    "\030\003 \001(\001\022\013\n\003m03\030\004 \001(\001\022\013\n\003m10\030\005 \001(\001\022\013\n\003m11\030"
    "\006 \001(\001\022\013\n\003m12\030\007 \001(\001\022\013\n\003m13\030\010 \001(\001\022\013\n\003m20\030\t"
    " \001(\001\022\013\n\003m21\030\n \001(\001\022\013\n\003m22\030\013 \001(\001\022\013\n\003m23\030\014 "
    "\001(\001\022\013\n\003m30\030\r \001(\001\022\013\n\003m31\030\016 \001(\001\022\013\n\003m32\030\017 \001"
    "(\001\022\013\n\003m33\030\020 \001(\001\"\204\002\n\013CRadiusData\022,\n\010top_l"
    "eft\030\001 \001(\0132\032.CRadiusData.CCornerRadius\022-\n"
    "\ttop_right\030\002 \001(\0132\032.CRadiusData.CCornerRa"
    "dius\0220\n\014bottom_right\030\003 \001(\0132\032.CRadiusData"
    ".CCornerRadius\022/\n\013bottom_left\030\004 \001(\0132\032.CR"
    "adiusData.CCornerRadius\0325\n\rCCornerRadius"
    "\022\022\n\nhorizontal\030\001 \001(\001\022\020\n\010vertical\030\002 \001(\001\"\353"
    "\001\n\013CBorderData\022%\n\003top\030\001 \001(\0132\030.CBorderDat"
    "a.CBorderSide\022\'\n\005right\030\002 \001(\0132\030.CBorderDa"
    "ta.CBorderSide\022(\n\006bottom\030\003 \001(\0132\030.CBorder"
    "Data.CBorderSide\022&\n\004left\030\004 \001(\0132\030.CBorder"
    "Data.CBorderSide\032:\n\013CBorderSide\022\r\n\005style"
    "\030\001 \001(\r\022\r\n\005width\030\002 \001(\001\022\r\n\005color\030\003 \001(\r\"\261\001\n"
    "\016CBoxShadowData\022\r\n\005inset\030\001 \001(\010\022\031\n\021horizo"
    "ntal_offset\030\002 \001(\001\022\027\n\017vertical_offset\030\003 \001"
    "(\001\022\023\n\013blur_radius\030\004 \001(\001\022\027\n\017spread_distan"
    "ce\030\005 \001(\001\022\r\n\005color\030\006 \001(\r\022\014\n\004fill\030\007 \001(\010\022\021\n"
    "\tanimating\030\010 \001(\010\"\216\001\n\017CTextShadowData\022\031\n\021"
    "horizontal_offset\030\002 \001(\001\022\027\n\017vertical_offs"
    "et\030\003 \001(\001\022\023\n\013blur_radius\030\004 \001(\001\022\r\n\005color\030\006"
    " \001(\r\022\021\n\tanimating\030\010 \001(\010\022\020\n\010strength\030\t \001("
    "\001\"`\n\017CRadialClipData\022\020\n\010center_x\030\001 \001(\001\022\020"
    "\n\010center_y\030\002 \001(\001\022\023\n\013start_angle\030\003 \001(\001\022\024\n"
    "\014sector_angle\030\004 \001(\001\"\202\001\n\014CMsgClipData\022\021\n\t"
    "rect_clip\030\001 \001(\010\022\014\n\004left\030\002 \001(\001\022\013\n\003top\030\003 \001"
    "(\001\022\r\n\005right\030\004 \001(\001\022\016\n\006bottom\030\005 \001(\001\022%\n\013rad"
    "ial_clip\030\006 \001(\0132\020.CRadialClipData\"\232\r\n\030CMs"
    "gPushCompositingLayer\022\020\n\010layer_id\030\001 \001(\004\022"
    "\r\n\005width\030\002 \001(\001\022\016\n\006height\030\003 \001(\001\022\035\n\025layer_"
    "quad_top_left_x\030\004 \001(\001\022\035\n\025layer_quad_top_"
    "left_y\030\005 \001(\001\022\035\n\025layer_quad_top_left_z\030\006 "
    "\001(\001\022\036\n\026layer_quad_top_right_x\030\007 \001(\001\022\036\n\026l"
    "ayer_quad_top_right_y\030\010 \001(\001\022\036\n\026layer_qua"
    "d_top_right_z\030\t \001(\001\022 \n\030layer_quad_bottom"
    "_left_x\030\n \001(\001\022 \n\030layer_quad_bottom_left_"
    "y\030\013 \001(\001\022 \n\030layer_quad_bottom_left_z\030\014 \001("
    "\001\022!\n\031layer_quad_bottom_right_x\030\r \001(\001\022!\n\031"
    "layer_quad_bottom_right_y\030\016 \001(\001\022!\n\031layer"
    "_quad_bottom_right_z\030\017 \001(\001\022\025\n\rtransform_"
    "m00\030\020 \001(\001\022\025\n\rtransform_m01\030\021 \001(\001\022\025\n\rtran"
    "sform_m02\030\022 \001(\001\022\025\n\rtransform_m03\030\023 \001(\001\022\025"
    "\n\rtransform_m10\030\024 \001(\001\022\025\n\rtransform_m11\030\025"
    " \001(\001\022\025\n\rtransform_m12\030\026 \001(\001\022\025\n\rtransform"
    "_m13\030\027 \001(\001\022\025\n\rtransform_m20\030\030 \001(\001\022\025\n\rtra"
    "nsform_m21\030\031 \001(\001\022\025\n\rtransform_m22\030\032 \001(\001\022"
    "\025\n\rtransform_m23\030\033 \001(\001\022\025\n\rtransform_m30\030"
    "\034 \001(\001\022\025\n\rtransform_m31\030\035 \001(\001\022\025\n\rtransfor"
    "m_m32\030\036 \001(\001\022\025\n\rtransform_m33\030\037 \001(\001\022\031\n\021pe"
    "rspective_depth\030  \001(\001\022\017\n\007opacity\030! \001(\001\022\031"
    "\n\021composition_color\030\" \001(\r\022\022\n\nsaturation\030"
    "# \001(\001\022\021\n\thue_shift\030$ \001(\001\022\022\n\nbrightness\030%"
    " \001(\001\022\020\n\010contrast\030& \001(\001\022\037\n\027opacity_mask_t"
    "exture_id\030\' \001(\r\022\034\n\024opacity_mask_opacity\030"
    "( \001(\001\022\034\n\006border\030) \001(\0132\014.CBorderData\022#\n\rb"
    "order_radius\030* \001(\0132\014.CRadiusData\022#\n\nbox_"
    "shadow\030+ \001(\0132\017.CBoxShadowData\022\033\n\023gaussia"
    "nblur_passes\030, \001(\001\022\036\n\026gaussianblur_stdde"
    "vhor\030- \001(\001\022\036\n\026gaussianblur_stddevver\030. \001"
    "(\001\022\032\n\022scale_2d_factors_x\030/ \001(\001\022\032\n\022scale_"
    "2d_factors_y\0300 \001(\001\022\021\n\trotate_2d\0301 \001(\001\022\023\n"
    "\013needs_clear\0302 \001(\010\022\023\n\013needs_depth\0303 \001(\010\022"
    "\"\n\032needs_intermediate_texture\0304 \001(\010\022 \n\030n"
    "eeds_redraw_every_frame\0305 \001(\010\022%\n\013text_sh"
    "adow\0306 \001(\0132\020.CTextShadowData\022\026\n\016mix_blen"
    "d_mode\0307 \001(\r\022\032\n\022occluded_left_edge\0308 \001(\001"
    "\022\031\n\021occluded_top_edge\0309 \001(\001\022\033\n\023occluded_"
    "right_edge\030: \001(\001\022\034\n\024occluded_bottom_edge"
    "\030; \001(\001\022%\n\013radial_clip\030< \001(\0132\020.CRadialCli"
    "pData\022&\n\036composition_layer_texture_name\030"
    "@ \001(\t\"\031\n\027CMsgPopCompositingLayer\",\n\030CMsg"
    "FreeCompositingLayer\022\020\n\010layer_id\030\001 \001(\004\"\321"
    "\001\n\022CMsgTransitionData\022\022\n\nstart_time\030\001 \001("
    "\001\022\025\n\rdelay_seconds\030\002 \001(\001\022\030\n\020duration_sec"
    "onds\030\003 \001(\001\022\026\n\013timing_func\030\004 \001(\r:\0010\022\026\n\016cu"
    "bic_bezier_0\030\005 \001(\002\022\026\n\016cubic_bezier_1\030\006 \001"
    "(\002\022\026\n\016cubic_bezier_2\030\007 \001(\002\022\026\n\016cubic_bezi"
    "er_3\030\010 \001(\002\"\234\002\n\021CMsgAnimationData\022\022\n\nstar"
    "t_time\030\001 \001(\001\022\025\n\rdelay_seconds\030\002 \001(\001\022\030\n\020d"
    "uration_seconds\030\003 \001(\001\022\023\n\013timing_func\030\004 \001"
    "(\r\022\026\n\016cubic_bezier_0\030\005 \001(\002\022\026\n\016cubic_bezi"
    "er_1\030\006 \001(\002\022\026\n\016cubic_bezier_2\030\007 \001(\002\022\026\n\016cu"
    "bic_bezier_3\030\010 \001(\002\022\021\n\tdirection\030\t \001(\r\022\021\n"
    "\titeration\030\n \001(\002\022\'\n\006frames\030\013 \003(\0132\027.CMsgA"
    "nimationFrameData\"\254\001\n\026CMsgAnimationFrame"
    "Data\022\017\n\007percent\030\001 \001(\002\022\026\n\013timing_func\030\002 \001"
    "(\r:\0010\022\026\n\016cubic_bezier_0\030\003 \001(\002\022\026\n\016cubic_b"
    "ezier_1\030\004 \001(\002\022\026\n\016cubic_bezier_2\030\005 \001(\002\022\026\n"
    "\016cubic_bezier_3\030\006 \001(\002*\t\010\350\007\020\200\200\200\200\002\"\324\002\n\027CMs"
    "gPointWithTransition\022\030\n\004base\030\001 \001(\0132\n.CMs"
    "gPoint\022\036\n\ntransition\030\002 \001(\0132\n.CMsgPoint\022,"
    "\n\017transition_data\030\003 \001(\0132\023.CMsgTransition"
    "Data\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimations"
    "\030\005 \003(\0132\022.CMsgAnimationData\032.\n\022AnimationF"
    "rameData\022\030\n\004data\030\001 \001(\0132\n.CMsgPoint2c\n\024an"
    "imation_frame_data\022\027.CMsgAnimationFrameD"
    "ata\030\364\007 \001(\0132+.CMsgPointWithTransition.Ani"
    "mationFrameData\"\224\002\n\tCMsgColor\022\014\n\004base\030\001 "
    "\001(\r\022\022\n\ntransition\030\002 \001(\r\022,\n\017transition_da"
    "ta\030\003 \001(\0132\023.CMsgTransitionData\022\024\n\014style_s"
    "ymbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgAn"
    "imationData\032\"\n\022AnimationFrameData\022\014\n\004dat"
    "a\030\001 \001(\r2U\n\024animation_frame_data\022\027.CMsgAn"
    "imationFrameData\030\351\007 \001(\0132\035.CMsgColor.Anim"
    "ationFrameData\"5\n\rCMsgColorStop\022\020\n\010posit"
    "ion\030\001 \001(\001\022\022\n\ncolor_rgba\030\002 \001(\r\"~\n\022CMsgLin"
    "earGradient\022\"\n\016start_position\030\001 \001(\0132\n.CM"
    "sgPoint\022 \n\014end_position\030\002 \001(\0132\n.CMsgPoin"
    "t\022\"\n\ncolor_stop\030\003 \003(\0132\016.CMsgColorStop\"\235\001"
    "\n\022CMsgRadialGradient\022#\n\017center_position\030"
    "\001 \001(\0132\n.CMsgPoint\022#\n\017offset_distance\030\002 \001"
    "(\0132\n.CMsgPoint\022\031\n\005radii\030\003 \001(\0132\n.CMsgPoin"
    "t\022\"\n\ncolor_stop\030\004 \003(\0132\016.CMsgColorStop\"|\n"
    "\014CMsgParticle\022%\n\021particle_position\030\001 \001(\013"
    "2\n.CMsgPoint\022\025\n\rparticle_size\030\002 \001(\002\022\032\n\022p"
    "article_sharpness\030\003 \001(\002\022\022\n\ncolor_rgba\030\004 "
    "\001(\r\"\240\007\n\022CMsgParticleSystem\022!\n\rbase_posit"
    "ion\030\001 \001(\0132\n.CMsgPoint\022*\n\026base_position_v"
    "ariance\030\002 \001(\0132\n.CMsgPoint\022\025\n\rparticle_si"
    "ze\030\003 \001(\001\022\036\n\026particle_size_variance\030\004 \001(\001"
    "\022\034\n\024particles_per_second\030\005 \001(\001\022%\n\035partic"
    "les_per_second_variance\030\006 \001(\001\022!\n\031particl"
    "e_lifespan_seconds\030\007 \001(\001\022*\n\"particle_lif"
    "espan_seconds_variance\030\010 \001(\001\022-\n\031particle"
    "_initial_velocity\030\t \001(\0132\n.CMsgPoint\0226\n\"p"
    "article_initial_velocity_variance\030\n \001(\0132"
    "\n.CMsgPoint\022(\n\024gravity_acceleration\030\013 \001("
    "\0132\n.CMsgPoint\022:\n&gravity_acceleration_pa"
    "rticle_variance\030\014 \001(\0132\n.CMsgPoint\022\030\n\020col"
    "or_start_rgba\030\r \001(\r\022!\n\031color_start_rgba_"
    "variance\030\016 \001(\r\022\026\n\016color_end_rgba\030\017 \001(\r\022\037"
    "\n\027color_end_rgba_variance\030\020 \001(\r\022\033\n\023paren"
    "t_panel_handle\030\021 \001(\004\022\032\n\022parent_brush_ind"
    "ex\030\022 \001(\r\022\032\n\022particle_sharpness\030\023 \001(\002\022#\n\033"
    "particle_sharpness_variance\030\024 \001(\002\022\030\n\020par"
    "ticle_flicker\030\025 \001(\002\022!\n\031particle_flicker_"
    "variance\030\026 \001(\002\022)\n\025particle_velocity_min\030"
    "\027 \001(\0132\n.CMsgPoint\022)\n\025particle_velocity_m"
    "ax\030\030 \001(\0132\n.CMsgPoint\022 \n\tparticles\0302 \003(\0132"
    "\r.CMsgParticle\"\276\001\n\rCMsgFillBrush\022\017\n\007opac"
    "ity\030\001 \001(\001\022\022\n\ncolor_rgba\030\002 \001(\r\022,\n\017linear_"
    "gradient\030\003 \001(\0132\023.CMsgLinearGradient\022,\n\017r"
    "adial_gradient\030\004 \001(\0132\023.CMsgRadialGradien"
    "t\022,\n\017particle_system\030\005 \001(\0132\023.CMsgParticl"
    "eSystem\"\340\002\n\027CMsgFillBrushCollection\022\034\n\004b"
    "ase\030\001 \003(\0132\016.CMsgFillBrush\022\"\n\ntransition\030"
    "\002 \003(\0132\016.CMsgFillBrush\022,\n\017transition_data"
    "\030\003 \001(\0132\023.CMsgTransitionData\022\024\n\014style_sym"
    "bol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgAnim"
    "ationData\0322\n\022AnimationFrameData\022\034\n\004data\030"
    "\001 \003(\0132\016.CMsgFillBrush2c\n\024animation_frame"
    "_data\022\027.CMsgAnimationFrameData\030\357\007 \001(\0132+."
    "CMsgFillBrushCollection.AnimationFrameDa"
    "ta\"C\n\035CMsgRenderFillBrushCollection\022\"\n\nf"
    "ill_brush\030\001 \003(\0132\016.CMsgFillBrush\"\371\003\n\021CMsg"
    "PanelPosition\022\030\n\004base\030\001 \001(\0132\n.CMsgPoint\022"
    "\036\n\ntransition\030\002 \001(\0132\n.CMsgPoint\022,\n\017trans"
    "ition_data\030\003 \001(\0132\023.CMsgTransitionData\022\024\n"
    "\014style_symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132"
    "\022.CMsgAnimationData\022!\n\rscroll_offset\030\006 \001"
    "(\0132\n.CMsgPoint\022(\n\024scroll_offset_target\030\007"
    " \001(\0132\n.CMsgPoint\0220\n\023scroll_transition_x\030"
    "\010 \001(\0132\023.CMsgTransitionData\0220\n\023scroll_tra"
    "nsition_y\030\t \001(\0132\023.CMsgTransitionData\032.\n\022"
    "AnimationFrameData\022\030\n\004data\030\001 \001(\0132\n.CMsgP"
    "oint2]\n\024animation_frame_data\022\027.CMsgAnima"
    "tionFrameData\030\363\007 \001(\0132%.CMsgPanelPosition"
    ".AnimationFrameData\"\230\002\n\013CMsgOpacity\022\014\n\004b"
    "ase\030\001 \001(\001\022\022\n\ntransition\030\002 \001(\001\022,\n\017transit"
    "ion_data\030\003 \001(\0132\023.CMsgTransitionData\022\024\n\014s"
    "tyle_symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022."
    "CMsgAnimationData\032\"\n\022AnimationFrameData\022"
    "\014\n\004data\030\001 \001(\0012W\n\024animation_frame_data\022\027."
    "CMsgAnimationFrameData\030\354\007 \001(\0132\037.CMsgOpac"
    "ity.AnimationFrameData\"\232\002\n\014CMsgRotate2D\022"
    "\014\n\004base\030\001 \001(\001\022\022\n\ntransition\030\002 \001(\001\022,\n\017tra"
    "nsition_data\030\003 \001(\0132\023.CMsgTransitionData\022"
    "\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003("
    "\0132\022.CMsgAnimationData\032\"\n\022AnimationFrameD"
    "ata\022\014\n\004data\030\001 \001(\0012X\n\024animation_frame_dat"
    "a\022\027.CMsgAnimationFrameData\030\366\007 \001(\0132 .CMsg"
    "Rotate2D.AnimationFrameData\"T\n\023CMsgOpaci"
    "tyMaskData\022\037\n\027opacity_mask_texture_id\030\001 "
    "\001(\r\022\034\n\024opacity_mask_opacity\030\002 \001(\001\"\342\002\n\017CM"
    "sgOpacityMask\022\"\n\004base\030\001 \001(\0132\024.CMsgOpacit"
    "yMaskData\022(\n\ntransition\030\002 \001(\0132\024.CMsgOpac"
    "ityMaskData\022,\n\017transition_data\030\003 \001(\0132\023.C"
    "MsgTransitionData\022\024\n\014style_symbol\030\004 \001(\r\022"
    "&\n\nanimations\030\005 \003(\0132\022.CMsgAnimationData\032"
    "8\n\022AnimationFrameData\022\"\n\004data\030\001 \001(\0132\024.CM"
    "sgOpacityMaskData2[\n\024animation_frame_dat"
    "a\022\027.CMsgAnimationFrameData\030\365\007 \001(\0132#.CMsg"
    "OpacityMask.AnimationFrameData\"\232\002\n\014CMsgH"
    "ueShift\022\014\n\004base\030\001 \001(\001\022\022\n\ntransition\030\002 \001("
    "\001\022,\n\017transition_data\030\003 \001(\0132\023.CMsgTransit"
    "ionData\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimati"
    "ons\030\005 \003(\0132\022.CMsgAnimationData\032\"\n\022Animati"
    "onFrameData\022\014\n\004data\030\001 \001(\0012X\n\024animation_f"
    "rame_data\022\027.CMsgAnimationFrameData\030\373\007 \001("
    "\0132 .CMsgHueShift.AnimationFrameData\"\236\002\n\016"
    "CMsgSaturation\022\014\n\004base\030\001 \001(\001\022\022\n\ntransiti"
    "on\030\002 \001(\001\022,\n\017transition_data\030\003 \001(\0132\023.CMsg"
    "TransitionData\022\024\n\014style_symbol\030\004 \001(\r\022&\n\n"
    "animations\030\005 \003(\0132\022.CMsgAnimationData\032\"\n\022"
    "AnimationFrameData\022\014\n\004data\030\001 \001(\0012Z\n\024anim"
    "ation_frame_data\022\027.CMsgAnimationFrameDat"
    "a\030\355\007 \001(\0132\".CMsgSaturation.AnimationFrame"
    "Data\"\236\002\n\016CMsgBrightness\022\014\n\004base\030\001 \001(\001\022\022\n"
    "\ntransition\030\002 \001(\001\022,\n\017transition_data\030\003 \001"
    "(\0132\023.CMsgTransitionData\022\024\n\014style_symbol\030"
    "\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgAnimatio"
    "nData\032\"\n\022AnimationFrameData\022\014\n\004data\030\001 \001("
    "\0012Z\n\024animation_frame_data\022\027.CMsgAnimatio"
    "nFrameData\030\374\007 \001(\0132\".CMsgBrightness.Anima"
    "tionFrameData\"\232\002\n\014CMsgContrast\022\014\n\004base\030\001"
    " \001(\001\022\022\n\ntransition\030\002 \001(\001\022,\n\017transition_d"
    "ata\030\003 \001(\0132\023.CMsgTransitionData\022\024\n\014style_"
    "symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgA"
    "nimationData\032\"\n\022AnimationFrameData\022\014\n\004da"
    "ta\030\001 \001(\0012X\n\024animation_frame_data\022\027.CMsgA"
    "nimationFrameData\030\375\007 \001(\0132 .CMsgContrast."
    "AnimationFrameData\"L\n\022CMsgGaussianValues"
    "\022\016\n\006passes\030\001 \001(\001\022\022\n\nstddev_hor\030\002 \001(\001\022\022\n\n"
    "stddev_ver\030\003 \001(\001\"\341\002\n\020CMsgGaussianBlur\022!\n"
    "\004base\030\001 \001(\0132\023.CMsgGaussianValues\022\'\n\ntran"
    "sition\030\002 \001(\0132\023.CMsgGaussianValues\022,\n\017tra"
    "nsition_data\030\003 \001(\0132\023.CMsgTransitionData\022"
    "\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003("
    "\0132\022.CMsgAnimationData\0327\n\022AnimationFrameD"
    "ata\022!\n\004data\030\001 \001(\0132\023.CMsgGaussianValues2\\"
    "\n\024animation_frame_data\022\027.CMsgAnimationFr"
    "ameData\030\360\007 \001(\0132$.CMsgGaussianBlur.Animat"
    "ionFrameData\"\266\002\n\032CMsg3DTransformPerspect"
    "ive\022\014\n\004base\030\001 \001(\001\022\022\n\ntransition\030\002 \001(\001\022,\n"
    "\017transition_data\030\003 \001(\0132\023.CMsgTransitionD"
    "ata\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimations\030"
    "\005 \003(\0132\022.CMsgAnimationData\032\"\n\022AnimationFr"
    "ameData\022\014\n\004data\030\001 \001(\0012f\n\024animation_frame"
    "_data\022\027.CMsgAnimationFrameData\030\353\007 \001(\0132.."
    "CMsg3DTransformPerspective.AnimationFram"
    "eData\"\346\002\n CMsg3DTransformPerspectiveOrig"
    "in\022\030\n\004base\030\001 \001(\0132\n.CMsgPoint\022\036\n\ntransiti"
    "on\030\002 \001(\0132\n.CMsgPoint\022,\n\017transition_data\030"
    "\003 \001(\0132\023.CMsgTransitionData\022\024\n\014style_symb"
    "ol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgAnima"
    "tionData\032.\n\022AnimationFrameData\022\030\n\004data\030\001"
    " \001(\0132\n.CMsgPoint2l\n\024animation_frame_data"
    "\022\027.CMsgAnimationFrameData\030\352\007 \001(\01324.CMsg3"
    "DTransformPerspectiveOrigin.AnimationFra"
    "meData\"w\n\027CMsgTransformOriginData\022\t\n\001x\030\001"
    " \001(\001\022\t\n\001y\030\002 \001(\001\022\024\n\014x_is_percent\030\003 \001(\010\022\024\n"
    "\014y_is_percent\030\004 \001(\010\022\032\n\022is_parent_relativ"
    "e\030\005 \001(\010\"\372\002\n\025CMsg3DTransformOrigin\022&\n\004bas"
    "e\030\001 \001(\0132\030.CMsgTransformOriginData\022,\n\ntra"
    "nsition\030\002 \001(\0132\030.CMsgTransformOriginData\022"
    ",\n\017transition_data\030\003 \001(\0132\023.CMsgTransitio"
    "nData\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimation"
    "s\030\005 \003(\0132\022.CMsgAnimationData\032<\n\022Animation"
    "FrameData\022&\n\004data\030\001 \001(\0132\030.CMsgTransformO"
    "riginData2a\n\024animation_frame_data\022\027.CMsg"
    "AnimationFrameData\030\367\007 \001(\0132).CMsg3DTransf"
    "ormOrigin.AnimationFrameData\"\334\002\n\025CMsg3DT"
    "ransformMatrix\022\034\n\004base\030\001 \001(\0132\016.CMsgMatri"
    "x4x4\022,\n\017transition_data\030\002 \001(\0132\023.CMsgTran"
    "sitionData\022\"\n\ntransition\030\003 \001(\0132\016.CMsgMat"
    "rix4x4\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimatio"
    "ns\030\005 \003(\0132\022.CMsgAnimationData\0322\n\022Animatio"
    "nFrameData\022\034\n\004data\030\001 \001(\0132\016.CMsgMatrix4x4"
    "2a\n\024animation_frame_data\022\027.CMsgAnimation"
    "FrameData\030\350\007 \001(\0132).CMsg3DTransformMatrix"
    ".AnimationFrameData\"\314\002\n\020CMsgBorderRadius"
    "\022\032\n\004base\030\001 \001(\0132\014.CRadiusData\022,\n\017transiti"
    "on_data\030\002 \001(\0132\023.CMsgTransitionData\022 \n\ntr"
    "ansition\030\003 \001(\0132\014.CRadiusData\022\024\n\014style_sy"
    "mbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgAni"
    "mationData\0320\n\022AnimationFrameData\022\032\n\004data"
    "\030\001 \001(\0132\014.CRadiusData2\\\n\024animation_frame_"
    "data\022\027.CMsgAnimationFrameData\030\356\007 \001(\0132$.C"
    "MsgBorderRadius.AnimationFrameData\"\300\002\n\nC"
    "MsgBorder\022\032\n\004base\030\001 \001(\0132\014.CBorderData\022,\n"
    "\017transition_data\030\002 \001(\0132\023.CMsgTransitionD"
    "ata\022 \n\ntransition\030\003 \001(\0132\014.CBorderData\022\024\n"
    "\014style_symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132"
    "\022.CMsgAnimationData\0320\n\022AnimationFrameDat"
    "a\022\032\n\004data\030\001 \001(\0132\014.CBorderData2V\n\024animati"
    "on_frame_data\022\027.CMsgAnimationFrameData\030\361"
    "\007 \001(\0132\036.CMsgBorder.AnimationFrameData\"\317\002"
    "\n\rCMsgBoxShadow\022\035\n\004base\030\001 \001(\0132\017.CBoxShad"
    "owData\022,\n\017transition_data\030\002 \001(\0132\023.CMsgTr"
    "ansitionData\022#\n\ntransition\030\003 \001(\0132\017.CBoxS"
    "hadowData\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanima"
    "tions\030\005 \003(\0132\022.CMsgAnimationData\0323\n\022Anima"
    "tionFrameData\022\035\n\004data\030\001 \001(\0132\017.CBoxShadow"
    "Data2Y\n\024animation_frame_data\022\027.CMsgAnima"
    "tionFrameData\030\362\007 \001(\0132!.CMsgBoxShadow.Ani"
    "mationFrameData\"\324\002\n\016CMsgTextShadow\022\036\n\004ba"
    "se\030\001 \001(\0132\020.CTextShadowData\022,\n\017transition"
    "_data\030\002 \001(\0132\023.CMsgTransitionData\022$\n\ntran"
    "sition\030\003 \001(\0132\020.CTextShadowData\022\024\n\014style_"
    "symbol\030\004 \001(\r\022&\n\nanimations\030\005 \003(\0132\022.CMsgA"
    "nimationData\0324\n\022AnimationFrameData\022\036\n\004da"
    "ta\030\001 \001(\0132\020.CTextShadowData2Z\n\024animation_"
    "frame_data\022\027.CMsgAnimationFrameData\030\371\007 \001"
    "(\0132\".CMsgTextShadow.AnimationFrameData\"\277"
    "\002\n\010CMsgClip\022\033\n\004base\030\001 \001(\0132\r.CMsgClipData"
    "\022,\n\017transition_data\030\002 \001(\0132\023.CMsgTransiti"
    "onData\022!\n\ntransition\030\003 \001(\0132\r.CMsgClipDat"
    "a\022\024\n\014style_symbol\030\004 \001(\r\022&\n\nanimations\030\005 "
    "\003(\0132\022.CMsgAnimationData\0321\n\022AnimationFram"
    "eData\022\033\n\004data\030\001 \001(\0132\r.CMsgClipData2T\n\024an"
    "imation_frame_data\022\027.CMsgAnimationFrameD"
    "ata\030\372\007 \001(\0132\034.CMsgClip.AnimationFrameData"
    "\"x\n\021CMsgPushClipLayer\022\034\n\010top_left\030\001 \001(\0132"
    "\n.CMsgPoint\022 \n\014bottom_right\030\002 \001(\0132\n.CMsg"
    "Point\022#\n\rborder_radius\030\003 \001(\0132\014.CRadiusDa"
    "ta\"\022\n\020CMsgPopClipLayer\"\317\004\n\033CMsgPushPanel"
    "ContextInLayer\022\025\n\rtransform_m00\030\001 \001(\001\022\025\n"
    "\rtransform_m01\030\002 \001(\001\022\025\n\rtransform_m02\030\003 "
    "\001(\001\022\025\n\rtransform_m03\030\004 \001(\001\022\025\n\rtransform_"
    "m10\030\005 \001(\001\022\025\n\rtransform_m11\030\006 \001(\001\022\025\n\rtran"
    "sform_m12\030\007 \001(\001\022\025\n\rtransform_m13\030\010 \001(\001\022\025"
    "\n\rtransform_m20\030\t \001(\001\022\025\n\rtransform_m21\030\n"
    " \001(\001\022\025\n\rtransform_m22\030\013 \001(\001\022\025\n\rtransform"
    "_m23\030\014 \001(\001\022\025\n\rtransform_m30\030\r \001(\001\022\025\n\rtra"
    "nsform_m31\030\016 \001(\001\022\025\n\rtransform_m32\030\017 \001(\001\022"
    "\025\n\rtransform_m33\030\020 \001(\001\022#\n\nbox_shadow\030\021 \001"
    "(\0132\017.CBoxShadowData\022\r\n\005width\030\022 \001(\001\022\016\n\006he"
    "ight\030\023 \001(\001\022\022\n\nposition_x\030\024 \001(\001\022\022\n\npositi"
    "on_y\030\025 \001(\001\022\022\n\nposition_z\030\026 \001(\001\022\034\n\006border"
    "\030\027 \001(\0132\014.CBorderData\022\020\n\010scroll_x\030\030 \001(\001\022\020"
    "\n\010scroll_y\030\031 \001(\001\"\034\n\032CMsgPopPanelContextI"
    "nLayer\"\216\n\n\024CMsgPushAAndTContext\022\022\n\nconte"
    "xt_id\030\001 \001(\004\022\r\n\005width\030\003 \001(\001\022\016\n\006height\030\004 \001"
    "(\001\022!\n\031chilren_have_3dtransforms\030\005 \001(\010\022\016\n"
    "\006zindex\030\006 \001(\002\022*\n\016panel_position\030\007 \001(\0132\022."
    "CMsgPanelPosition\0220\n\020transform_matrix\030\010 "
    "\001(\0132\026.CMsg3DTransformMatrix\0220\n\020transform"
    "_origin\030\t \001(\0132\026.CMsg3DTransformOrigin\022:\n"
    "\025transform_perspective\030\n \001(\0132\033.CMsg3DTra"
    "nsformPerspective\022G\n\034transform_perspecti"
    "ve_origin\030\013 \001(\0132!.CMsg3DTransformPerspec"
    "tiveOrigin\022\035\n\007opacity\030\014 \001(\0132\014.CMsgOpacit"
    "y\022\036\n\nwash_color\030\r \001(\0132\n.CMsgColor\022 \n\thue"
    "_shift\030\016 \001(\0132\r.CMsgHueShift\022#\n\nsaturatio"
    "n\030\017 \001(\0132\017.CMsgSaturation\022#\n\nbrightness\030\020"
    " \001(\0132\017.CMsgBrightness\022\037\n\010contrast\030\021 \001(\0132"
    "\r.CMsgContrast\022&\n\014opacity_mask\030\022 \001(\0132\020.C"
    "MsgOpacityMask\022(\n\rborder_radius\030\023 \001(\0132\021."
    "CMsgBorderRadius\022(\n\rgaussian_blur\030\024 \001(\0132"
    "\021.CMsgGaussianBlur\022\033\n\006border\030\025 \001(\0132\013.CMs"
    "gBorder\022\"\n\nbox_shadow\030\026 \001(\0132\016.CMsgBoxSha"
    "dow\0223\n\021scale_2d_centered\030\027 \001(\0132\030.CMsgPoi"
    "ntWithTransition\022)\n\022rotate_2d_centered\030\030"
    " \001(\0132\r.CMsgRotate2D\022$\n\013text_shadow\030\031 \001(\013"
    "2\017.CMsgTextShadow\022\027\n\004clip\030\032 \001(\0132\t.CMsgCl"
    "ip\022\037\n\027suppress_clip_to_bounds\030\033 \001(\010\022\032\n\022n"
    "eeds_full_repaint\030\034 \001(\005\022\"\n\032needs_interme"
    "diate_texture\030\035 \001(\010\022\034\n\024clip_after_transf"
    "orm\030\036 \001(\010\022\026\n\016wants_hit_test\030\037 \001(\010\022\037\n\027wan"
    "ts_hit_test_children\030  \001(\010\022\026\n\016mix_blend_"
    "mode\030! \001(\r\022\031\n\021opaque_background\030\" \001(\010\022\031\n"
    "\021child_panel_count\030# \001(\r\022%\n\035wants_screen"
    "space_quad_output\030$ \001(\010\022&\n\036composition_l"
    "ayer_texture_name\030& \001(\t\")\n\023CMsgPopAAndTC"
    "ontext\022\022\n\ncontext_id\030\001 \001(\004\"\032\n\030CMsgBeginP"
    "aintBackground\"\030\n\026CMsgEndPaintBackground"
    "\"\024\n\022CMsgBeginPaintLast\"\022\n\020CMsgEndPaintLa"
    "st\"\243\001\n\022CMsgDrawFilledRect\022\034\n\010top_left\030\001 "
    "\001(\0132\n.CMsgPoint\022 \n\014bottom_right\030\002 \001(\0132\n."
    "CMsgPoint\0227\n\025fill_brush_collection\030\003 \001(\013"
    "2\030.CMsgFillBrushCollection\022\024\n\014antialiasi"
    "ng\030\004 \001(\r\"\253\001\n\024CMsgRenderFilledRect\022\034\n\010top"
    "_left\030\001 \001(\0132\n.CMsgPoint\022 \n\014bottom_right\030"
    "\002 \001(\0132\n.CMsgPoint\022=\n\025fill_brush_collecti"
    "on\030\003 \001(\0132\036.CMsgRenderFillBrushCollection"
    "\022\024\n\014antialiasing\030\004 \001(\r\"\234\002\n\024CMsgDrawTextu"
    "redRect\022\034\n\010top_left\030\001 \001(\0132\n.CMsgPoint\022 \n"
    "\014bottom_right\030\002 \001(\0132\n.CMsgPoint\022\022\n\ntextu"
    "re_id\030\003 \001(\r\022$\n\020texture_top_left\030\004 \001(\0132\n."
    "CMsgPoint\022(\n\024texture_bottom_right\030\005 \001(\0132"
    "\n.CMsgPoint\022\031\n\016texture_serial\030\006 \001(\005:\0010\022\036"
    "\n\023texture_sample_mode\030\007 \001(\r:\0010\022%\n\017textur"
    "e_opacity\030\010 \001(\0132\014.CMsgOpacity\"\223\002\n\026CMsgRe"
    "nderTexturedRect\022\034\n\010top_left\030\001 \001(\0132\n.CMs"
    "gPoint\022 \n\014bottom_right\030\002 \001(\0132\n.CMsgPoint"
    "\022\022\n\ntexture_id\030\003 \001(\r\022$\n\020texture_top_left"
    "\030\004 \001(\0132\n.CMsgPoint\022(\n\024texture_bottom_rig"
    "ht\030\005 \001(\0132\n.CMsgPoint\022\031\n\016texture_serial\030\006"
    " \001(\005:\0010\022\036\n\023texture_sample_mode\030\007 \001(\r:\0010\022"
    "\032\n\017texture_opacity\030\010 \001(\002:\0011\"@\n\017CMsgLockT"
    "exture\022\022\n\ntexture_id\030\001 \001(\r\022\031\n\016texture_se"
    "rial\030\002 \001(\005:\0010\"5\n\024CMsgTextInlineObject\022\r\n"
    "\005width\030\001 \001(\002\022\016\n\006height\030\002 \001(\002\"\223\002\n\016CMsgTex"
    "tFormat\022\021\n\tfont_name\030\001 \001(\t\022\021\n\tfont_size\030"
    "\002 \001(\001\022\027\n\013font_weight\030\003 \001(\005:\002-1\022\026\n\nfont_s"
    "tyle\030\004 \001(\005:\002-1\022\021\n\tunderline\030\005 \001(\010\022\025\n\rstr"
    "ikethrough\030\006 \001(\010\0227\n\025fill_brush_collectio"
    "n\030\007 \001(\0132\030.CMsgFillBrushCollection\022\031\n\016let"
    "ter_spacing\030\010 \001(\005:\0010\022,\n\rinline_object\030\t "
    "\001(\0132\025.CMsgTextInlineObject\"^\n\023CMsgTextRa"
    "ngeFormat\022\023\n\013start_index\030\001 \001(\r\022\021\n\tend_in"
    "dex\030\002 \001(\r\022\037\n\006format\030\003 \001(\0132\017.CMsgTextForm"
    "at\"\237\002\n\024CMsgRenderTextFormat\022\021\n\tfont_name"
    "\030\001 \001(\t\022\021\n\tfont_size\030\002 \001(\001\022\027\n\013font_weight"
    "\030\003 \001(\005:\002-1\022\026\n\nfont_style\030\004 \001(\005:\002-1\022\021\n\tun"
    "derline\030\005 \001(\010\022\025\n\rstrikethrough\030\006 \001(\010\022=\n\025"
    "fill_brush_collection\030\007 \001(\0132\036.CMsgRender"
    "FillBrushCollection\022\031\n\016letter_spacing\030\010 "
    "\001(\005:\0010\022,\n\rinline_object\030\t \001(\0132\025.CMsgText"
    "InlineObject\"j\n\031CMsgRenderTextRangeForma"
    "t\022\023\n\013start_index\030\001 \001(\r\022\021\n\tend_index\030\002 \001("
    "\r\022%\n\006format\030\003 \001(\0132\025.CMsgRenderTextFormat"
    "\"\264\002\n\022CMsgDrawTextRegion\022\020\n\010raw_text\030\013 \001("
    "\014\022\022\n\ntext_chars\030\014 \001(\005\022\025\n\rtext_encoding\030\r"
    " \001(\005\022\'\n\016default_format\030\003 \001(\0132\017.CMsgTextF"
    "ormat\022\022\n\ntext_align\030\004 \001(\r\022\023\n\013line_height"
    "\030\005 \001(\r\022\034\n\010top_left\030\006 \001(\0132\n.CMsgPoint\022 \n\014"
    "bottom_right\030\007 \001(\0132\n.CMsgPoint\022\020\n\010wrappi"
    "ng\030\010 \001(\010\022\020\n\010ellipsis\030\t \001(\010\022+\n\rrange_form"
    "ats\030\n \003(\0132\024.CMsgTextRangeFormat\"\351\002\n\024CMsg"
    "RenderTextRegion\022\020\n\010raw_text\030\014 \001(\014\022\022\n\nte"
    "xt_chars\030\r \001(\005\022\025\n\rtext_encoding\030\016 \001(\005\022-\n"
    "\016default_format\030\003 \001(\0132\025.CMsgRenderTextFo"
    "rmat\022\022\n\ntext_align\030\004 \001(\r\022\023\n\013line_height\030"
    "\005 \001(\r\022\034\n\010top_left\030\006 \001(\0132\n.CMsgPoint\022 \n\014b"
    "ottom_right\030\007 \001(\0132\n.CMsgPoint\022\020\n\010wrappin"
    "g\030\010 \001(\010\022\020\n\010ellipsis\030\t \001(\010\0221\n\rrange_forma"
    "ts\030\n \003(\0132\032.CMsgRenderTextRangeFormat\022%\n\013"
    "text_shadow\030\013 \001(\0132\020.CTextShadowData\"\343\001\n\031"
    "CMsgRequestRenderCallback\022\024\n\014callback_ob"
    "j\030\001 \001(\014\022\034\n\010top_left\030\002 \001(\0132\n.CMsgPoint\022 \n"
    "\014bottom_right\030\003 \001(\0132\n.CMsgPoint\022$\n\020top_l"
    "eft_padding\030\004 \001(\0132\n.CMsgPoint\022(\n\024bottom_"
    "right_padding\030\005 \001(\0132\n.CMsgPoint\022 \n\030needs"
    "_redraw_every_frame\030\006 \001(\010B\005H\001\200\001\000", 18152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rendermessages.proto", &protobuf_RegisterTypes);
  CMsgBeginFrame::default_instance_ = new CMsgBeginFrame();
  CMsgEndFrame::default_instance_ = new CMsgEndFrame();
  CMsgClearBackbuffer::default_instance_ = new CMsgClearBackbuffer();
  CMsgDeleteTexture::default_instance_ = new CMsgDeleteTexture();
  CMsgDeletePanel::default_instance_ = new CMsgDeletePanel();
  CMsgDeleteParticleSystem::default_instance_ = new CMsgDeleteParticleSystem();
  CMsgPoint::default_instance_ = new CMsgPoint();
  CMsgMatrix4x4::default_instance_ = new CMsgMatrix4x4();
  CRadiusData::default_instance_ = new CRadiusData();
  CRadiusData_CCornerRadius::default_instance_ = new CRadiusData_CCornerRadius();
  CBorderData::default_instance_ = new CBorderData();
  CBorderData_CBorderSide::default_instance_ = new CBorderData_CBorderSide();
  CBoxShadowData::default_instance_ = new CBoxShadowData();
  CTextShadowData::default_instance_ = new CTextShadowData();
  CRadialClipData::default_instance_ = new CRadialClipData();
  CMsgClipData::default_instance_ = new CMsgClipData();
  CMsgPushCompositingLayer::default_instance_ = new CMsgPushCompositingLayer();
  CMsgPopCompositingLayer::default_instance_ = new CMsgPopCompositingLayer();
  CMsgFreeCompositingLayer::default_instance_ = new CMsgFreeCompositingLayer();
  CMsgTransitionData::default_instance_ = new CMsgTransitionData();
  CMsgAnimationData::default_instance_ = new CMsgAnimationData();
  CMsgAnimationFrameData::default_instance_ = new CMsgAnimationFrameData();
  CMsgPointWithTransition::default_instance_ = new CMsgPointWithTransition();
  CMsgPointWithTransition_AnimationFrameData::default_instance_ = new CMsgPointWithTransition_AnimationFrameData();
  CMsgColor::default_instance_ = new CMsgColor();
  CMsgColor_AnimationFrameData::default_instance_ = new CMsgColor_AnimationFrameData();
  CMsgColorStop::default_instance_ = new CMsgColorStop();
  CMsgLinearGradient::default_instance_ = new CMsgLinearGradient();
  CMsgRadialGradient::default_instance_ = new CMsgRadialGradient();
  CMsgParticle::default_instance_ = new CMsgParticle();
  CMsgParticleSystem::default_instance_ = new CMsgParticleSystem();
  CMsgFillBrush::default_instance_ = new CMsgFillBrush();
  CMsgFillBrushCollection::default_instance_ = new CMsgFillBrushCollection();
  CMsgFillBrushCollection_AnimationFrameData::default_instance_ = new CMsgFillBrushCollection_AnimationFrameData();
  CMsgRenderFillBrushCollection::default_instance_ = new CMsgRenderFillBrushCollection();
  CMsgPanelPosition::default_instance_ = new CMsgPanelPosition();
  CMsgPanelPosition_AnimationFrameData::default_instance_ = new CMsgPanelPosition_AnimationFrameData();
  CMsgOpacity::default_instance_ = new CMsgOpacity();
  CMsgOpacity_AnimationFrameData::default_instance_ = new CMsgOpacity_AnimationFrameData();
  CMsgRotate2D::default_instance_ = new CMsgRotate2D();
  CMsgRotate2D_AnimationFrameData::default_instance_ = new CMsgRotate2D_AnimationFrameData();
  CMsgOpacityMaskData::default_instance_ = new CMsgOpacityMaskData();
  CMsgOpacityMask::default_instance_ = new CMsgOpacityMask();
  CMsgOpacityMask_AnimationFrameData::default_instance_ = new CMsgOpacityMask_AnimationFrameData();
  CMsgHueShift::default_instance_ = new CMsgHueShift();
  CMsgHueShift_AnimationFrameData::default_instance_ = new CMsgHueShift_AnimationFrameData();
  CMsgSaturation::default_instance_ = new CMsgSaturation();
  CMsgSaturation_AnimationFrameData::default_instance_ = new CMsgSaturation_AnimationFrameData();
  CMsgBrightness::default_instance_ = new CMsgBrightness();
  CMsgBrightness_AnimationFrameData::default_instance_ = new CMsgBrightness_AnimationFrameData();
  CMsgContrast::default_instance_ = new CMsgContrast();
  CMsgContrast_AnimationFrameData::default_instance_ = new CMsgContrast_AnimationFrameData();
  CMsgGaussianValues::default_instance_ = new CMsgGaussianValues();
  CMsgGaussianBlur::default_instance_ = new CMsgGaussianBlur();
  CMsgGaussianBlur_AnimationFrameData::default_instance_ = new CMsgGaussianBlur_AnimationFrameData();
  CMsg3DTransformPerspective::default_instance_ = new CMsg3DTransformPerspective();
  CMsg3DTransformPerspective_AnimationFrameData::default_instance_ = new CMsg3DTransformPerspective_AnimationFrameData();
  CMsg3DTransformPerspectiveOrigin::default_instance_ = new CMsg3DTransformPerspectiveOrigin();
  CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance_ = new CMsg3DTransformPerspectiveOrigin_AnimationFrameData();
  CMsgTransformOriginData::default_instance_ = new CMsgTransformOriginData();
  CMsg3DTransformOrigin::default_instance_ = new CMsg3DTransformOrigin();
  CMsg3DTransformOrigin_AnimationFrameData::default_instance_ = new CMsg3DTransformOrigin_AnimationFrameData();
  CMsg3DTransformMatrix::default_instance_ = new CMsg3DTransformMatrix();
  CMsg3DTransformMatrix_AnimationFrameData::default_instance_ = new CMsg3DTransformMatrix_AnimationFrameData();
  CMsgBorderRadius::default_instance_ = new CMsgBorderRadius();
  CMsgBorderRadius_AnimationFrameData::default_instance_ = new CMsgBorderRadius_AnimationFrameData();
  CMsgBorder::default_instance_ = new CMsgBorder();
  CMsgBorder_AnimationFrameData::default_instance_ = new CMsgBorder_AnimationFrameData();
  CMsgBoxShadow::default_instance_ = new CMsgBoxShadow();
  CMsgBoxShadow_AnimationFrameData::default_instance_ = new CMsgBoxShadow_AnimationFrameData();
  CMsgTextShadow::default_instance_ = new CMsgTextShadow();
  CMsgTextShadow_AnimationFrameData::default_instance_ = new CMsgTextShadow_AnimationFrameData();
  CMsgClip::default_instance_ = new CMsgClip();
  CMsgClip_AnimationFrameData::default_instance_ = new CMsgClip_AnimationFrameData();
  CMsgPushClipLayer::default_instance_ = new CMsgPushClipLayer();
  CMsgPopClipLayer::default_instance_ = new CMsgPopClipLayer();
  CMsgPushPanelContextInLayer::default_instance_ = new CMsgPushPanelContextInLayer();
  CMsgPopPanelContextInLayer::default_instance_ = new CMsgPopPanelContextInLayer();
  CMsgPushAAndTContext::default_instance_ = new CMsgPushAAndTContext();
  CMsgPopAAndTContext::default_instance_ = new CMsgPopAAndTContext();
  CMsgBeginPaintBackground::default_instance_ = new CMsgBeginPaintBackground();
  CMsgEndPaintBackground::default_instance_ = new CMsgEndPaintBackground();
  CMsgBeginPaintLast::default_instance_ = new CMsgBeginPaintLast();
  CMsgEndPaintLast::default_instance_ = new CMsgEndPaintLast();
  CMsgDrawFilledRect::default_instance_ = new CMsgDrawFilledRect();
  CMsgRenderFilledRect::default_instance_ = new CMsgRenderFilledRect();
  CMsgDrawTexturedRect::default_instance_ = new CMsgDrawTexturedRect();
  CMsgRenderTexturedRect::default_instance_ = new CMsgRenderTexturedRect();
  CMsgLockTexture::default_instance_ = new CMsgLockTexture();
  CMsgTextInlineObject::default_instance_ = new CMsgTextInlineObject();
  CMsgTextFormat::default_instance_ = new CMsgTextFormat();
  CMsgTextRangeFormat::default_instance_ = new CMsgTextRangeFormat();
  CMsgRenderTextFormat::default_instance_ = new CMsgRenderTextFormat();
  CMsgRenderTextRangeFormat::default_instance_ = new CMsgRenderTextRangeFormat();
  CMsgDrawTextRegion::default_instance_ = new CMsgDrawTextRegion();
  CMsgRenderTextRegion::default_instance_ = new CMsgRenderTextRegion();
  CMsgRequestRenderCallback::default_instance_ = new CMsgRequestRenderCallback();
  CMsgBeginFrame::default_instance_->InitAsDefaultInstance();
  CMsgEndFrame::default_instance_->InitAsDefaultInstance();
  CMsgClearBackbuffer::default_instance_->InitAsDefaultInstance();
  CMsgDeleteTexture::default_instance_->InitAsDefaultInstance();
  CMsgDeletePanel::default_instance_->InitAsDefaultInstance();
  CMsgDeleteParticleSystem::default_instance_->InitAsDefaultInstance();
  CMsgPoint::default_instance_->InitAsDefaultInstance();
  CMsgMatrix4x4::default_instance_->InitAsDefaultInstance();
  CRadiusData::default_instance_->InitAsDefaultInstance();
  CRadiusData_CCornerRadius::default_instance_->InitAsDefaultInstance();
  CBorderData::default_instance_->InitAsDefaultInstance();
  CBorderData_CBorderSide::default_instance_->InitAsDefaultInstance();
  CBoxShadowData::default_instance_->InitAsDefaultInstance();
  CTextShadowData::default_instance_->InitAsDefaultInstance();
  CRadialClipData::default_instance_->InitAsDefaultInstance();
  CMsgClipData::default_instance_->InitAsDefaultInstance();
  CMsgPushCompositingLayer::default_instance_->InitAsDefaultInstance();
  CMsgPopCompositingLayer::default_instance_->InitAsDefaultInstance();
  CMsgFreeCompositingLayer::default_instance_->InitAsDefaultInstance();
  CMsgTransitionData::default_instance_->InitAsDefaultInstance();
  CMsgAnimationData::default_instance_->InitAsDefaultInstance();
  CMsgAnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgPointWithTransition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1012, 11, false, false,
    &::CMsgPointWithTransition_AnimationFrameData::default_instance());
  CMsgPointWithTransition_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgColor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1001, 11, false, false,
    &::CMsgColor_AnimationFrameData::default_instance());
  CMsgColor_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgColorStop::default_instance_->InitAsDefaultInstance();
  CMsgLinearGradient::default_instance_->InitAsDefaultInstance();
  CMsgRadialGradient::default_instance_->InitAsDefaultInstance();
  CMsgParticle::default_instance_->InitAsDefaultInstance();
  CMsgParticleSystem::default_instance_->InitAsDefaultInstance();
  CMsgFillBrush::default_instance_->InitAsDefaultInstance();
  CMsgFillBrushCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1007, 11, false, false,
    &::CMsgFillBrushCollection_AnimationFrameData::default_instance());
  CMsgFillBrushCollection_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgRenderFillBrushCollection::default_instance_->InitAsDefaultInstance();
  CMsgPanelPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1011, 11, false, false,
    &::CMsgPanelPosition_AnimationFrameData::default_instance());
  CMsgPanelPosition_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgOpacity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1004, 11, false, false,
    &::CMsgOpacity_AnimationFrameData::default_instance());
  CMsgOpacity_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgRotate2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1014, 11, false, false,
    &::CMsgRotate2D_AnimationFrameData::default_instance());
  CMsgRotate2D_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgOpacityMaskData::default_instance_->InitAsDefaultInstance();
  CMsgOpacityMask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1013, 11, false, false,
    &::CMsgOpacityMask_AnimationFrameData::default_instance());
  CMsgOpacityMask_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgHueShift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1019, 11, false, false,
    &::CMsgHueShift_AnimationFrameData::default_instance());
  CMsgHueShift_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgSaturation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1005, 11, false, false,
    &::CMsgSaturation_AnimationFrameData::default_instance());
  CMsgSaturation_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgBrightness::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1020, 11, false, false,
    &::CMsgBrightness_AnimationFrameData::default_instance());
  CMsgBrightness_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgContrast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1021, 11, false, false,
    &::CMsgContrast_AnimationFrameData::default_instance());
  CMsgContrast_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgGaussianValues::default_instance_->InitAsDefaultInstance();
  CMsgGaussianBlur::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1008, 11, false, false,
    &::CMsgGaussianBlur_AnimationFrameData::default_instance());
  CMsgGaussianBlur_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsg3DTransformPerspective::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1003, 11, false, false,
    &::CMsg3DTransformPerspective_AnimationFrameData::default_instance());
  CMsg3DTransformPerspective_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsg3DTransformPerspectiveOrigin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1002, 11, false, false,
    &::CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance());
  CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgTransformOriginData::default_instance_->InitAsDefaultInstance();
  CMsg3DTransformOrigin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1015, 11, false, false,
    &::CMsg3DTransformOrigin_AnimationFrameData::default_instance());
  CMsg3DTransformOrigin_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsg3DTransformMatrix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1000, 11, false, false,
    &::CMsg3DTransformMatrix_AnimationFrameData::default_instance());
  CMsg3DTransformMatrix_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgBorderRadius::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1006, 11, false, false,
    &::CMsgBorderRadius_AnimationFrameData::default_instance());
  CMsgBorderRadius_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgBorder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1009, 11, false, false,
    &::CMsgBorder_AnimationFrameData::default_instance());
  CMsgBorder_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgBoxShadow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1010, 11, false, false,
    &::CMsgBoxShadow_AnimationFrameData::default_instance());
  CMsgBoxShadow_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgTextShadow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1017, 11, false, false,
    &::CMsgTextShadow_AnimationFrameData::default_instance());
  CMsgTextShadow_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgClip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::CMsgAnimationFrameData::default_instance(),
    1018, 11, false, false,
    &::CMsgClip_AnimationFrameData::default_instance());
  CMsgClip_AnimationFrameData::default_instance_->InitAsDefaultInstance();
  CMsgPushClipLayer::default_instance_->InitAsDefaultInstance();
  CMsgPopClipLayer::default_instance_->InitAsDefaultInstance();
  CMsgPushPanelContextInLayer::default_instance_->InitAsDefaultInstance();
  CMsgPopPanelContextInLayer::default_instance_->InitAsDefaultInstance();
  CMsgPushAAndTContext::default_instance_->InitAsDefaultInstance();
  CMsgPopAAndTContext::default_instance_->InitAsDefaultInstance();
  CMsgBeginPaintBackground::default_instance_->InitAsDefaultInstance();
  CMsgEndPaintBackground::default_instance_->InitAsDefaultInstance();
  CMsgBeginPaintLast::default_instance_->InitAsDefaultInstance();
  CMsgEndPaintLast::default_instance_->InitAsDefaultInstance();
  CMsgDrawFilledRect::default_instance_->InitAsDefaultInstance();
  CMsgRenderFilledRect::default_instance_->InitAsDefaultInstance();
  CMsgDrawTexturedRect::default_instance_->InitAsDefaultInstance();
  CMsgRenderTexturedRect::default_instance_->InitAsDefaultInstance();
  CMsgLockTexture::default_instance_->InitAsDefaultInstance();
  CMsgTextInlineObject::default_instance_->InitAsDefaultInstance();
  CMsgTextFormat::default_instance_->InitAsDefaultInstance();
  CMsgTextRangeFormat::default_instance_->InitAsDefaultInstance();
  CMsgRenderTextFormat::default_instance_->InitAsDefaultInstance();
  CMsgRenderTextRangeFormat::default_instance_->InitAsDefaultInstance();
  CMsgDrawTextRegion::default_instance_->InitAsDefaultInstance();
  CMsgRenderTextRegion::default_instance_->InitAsDefaultInstance();
  CMsgRequestRenderCallback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rendermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rendermessages_2eproto {
  StaticDescriptorInitializer_rendermessages_2eproto() {
    protobuf_AddDesc_rendermessages_2eproto();
  }
} static_descriptor_initializer_rendermessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgBeginFrame::kFramePaintTimeFieldNumber;
const int CMsgBeginFrame::kSurfaceWidthFieldNumber;
const int CMsgBeginFrame::kSurfaceHeightFieldNumber;
const int CMsgBeginFrame::kRenderTargetFieldNumber;
const int CMsgBeginFrame::kUiScaleFactorFieldNumber;
const int CMsgBeginFrame::kEmptyFrameFieldNumber;
const int CMsgBeginFrame::kClearGpuResourcesBeforeFrameFieldNumber;
#endif  // !_MSC_VER

CMsgBeginFrame::CMsgBeginFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBeginFrame)
}

void CMsgBeginFrame::InitAsDefaultInstance() {
}

CMsgBeginFrame::CMsgBeginFrame(const CMsgBeginFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBeginFrame)
}

void CMsgBeginFrame::SharedCtor() {
  _cached_size_ = 0;
  frame_paint_time_ = 0;
  surface_width_ = 0u;
  surface_height_ = 0u;
  render_target_ = 0u;
  ui_scale_factor_ = 0;
  empty_frame_ = false;
  clear_gpu_resources_before_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBeginFrame::~CMsgBeginFrame() {
  // @@protoc_insertion_point(destructor:CMsgBeginFrame)
  SharedDtor();
}

void CMsgBeginFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBeginFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBeginFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBeginFrame_descriptor_;
}

const CMsgBeginFrame& CMsgBeginFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBeginFrame* CMsgBeginFrame::default_instance_ = NULL;

CMsgBeginFrame* CMsgBeginFrame::New() const {
  return new CMsgBeginFrame;
}

void CMsgBeginFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgBeginFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(frame_paint_time_, clear_gpu_resources_before_frame_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBeginFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBeginFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double frame_paint_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frame_paint_time_)));
          set_has_frame_paint_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_surface_width;
        break;
      }

      // optional uint32 surface_width = 2;
      case 2: {
        if (tag == 16) {
         parse_surface_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surface_width_)));
          set_has_surface_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_surface_height;
        break;
      }

      // optional uint32 surface_height = 3;
      case 3: {
        if (tag == 24) {
         parse_surface_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surface_height_)));
          set_has_surface_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_render_target;
        break;
      }

      // optional uint32 render_target = 4;
      case 4: {
        if (tag == 32) {
         parse_render_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &render_target_)));
          set_has_render_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ui_scale_factor;
        break;
      }

      // optional double ui_scale_factor = 5;
      case 5: {
        if (tag == 41) {
         parse_ui_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ui_scale_factor_)));
          set_has_ui_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_empty_frame;
        break;
      }

      // optional bool empty_frame = 6;
      case 6: {
        if (tag == 48) {
         parse_empty_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_frame_)));
          set_has_empty_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_clear_gpu_resources_before_frame;
        break;
      }

      // optional bool clear_gpu_resources_before_frame = 7;
      case 7: {
        if (tag == 56) {
         parse_clear_gpu_resources_before_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_gpu_resources_before_frame_)));
          set_has_clear_gpu_resources_before_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBeginFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBeginFrame)
  return false;
#undef DO_
}

void CMsgBeginFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBeginFrame)
  // optional double frame_paint_time = 1;
  if (has_frame_paint_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->frame_paint_time(), output);
  }

  // optional uint32 surface_width = 2;
  if (has_surface_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->surface_width(), output);
  }

  // optional uint32 surface_height = 3;
  if (has_surface_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->surface_height(), output);
  }

  // optional uint32 render_target = 4;
  if (has_render_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->render_target(), output);
  }

  // optional double ui_scale_factor = 5;
  if (has_ui_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ui_scale_factor(), output);
  }

  // optional bool empty_frame = 6;
  if (has_empty_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->empty_frame(), output);
  }

  // optional bool clear_gpu_resources_before_frame = 7;
  if (has_clear_gpu_resources_before_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->clear_gpu_resources_before_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBeginFrame)
}

::google::protobuf::uint8* CMsgBeginFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBeginFrame)
  // optional double frame_paint_time = 1;
  if (has_frame_paint_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->frame_paint_time(), target);
  }

  // optional uint32 surface_width = 2;
  if (has_surface_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->surface_width(), target);
  }

  // optional uint32 surface_height = 3;
  if (has_surface_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->surface_height(), target);
  }

  // optional uint32 render_target = 4;
  if (has_render_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->render_target(), target);
  }

  // optional double ui_scale_factor = 5;
  if (has_ui_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ui_scale_factor(), target);
  }

  // optional bool empty_frame = 6;
  if (has_empty_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->empty_frame(), target);
  }

  // optional bool clear_gpu_resources_before_frame = 7;
  if (has_clear_gpu_resources_before_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->clear_gpu_resources_before_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBeginFrame)
  return target;
}

int CMsgBeginFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double frame_paint_time = 1;
    if (has_frame_paint_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 surface_width = 2;
    if (has_surface_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surface_width());
    }

    // optional uint32 surface_height = 3;
    if (has_surface_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surface_height());
    }

    // optional uint32 render_target = 4;
    if (has_render_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->render_target());
    }

    // optional double ui_scale_factor = 5;
    if (has_ui_scale_factor()) {
      total_size += 1 + 8;
    }

    // optional bool empty_frame = 6;
    if (has_empty_frame()) {
      total_size += 1 + 1;
    }

    // optional bool clear_gpu_resources_before_frame = 7;
    if (has_clear_gpu_resources_before_frame()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBeginFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBeginFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBeginFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBeginFrame::MergeFrom(const CMsgBeginFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_paint_time()) {
      set_frame_paint_time(from.frame_paint_time());
    }
    if (from.has_surface_width()) {
      set_surface_width(from.surface_width());
    }
    if (from.has_surface_height()) {
      set_surface_height(from.surface_height());
    }
    if (from.has_render_target()) {
      set_render_target(from.render_target());
    }
    if (from.has_ui_scale_factor()) {
      set_ui_scale_factor(from.ui_scale_factor());
    }
    if (from.has_empty_frame()) {
      set_empty_frame(from.empty_frame());
    }
    if (from.has_clear_gpu_resources_before_frame()) {
      set_clear_gpu_resources_before_frame(from.clear_gpu_resources_before_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBeginFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBeginFrame::CopyFrom(const CMsgBeginFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBeginFrame::IsInitialized() const {

  return true;
}

void CMsgBeginFrame::Swap(CMsgBeginFrame* other) {
  if (other != this) {
    std::swap(frame_paint_time_, other->frame_paint_time_);
    std::swap(surface_width_, other->surface_width_);
    std::swap(surface_height_, other->surface_height_);
    std::swap(render_target_, other->render_target_);
    std::swap(ui_scale_factor_, other->ui_scale_factor_);
    std::swap(empty_frame_, other->empty_frame_);
    std::swap(clear_gpu_resources_before_frame_, other->clear_gpu_resources_before_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBeginFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBeginFrame_descriptor_;
  metadata.reflection = CMsgBeginFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgEndFrame::kMouseCursorTextureIdFieldNumber;
const int CMsgEndFrame::kMouseCursorHotspotXFieldNumber;
const int CMsgEndFrame::kMouseCursorHotspotYFieldNumber;
#endif  // !_MSC_VER

CMsgEndFrame::CMsgEndFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgEndFrame)
}

void CMsgEndFrame::InitAsDefaultInstance() {
}

CMsgEndFrame::CMsgEndFrame(const CMsgEndFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgEndFrame)
}

void CMsgEndFrame::SharedCtor() {
  _cached_size_ = 0;
  mouse_cursor_texture_id_ = 0u;
  mouse_cursor_hotspot_x_ = 0;
  mouse_cursor_hotspot_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEndFrame::~CMsgEndFrame() {
  // @@protoc_insertion_point(destructor:CMsgEndFrame)
  SharedDtor();
}

void CMsgEndFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEndFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEndFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEndFrame_descriptor_;
}

const CMsgEndFrame& CMsgEndFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgEndFrame* CMsgEndFrame::default_instance_ = NULL;

CMsgEndFrame* CMsgEndFrame::New() const {
  return new CMsgEndFrame;
}

void CMsgEndFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgEndFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mouse_cursor_texture_id_, mouse_cursor_hotspot_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEndFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgEndFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mouse_cursor_texture_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_cursor_texture_id_)));
          set_has_mouse_cursor_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mouse_cursor_hotspot_x;
        break;
      }

      // optional float mouse_cursor_hotspot_x = 2;
      case 2: {
        if (tag == 21) {
         parse_mouse_cursor_hotspot_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mouse_cursor_hotspot_x_)));
          set_has_mouse_cursor_hotspot_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_mouse_cursor_hotspot_y;
        break;
      }

      // optional float mouse_cursor_hotspot_y = 3;
      case 3: {
        if (tag == 29) {
         parse_mouse_cursor_hotspot_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mouse_cursor_hotspot_y_)));
          set_has_mouse_cursor_hotspot_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgEndFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgEndFrame)
  return false;
#undef DO_
}

void CMsgEndFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgEndFrame)
  // optional uint32 mouse_cursor_texture_id = 1;
  if (has_mouse_cursor_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mouse_cursor_texture_id(), output);
  }

  // optional float mouse_cursor_hotspot_x = 2;
  if (has_mouse_cursor_hotspot_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mouse_cursor_hotspot_x(), output);
  }

  // optional float mouse_cursor_hotspot_y = 3;
  if (has_mouse_cursor_hotspot_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mouse_cursor_hotspot_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgEndFrame)
}

::google::protobuf::uint8* CMsgEndFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEndFrame)
  // optional uint32 mouse_cursor_texture_id = 1;
  if (has_mouse_cursor_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mouse_cursor_texture_id(), target);
  }

  // optional float mouse_cursor_hotspot_x = 2;
  if (has_mouse_cursor_hotspot_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mouse_cursor_hotspot_x(), target);
  }

  // optional float mouse_cursor_hotspot_y = 3;
  if (has_mouse_cursor_hotspot_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mouse_cursor_hotspot_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEndFrame)
  return target;
}

int CMsgEndFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mouse_cursor_texture_id = 1;
    if (has_mouse_cursor_texture_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_cursor_texture_id());
    }

    // optional float mouse_cursor_hotspot_x = 2;
    if (has_mouse_cursor_hotspot_x()) {
      total_size += 1 + 4;
    }

    // optional float mouse_cursor_hotspot_y = 3;
    if (has_mouse_cursor_hotspot_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEndFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEndFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEndFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEndFrame::MergeFrom(const CMsgEndFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mouse_cursor_texture_id()) {
      set_mouse_cursor_texture_id(from.mouse_cursor_texture_id());
    }
    if (from.has_mouse_cursor_hotspot_x()) {
      set_mouse_cursor_hotspot_x(from.mouse_cursor_hotspot_x());
    }
    if (from.has_mouse_cursor_hotspot_y()) {
      set_mouse_cursor_hotspot_y(from.mouse_cursor_hotspot_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEndFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEndFrame::CopyFrom(const CMsgEndFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEndFrame::IsInitialized() const {

  return true;
}

void CMsgEndFrame::Swap(CMsgEndFrame* other) {
  if (other != this) {
    std::swap(mouse_cursor_texture_id_, other->mouse_cursor_texture_id_);
    std::swap(mouse_cursor_hotspot_x_, other->mouse_cursor_hotspot_x_);
    std::swap(mouse_cursor_hotspot_y_, other->mouse_cursor_hotspot_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEndFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEndFrame_descriptor_;
  metadata.reflection = CMsgEndFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClearBackbuffer::kClearColorRgbaFieldNumber;
#endif  // !_MSC_VER

CMsgClearBackbuffer::CMsgClearBackbuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClearBackbuffer)
}

void CMsgClearBackbuffer::InitAsDefaultInstance() {
}

CMsgClearBackbuffer::CMsgClearBackbuffer(const CMsgClearBackbuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClearBackbuffer)
}

void CMsgClearBackbuffer::SharedCtor() {
  _cached_size_ = 0;
  clear_color_rgba_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClearBackbuffer::~CMsgClearBackbuffer() {
  // @@protoc_insertion_point(destructor:CMsgClearBackbuffer)
  SharedDtor();
}

void CMsgClearBackbuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClearBackbuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearBackbuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClearBackbuffer_descriptor_;
}

const CMsgClearBackbuffer& CMsgClearBackbuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgClearBackbuffer* CMsgClearBackbuffer::default_instance_ = NULL;

CMsgClearBackbuffer* CMsgClearBackbuffer::New() const {
  return new CMsgClearBackbuffer;
}

void CMsgClearBackbuffer::Clear() {
  clear_color_rgba_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClearBackbuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClearBackbuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clear_color_rgba = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_color_rgba_)));
          set_has_clear_color_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClearBackbuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClearBackbuffer)
  return false;
#undef DO_
}

void CMsgClearBackbuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClearBackbuffer)
  // optional uint32 clear_color_rgba = 1;
  if (has_clear_color_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clear_color_rgba(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClearBackbuffer)
}

::google::protobuf::uint8* CMsgClearBackbuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearBackbuffer)
  // optional uint32 clear_color_rgba = 1;
  if (has_clear_color_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clear_color_rgba(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearBackbuffer)
  return target;
}

int CMsgClearBackbuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clear_color_rgba = 1;
    if (has_clear_color_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_color_rgba());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearBackbuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClearBackbuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClearBackbuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClearBackbuffer::MergeFrom(const CMsgClearBackbuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear_color_rgba()) {
      set_clear_color_rgba(from.clear_color_rgba());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClearBackbuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearBackbuffer::CopyFrom(const CMsgClearBackbuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearBackbuffer::IsInitialized() const {

  return true;
}

void CMsgClearBackbuffer::Swap(CMsgClearBackbuffer* other) {
  if (other != this) {
    std::swap(clear_color_rgba_, other->clear_color_rgba_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClearBackbuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClearBackbuffer_descriptor_;
  metadata.reflection = CMsgClearBackbuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDeleteTexture::kTexturePointerFieldNumber;
#endif  // !_MSC_VER

CMsgDeleteTexture::CMsgDeleteTexture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDeleteTexture)
}

void CMsgDeleteTexture::InitAsDefaultInstance() {
}

CMsgDeleteTexture::CMsgDeleteTexture(const CMsgDeleteTexture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDeleteTexture)
}

void CMsgDeleteTexture::SharedCtor() {
  _cached_size_ = 0;
  texture_pointer_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDeleteTexture::~CMsgDeleteTexture() {
  // @@protoc_insertion_point(destructor:CMsgDeleteTexture)
  SharedDtor();
}

void CMsgDeleteTexture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDeleteTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDeleteTexture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDeleteTexture_descriptor_;
}

const CMsgDeleteTexture& CMsgDeleteTexture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDeleteTexture* CMsgDeleteTexture::default_instance_ = NULL;

CMsgDeleteTexture* CMsgDeleteTexture::New() const {
  return new CMsgDeleteTexture;
}

void CMsgDeleteTexture::Clear() {
  texture_pointer_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDeleteTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDeleteTexture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 texture_pointer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &texture_pointer_)));
          set_has_texture_pointer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDeleteTexture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDeleteTexture)
  return false;
#undef DO_
}

void CMsgDeleteTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDeleteTexture)
  // optional uint64 texture_pointer = 1;
  if (has_texture_pointer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->texture_pointer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDeleteTexture)
}

::google::protobuf::uint8* CMsgDeleteTexture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDeleteTexture)
  // optional uint64 texture_pointer = 1;
  if (has_texture_pointer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->texture_pointer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDeleteTexture)
  return target;
}

int CMsgDeleteTexture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 texture_pointer = 1;
    if (has_texture_pointer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->texture_pointer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDeleteTexture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDeleteTexture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDeleteTexture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDeleteTexture::MergeFrom(const CMsgDeleteTexture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_texture_pointer()) {
      set_texture_pointer(from.texture_pointer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDeleteTexture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDeleteTexture::CopyFrom(const CMsgDeleteTexture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDeleteTexture::IsInitialized() const {

  return true;
}

void CMsgDeleteTexture::Swap(CMsgDeleteTexture* other) {
  if (other != this) {
    std::swap(texture_pointer_, other->texture_pointer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDeleteTexture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDeleteTexture_descriptor_;
  metadata.reflection = CMsgDeleteTexture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDeletePanel::kContextIdFieldNumber;
#endif  // !_MSC_VER

CMsgDeletePanel::CMsgDeletePanel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDeletePanel)
}

void CMsgDeletePanel::InitAsDefaultInstance() {
}

CMsgDeletePanel::CMsgDeletePanel(const CMsgDeletePanel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDeletePanel)
}

void CMsgDeletePanel::SharedCtor() {
  _cached_size_ = 0;
  context_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDeletePanel::~CMsgDeletePanel() {
  // @@protoc_insertion_point(destructor:CMsgDeletePanel)
  SharedDtor();
}

void CMsgDeletePanel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDeletePanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDeletePanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDeletePanel_descriptor_;
}

const CMsgDeletePanel& CMsgDeletePanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDeletePanel* CMsgDeletePanel::default_instance_ = NULL;

CMsgDeletePanel* CMsgDeletePanel::New() const {
  return new CMsgDeletePanel;
}

void CMsgDeletePanel::Clear() {
  context_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDeletePanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDeletePanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 context_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_id_)));
          set_has_context_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDeletePanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDeletePanel)
  return false;
#undef DO_
}

void CMsgDeletePanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDeletePanel)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->context_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDeletePanel)
}

::google::protobuf::uint8* CMsgDeletePanel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDeletePanel)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->context_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDeletePanel)
  return target;
}

int CMsgDeletePanel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 context_id = 1;
    if (has_context_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDeletePanel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDeletePanel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDeletePanel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDeletePanel::MergeFrom(const CMsgDeletePanel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context_id()) {
      set_context_id(from.context_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDeletePanel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDeletePanel::CopyFrom(const CMsgDeletePanel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDeletePanel::IsInitialized() const {

  return true;
}

void CMsgDeletePanel::Swap(CMsgDeletePanel* other) {
  if (other != this) {
    std::swap(context_id_, other->context_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDeletePanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDeletePanel_descriptor_;
  metadata.reflection = CMsgDeletePanel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDeleteParticleSystem::kPanelHandleFieldNumber;
const int CMsgDeleteParticleSystem::kBrushIndexFieldNumber;
#endif  // !_MSC_VER

CMsgDeleteParticleSystem::CMsgDeleteParticleSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDeleteParticleSystem)
}

void CMsgDeleteParticleSystem::InitAsDefaultInstance() {
}

CMsgDeleteParticleSystem::CMsgDeleteParticleSystem(const CMsgDeleteParticleSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDeleteParticleSystem)
}

void CMsgDeleteParticleSystem::SharedCtor() {
  _cached_size_ = 0;
  panel_handle_ = GOOGLE_ULONGLONG(0);
  brush_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDeleteParticleSystem::~CMsgDeleteParticleSystem() {
  // @@protoc_insertion_point(destructor:CMsgDeleteParticleSystem)
  SharedDtor();
}

void CMsgDeleteParticleSystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDeleteParticleSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDeleteParticleSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDeleteParticleSystem_descriptor_;
}

const CMsgDeleteParticleSystem& CMsgDeleteParticleSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDeleteParticleSystem* CMsgDeleteParticleSystem::default_instance_ = NULL;

CMsgDeleteParticleSystem* CMsgDeleteParticleSystem::New() const {
  return new CMsgDeleteParticleSystem;
}

void CMsgDeleteParticleSystem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDeleteParticleSystem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(panel_handle_, brush_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDeleteParticleSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDeleteParticleSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 panel_handle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &panel_handle_)));
          set_has_panel_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_brush_index;
        break;
      }

      // optional uint32 brush_index = 2;
      case 2: {
        if (tag == 16) {
         parse_brush_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brush_index_)));
          set_has_brush_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDeleteParticleSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDeleteParticleSystem)
  return false;
#undef DO_
}

void CMsgDeleteParticleSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDeleteParticleSystem)
  // optional uint64 panel_handle = 1;
  if (has_panel_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->panel_handle(), output);
  }

  // optional uint32 brush_index = 2;
  if (has_brush_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->brush_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDeleteParticleSystem)
}

::google::protobuf::uint8* CMsgDeleteParticleSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDeleteParticleSystem)
  // optional uint64 panel_handle = 1;
  if (has_panel_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->panel_handle(), target);
  }

  // optional uint32 brush_index = 2;
  if (has_brush_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->brush_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDeleteParticleSystem)
  return target;
}

int CMsgDeleteParticleSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 panel_handle = 1;
    if (has_panel_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->panel_handle());
    }

    // optional uint32 brush_index = 2;
    if (has_brush_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brush_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDeleteParticleSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDeleteParticleSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDeleteParticleSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDeleteParticleSystem::MergeFrom(const CMsgDeleteParticleSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_panel_handle()) {
      set_panel_handle(from.panel_handle());
    }
    if (from.has_brush_index()) {
      set_brush_index(from.brush_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDeleteParticleSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDeleteParticleSystem::CopyFrom(const CMsgDeleteParticleSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDeleteParticleSystem::IsInitialized() const {

  return true;
}

void CMsgDeleteParticleSystem::Swap(CMsgDeleteParticleSystem* other) {
  if (other != this) {
    std::swap(panel_handle_, other->panel_handle_);
    std::swap(brush_index_, other->brush_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDeleteParticleSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDeleteParticleSystem_descriptor_;
  metadata.reflection = CMsgDeleteParticleSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPoint::kXFieldNumber;
const int CMsgPoint::kYFieldNumber;
const int CMsgPoint::kZFieldNumber;
#endif  // !_MSC_VER

CMsgPoint::CMsgPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPoint)
}

void CMsgPoint::InitAsDefaultInstance() {
}

CMsgPoint::CMsgPoint(const CMsgPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPoint)
}

void CMsgPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPoint::~CMsgPoint() {
  // @@protoc_insertion_point(destructor:CMsgPoint)
  SharedDtor();
}

void CMsgPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPoint_descriptor_;
}

const CMsgPoint& CMsgPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPoint* CMsgPoint::default_instance_ = NULL;

CMsgPoint* CMsgPoint::New() const {
  return new CMsgPoint;
}

void CMsgPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPoint)
  return false;
#undef DO_
}

void CMsgPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPoint)
}

::google::protobuf::uint8* CMsgPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoint)
  return target;
}

int CMsgPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPoint::MergeFrom(const CMsgPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPoint::CopyFrom(const CMsgPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoint::IsInitialized() const {

  return true;
}

void CMsgPoint::Swap(CMsgPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPoint_descriptor_;
  metadata.reflection = CMsgPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMatrix4x4::kM00FieldNumber;
const int CMsgMatrix4x4::kM01FieldNumber;
const int CMsgMatrix4x4::kM02FieldNumber;
const int CMsgMatrix4x4::kM03FieldNumber;
const int CMsgMatrix4x4::kM10FieldNumber;
const int CMsgMatrix4x4::kM11FieldNumber;
const int CMsgMatrix4x4::kM12FieldNumber;
const int CMsgMatrix4x4::kM13FieldNumber;
const int CMsgMatrix4x4::kM20FieldNumber;
const int CMsgMatrix4x4::kM21FieldNumber;
const int CMsgMatrix4x4::kM22FieldNumber;
const int CMsgMatrix4x4::kM23FieldNumber;
const int CMsgMatrix4x4::kM30FieldNumber;
const int CMsgMatrix4x4::kM31FieldNumber;
const int CMsgMatrix4x4::kM32FieldNumber;
const int CMsgMatrix4x4::kM33FieldNumber;
#endif  // !_MSC_VER

CMsgMatrix4x4::CMsgMatrix4x4()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgMatrix4x4)
}

void CMsgMatrix4x4::InitAsDefaultInstance() {
}

CMsgMatrix4x4::CMsgMatrix4x4(const CMsgMatrix4x4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgMatrix4x4)
}

void CMsgMatrix4x4::SharedCtor() {
  _cached_size_ = 0;
  m00_ = 0;
  m01_ = 0;
  m02_ = 0;
  m03_ = 0;
  m10_ = 0;
  m11_ = 0;
  m12_ = 0;
  m13_ = 0;
  m20_ = 0;
  m21_ = 0;
  m22_ = 0;
  m23_ = 0;
  m30_ = 0;
  m31_ = 0;
  m32_ = 0;
  m33_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMatrix4x4::~CMsgMatrix4x4() {
  // @@protoc_insertion_point(destructor:CMsgMatrix4x4)
  SharedDtor();
}

void CMsgMatrix4x4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgMatrix4x4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMatrix4x4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMatrix4x4_descriptor_;
}

const CMsgMatrix4x4& CMsgMatrix4x4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgMatrix4x4* CMsgMatrix4x4::default_instance_ = NULL;

CMsgMatrix4x4* CMsgMatrix4x4::New() const {
  return new CMsgMatrix4x4;
}

void CMsgMatrix4x4::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgMatrix4x4*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m00_, m13_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(m20_, m33_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMatrix4x4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgMatrix4x4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double m00 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m00_)));
          set_has_m00();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_m01;
        break;
      }

      // optional double m01 = 2;
      case 2: {
        if (tag == 17) {
         parse_m01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m01_)));
          set_has_m01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_m02;
        break;
      }

      // optional double m02 = 3;
      case 3: {
        if (tag == 25) {
         parse_m02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m02_)));
          set_has_m02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_m03;
        break;
      }

      // optional double m03 = 4;
      case 4: {
        if (tag == 33) {
         parse_m03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m03_)));
          set_has_m03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_m10;
        break;
      }

      // optional double m10 = 5;
      case 5: {
        if (tag == 41) {
         parse_m10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m10_)));
          set_has_m10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_m11;
        break;
      }

      // optional double m11 = 6;
      case 6: {
        if (tag == 49) {
         parse_m11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m11_)));
          set_has_m11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_m12;
        break;
      }

      // optional double m12 = 7;
      case 7: {
        if (tag == 57) {
         parse_m12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m12_)));
          set_has_m12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_m13;
        break;
      }

      // optional double m13 = 8;
      case 8: {
        if (tag == 65) {
         parse_m13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m13_)));
          set_has_m13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_m20;
        break;
      }

      // optional double m20 = 9;
      case 9: {
        if (tag == 73) {
         parse_m20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m20_)));
          set_has_m20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_m21;
        break;
      }

      // optional double m21 = 10;
      case 10: {
        if (tag == 81) {
         parse_m21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m21_)));
          set_has_m21();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_m22;
        break;
      }

      // optional double m22 = 11;
      case 11: {
        if (tag == 89) {
         parse_m22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m22_)));
          set_has_m22();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_m23;
        break;
      }

      // optional double m23 = 12;
      case 12: {
        if (tag == 97) {
         parse_m23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m23_)));
          set_has_m23();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_m30;
        break;
      }

      // optional double m30 = 13;
      case 13: {
        if (tag == 105) {
         parse_m30:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m30_)));
          set_has_m30();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_m31;
        break;
      }

      // optional double m31 = 14;
      case 14: {
        if (tag == 113) {
         parse_m31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m31_)));
          set_has_m31();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_m32;
        break;
      }

      // optional double m32 = 15;
      case 15: {
        if (tag == 121) {
         parse_m32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m32_)));
          set_has_m32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_m33;
        break;
      }

      // optional double m33 = 16;
      case 16: {
        if (tag == 129) {
         parse_m33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m33_)));
          set_has_m33();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgMatrix4x4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgMatrix4x4)
  return false;
#undef DO_
}

void CMsgMatrix4x4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgMatrix4x4)
  // optional double m00 = 1;
  if (has_m00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->m00(), output);
  }

  // optional double m01 = 2;
  if (has_m01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->m01(), output);
  }

  // optional double m02 = 3;
  if (has_m02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->m02(), output);
  }

  // optional double m03 = 4;
  if (has_m03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m03(), output);
  }

  // optional double m10 = 5;
  if (has_m10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->m10(), output);
  }

  // optional double m11 = 6;
  if (has_m11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->m11(), output);
  }

  // optional double m12 = 7;
  if (has_m12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->m12(), output);
  }

  // optional double m13 = 8;
  if (has_m13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->m13(), output);
  }

  // optional double m20 = 9;
  if (has_m20()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->m20(), output);
  }

  // optional double m21 = 10;
  if (has_m21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->m21(), output);
  }

  // optional double m22 = 11;
  if (has_m22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->m22(), output);
  }

  // optional double m23 = 12;
  if (has_m23()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->m23(), output);
  }

  // optional double m30 = 13;
  if (has_m30()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->m30(), output);
  }

  // optional double m31 = 14;
  if (has_m31()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->m31(), output);
  }

  // optional double m32 = 15;
  if (has_m32()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->m32(), output);
  }

  // optional double m33 = 16;
  if (has_m33()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->m33(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgMatrix4x4)
}

::google::protobuf::uint8* CMsgMatrix4x4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatrix4x4)
  // optional double m00 = 1;
  if (has_m00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->m00(), target);
  }

  // optional double m01 = 2;
  if (has_m01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->m01(), target);
  }

  // optional double m02 = 3;
  if (has_m02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->m02(), target);
  }

  // optional double m03 = 4;
  if (has_m03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m03(), target);
  }

  // optional double m10 = 5;
  if (has_m10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->m10(), target);
  }

  // optional double m11 = 6;
  if (has_m11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->m11(), target);
  }

  // optional double m12 = 7;
  if (has_m12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->m12(), target);
  }

  // optional double m13 = 8;
  if (has_m13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->m13(), target);
  }

  // optional double m20 = 9;
  if (has_m20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->m20(), target);
  }

  // optional double m21 = 10;
  if (has_m21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->m21(), target);
  }

  // optional double m22 = 11;
  if (has_m22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->m22(), target);
  }

  // optional double m23 = 12;
  if (has_m23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->m23(), target);
  }

  // optional double m30 = 13;
  if (has_m30()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->m30(), target);
  }

  // optional double m31 = 14;
  if (has_m31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->m31(), target);
  }

  // optional double m32 = 15;
  if (has_m32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->m32(), target);
  }

  // optional double m33 = 16;
  if (has_m33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->m33(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatrix4x4)
  return target;
}

int CMsgMatrix4x4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double m00 = 1;
    if (has_m00()) {
      total_size += 1 + 8;
    }

    // optional double m01 = 2;
    if (has_m01()) {
      total_size += 1 + 8;
    }

    // optional double m02 = 3;
    if (has_m02()) {
      total_size += 1 + 8;
    }

    // optional double m03 = 4;
    if (has_m03()) {
      total_size += 1 + 8;
    }

    // optional double m10 = 5;
    if (has_m10()) {
      total_size += 1 + 8;
    }

    // optional double m11 = 6;
    if (has_m11()) {
      total_size += 1 + 8;
    }

    // optional double m12 = 7;
    if (has_m12()) {
      total_size += 1 + 8;
    }

    // optional double m13 = 8;
    if (has_m13()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double m20 = 9;
    if (has_m20()) {
      total_size += 1 + 8;
    }

    // optional double m21 = 10;
    if (has_m21()) {
      total_size += 1 + 8;
    }

    // optional double m22 = 11;
    if (has_m22()) {
      total_size += 1 + 8;
    }

    // optional double m23 = 12;
    if (has_m23()) {
      total_size += 1 + 8;
    }

    // optional double m30 = 13;
    if (has_m30()) {
      total_size += 1 + 8;
    }

    // optional double m31 = 14;
    if (has_m31()) {
      total_size += 1 + 8;
    }

    // optional double m32 = 15;
    if (has_m32()) {
      total_size += 1 + 8;
    }

    // optional double m33 = 16;
    if (has_m33()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMatrix4x4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMatrix4x4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMatrix4x4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMatrix4x4::MergeFrom(const CMsgMatrix4x4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m00()) {
      set_m00(from.m00());
    }
    if (from.has_m01()) {
      set_m01(from.m01());
    }
    if (from.has_m02()) {
      set_m02(from.m02());
    }
    if (from.has_m03()) {
      set_m03(from.m03());
    }
    if (from.has_m10()) {
      set_m10(from.m10());
    }
    if (from.has_m11()) {
      set_m11(from.m11());
    }
    if (from.has_m12()) {
      set_m12(from.m12());
    }
    if (from.has_m13()) {
      set_m13(from.m13());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m20()) {
      set_m20(from.m20());
    }
    if (from.has_m21()) {
      set_m21(from.m21());
    }
    if (from.has_m22()) {
      set_m22(from.m22());
    }
    if (from.has_m23()) {
      set_m23(from.m23());
    }
    if (from.has_m30()) {
      set_m30(from.m30());
    }
    if (from.has_m31()) {
      set_m31(from.m31());
    }
    if (from.has_m32()) {
      set_m32(from.m32());
    }
    if (from.has_m33()) {
      set_m33(from.m33());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMatrix4x4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatrix4x4::CopyFrom(const CMsgMatrix4x4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatrix4x4::IsInitialized() const {

  return true;
}

void CMsgMatrix4x4::Swap(CMsgMatrix4x4* other) {
  if (other != this) {
    std::swap(m00_, other->m00_);
    std::swap(m01_, other->m01_);
    std::swap(m02_, other->m02_);
    std::swap(m03_, other->m03_);
    std::swap(m10_, other->m10_);
    std::swap(m11_, other->m11_);
    std::swap(m12_, other->m12_);
    std::swap(m13_, other->m13_);
    std::swap(m20_, other->m20_);
    std::swap(m21_, other->m21_);
    std::swap(m22_, other->m22_);
    std::swap(m23_, other->m23_);
    std::swap(m30_, other->m30_);
    std::swap(m31_, other->m31_);
    std::swap(m32_, other->m32_);
    std::swap(m33_, other->m33_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMatrix4x4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMatrix4x4_descriptor_;
  metadata.reflection = CMsgMatrix4x4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRadiusData_CCornerRadius::kHorizontalFieldNumber;
const int CRadiusData_CCornerRadius::kVerticalFieldNumber;
#endif  // !_MSC_VER

CRadiusData_CCornerRadius::CRadiusData_CCornerRadius()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CRadiusData.CCornerRadius)
}

void CRadiusData_CCornerRadius::InitAsDefaultInstance() {
}

CRadiusData_CCornerRadius::CRadiusData_CCornerRadius(const CRadiusData_CCornerRadius& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CRadiusData.CCornerRadius)
}

void CRadiusData_CCornerRadius::SharedCtor() {
  _cached_size_ = 0;
  horizontal_ = 0;
  vertical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRadiusData_CCornerRadius::~CRadiusData_CCornerRadius() {
  // @@protoc_insertion_point(destructor:CRadiusData.CCornerRadius)
  SharedDtor();
}

void CRadiusData_CCornerRadius::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRadiusData_CCornerRadius::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRadiusData_CCornerRadius::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRadiusData_CCornerRadius_descriptor_;
}

const CRadiusData_CCornerRadius& CRadiusData_CCornerRadius::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CRadiusData_CCornerRadius* CRadiusData_CCornerRadius::default_instance_ = NULL;

CRadiusData_CCornerRadius* CRadiusData_CCornerRadius::New() const {
  return new CRadiusData_CCornerRadius;
}

void CRadiusData_CCornerRadius::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CRadiusData_CCornerRadius*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(horizontal_, vertical_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRadiusData_CCornerRadius::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CRadiusData.CCornerRadius)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double horizontal = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_)));
          set_has_horizontal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vertical;
        break;
      }

      // optional double vertical = 2;
      case 2: {
        if (tag == 17) {
         parse_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_)));
          set_has_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CRadiusData.CCornerRadius)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CRadiusData.CCornerRadius)
  return false;
#undef DO_
}

void CRadiusData_CCornerRadius::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CRadiusData.CCornerRadius)
  // optional double horizontal = 1;
  if (has_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->horizontal(), output);
  }

  // optional double vertical = 2;
  if (has_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vertical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CRadiusData.CCornerRadius)
}

::google::protobuf::uint8* CRadiusData_CCornerRadius::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRadiusData.CCornerRadius)
  // optional double horizontal = 1;
  if (has_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal(), target);
  }

  // optional double vertical = 2;
  if (has_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRadiusData.CCornerRadius)
  return target;
}

int CRadiusData_CCornerRadius::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double horizontal = 1;
    if (has_horizontal()) {
      total_size += 1 + 8;
    }

    // optional double vertical = 2;
    if (has_vertical()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRadiusData_CCornerRadius::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRadiusData_CCornerRadius* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRadiusData_CCornerRadius*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRadiusData_CCornerRadius::MergeFrom(const CRadiusData_CCornerRadius& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal()) {
      set_horizontal(from.horizontal());
    }
    if (from.has_vertical()) {
      set_vertical(from.vertical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRadiusData_CCornerRadius::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRadiusData_CCornerRadius::CopyFrom(const CRadiusData_CCornerRadius& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRadiusData_CCornerRadius::IsInitialized() const {

  return true;
}

void CRadiusData_CCornerRadius::Swap(CRadiusData_CCornerRadius* other) {
  if (other != this) {
    std::swap(horizontal_, other->horizontal_);
    std::swap(vertical_, other->vertical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRadiusData_CCornerRadius::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRadiusData_CCornerRadius_descriptor_;
  metadata.reflection = CRadiusData_CCornerRadius_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CRadiusData::kTopLeftFieldNumber;
const int CRadiusData::kTopRightFieldNumber;
const int CRadiusData::kBottomRightFieldNumber;
const int CRadiusData::kBottomLeftFieldNumber;
#endif  // !_MSC_VER

CRadiusData::CRadiusData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CRadiusData)
}

void CRadiusData::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CRadiusData_CCornerRadius*>(&::CRadiusData_CCornerRadius::default_instance());
  top_right_ = const_cast< ::CRadiusData_CCornerRadius*>(&::CRadiusData_CCornerRadius::default_instance());
  bottom_right_ = const_cast< ::CRadiusData_CCornerRadius*>(&::CRadiusData_CCornerRadius::default_instance());
  bottom_left_ = const_cast< ::CRadiusData_CCornerRadius*>(&::CRadiusData_CCornerRadius::default_instance());
}

CRadiusData::CRadiusData(const CRadiusData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CRadiusData)
}

void CRadiusData::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  top_right_ = NULL;
  bottom_right_ = NULL;
  bottom_left_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRadiusData::~CRadiusData() {
  // @@protoc_insertion_point(destructor:CRadiusData)
  SharedDtor();
}

void CRadiusData::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete top_right_;
    delete bottom_right_;
    delete bottom_left_;
  }
}

void CRadiusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRadiusData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRadiusData_descriptor_;
}

const CRadiusData& CRadiusData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CRadiusData* CRadiusData::default_instance_ = NULL;

CRadiusData* CRadiusData::New() const {
  return new CRadiusData;
}

void CRadiusData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CRadiusData_CCornerRadius::Clear();
    }
    if (has_top_right()) {
      if (top_right_ != NULL) top_right_->::CRadiusData_CCornerRadius::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CRadiusData_CCornerRadius::Clear();
    }
    if (has_bottom_left()) {
      if (bottom_left_ != NULL) bottom_left_->::CRadiusData_CCornerRadius::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRadiusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CRadiusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CRadiusData.CCornerRadius top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_right;
        break;
      }

      // optional .CRadiusData.CCornerRadius top_right = 2;
      case 2: {
        if (tag == 18) {
         parse_top_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom_right;
        break;
      }

      // optional .CRadiusData.CCornerRadius bottom_right = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bottom_left;
        break;
      }

      // optional .CRadiusData.CCornerRadius bottom_left = 4;
      case 4: {
        if (tag == 34) {
         parse_bottom_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CRadiusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CRadiusData)
  return false;
#undef DO_
}

void CRadiusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CRadiusData)
  // optional .CRadiusData.CCornerRadius top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CRadiusData.CCornerRadius top_right = 2;
  if (has_top_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_right(), output);
  }

  // optional .CRadiusData.CCornerRadius bottom_right = 3;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bottom_right(), output);
  }

  // optional .CRadiusData.CCornerRadius bottom_left = 4;
  if (has_bottom_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bottom_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CRadiusData)
}

::google::protobuf::uint8* CRadiusData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRadiusData)
  // optional .CRadiusData.CCornerRadius top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CRadiusData.CCornerRadius top_right = 2;
  if (has_top_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_right(), target);
  }

  // optional .CRadiusData.CCornerRadius bottom_right = 3;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bottom_right(), target);
  }

  // optional .CRadiusData.CCornerRadius bottom_left = 4;
  if (has_bottom_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bottom_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRadiusData)
  return target;
}

int CRadiusData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CRadiusData.CCornerRadius top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CRadiusData.CCornerRadius top_right = 2;
    if (has_top_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_right());
    }

    // optional .CRadiusData.CCornerRadius bottom_right = 3;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional .CRadiusData.CCornerRadius bottom_left = 4;
    if (has_bottom_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRadiusData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRadiusData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRadiusData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRadiusData::MergeFrom(const CRadiusData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CRadiusData_CCornerRadius::MergeFrom(from.top_left());
    }
    if (from.has_top_right()) {
      mutable_top_right()->::CRadiusData_CCornerRadius::MergeFrom(from.top_right());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CRadiusData_CCornerRadius::MergeFrom(from.bottom_right());
    }
    if (from.has_bottom_left()) {
      mutable_bottom_left()->::CRadiusData_CCornerRadius::MergeFrom(from.bottom_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRadiusData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRadiusData::CopyFrom(const CRadiusData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRadiusData::IsInitialized() const {

  return true;
}

void CRadiusData::Swap(CRadiusData* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(top_right_, other->top_right_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(bottom_left_, other->bottom_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRadiusData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRadiusData_descriptor_;
  metadata.reflection = CRadiusData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CBorderData_CBorderSide::kStyleFieldNumber;
const int CBorderData_CBorderSide::kWidthFieldNumber;
const int CBorderData_CBorderSide::kColorFieldNumber;
#endif  // !_MSC_VER

CBorderData_CBorderSide::CBorderData_CBorderSide()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBorderData.CBorderSide)
}

void CBorderData_CBorderSide::InitAsDefaultInstance() {
}

CBorderData_CBorderSide::CBorderData_CBorderSide(const CBorderData_CBorderSide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CBorderData.CBorderSide)
}

void CBorderData_CBorderSide::SharedCtor() {
  _cached_size_ = 0;
  style_ = 0u;
  width_ = 0;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBorderData_CBorderSide::~CBorderData_CBorderSide() {
  // @@protoc_insertion_point(destructor:CBorderData.CBorderSide)
  SharedDtor();
}

void CBorderData_CBorderSide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CBorderData_CBorderSide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBorderData_CBorderSide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBorderData_CBorderSide_descriptor_;
}

const CBorderData_CBorderSide& CBorderData_CBorderSide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CBorderData_CBorderSide* CBorderData_CBorderSide::default_instance_ = NULL;

CBorderData_CBorderSide* CBorderData_CBorderSide::New() const {
  return new CBorderData_CBorderSide;
}

void CBorderData_CBorderSide::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CBorderData_CBorderSide*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, color_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBorderData_CBorderSide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBorderData.CBorderSide)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 style = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_width;
        break;
      }

      // optional double width = 2;
      case 2: {
        if (tag == 17) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional uint32 color = 3;
      case 3: {
        if (tag == 24) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBorderData.CBorderSide)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBorderData.CBorderSide)
  return false;
#undef DO_
}

void CBorderData_CBorderSide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBorderData.CBorderSide)
  // optional uint32 style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->style(), output);
  }

  // optional double width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // optional uint32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBorderData.CBorderSide)
}

::google::protobuf::uint8* CBorderData_CBorderSide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBorderData.CBorderSide)
  // optional uint32 style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->style(), target);
  }

  // optional double width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // optional uint32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBorderData.CBorderSide)
  return target;
}

int CBorderData_CBorderSide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional uint32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBorderData_CBorderSide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBorderData_CBorderSide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBorderData_CBorderSide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBorderData_CBorderSide::MergeFrom(const CBorderData_CBorderSide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBorderData_CBorderSide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBorderData_CBorderSide::CopyFrom(const CBorderData_CBorderSide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBorderData_CBorderSide::IsInitialized() const {

  return true;
}

void CBorderData_CBorderSide::Swap(CBorderData_CBorderSide* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(width_, other->width_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBorderData_CBorderSide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBorderData_CBorderSide_descriptor_;
  metadata.reflection = CBorderData_CBorderSide_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CBorderData::kTopFieldNumber;
const int CBorderData::kRightFieldNumber;
const int CBorderData::kBottomFieldNumber;
const int CBorderData::kLeftFieldNumber;
#endif  // !_MSC_VER

CBorderData::CBorderData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBorderData)
}

void CBorderData::InitAsDefaultInstance() {
  top_ = const_cast< ::CBorderData_CBorderSide*>(&::CBorderData_CBorderSide::default_instance());
  right_ = const_cast< ::CBorderData_CBorderSide*>(&::CBorderData_CBorderSide::default_instance());
  bottom_ = const_cast< ::CBorderData_CBorderSide*>(&::CBorderData_CBorderSide::default_instance());
  left_ = const_cast< ::CBorderData_CBorderSide*>(&::CBorderData_CBorderSide::default_instance());
}

CBorderData::CBorderData(const CBorderData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CBorderData)
}

void CBorderData::SharedCtor() {
  _cached_size_ = 0;
  top_ = NULL;
  right_ = NULL;
  bottom_ = NULL;
  left_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBorderData::~CBorderData() {
  // @@protoc_insertion_point(destructor:CBorderData)
  SharedDtor();
}

void CBorderData::SharedDtor() {
  if (this != default_instance_) {
    delete top_;
    delete right_;
    delete bottom_;
    delete left_;
  }
}

void CBorderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBorderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBorderData_descriptor_;
}

const CBorderData& CBorderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CBorderData* CBorderData::default_instance_ = NULL;

CBorderData* CBorderData::New() const {
  return new CBorderData;
}

void CBorderData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_top()) {
      if (top_ != NULL) top_->::CBorderData_CBorderSide::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::CBorderData_CBorderSide::Clear();
    }
    if (has_bottom()) {
      if (bottom_ != NULL) bottom_->::CBorderData_CBorderSide::Clear();
    }
    if (has_left()) {
      if (left_ != NULL) left_->::CBorderData_CBorderSide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBorderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBorderData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBorderData.CBorderSide top = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional .CBorderData.CBorderSide right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // optional .CBorderData.CBorderSide bottom = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_left;
        break;
      }

      // optional .CBorderData.CBorderSide left = 4;
      case 4: {
        if (tag == 34) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBorderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBorderData)
  return false;
#undef DO_
}

void CBorderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBorderData)
  // optional .CBorderData.CBorderSide top = 1;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top(), output);
  }

  // optional .CBorderData.CBorderSide right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right(), output);
  }

  // optional .CBorderData.CBorderSide bottom = 3;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bottom(), output);
  }

  // optional .CBorderData.CBorderSide left = 4;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBorderData)
}

::google::protobuf::uint8* CBorderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBorderData)
  // optional .CBorderData.CBorderSide top = 1;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top(), target);
  }

  // optional .CBorderData.CBorderSide right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right(), target);
  }

  // optional .CBorderData.CBorderSide bottom = 3;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bottom(), target);
  }

  // optional .CBorderData.CBorderSide left = 4;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBorderData)
  return target;
}

int CBorderData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBorderData.CBorderSide top = 1;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top());
    }

    // optional .CBorderData.CBorderSide right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

    // optional .CBorderData.CBorderSide bottom = 3;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom());
    }

    // optional .CBorderData.CBorderSide left = 4;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBorderData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBorderData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBorderData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBorderData::MergeFrom(const CBorderData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top()) {
      mutable_top()->::CBorderData_CBorderSide::MergeFrom(from.top());
    }
    if (from.has_right()) {
      mutable_right()->::CBorderData_CBorderSide::MergeFrom(from.right());
    }
    if (from.has_bottom()) {
      mutable_bottom()->::CBorderData_CBorderSide::MergeFrom(from.bottom());
    }
    if (from.has_left()) {
      mutable_left()->::CBorderData_CBorderSide::MergeFrom(from.left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBorderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBorderData::CopyFrom(const CBorderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBorderData::IsInitialized() const {

  return true;
}

void CBorderData::Swap(CBorderData* other) {
  if (other != this) {
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(left_, other->left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBorderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBorderData_descriptor_;
  metadata.reflection = CBorderData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CBoxShadowData::kInsetFieldNumber;
const int CBoxShadowData::kHorizontalOffsetFieldNumber;
const int CBoxShadowData::kVerticalOffsetFieldNumber;
const int CBoxShadowData::kBlurRadiusFieldNumber;
const int CBoxShadowData::kSpreadDistanceFieldNumber;
const int CBoxShadowData::kColorFieldNumber;
const int CBoxShadowData::kFillFieldNumber;
const int CBoxShadowData::kAnimatingFieldNumber;
#endif  // !_MSC_VER

CBoxShadowData::CBoxShadowData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBoxShadowData)
}

void CBoxShadowData::InitAsDefaultInstance() {
}

CBoxShadowData::CBoxShadowData(const CBoxShadowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CBoxShadowData)
}

void CBoxShadowData::SharedCtor() {
  _cached_size_ = 0;
  inset_ = false;
  horizontal_offset_ = 0;
  vertical_offset_ = 0;
  blur_radius_ = 0;
  spread_distance_ = 0;
  color_ = 0u;
  fill_ = false;
  animating_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBoxShadowData::~CBoxShadowData() {
  // @@protoc_insertion_point(destructor:CBoxShadowData)
  SharedDtor();
}

void CBoxShadowData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CBoxShadowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBoxShadowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBoxShadowData_descriptor_;
}

const CBoxShadowData& CBoxShadowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CBoxShadowData* CBoxShadowData::default_instance_ = NULL;

CBoxShadowData* CBoxShadowData::New() const {
  return new CBoxShadowData;
}

void CBoxShadowData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CBoxShadowData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(horizontal_offset_, color_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBoxShadowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBoxShadowData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool inset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inset_)));
          set_has_inset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_horizontal_offset;
        break;
      }

      // optional double horizontal_offset = 2;
      case 2: {
        if (tag == 17) {
         parse_horizontal_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_offset_)));
          set_has_horizontal_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vertical_offset;
        break;
      }

      // optional double vertical_offset = 3;
      case 3: {
        if (tag == 25) {
         parse_vertical_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_offset_)));
          set_has_vertical_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_blur_radius;
        break;
      }

      // optional double blur_radius = 4;
      case 4: {
        if (tag == 33) {
         parse_blur_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blur_radius_)));
          set_has_blur_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_spread_distance;
        break;
      }

      // optional double spread_distance = 5;
      case 5: {
        if (tag == 41) {
         parse_spread_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spread_distance_)));
          set_has_spread_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional uint32 color = 6;
      case 6: {
        if (tag == 48) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fill;
        break;
      }

      // optional bool fill = 7;
      case 7: {
        if (tag == 56) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
          set_has_fill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_animating;
        break;
      }

      // optional bool animating = 8;
      case 8: {
        if (tag == 64) {
         parse_animating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animating_)));
          set_has_animating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBoxShadowData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBoxShadowData)
  return false;
#undef DO_
}

void CBoxShadowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBoxShadowData)
  // optional bool inset = 1;
  if (has_inset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->inset(), output);
  }

  // optional double horizontal_offset = 2;
  if (has_horizontal_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->horizontal_offset(), output);
  }

  // optional double vertical_offset = 3;
  if (has_vertical_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vertical_offset(), output);
  }

  // optional double blur_radius = 4;
  if (has_blur_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->blur_radius(), output);
  }

  // optional double spread_distance = 5;
  if (has_spread_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->spread_distance(), output);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->color(), output);
  }

  // optional bool fill = 7;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fill(), output);
  }

  // optional bool animating = 8;
  if (has_animating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->animating(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CBoxShadowData)
}

::google::protobuf::uint8* CBoxShadowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBoxShadowData)
  // optional bool inset = 1;
  if (has_inset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->inset(), target);
  }

  // optional double horizontal_offset = 2;
  if (has_horizontal_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->horizontal_offset(), target);
  }

  // optional double vertical_offset = 3;
  if (has_vertical_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vertical_offset(), target);
  }

  // optional double blur_radius = 4;
  if (has_blur_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->blur_radius(), target);
  }

  // optional double spread_distance = 5;
  if (has_spread_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->spread_distance(), target);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->color(), target);
  }

  // optional bool fill = 7;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fill(), target);
  }

  // optional bool animating = 8;
  if (has_animating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->animating(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBoxShadowData)
  return target;
}

int CBoxShadowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool inset = 1;
    if (has_inset()) {
      total_size += 1 + 1;
    }

    // optional double horizontal_offset = 2;
    if (has_horizontal_offset()) {
      total_size += 1 + 8;
    }

    // optional double vertical_offset = 3;
    if (has_vertical_offset()) {
      total_size += 1 + 8;
    }

    // optional double blur_radius = 4;
    if (has_blur_radius()) {
      total_size += 1 + 8;
    }

    // optional double spread_distance = 5;
    if (has_spread_distance()) {
      total_size += 1 + 8;
    }

    // optional uint32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional bool fill = 7;
    if (has_fill()) {
      total_size += 1 + 1;
    }

    // optional bool animating = 8;
    if (has_animating()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBoxShadowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBoxShadowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBoxShadowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBoxShadowData::MergeFrom(const CBoxShadowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inset()) {
      set_inset(from.inset());
    }
    if (from.has_horizontal_offset()) {
      set_horizontal_offset(from.horizontal_offset());
    }
    if (from.has_vertical_offset()) {
      set_vertical_offset(from.vertical_offset());
    }
    if (from.has_blur_radius()) {
      set_blur_radius(from.blur_radius());
    }
    if (from.has_spread_distance()) {
      set_spread_distance(from.spread_distance());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_fill()) {
      set_fill(from.fill());
    }
    if (from.has_animating()) {
      set_animating(from.animating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBoxShadowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBoxShadowData::CopyFrom(const CBoxShadowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBoxShadowData::IsInitialized() const {

  return true;
}

void CBoxShadowData::Swap(CBoxShadowData* other) {
  if (other != this) {
    std::swap(inset_, other->inset_);
    std::swap(horizontal_offset_, other->horizontal_offset_);
    std::swap(vertical_offset_, other->vertical_offset_);
    std::swap(blur_radius_, other->blur_radius_);
    std::swap(spread_distance_, other->spread_distance_);
    std::swap(color_, other->color_);
    std::swap(fill_, other->fill_);
    std::swap(animating_, other->animating_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBoxShadowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBoxShadowData_descriptor_;
  metadata.reflection = CBoxShadowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTextShadowData::kHorizontalOffsetFieldNumber;
const int CTextShadowData::kVerticalOffsetFieldNumber;
const int CTextShadowData::kBlurRadiusFieldNumber;
const int CTextShadowData::kColorFieldNumber;
const int CTextShadowData::kAnimatingFieldNumber;
const int CTextShadowData::kStrengthFieldNumber;
#endif  // !_MSC_VER

CTextShadowData::CTextShadowData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTextShadowData)
}

void CTextShadowData::InitAsDefaultInstance() {
}

CTextShadowData::CTextShadowData(const CTextShadowData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CTextShadowData)
}

void CTextShadowData::SharedCtor() {
  _cached_size_ = 0;
  horizontal_offset_ = 0;
  vertical_offset_ = 0;
  blur_radius_ = 0;
  color_ = 0u;
  animating_ = false;
  strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTextShadowData::~CTextShadowData() {
  // @@protoc_insertion_point(destructor:CTextShadowData)
  SharedDtor();
}

void CTextShadowData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTextShadowData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTextShadowData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTextShadowData_descriptor_;
}

const CTextShadowData& CTextShadowData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CTextShadowData* CTextShadowData::default_instance_ = NULL;

CTextShadowData* CTextShadowData::New() const {
  return new CTextShadowData;
}

void CTextShadowData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CTextShadowData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(horizontal_offset_, strength_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTextShadowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CTextShadowData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double horizontal_offset = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_offset_)));
          set_has_horizontal_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vertical_offset;
        break;
      }

      // optional double vertical_offset = 3;
      case 3: {
        if (tag == 25) {
         parse_vertical_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_offset_)));
          set_has_vertical_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_blur_radius;
        break;
      }

      // optional double blur_radius = 4;
      case 4: {
        if (tag == 33) {
         parse_blur_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blur_radius_)));
          set_has_blur_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional uint32 color = 6;
      case 6: {
        if (tag == 48) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_animating;
        break;
      }

      // optional bool animating = 8;
      case 8: {
        if (tag == 64) {
         parse_animating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animating_)));
          set_has_animating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_strength;
        break;
      }

      // optional double strength = 9;
      case 9: {
        if (tag == 73) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CTextShadowData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CTextShadowData)
  return false;
#undef DO_
}

void CTextShadowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CTextShadowData)
  // optional double horizontal_offset = 2;
  if (has_horizontal_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->horizontal_offset(), output);
  }

  // optional double vertical_offset = 3;
  if (has_vertical_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vertical_offset(), output);
  }

  // optional double blur_radius = 4;
  if (has_blur_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->blur_radius(), output);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->color(), output);
  }

  // optional bool animating = 8;
  if (has_animating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->animating(), output);
  }

  // optional double strength = 9;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->strength(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CTextShadowData)
}

::google::protobuf::uint8* CTextShadowData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTextShadowData)
  // optional double horizontal_offset = 2;
  if (has_horizontal_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->horizontal_offset(), target);
  }

  // optional double vertical_offset = 3;
  if (has_vertical_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vertical_offset(), target);
  }

  // optional double blur_radius = 4;
  if (has_blur_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->blur_radius(), target);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->color(), target);
  }

  // optional bool animating = 8;
  if (has_animating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->animating(), target);
  }

  // optional double strength = 9;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->strength(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTextShadowData)
  return target;
}

int CTextShadowData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double horizontal_offset = 2;
    if (has_horizontal_offset()) {
      total_size += 1 + 8;
    }

    // optional double vertical_offset = 3;
    if (has_vertical_offset()) {
      total_size += 1 + 8;
    }

    // optional double blur_radius = 4;
    if (has_blur_radius()) {
      total_size += 1 + 8;
    }

    // optional uint32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional bool animating = 8;
    if (has_animating()) {
      total_size += 1 + 1;
    }

    // optional double strength = 9;
    if (has_strength()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTextShadowData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTextShadowData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTextShadowData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTextShadowData::MergeFrom(const CTextShadowData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_offset()) {
      set_horizontal_offset(from.horizontal_offset());
    }
    if (from.has_vertical_offset()) {
      set_vertical_offset(from.vertical_offset());
    }
    if (from.has_blur_radius()) {
      set_blur_radius(from.blur_radius());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_animating()) {
      set_animating(from.animating());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTextShadowData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTextShadowData::CopyFrom(const CTextShadowData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTextShadowData::IsInitialized() const {

  return true;
}

void CTextShadowData::Swap(CTextShadowData* other) {
  if (other != this) {
    std::swap(horizontal_offset_, other->horizontal_offset_);
    std::swap(vertical_offset_, other->vertical_offset_);
    std::swap(blur_radius_, other->blur_radius_);
    std::swap(color_, other->color_);
    std::swap(animating_, other->animating_);
    std::swap(strength_, other->strength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTextShadowData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTextShadowData_descriptor_;
  metadata.reflection = CTextShadowData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRadialClipData::kCenterXFieldNumber;
const int CRadialClipData::kCenterYFieldNumber;
const int CRadialClipData::kStartAngleFieldNumber;
const int CRadialClipData::kSectorAngleFieldNumber;
#endif  // !_MSC_VER

CRadialClipData::CRadialClipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CRadialClipData)
}

void CRadialClipData::InitAsDefaultInstance() {
}

CRadialClipData::CRadialClipData(const CRadialClipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CRadialClipData)
}

void CRadialClipData::SharedCtor() {
  _cached_size_ = 0;
  center_x_ = 0;
  center_y_ = 0;
  start_angle_ = 0;
  sector_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRadialClipData::~CRadialClipData() {
  // @@protoc_insertion_point(destructor:CRadialClipData)
  SharedDtor();
}

void CRadialClipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRadialClipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRadialClipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRadialClipData_descriptor_;
}

const CRadialClipData& CRadialClipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CRadialClipData* CRadialClipData::default_instance_ = NULL;

CRadialClipData* CRadialClipData::New() const {
  return new CRadialClipData;
}

void CRadialClipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CRadialClipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(center_x_, sector_angle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRadialClipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CRadialClipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double center_x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_x_)));
          set_has_center_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_center_y;
        break;
      }

      // optional double center_y = 2;
      case 2: {
        if (tag == 17) {
         parse_center_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_y_)));
          set_has_center_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_start_angle;
        break;
      }

      // optional double start_angle = 3;
      case 3: {
        if (tag == 25) {
         parse_start_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_angle_)));
          set_has_start_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_sector_angle;
        break;
      }

      // optional double sector_angle = 4;
      case 4: {
        if (tag == 33) {
         parse_sector_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sector_angle_)));
          set_has_sector_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CRadialClipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CRadialClipData)
  return false;
#undef DO_
}

void CRadialClipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CRadialClipData)
  // optional double center_x = 1;
  if (has_center_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->center_x(), output);
  }

  // optional double center_y = 2;
  if (has_center_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->center_y(), output);
  }

  // optional double start_angle = 3;
  if (has_start_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_angle(), output);
  }

  // optional double sector_angle = 4;
  if (has_sector_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sector_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CRadialClipData)
}

::google::protobuf::uint8* CRadialClipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRadialClipData)
  // optional double center_x = 1;
  if (has_center_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->center_x(), target);
  }

  // optional double center_y = 2;
  if (has_center_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->center_y(), target);
  }

  // optional double start_angle = 3;
  if (has_start_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_angle(), target);
  }

  // optional double sector_angle = 4;
  if (has_sector_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sector_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRadialClipData)
  return target;
}

int CRadialClipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double center_x = 1;
    if (has_center_x()) {
      total_size += 1 + 8;
    }

    // optional double center_y = 2;
    if (has_center_y()) {
      total_size += 1 + 8;
    }

    // optional double start_angle = 3;
    if (has_start_angle()) {
      total_size += 1 + 8;
    }

    // optional double sector_angle = 4;
    if (has_sector_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRadialClipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRadialClipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRadialClipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRadialClipData::MergeFrom(const CRadialClipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_x()) {
      set_center_x(from.center_x());
    }
    if (from.has_center_y()) {
      set_center_y(from.center_y());
    }
    if (from.has_start_angle()) {
      set_start_angle(from.start_angle());
    }
    if (from.has_sector_angle()) {
      set_sector_angle(from.sector_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRadialClipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRadialClipData::CopyFrom(const CRadialClipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRadialClipData::IsInitialized() const {

  return true;
}

void CRadialClipData::Swap(CRadialClipData* other) {
  if (other != this) {
    std::swap(center_x_, other->center_x_);
    std::swap(center_y_, other->center_y_);
    std::swap(start_angle_, other->start_angle_);
    std::swap(sector_angle_, other->sector_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRadialClipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRadialClipData_descriptor_;
  metadata.reflection = CRadialClipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClipData::kRectClipFieldNumber;
const int CMsgClipData::kLeftFieldNumber;
const int CMsgClipData::kTopFieldNumber;
const int CMsgClipData::kRightFieldNumber;
const int CMsgClipData::kBottomFieldNumber;
const int CMsgClipData::kRadialClipFieldNumber;
#endif  // !_MSC_VER

CMsgClipData::CMsgClipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClipData)
}

void CMsgClipData::InitAsDefaultInstance() {
  radial_clip_ = const_cast< ::CRadialClipData*>(&::CRadialClipData::default_instance());
}

CMsgClipData::CMsgClipData(const CMsgClipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClipData)
}

void CMsgClipData::SharedCtor() {
  _cached_size_ = 0;
  rect_clip_ = false;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  radial_clip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClipData::~CMsgClipData() {
  // @@protoc_insertion_point(destructor:CMsgClipData)
  SharedDtor();
}

void CMsgClipData::SharedDtor() {
  if (this != default_instance_) {
    delete radial_clip_;
  }
}

void CMsgClipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClipData_descriptor_;
}

const CMsgClipData& CMsgClipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgClipData* CMsgClipData::default_instance_ = NULL;

CMsgClipData* CMsgClipData::New() const {
  return new CMsgClipData;
}

void CMsgClipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgClipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(left_, bottom_);
    rect_clip_ = false;
    if (has_radial_clip()) {
      if (radial_clip_ != NULL) radial_clip_->::CRadialClipData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rect_clip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rect_clip_)));
          set_has_rect_clip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_left;
        break;
      }

      // optional double left = 2;
      case 2: {
        if (tag == 17) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_top;
        break;
      }

      // optional double top = 3;
      case 3: {
        if (tag == 25) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_right;
        break;
      }

      // optional double right = 4;
      case 4: {
        if (tag == 33) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bottom;
        break;
      }

      // optional double bottom = 5;
      case 5: {
        if (tag == 41) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_radial_clip;
        break;
      }

      // optional .CRadialClipData radial_clip = 6;
      case 6: {
        if (tag == 50) {
         parse_radial_clip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radial_clip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClipData)
  return false;
#undef DO_
}

void CMsgClipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClipData)
  // optional bool rect_clip = 1;
  if (has_rect_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rect_clip(), output);
  }

  // optional double left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->left(), output);
  }

  // optional double top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->top(), output);
  }

  // optional double right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->right(), output);
  }

  // optional double bottom = 5;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bottom(), output);
  }

  // optional .CRadialClipData radial_clip = 6;
  if (has_radial_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->radial_clip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClipData)
}

::google::protobuf::uint8* CMsgClipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClipData)
  // optional bool rect_clip = 1;
  if (has_rect_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rect_clip(), target);
  }

  // optional double left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->left(), target);
  }

  // optional double top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->top(), target);
  }

  // optional double right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->right(), target);
  }

  // optional double bottom = 5;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bottom(), target);
  }

  // optional .CRadialClipData radial_clip = 6;
  if (has_radial_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->radial_clip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClipData)
  return target;
}

int CMsgClipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool rect_clip = 1;
    if (has_rect_clip()) {
      total_size += 1 + 1;
    }

    // optional double left = 2;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double top = 3;
    if (has_top()) {
      total_size += 1 + 8;
    }

    // optional double right = 4;
    if (has_right()) {
      total_size += 1 + 8;
    }

    // optional double bottom = 5;
    if (has_bottom()) {
      total_size += 1 + 8;
    }

    // optional .CRadialClipData radial_clip = 6;
    if (has_radial_clip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radial_clip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClipData::MergeFrom(const CMsgClipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rect_clip()) {
      set_rect_clip(from.rect_clip());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_radial_clip()) {
      mutable_radial_clip()->::CRadialClipData::MergeFrom(from.radial_clip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClipData::CopyFrom(const CMsgClipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClipData::IsInitialized() const {

  return true;
}

void CMsgClipData::Swap(CMsgClipData* other) {
  if (other != this) {
    std::swap(rect_clip_, other->rect_clip_);
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(radial_clip_, other->radial_clip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClipData_descriptor_;
  metadata.reflection = CMsgClipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPushCompositingLayer::kLayerIdFieldNumber;
const int CMsgPushCompositingLayer::kWidthFieldNumber;
const int CMsgPushCompositingLayer::kHeightFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopLeftXFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopLeftYFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopLeftZFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopRightXFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopRightYFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadTopRightZFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomLeftXFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomLeftYFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomLeftZFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomRightXFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomRightYFieldNumber;
const int CMsgPushCompositingLayer::kLayerQuadBottomRightZFieldNumber;
const int CMsgPushCompositingLayer::kTransformM00FieldNumber;
const int CMsgPushCompositingLayer::kTransformM01FieldNumber;
const int CMsgPushCompositingLayer::kTransformM02FieldNumber;
const int CMsgPushCompositingLayer::kTransformM03FieldNumber;
const int CMsgPushCompositingLayer::kTransformM10FieldNumber;
const int CMsgPushCompositingLayer::kTransformM11FieldNumber;
const int CMsgPushCompositingLayer::kTransformM12FieldNumber;
const int CMsgPushCompositingLayer::kTransformM13FieldNumber;
const int CMsgPushCompositingLayer::kTransformM20FieldNumber;
const int CMsgPushCompositingLayer::kTransformM21FieldNumber;
const int CMsgPushCompositingLayer::kTransformM22FieldNumber;
const int CMsgPushCompositingLayer::kTransformM23FieldNumber;
const int CMsgPushCompositingLayer::kTransformM30FieldNumber;
const int CMsgPushCompositingLayer::kTransformM31FieldNumber;
const int CMsgPushCompositingLayer::kTransformM32FieldNumber;
const int CMsgPushCompositingLayer::kTransformM33FieldNumber;
const int CMsgPushCompositingLayer::kPerspectiveDepthFieldNumber;
const int CMsgPushCompositingLayer::kOpacityFieldNumber;
const int CMsgPushCompositingLayer::kCompositionColorFieldNumber;
const int CMsgPushCompositingLayer::kSaturationFieldNumber;
const int CMsgPushCompositingLayer::kHueShiftFieldNumber;
const int CMsgPushCompositingLayer::kBrightnessFieldNumber;
const int CMsgPushCompositingLayer::kContrastFieldNumber;
const int CMsgPushCompositingLayer::kOpacityMaskTextureIdFieldNumber;
const int CMsgPushCompositingLayer::kOpacityMaskOpacityFieldNumber;
const int CMsgPushCompositingLayer::kBorderFieldNumber;
const int CMsgPushCompositingLayer::kBorderRadiusFieldNumber;
const int CMsgPushCompositingLayer::kBoxShadowFieldNumber;
const int CMsgPushCompositingLayer::kGaussianblurPassesFieldNumber;
const int CMsgPushCompositingLayer::kGaussianblurStddevhorFieldNumber;
const int CMsgPushCompositingLayer::kGaussianblurStddevverFieldNumber;
const int CMsgPushCompositingLayer::kScale2DFactorsXFieldNumber;
const int CMsgPushCompositingLayer::kScale2DFactorsYFieldNumber;
const int CMsgPushCompositingLayer::kRotate2DFieldNumber;
const int CMsgPushCompositingLayer::kNeedsClearFieldNumber;
const int CMsgPushCompositingLayer::kNeedsDepthFieldNumber;
const int CMsgPushCompositingLayer::kNeedsIntermediateTextureFieldNumber;
const int CMsgPushCompositingLayer::kNeedsRedrawEveryFrameFieldNumber;
const int CMsgPushCompositingLayer::kTextShadowFieldNumber;
const int CMsgPushCompositingLayer::kMixBlendModeFieldNumber;
const int CMsgPushCompositingLayer::kOccludedLeftEdgeFieldNumber;
const int CMsgPushCompositingLayer::kOccludedTopEdgeFieldNumber;
const int CMsgPushCompositingLayer::kOccludedRightEdgeFieldNumber;
const int CMsgPushCompositingLayer::kOccludedBottomEdgeFieldNumber;
const int CMsgPushCompositingLayer::kRadialClipFieldNumber;
const int CMsgPushCompositingLayer::kCompositionLayerTextureNameFieldNumber;
#endif  // !_MSC_VER

CMsgPushCompositingLayer::CMsgPushCompositingLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPushCompositingLayer)
}

void CMsgPushCompositingLayer::InitAsDefaultInstance() {
  border_ = const_cast< ::CBorderData*>(&::CBorderData::default_instance());
  border_radius_ = const_cast< ::CRadiusData*>(&::CRadiusData::default_instance());
  box_shadow_ = const_cast< ::CBoxShadowData*>(&::CBoxShadowData::default_instance());
  text_shadow_ = const_cast< ::CTextShadowData*>(&::CTextShadowData::default_instance());
  radial_clip_ = const_cast< ::CRadialClipData*>(&::CRadialClipData::default_instance());
}

CMsgPushCompositingLayer::CMsgPushCompositingLayer(const CMsgPushCompositingLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPushCompositingLayer)
}

void CMsgPushCompositingLayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  layer_id_ = GOOGLE_ULONGLONG(0);
  width_ = 0;
  height_ = 0;
  layer_quad_top_left_x_ = 0;
  layer_quad_top_left_y_ = 0;
  layer_quad_top_left_z_ = 0;
  layer_quad_top_right_x_ = 0;
  layer_quad_top_right_y_ = 0;
  layer_quad_top_right_z_ = 0;
  layer_quad_bottom_left_x_ = 0;
  layer_quad_bottom_left_y_ = 0;
  layer_quad_bottom_left_z_ = 0;
  layer_quad_bottom_right_x_ = 0;
  layer_quad_bottom_right_y_ = 0;
  layer_quad_bottom_right_z_ = 0;
  transform_m00_ = 0;
  transform_m01_ = 0;
  transform_m02_ = 0;
  transform_m03_ = 0;
  transform_m10_ = 0;
  transform_m11_ = 0;
  transform_m12_ = 0;
  transform_m13_ = 0;
  transform_m20_ = 0;
  transform_m21_ = 0;
  transform_m22_ = 0;
  transform_m23_ = 0;
  transform_m30_ = 0;
  transform_m31_ = 0;
  transform_m32_ = 0;
  transform_m33_ = 0;
  perspective_depth_ = 0;
  opacity_ = 0;
  composition_color_ = 0u;
  saturation_ = 0;
  hue_shift_ = 0;
  brightness_ = 0;
  contrast_ = 0;
  opacity_mask_texture_id_ = 0u;
  opacity_mask_opacity_ = 0;
  border_ = NULL;
  border_radius_ = NULL;
  box_shadow_ = NULL;
  gaussianblur_passes_ = 0;
  gaussianblur_stddevhor_ = 0;
  gaussianblur_stddevver_ = 0;
  scale_2d_factors_x_ = 0;
  scale_2d_factors_y_ = 0;
  rotate_2d_ = 0;
  needs_clear_ = false;
  needs_depth_ = false;
  needs_intermediate_texture_ = false;
  needs_redraw_every_frame_ = false;
  text_shadow_ = NULL;
  mix_blend_mode_ = 0u;
  occluded_left_edge_ = 0;
  occluded_top_edge_ = 0;
  occluded_right_edge_ = 0;
  occluded_bottom_edge_ = 0;
  radial_clip_ = NULL;
  composition_layer_texture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPushCompositingLayer::~CMsgPushCompositingLayer() {
  // @@protoc_insertion_point(destructor:CMsgPushCompositingLayer)
  SharedDtor();
}

void CMsgPushCompositingLayer::SharedDtor() {
  if (composition_layer_texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete composition_layer_texture_name_;
  }
  if (this != default_instance_) {
    delete border_;
    delete border_radius_;
    delete box_shadow_;
    delete text_shadow_;
    delete radial_clip_;
  }
}

void CMsgPushCompositingLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPushCompositingLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPushCompositingLayer_descriptor_;
}

const CMsgPushCompositingLayer& CMsgPushCompositingLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPushCompositingLayer* CMsgPushCompositingLayer::default_instance_ = NULL;

CMsgPushCompositingLayer* CMsgPushCompositingLayer::New() const {
  return new CMsgPushCompositingLayer;
}

void CMsgPushCompositingLayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPushCompositingLayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(layer_id_, layer_quad_top_right_y_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(layer_quad_top_right_z_, transform_m00_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(transform_m01_, transform_m20_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(transform_m21_, perspective_depth_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(opacity_, opacity_mask_opacity_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(gaussianblur_passes_, scale_2d_factors_y_);
    if (has_border()) {
      if (border_ != NULL) border_->::CBorderData::Clear();
    }
    if (has_border_radius()) {
      if (border_radius_ != NULL) border_radius_->::CRadiusData::Clear();
    }
    if (has_box_shadow()) {
      if (box_shadow_ != NULL) box_shadow_->::CBoxShadowData::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(rotate_2d_, mix_blend_mode_);
    if (has_text_shadow()) {
      if (text_shadow_ != NULL) text_shadow_->::CTextShadowData::Clear();
    }
    occluded_left_edge_ = 0;
  }
  if (_has_bits_[56 / 32] & 520093696) {
    ZR_(occluded_top_edge_, occluded_bottom_edge_);
    if (has_radial_clip()) {
      if (radial_clip_ != NULL) radial_clip_->::CRadialClipData::Clear();
    }
    if (has_composition_layer_texture_name()) {
      if (composition_layer_texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        composition_layer_texture_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPushCompositingLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPushCompositingLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 layer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_id_)));
          set_has_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_width;
        break;
      }

      // optional double width = 2;
      case 2: {
        if (tag == 17) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }

      // optional double height = 3;
      case 3: {
        if (tag == 25) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_layer_quad_top_left_x;
        break;
      }

      // optional double layer_quad_top_left_x = 4;
      case 4: {
        if (tag == 33) {
         parse_layer_quad_top_left_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_left_x_)));
          set_has_layer_quad_top_left_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_layer_quad_top_left_y;
        break;
      }

      // optional double layer_quad_top_left_y = 5;
      case 5: {
        if (tag == 41) {
         parse_layer_quad_top_left_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_left_y_)));
          set_has_layer_quad_top_left_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_layer_quad_top_left_z;
        break;
      }

      // optional double layer_quad_top_left_z = 6;
      case 6: {
        if (tag == 49) {
         parse_layer_quad_top_left_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_left_z_)));
          set_has_layer_quad_top_left_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_layer_quad_top_right_x;
        break;
      }

      // optional double layer_quad_top_right_x = 7;
      case 7: {
        if (tag == 57) {
         parse_layer_quad_top_right_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_right_x_)));
          set_has_layer_quad_top_right_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_layer_quad_top_right_y;
        break;
      }

      // optional double layer_quad_top_right_y = 8;
      case 8: {
        if (tag == 65) {
         parse_layer_quad_top_right_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_right_y_)));
          set_has_layer_quad_top_right_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_layer_quad_top_right_z;
        break;
      }

      // optional double layer_quad_top_right_z = 9;
      case 9: {
        if (tag == 73) {
         parse_layer_quad_top_right_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_top_right_z_)));
          set_has_layer_quad_top_right_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_layer_quad_bottom_left_x;
        break;
      }

      // optional double layer_quad_bottom_left_x = 10;
      case 10: {
        if (tag == 81) {
         parse_layer_quad_bottom_left_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_left_x_)));
          set_has_layer_quad_bottom_left_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_layer_quad_bottom_left_y;
        break;
      }

      // optional double layer_quad_bottom_left_y = 11;
      case 11: {
        if (tag == 89) {
         parse_layer_quad_bottom_left_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_left_y_)));
          set_has_layer_quad_bottom_left_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_layer_quad_bottom_left_z;
        break;
      }

      // optional double layer_quad_bottom_left_z = 12;
      case 12: {
        if (tag == 97) {
         parse_layer_quad_bottom_left_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_left_z_)));
          set_has_layer_quad_bottom_left_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_layer_quad_bottom_right_x;
        break;
      }

      // optional double layer_quad_bottom_right_x = 13;
      case 13: {
        if (tag == 105) {
         parse_layer_quad_bottom_right_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_right_x_)));
          set_has_layer_quad_bottom_right_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_layer_quad_bottom_right_y;
        break;
      }

      // optional double layer_quad_bottom_right_y = 14;
      case 14: {
        if (tag == 113) {
         parse_layer_quad_bottom_right_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_right_y_)));
          set_has_layer_quad_bottom_right_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_layer_quad_bottom_right_z;
        break;
      }

      // optional double layer_quad_bottom_right_z = 15;
      case 15: {
        if (tag == 121) {
         parse_layer_quad_bottom_right_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &layer_quad_bottom_right_z_)));
          set_has_layer_quad_bottom_right_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_transform_m00;
        break;
      }

      // optional double transform_m00 = 16;
      case 16: {
        if (tag == 129) {
         parse_transform_m00:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m00_)));
          set_has_transform_m00();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_transform_m01;
        break;
      }

      // optional double transform_m01 = 17;
      case 17: {
        if (tag == 137) {
         parse_transform_m01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m01_)));
          set_has_transform_m01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_transform_m02;
        break;
      }

      // optional double transform_m02 = 18;
      case 18: {
        if (tag == 145) {
         parse_transform_m02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m02_)));
          set_has_transform_m02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_transform_m03;
        break;
      }

      // optional double transform_m03 = 19;
      case 19: {
        if (tag == 153) {
         parse_transform_m03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m03_)));
          set_has_transform_m03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_transform_m10;
        break;
      }

      // optional double transform_m10 = 20;
      case 20: {
        if (tag == 161) {
         parse_transform_m10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m10_)));
          set_has_transform_m10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_transform_m11;
        break;
      }

      // optional double transform_m11 = 21;
      case 21: {
        if (tag == 169) {
         parse_transform_m11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m11_)));
          set_has_transform_m11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_transform_m12;
        break;
      }

      // optional double transform_m12 = 22;
      case 22: {
        if (tag == 177) {
         parse_transform_m12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m12_)));
          set_has_transform_m12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_transform_m13;
        break;
      }

      // optional double transform_m13 = 23;
      case 23: {
        if (tag == 185) {
         parse_transform_m13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m13_)));
          set_has_transform_m13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_transform_m20;
        break;
      }

      // optional double transform_m20 = 24;
      case 24: {
        if (tag == 193) {
         parse_transform_m20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m20_)));
          set_has_transform_m20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_transform_m21;
        break;
      }

      // optional double transform_m21 = 25;
      case 25: {
        if (tag == 201) {
         parse_transform_m21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m21_)));
          set_has_transform_m21();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_transform_m22;
        break;
      }

      // optional double transform_m22 = 26;
      case 26: {
        if (tag == 209) {
         parse_transform_m22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m22_)));
          set_has_transform_m22();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_transform_m23;
        break;
      }

      // optional double transform_m23 = 27;
      case 27: {
        if (tag == 217) {
         parse_transform_m23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m23_)));
          set_has_transform_m23();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_transform_m30;
        break;
      }

      // optional double transform_m30 = 28;
      case 28: {
        if (tag == 225) {
         parse_transform_m30:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m30_)));
          set_has_transform_m30();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_transform_m31;
        break;
      }

      // optional double transform_m31 = 29;
      case 29: {
        if (tag == 233) {
         parse_transform_m31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m31_)));
          set_has_transform_m31();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_transform_m32;
        break;
      }

      // optional double transform_m32 = 30;
      case 30: {
        if (tag == 241) {
         parse_transform_m32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m32_)));
          set_has_transform_m32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_transform_m33;
        break;
      }

      // optional double transform_m33 = 31;
      case 31: {
        if (tag == 249) {
         parse_transform_m33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m33_)));
          set_has_transform_m33();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_perspective_depth;
        break;
      }

      // optional double perspective_depth = 32;
      case 32: {
        if (tag == 257) {
         parse_perspective_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perspective_depth_)));
          set_has_perspective_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_opacity;
        break;
      }

      // optional double opacity = 33;
      case 33: {
        if (tag == 265) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_composition_color;
        break;
      }

      // optional uint32 composition_color = 34;
      case 34: {
        if (tag == 272) {
         parse_composition_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composition_color_)));
          set_has_composition_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_saturation;
        break;
      }

      // optional double saturation = 35;
      case 35: {
        if (tag == 281) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_hue_shift;
        break;
      }

      // optional double hue_shift = 36;
      case 36: {
        if (tag == 289) {
         parse_hue_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hue_shift_)));
          set_has_hue_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_brightness;
        break;
      }

      // optional double brightness = 37;
      case 37: {
        if (tag == 297) {
         parse_brightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_contrast;
        break;
      }

      // optional double contrast = 38;
      case 38: {
        if (tag == 305) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_opacity_mask_texture_id;
        break;
      }

      // optional uint32 opacity_mask_texture_id = 39;
      case 39: {
        if (tag == 312) {
         parse_opacity_mask_texture_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opacity_mask_texture_id_)));
          set_has_opacity_mask_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_opacity_mask_opacity;
        break;
      }

      // optional double opacity_mask_opacity = 40;
      case 40: {
        if (tag == 321) {
         parse_opacity_mask_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opacity_mask_opacity_)));
          set_has_opacity_mask_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_border;
        break;
      }

      // optional .CBorderData border = 41;
      case 41: {
        if (tag == 330) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_border_radius;
        break;
      }

      // optional .CRadiusData border_radius = 42;
      case 42: {
        if (tag == 338) {
         parse_border_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border_radius()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_box_shadow;
        break;
      }

      // optional .CBoxShadowData box_shadow = 43;
      case 43: {
        if (tag == 346) {
         parse_box_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_gaussianblur_passes;
        break;
      }

      // optional double gaussianblur_passes = 44;
      case 44: {
        if (tag == 353) {
         parse_gaussianblur_passes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gaussianblur_passes_)));
          set_has_gaussianblur_passes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_gaussianblur_stddevhor;
        break;
      }

      // optional double gaussianblur_stddevhor = 45;
      case 45: {
        if (tag == 361) {
         parse_gaussianblur_stddevhor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gaussianblur_stddevhor_)));
          set_has_gaussianblur_stddevhor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(369)) goto parse_gaussianblur_stddevver;
        break;
      }

      // optional double gaussianblur_stddevver = 46;
      case 46: {
        if (tag == 369) {
         parse_gaussianblur_stddevver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gaussianblur_stddevver_)));
          set_has_gaussianblur_stddevver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(377)) goto parse_scale_2d_factors_x;
        break;
      }

      // optional double scale_2d_factors_x = 47;
      case 47: {
        if (tag == 377) {
         parse_scale_2d_factors_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_2d_factors_x_)));
          set_has_scale_2d_factors_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(385)) goto parse_scale_2d_factors_y;
        break;
      }

      // optional double scale_2d_factors_y = 48;
      case 48: {
        if (tag == 385) {
         parse_scale_2d_factors_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_2d_factors_y_)));
          set_has_scale_2d_factors_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(393)) goto parse_rotate_2d;
        break;
      }

      // optional double rotate_2d = 49;
      case 49: {
        if (tag == 393) {
         parse_rotate_2d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotate_2d_)));
          set_has_rotate_2d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_needs_clear;
        break;
      }

      // optional bool needs_clear = 50;
      case 50: {
        if (tag == 400) {
         parse_needs_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_clear_)));
          set_has_needs_clear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_needs_depth;
        break;
      }

      // optional bool needs_depth = 51;
      case 51: {
        if (tag == 408) {
         parse_needs_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_depth_)));
          set_has_needs_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_needs_intermediate_texture;
        break;
      }

      // optional bool needs_intermediate_texture = 52;
      case 52: {
        if (tag == 416) {
         parse_needs_intermediate_texture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_intermediate_texture_)));
          set_has_needs_intermediate_texture();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_needs_redraw_every_frame;
        break;
      }

      // optional bool needs_redraw_every_frame = 53;
      case 53: {
        if (tag == 424) {
         parse_needs_redraw_every_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_redraw_every_frame_)));
          set_has_needs_redraw_every_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_text_shadow;
        break;
      }

      // optional .CTextShadowData text_shadow = 54;
      case 54: {
        if (tag == 434) {
         parse_text_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_mix_blend_mode;
        break;
      }

      // optional uint32 mix_blend_mode = 55;
      case 55: {
        if (tag == 440) {
         parse_mix_blend_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mix_blend_mode_)));
          set_has_mix_blend_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(449)) goto parse_occluded_left_edge;
        break;
      }

      // optional double occluded_left_edge = 56;
      case 56: {
        if (tag == 449) {
         parse_occluded_left_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &occluded_left_edge_)));
          set_has_occluded_left_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(457)) goto parse_occluded_top_edge;
        break;
      }

      // optional double occluded_top_edge = 57;
      case 57: {
        if (tag == 457) {
         parse_occluded_top_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &occluded_top_edge_)));
          set_has_occluded_top_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(465)) goto parse_occluded_right_edge;
        break;
      }

      // optional double occluded_right_edge = 58;
      case 58: {
        if (tag == 465) {
         parse_occluded_right_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &occluded_right_edge_)));
          set_has_occluded_right_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(473)) goto parse_occluded_bottom_edge;
        break;
      }

      // optional double occluded_bottom_edge = 59;
      case 59: {
        if (tag == 473) {
         parse_occluded_bottom_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &occluded_bottom_edge_)));
          set_has_occluded_bottom_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_radial_clip;
        break;
      }

      // optional .CRadialClipData radial_clip = 60;
      case 60: {
        if (tag == 482) {
         parse_radial_clip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radial_clip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_composition_layer_texture_name;
        break;
      }

      // optional string composition_layer_texture_name = 64;
      case 64: {
        if (tag == 514) {
         parse_composition_layer_texture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_composition_layer_texture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "composition_layer_texture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPushCompositingLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPushCompositingLayer)
  return false;
#undef DO_
}

void CMsgPushCompositingLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPushCompositingLayer)
  // optional uint64 layer_id = 1;
  if (has_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->layer_id(), output);
  }

  // optional double width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // optional double height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // optional double layer_quad_top_left_x = 4;
  if (has_layer_quad_top_left_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->layer_quad_top_left_x(), output);
  }

  // optional double layer_quad_top_left_y = 5;
  if (has_layer_quad_top_left_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->layer_quad_top_left_y(), output);
  }

  // optional double layer_quad_top_left_z = 6;
  if (has_layer_quad_top_left_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->layer_quad_top_left_z(), output);
  }

  // optional double layer_quad_top_right_x = 7;
  if (has_layer_quad_top_right_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->layer_quad_top_right_x(), output);
  }

  // optional double layer_quad_top_right_y = 8;
  if (has_layer_quad_top_right_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->layer_quad_top_right_y(), output);
  }

  // optional double layer_quad_top_right_z = 9;
  if (has_layer_quad_top_right_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->layer_quad_top_right_z(), output);
  }

  // optional double layer_quad_bottom_left_x = 10;
  if (has_layer_quad_bottom_left_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->layer_quad_bottom_left_x(), output);
  }

  // optional double layer_quad_bottom_left_y = 11;
  if (has_layer_quad_bottom_left_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->layer_quad_bottom_left_y(), output);
  }

  // optional double layer_quad_bottom_left_z = 12;
  if (has_layer_quad_bottom_left_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->layer_quad_bottom_left_z(), output);
  }

  // optional double layer_quad_bottom_right_x = 13;
  if (has_layer_quad_bottom_right_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->layer_quad_bottom_right_x(), output);
  }

  // optional double layer_quad_bottom_right_y = 14;
  if (has_layer_quad_bottom_right_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->layer_quad_bottom_right_y(), output);
  }

  // optional double layer_quad_bottom_right_z = 15;
  if (has_layer_quad_bottom_right_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->layer_quad_bottom_right_z(), output);
  }

  // optional double transform_m00 = 16;
  if (has_transform_m00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->transform_m00(), output);
  }

  // optional double transform_m01 = 17;
  if (has_transform_m01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->transform_m01(), output);
  }

  // optional double transform_m02 = 18;
  if (has_transform_m02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->transform_m02(), output);
  }

  // optional double transform_m03 = 19;
  if (has_transform_m03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->transform_m03(), output);
  }

  // optional double transform_m10 = 20;
  if (has_transform_m10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->transform_m10(), output);
  }

  // optional double transform_m11 = 21;
  if (has_transform_m11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->transform_m11(), output);
  }

  // optional double transform_m12 = 22;
  if (has_transform_m12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->transform_m12(), output);
  }

  // optional double transform_m13 = 23;
  if (has_transform_m13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->transform_m13(), output);
  }

  // optional double transform_m20 = 24;
  if (has_transform_m20()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->transform_m20(), output);
  }

  // optional double transform_m21 = 25;
  if (has_transform_m21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->transform_m21(), output);
  }

  // optional double transform_m22 = 26;
  if (has_transform_m22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->transform_m22(), output);
  }

  // optional double transform_m23 = 27;
  if (has_transform_m23()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->transform_m23(), output);
  }

  // optional double transform_m30 = 28;
  if (has_transform_m30()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->transform_m30(), output);
  }

  // optional double transform_m31 = 29;
  if (has_transform_m31()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->transform_m31(), output);
  }

  // optional double transform_m32 = 30;
  if (has_transform_m32()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->transform_m32(), output);
  }

  // optional double transform_m33 = 31;
  if (has_transform_m33()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->transform_m33(), output);
  }

  // optional double perspective_depth = 32;
  if (has_perspective_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->perspective_depth(), output);
  }

  // optional double opacity = 33;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->opacity(), output);
  }

  // optional uint32 composition_color = 34;
  if (has_composition_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->composition_color(), output);
  }

  // optional double saturation = 35;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->saturation(), output);
  }

  // optional double hue_shift = 36;
  if (has_hue_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->hue_shift(), output);
  }

  // optional double brightness = 37;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->brightness(), output);
  }

  // optional double contrast = 38;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->contrast(), output);
  }

  // optional uint32 opacity_mask_texture_id = 39;
  if (has_opacity_mask_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->opacity_mask_texture_id(), output);
  }

  // optional double opacity_mask_opacity = 40;
  if (has_opacity_mask_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->opacity_mask_opacity(), output);
  }

  // optional .CBorderData border = 41;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->border(), output);
  }

  // optional .CRadiusData border_radius = 42;
  if (has_border_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->border_radius(), output);
  }

  // optional .CBoxShadowData box_shadow = 43;
  if (has_box_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->box_shadow(), output);
  }

  // optional double gaussianblur_passes = 44;
  if (has_gaussianblur_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->gaussianblur_passes(), output);
  }

  // optional double gaussianblur_stddevhor = 45;
  if (has_gaussianblur_stddevhor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->gaussianblur_stddevhor(), output);
  }

  // optional double gaussianblur_stddevver = 46;
  if (has_gaussianblur_stddevver()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->gaussianblur_stddevver(), output);
  }

  // optional double scale_2d_factors_x = 47;
  if (has_scale_2d_factors_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->scale_2d_factors_x(), output);
  }

  // optional double scale_2d_factors_y = 48;
  if (has_scale_2d_factors_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->scale_2d_factors_y(), output);
  }

  // optional double rotate_2d = 49;
  if (has_rotate_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->rotate_2d(), output);
  }

  // optional bool needs_clear = 50;
  if (has_needs_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->needs_clear(), output);
  }

  // optional bool needs_depth = 51;
  if (has_needs_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->needs_depth(), output);
  }

  // optional bool needs_intermediate_texture = 52;
  if (has_needs_intermediate_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->needs_intermediate_texture(), output);
  }

  // optional bool needs_redraw_every_frame = 53;
  if (has_needs_redraw_every_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->needs_redraw_every_frame(), output);
  }

  // optional .CTextShadowData text_shadow = 54;
  if (has_text_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->text_shadow(), output);
  }

  // optional uint32 mix_blend_mode = 55;
  if (has_mix_blend_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->mix_blend_mode(), output);
  }

  // optional double occluded_left_edge = 56;
  if (has_occluded_left_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->occluded_left_edge(), output);
  }

  // optional double occluded_top_edge = 57;
  if (has_occluded_top_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->occluded_top_edge(), output);
  }

  // optional double occluded_right_edge = 58;
  if (has_occluded_right_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->occluded_right_edge(), output);
  }

  // optional double occluded_bottom_edge = 59;
  if (has_occluded_bottom_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->occluded_bottom_edge(), output);
  }

  // optional .CRadialClipData radial_clip = 60;
  if (has_radial_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->radial_clip(), output);
  }

  // optional string composition_layer_texture_name = 64;
  if (has_composition_layer_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "composition_layer_texture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      64, this->composition_layer_texture_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPushCompositingLayer)
}

::google::protobuf::uint8* CMsgPushCompositingLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPushCompositingLayer)
  // optional uint64 layer_id = 1;
  if (has_layer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->layer_id(), target);
  }

  // optional double width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // optional double height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // optional double layer_quad_top_left_x = 4;
  if (has_layer_quad_top_left_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->layer_quad_top_left_x(), target);
  }

  // optional double layer_quad_top_left_y = 5;
  if (has_layer_quad_top_left_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->layer_quad_top_left_y(), target);
  }

  // optional double layer_quad_top_left_z = 6;
  if (has_layer_quad_top_left_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->layer_quad_top_left_z(), target);
  }

  // optional double layer_quad_top_right_x = 7;
  if (has_layer_quad_top_right_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->layer_quad_top_right_x(), target);
  }

  // optional double layer_quad_top_right_y = 8;
  if (has_layer_quad_top_right_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->layer_quad_top_right_y(), target);
  }

  // optional double layer_quad_top_right_z = 9;
  if (has_layer_quad_top_right_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->layer_quad_top_right_z(), target);
  }

  // optional double layer_quad_bottom_left_x = 10;
  if (has_layer_quad_bottom_left_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->layer_quad_bottom_left_x(), target);
  }

  // optional double layer_quad_bottom_left_y = 11;
  if (has_layer_quad_bottom_left_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->layer_quad_bottom_left_y(), target);
  }

  // optional double layer_quad_bottom_left_z = 12;
  if (has_layer_quad_bottom_left_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->layer_quad_bottom_left_z(), target);
  }

  // optional double layer_quad_bottom_right_x = 13;
  if (has_layer_quad_bottom_right_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->layer_quad_bottom_right_x(), target);
  }

  // optional double layer_quad_bottom_right_y = 14;
  if (has_layer_quad_bottom_right_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->layer_quad_bottom_right_y(), target);
  }

  // optional double layer_quad_bottom_right_z = 15;
  if (has_layer_quad_bottom_right_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->layer_quad_bottom_right_z(), target);
  }

  // optional double transform_m00 = 16;
  if (has_transform_m00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->transform_m00(), target);
  }

  // optional double transform_m01 = 17;
  if (has_transform_m01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->transform_m01(), target);
  }

  // optional double transform_m02 = 18;
  if (has_transform_m02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->transform_m02(), target);
  }

  // optional double transform_m03 = 19;
  if (has_transform_m03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->transform_m03(), target);
  }

  // optional double transform_m10 = 20;
  if (has_transform_m10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->transform_m10(), target);
  }

  // optional double transform_m11 = 21;
  if (has_transform_m11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->transform_m11(), target);
  }

  // optional double transform_m12 = 22;
  if (has_transform_m12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->transform_m12(), target);
  }

  // optional double transform_m13 = 23;
  if (has_transform_m13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->transform_m13(), target);
  }

  // optional double transform_m20 = 24;
  if (has_transform_m20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->transform_m20(), target);
  }

  // optional double transform_m21 = 25;
  if (has_transform_m21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->transform_m21(), target);
  }

  // optional double transform_m22 = 26;
  if (has_transform_m22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->transform_m22(), target);
  }

  // optional double transform_m23 = 27;
  if (has_transform_m23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->transform_m23(), target);
  }

  // optional double transform_m30 = 28;
  if (has_transform_m30()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->transform_m30(), target);
  }

  // optional double transform_m31 = 29;
  if (has_transform_m31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->transform_m31(), target);
  }

  // optional double transform_m32 = 30;
  if (has_transform_m32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->transform_m32(), target);
  }

  // optional double transform_m33 = 31;
  if (has_transform_m33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->transform_m33(), target);
  }

  // optional double perspective_depth = 32;
  if (has_perspective_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->perspective_depth(), target);
  }

  // optional double opacity = 33;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->opacity(), target);
  }

  // optional uint32 composition_color = 34;
  if (has_composition_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->composition_color(), target);
  }

  // optional double saturation = 35;
  if (has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->saturation(), target);
  }

  // optional double hue_shift = 36;
  if (has_hue_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->hue_shift(), target);
  }

  // optional double brightness = 37;
  if (has_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->brightness(), target);
  }

  // optional double contrast = 38;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->contrast(), target);
  }

  // optional uint32 opacity_mask_texture_id = 39;
  if (has_opacity_mask_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->opacity_mask_texture_id(), target);
  }

  // optional double opacity_mask_opacity = 40;
  if (has_opacity_mask_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->opacity_mask_opacity(), target);
  }

  // optional .CBorderData border = 41;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->border(), target);
  }

  // optional .CRadiusData border_radius = 42;
  if (has_border_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->border_radius(), target);
  }

  // optional .CBoxShadowData box_shadow = 43;
  if (has_box_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->box_shadow(), target);
  }

  // optional double gaussianblur_passes = 44;
  if (has_gaussianblur_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->gaussianblur_passes(), target);
  }

  // optional double gaussianblur_stddevhor = 45;
  if (has_gaussianblur_stddevhor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->gaussianblur_stddevhor(), target);
  }

  // optional double gaussianblur_stddevver = 46;
  if (has_gaussianblur_stddevver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->gaussianblur_stddevver(), target);
  }

  // optional double scale_2d_factors_x = 47;
  if (has_scale_2d_factors_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->scale_2d_factors_x(), target);
  }

  // optional double scale_2d_factors_y = 48;
  if (has_scale_2d_factors_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->scale_2d_factors_y(), target);
  }

  // optional double rotate_2d = 49;
  if (has_rotate_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->rotate_2d(), target);
  }

  // optional bool needs_clear = 50;
  if (has_needs_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->needs_clear(), target);
  }

  // optional bool needs_depth = 51;
  if (has_needs_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->needs_depth(), target);
  }

  // optional bool needs_intermediate_texture = 52;
  if (has_needs_intermediate_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->needs_intermediate_texture(), target);
  }

  // optional bool needs_redraw_every_frame = 53;
  if (has_needs_redraw_every_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->needs_redraw_every_frame(), target);
  }

  // optional .CTextShadowData text_shadow = 54;
  if (has_text_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->text_shadow(), target);
  }

  // optional uint32 mix_blend_mode = 55;
  if (has_mix_blend_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->mix_blend_mode(), target);
  }

  // optional double occluded_left_edge = 56;
  if (has_occluded_left_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->occluded_left_edge(), target);
  }

  // optional double occluded_top_edge = 57;
  if (has_occluded_top_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->occluded_top_edge(), target);
  }

  // optional double occluded_right_edge = 58;
  if (has_occluded_right_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->occluded_right_edge(), target);
  }

  // optional double occluded_bottom_edge = 59;
  if (has_occluded_bottom_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->occluded_bottom_edge(), target);
  }

  // optional .CRadialClipData radial_clip = 60;
  if (has_radial_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->radial_clip(), target);
  }

  // optional string composition_layer_texture_name = 64;
  if (has_composition_layer_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "composition_layer_texture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->composition_layer_texture_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPushCompositingLayer)
  return target;
}

int CMsgPushCompositingLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 layer_id = 1;
    if (has_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_id());
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_top_left_x = 4;
    if (has_layer_quad_top_left_x()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_top_left_y = 5;
    if (has_layer_quad_top_left_y()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_top_left_z = 6;
    if (has_layer_quad_top_left_z()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_top_right_x = 7;
    if (has_layer_quad_top_right_x()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_top_right_y = 8;
    if (has_layer_quad_top_right_y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double layer_quad_top_right_z = 9;
    if (has_layer_quad_top_right_z()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_left_x = 10;
    if (has_layer_quad_bottom_left_x()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_left_y = 11;
    if (has_layer_quad_bottom_left_y()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_left_z = 12;
    if (has_layer_quad_bottom_left_z()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_right_x = 13;
    if (has_layer_quad_bottom_right_x()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_right_y = 14;
    if (has_layer_quad_bottom_right_y()) {
      total_size += 1 + 8;
    }

    // optional double layer_quad_bottom_right_z = 15;
    if (has_layer_quad_bottom_right_z()) {
      total_size += 1 + 8;
    }

    // optional double transform_m00 = 16;
    if (has_transform_m00()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double transform_m01 = 17;
    if (has_transform_m01()) {
      total_size += 2 + 8;
    }

    // optional double transform_m02 = 18;
    if (has_transform_m02()) {
      total_size += 2 + 8;
    }

    // optional double transform_m03 = 19;
    if (has_transform_m03()) {
      total_size += 2 + 8;
    }

    // optional double transform_m10 = 20;
    if (has_transform_m10()) {
      total_size += 2 + 8;
    }

    // optional double transform_m11 = 21;
    if (has_transform_m11()) {
      total_size += 2 + 8;
    }

    // optional double transform_m12 = 22;
    if (has_transform_m12()) {
      total_size += 2 + 8;
    }

    // optional double transform_m13 = 23;
    if (has_transform_m13()) {
      total_size += 2 + 8;
    }

    // optional double transform_m20 = 24;
    if (has_transform_m20()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double transform_m21 = 25;
    if (has_transform_m21()) {
      total_size += 2 + 8;
    }

    // optional double transform_m22 = 26;
    if (has_transform_m22()) {
      total_size += 2 + 8;
    }

    // optional double transform_m23 = 27;
    if (has_transform_m23()) {
      total_size += 2 + 8;
    }

    // optional double transform_m30 = 28;
    if (has_transform_m30()) {
      total_size += 2 + 8;
    }

    // optional double transform_m31 = 29;
    if (has_transform_m31()) {
      total_size += 2 + 8;
    }

    // optional double transform_m32 = 30;
    if (has_transform_m32()) {
      total_size += 2 + 8;
    }

    // optional double transform_m33 = 31;
    if (has_transform_m33()) {
      total_size += 2 + 8;
    }

    // optional double perspective_depth = 32;
    if (has_perspective_depth()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double opacity = 33;
    if (has_opacity()) {
      total_size += 2 + 8;
    }

    // optional uint32 composition_color = 34;
    if (has_composition_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composition_color());
    }

    // optional double saturation = 35;
    if (has_saturation()) {
      total_size += 2 + 8;
    }

    // optional double hue_shift = 36;
    if (has_hue_shift()) {
      total_size += 2 + 8;
    }

    // optional double brightness = 37;
    if (has_brightness()) {
      total_size += 2 + 8;
    }

    // optional double contrast = 38;
    if (has_contrast()) {
      total_size += 2 + 8;
    }

    // optional uint32 opacity_mask_texture_id = 39;
    if (has_opacity_mask_texture_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opacity_mask_texture_id());
    }

    // optional double opacity_mask_opacity = 40;
    if (has_opacity_mask_opacity()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .CBorderData border = 41;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

    // optional .CRadiusData border_radius = 42;
    if (has_border_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border_radius());
    }

    // optional .CBoxShadowData box_shadow = 43;
    if (has_box_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_shadow());
    }

    // optional double gaussianblur_passes = 44;
    if (has_gaussianblur_passes()) {
      total_size += 2 + 8;
    }

    // optional double gaussianblur_stddevhor = 45;
    if (has_gaussianblur_stddevhor()) {
      total_size += 2 + 8;
    }

    // optional double gaussianblur_stddevver = 46;
    if (has_gaussianblur_stddevver()) {
      total_size += 2 + 8;
    }

    // optional double scale_2d_factors_x = 47;
    if (has_scale_2d_factors_x()) {
      total_size += 2 + 8;
    }

    // optional double scale_2d_factors_y = 48;
    if (has_scale_2d_factors_y()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional double rotate_2d = 49;
    if (has_rotate_2d()) {
      total_size += 2 + 8;
    }

    // optional bool needs_clear = 50;
    if (has_needs_clear()) {
      total_size += 2 + 1;
    }

    // optional bool needs_depth = 51;
    if (has_needs_depth()) {
      total_size += 2 + 1;
    }

    // optional bool needs_intermediate_texture = 52;
    if (has_needs_intermediate_texture()) {
      total_size += 2 + 1;
    }

    // optional bool needs_redraw_every_frame = 53;
    if (has_needs_redraw_every_frame()) {
      total_size += 2 + 1;
    }

    // optional .CTextShadowData text_shadow = 54;
    if (has_text_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_shadow());
    }

    // optional uint32 mix_blend_mode = 55;
    if (has_mix_blend_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mix_blend_mode());
    }

    // optional double occluded_left_edge = 56;
    if (has_occluded_left_edge()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional double occluded_top_edge = 57;
    if (has_occluded_top_edge()) {
      total_size += 2 + 8;
    }

    // optional double occluded_right_edge = 58;
    if (has_occluded_right_edge()) {
      total_size += 2 + 8;
    }

    // optional double occluded_bottom_edge = 59;
    if (has_occluded_bottom_edge()) {
      total_size += 2 + 8;
    }

    // optional .CRadialClipData radial_clip = 60;
    if (has_radial_clip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radial_clip());
    }

    // optional string composition_layer_texture_name = 64;
    if (has_composition_layer_texture_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->composition_layer_texture_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPushCompositingLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPushCompositingLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPushCompositingLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPushCompositingLayer::MergeFrom(const CMsgPushCompositingLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_id()) {
      set_layer_id(from.layer_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_layer_quad_top_left_x()) {
      set_layer_quad_top_left_x(from.layer_quad_top_left_x());
    }
    if (from.has_layer_quad_top_left_y()) {
      set_layer_quad_top_left_y(from.layer_quad_top_left_y());
    }
    if (from.has_layer_quad_top_left_z()) {
      set_layer_quad_top_left_z(from.layer_quad_top_left_z());
    }
    if (from.has_layer_quad_top_right_x()) {
      set_layer_quad_top_right_x(from.layer_quad_top_right_x());
    }
    if (from.has_layer_quad_top_right_y()) {
      set_layer_quad_top_right_y(from.layer_quad_top_right_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_layer_quad_top_right_z()) {
      set_layer_quad_top_right_z(from.layer_quad_top_right_z());
    }
    if (from.has_layer_quad_bottom_left_x()) {
      set_layer_quad_bottom_left_x(from.layer_quad_bottom_left_x());
    }
    if (from.has_layer_quad_bottom_left_y()) {
      set_layer_quad_bottom_left_y(from.layer_quad_bottom_left_y());
    }
    if (from.has_layer_quad_bottom_left_z()) {
      set_layer_quad_bottom_left_z(from.layer_quad_bottom_left_z());
    }
    if (from.has_layer_quad_bottom_right_x()) {
      set_layer_quad_bottom_right_x(from.layer_quad_bottom_right_x());
    }
    if (from.has_layer_quad_bottom_right_y()) {
      set_layer_quad_bottom_right_y(from.layer_quad_bottom_right_y());
    }
    if (from.has_layer_quad_bottom_right_z()) {
      set_layer_quad_bottom_right_z(from.layer_quad_bottom_right_z());
    }
    if (from.has_transform_m00()) {
      set_transform_m00(from.transform_m00());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transform_m01()) {
      set_transform_m01(from.transform_m01());
    }
    if (from.has_transform_m02()) {
      set_transform_m02(from.transform_m02());
    }
    if (from.has_transform_m03()) {
      set_transform_m03(from.transform_m03());
    }
    if (from.has_transform_m10()) {
      set_transform_m10(from.transform_m10());
    }
    if (from.has_transform_m11()) {
      set_transform_m11(from.transform_m11());
    }
    if (from.has_transform_m12()) {
      set_transform_m12(from.transform_m12());
    }
    if (from.has_transform_m13()) {
      set_transform_m13(from.transform_m13());
    }
    if (from.has_transform_m20()) {
      set_transform_m20(from.transform_m20());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_transform_m21()) {
      set_transform_m21(from.transform_m21());
    }
    if (from.has_transform_m22()) {
      set_transform_m22(from.transform_m22());
    }
    if (from.has_transform_m23()) {
      set_transform_m23(from.transform_m23());
    }
    if (from.has_transform_m30()) {
      set_transform_m30(from.transform_m30());
    }
    if (from.has_transform_m31()) {
      set_transform_m31(from.transform_m31());
    }
    if (from.has_transform_m32()) {
      set_transform_m32(from.transform_m32());
    }
    if (from.has_transform_m33()) {
      set_transform_m33(from.transform_m33());
    }
    if (from.has_perspective_depth()) {
      set_perspective_depth(from.perspective_depth());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_composition_color()) {
      set_composition_color(from.composition_color());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_hue_shift()) {
      set_hue_shift(from.hue_shift());
    }
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_opacity_mask_texture_id()) {
      set_opacity_mask_texture_id(from.opacity_mask_texture_id());
    }
    if (from.has_opacity_mask_opacity()) {
      set_opacity_mask_opacity(from.opacity_mask_opacity());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_border()) {
      mutable_border()->::CBorderData::MergeFrom(from.border());
    }
    if (from.has_border_radius()) {
      mutable_border_radius()->::CRadiusData::MergeFrom(from.border_radius());
    }
    if (from.has_box_shadow()) {
      mutable_box_shadow()->::CBoxShadowData::MergeFrom(from.box_shadow());
    }
    if (from.has_gaussianblur_passes()) {
      set_gaussianblur_passes(from.gaussianblur_passes());
    }
    if (from.has_gaussianblur_stddevhor()) {
      set_gaussianblur_stddevhor(from.gaussianblur_stddevhor());
    }
    if (from.has_gaussianblur_stddevver()) {
      set_gaussianblur_stddevver(from.gaussianblur_stddevver());
    }
    if (from.has_scale_2d_factors_x()) {
      set_scale_2d_factors_x(from.scale_2d_factors_x());
    }
    if (from.has_scale_2d_factors_y()) {
      set_scale_2d_factors_y(from.scale_2d_factors_y());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_rotate_2d()) {
      set_rotate_2d(from.rotate_2d());
    }
    if (from.has_needs_clear()) {
      set_needs_clear(from.needs_clear());
    }
    if (from.has_needs_depth()) {
      set_needs_depth(from.needs_depth());
    }
    if (from.has_needs_intermediate_texture()) {
      set_needs_intermediate_texture(from.needs_intermediate_texture());
    }
    if (from.has_needs_redraw_every_frame()) {
      set_needs_redraw_every_frame(from.needs_redraw_every_frame());
    }
    if (from.has_text_shadow()) {
      mutable_text_shadow()->::CTextShadowData::MergeFrom(from.text_shadow());
    }
    if (from.has_mix_blend_mode()) {
      set_mix_blend_mode(from.mix_blend_mode());
    }
    if (from.has_occluded_left_edge()) {
      set_occluded_left_edge(from.occluded_left_edge());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_occluded_top_edge()) {
      set_occluded_top_edge(from.occluded_top_edge());
    }
    if (from.has_occluded_right_edge()) {
      set_occluded_right_edge(from.occluded_right_edge());
    }
    if (from.has_occluded_bottom_edge()) {
      set_occluded_bottom_edge(from.occluded_bottom_edge());
    }
    if (from.has_radial_clip()) {
      mutable_radial_clip()->::CRadialClipData::MergeFrom(from.radial_clip());
    }
    if (from.has_composition_layer_texture_name()) {
      set_composition_layer_texture_name(from.composition_layer_texture_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPushCompositingLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPushCompositingLayer::CopyFrom(const CMsgPushCompositingLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPushCompositingLayer::IsInitialized() const {

  return true;
}

void CMsgPushCompositingLayer::Swap(CMsgPushCompositingLayer* other) {
  if (other != this) {
    std::swap(layer_id_, other->layer_id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(layer_quad_top_left_x_, other->layer_quad_top_left_x_);
    std::swap(layer_quad_top_left_y_, other->layer_quad_top_left_y_);
    std::swap(layer_quad_top_left_z_, other->layer_quad_top_left_z_);
    std::swap(layer_quad_top_right_x_, other->layer_quad_top_right_x_);
    std::swap(layer_quad_top_right_y_, other->layer_quad_top_right_y_);
    std::swap(layer_quad_top_right_z_, other->layer_quad_top_right_z_);
    std::swap(layer_quad_bottom_left_x_, other->layer_quad_bottom_left_x_);
    std::swap(layer_quad_bottom_left_y_, other->layer_quad_bottom_left_y_);
    std::swap(layer_quad_bottom_left_z_, other->layer_quad_bottom_left_z_);
    std::swap(layer_quad_bottom_right_x_, other->layer_quad_bottom_right_x_);
    std::swap(layer_quad_bottom_right_y_, other->layer_quad_bottom_right_y_);
    std::swap(layer_quad_bottom_right_z_, other->layer_quad_bottom_right_z_);
    std::swap(transform_m00_, other->transform_m00_);
    std::swap(transform_m01_, other->transform_m01_);
    std::swap(transform_m02_, other->transform_m02_);
    std::swap(transform_m03_, other->transform_m03_);
    std::swap(transform_m10_, other->transform_m10_);
    std::swap(transform_m11_, other->transform_m11_);
    std::swap(transform_m12_, other->transform_m12_);
    std::swap(transform_m13_, other->transform_m13_);
    std::swap(transform_m20_, other->transform_m20_);
    std::swap(transform_m21_, other->transform_m21_);
    std::swap(transform_m22_, other->transform_m22_);
    std::swap(transform_m23_, other->transform_m23_);
    std::swap(transform_m30_, other->transform_m30_);
    std::swap(transform_m31_, other->transform_m31_);
    std::swap(transform_m32_, other->transform_m32_);
    std::swap(transform_m33_, other->transform_m33_);
    std::swap(perspective_depth_, other->perspective_depth_);
    std::swap(opacity_, other->opacity_);
    std::swap(composition_color_, other->composition_color_);
    std::swap(saturation_, other->saturation_);
    std::swap(hue_shift_, other->hue_shift_);
    std::swap(brightness_, other->brightness_);
    std::swap(contrast_, other->contrast_);
    std::swap(opacity_mask_texture_id_, other->opacity_mask_texture_id_);
    std::swap(opacity_mask_opacity_, other->opacity_mask_opacity_);
    std::swap(border_, other->border_);
    std::swap(border_radius_, other->border_radius_);
    std::swap(box_shadow_, other->box_shadow_);
    std::swap(gaussianblur_passes_, other->gaussianblur_passes_);
    std::swap(gaussianblur_stddevhor_, other->gaussianblur_stddevhor_);
    std::swap(gaussianblur_stddevver_, other->gaussianblur_stddevver_);
    std::swap(scale_2d_factors_x_, other->scale_2d_factors_x_);
    std::swap(scale_2d_factors_y_, other->scale_2d_factors_y_);
    std::swap(rotate_2d_, other->rotate_2d_);
    std::swap(needs_clear_, other->needs_clear_);
    std::swap(needs_depth_, other->needs_depth_);
    std::swap(needs_intermediate_texture_, other->needs_intermediate_texture_);
    std::swap(needs_redraw_every_frame_, other->needs_redraw_every_frame_);
    std::swap(text_shadow_, other->text_shadow_);
    std::swap(mix_blend_mode_, other->mix_blend_mode_);
    std::swap(occluded_left_edge_, other->occluded_left_edge_);
    std::swap(occluded_top_edge_, other->occluded_top_edge_);
    std::swap(occluded_right_edge_, other->occluded_right_edge_);
    std::swap(occluded_bottom_edge_, other->occluded_bottom_edge_);
    std::swap(radial_clip_, other->radial_clip_);
    std::swap(composition_layer_texture_name_, other->composition_layer_texture_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPushCompositingLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPushCompositingLayer_descriptor_;
  metadata.reflection = CMsgPushCompositingLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPopCompositingLayer::CMsgPopCompositingLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPopCompositingLayer)
}

void CMsgPopCompositingLayer::InitAsDefaultInstance() {
}

CMsgPopCompositingLayer::CMsgPopCompositingLayer(const CMsgPopCompositingLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPopCompositingLayer)
}

void CMsgPopCompositingLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopCompositingLayer::~CMsgPopCompositingLayer() {
  // @@protoc_insertion_point(destructor:CMsgPopCompositingLayer)
  SharedDtor();
}

void CMsgPopCompositingLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPopCompositingLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopCompositingLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopCompositingLayer_descriptor_;
}

const CMsgPopCompositingLayer& CMsgPopCompositingLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPopCompositingLayer* CMsgPopCompositingLayer::default_instance_ = NULL;

CMsgPopCompositingLayer* CMsgPopCompositingLayer::New() const {
  return new CMsgPopCompositingLayer;
}

void CMsgPopCompositingLayer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopCompositingLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPopCompositingLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPopCompositingLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPopCompositingLayer)
  return false;
#undef DO_
}

void CMsgPopCompositingLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPopCompositingLayer)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPopCompositingLayer)
}

::google::protobuf::uint8* CMsgPopCompositingLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopCompositingLayer)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopCompositingLayer)
  return target;
}

int CMsgPopCompositingLayer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopCompositingLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopCompositingLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopCompositingLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopCompositingLayer::MergeFrom(const CMsgPopCompositingLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopCompositingLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopCompositingLayer::CopyFrom(const CMsgPopCompositingLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopCompositingLayer::IsInitialized() const {

  return true;
}

void CMsgPopCompositingLayer::Swap(CMsgPopCompositingLayer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopCompositingLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopCompositingLayer_descriptor_;
  metadata.reflection = CMsgPopCompositingLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFreeCompositingLayer::kLayerIdFieldNumber;
#endif  // !_MSC_VER

CMsgFreeCompositingLayer::CMsgFreeCompositingLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFreeCompositingLayer)
}

void CMsgFreeCompositingLayer::InitAsDefaultInstance() {
}

CMsgFreeCompositingLayer::CMsgFreeCompositingLayer(const CMsgFreeCompositingLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFreeCompositingLayer)
}

void CMsgFreeCompositingLayer::SharedCtor() {
  _cached_size_ = 0;
  layer_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFreeCompositingLayer::~CMsgFreeCompositingLayer() {
  // @@protoc_insertion_point(destructor:CMsgFreeCompositingLayer)
  SharedDtor();
}

void CMsgFreeCompositingLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFreeCompositingLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFreeCompositingLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFreeCompositingLayer_descriptor_;
}

const CMsgFreeCompositingLayer& CMsgFreeCompositingLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgFreeCompositingLayer* CMsgFreeCompositingLayer::default_instance_ = NULL;

CMsgFreeCompositingLayer* CMsgFreeCompositingLayer::New() const {
  return new CMsgFreeCompositingLayer;
}

void CMsgFreeCompositingLayer::Clear() {
  layer_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFreeCompositingLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFreeCompositingLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 layer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_id_)));
          set_has_layer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFreeCompositingLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFreeCompositingLayer)
  return false;
#undef DO_
}

void CMsgFreeCompositingLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFreeCompositingLayer)
  // optional uint64 layer_id = 1;
  if (has_layer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->layer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFreeCompositingLayer)
}

::google::protobuf::uint8* CMsgFreeCompositingLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFreeCompositingLayer)
  // optional uint64 layer_id = 1;
  if (has_layer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->layer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFreeCompositingLayer)
  return target;
}

int CMsgFreeCompositingLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 layer_id = 1;
    if (has_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFreeCompositingLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFreeCompositingLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFreeCompositingLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFreeCompositingLayer::MergeFrom(const CMsgFreeCompositingLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer_id()) {
      set_layer_id(from.layer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFreeCompositingLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFreeCompositingLayer::CopyFrom(const CMsgFreeCompositingLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFreeCompositingLayer::IsInitialized() const {

  return true;
}

void CMsgFreeCompositingLayer::Swap(CMsgFreeCompositingLayer* other) {
  if (other != this) {
    std::swap(layer_id_, other->layer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFreeCompositingLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFreeCompositingLayer_descriptor_;
  metadata.reflection = CMsgFreeCompositingLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTransitionData::kStartTimeFieldNumber;
const int CMsgTransitionData::kDelaySecondsFieldNumber;
const int CMsgTransitionData::kDurationSecondsFieldNumber;
const int CMsgTransitionData::kTimingFuncFieldNumber;
const int CMsgTransitionData::kCubicBezier0FieldNumber;
const int CMsgTransitionData::kCubicBezier1FieldNumber;
const int CMsgTransitionData::kCubicBezier2FieldNumber;
const int CMsgTransitionData::kCubicBezier3FieldNumber;
#endif  // !_MSC_VER

CMsgTransitionData::CMsgTransitionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTransitionData)
}

void CMsgTransitionData::InitAsDefaultInstance() {
}

CMsgTransitionData::CMsgTransitionData(const CMsgTransitionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTransitionData)
}

void CMsgTransitionData::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0;
  delay_seconds_ = 0;
  duration_seconds_ = 0;
  timing_func_ = 0u;
  cubic_bezier_0_ = 0;
  cubic_bezier_1_ = 0;
  cubic_bezier_2_ = 0;
  cubic_bezier_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTransitionData::~CMsgTransitionData() {
  // @@protoc_insertion_point(destructor:CMsgTransitionData)
  SharedDtor();
}

void CMsgTransitionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTransitionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTransitionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTransitionData_descriptor_;
}

const CMsgTransitionData& CMsgTransitionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTransitionData* CMsgTransitionData::default_instance_ = NULL;

CMsgTransitionData* CMsgTransitionData::New() const {
  return new CMsgTransitionData;
}

void CMsgTransitionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTransitionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_time_, cubic_bezier_3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTransitionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTransitionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_delay_seconds;
        break;
      }

      // optional double delay_seconds = 2;
      case 2: {
        if (tag == 17) {
         parse_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_seconds_)));
          set_has_delay_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_duration_seconds;
        break;
      }

      // optional double duration_seconds = 3;
      case 3: {
        if (tag == 25) {
         parse_duration_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_seconds_)));
          set_has_duration_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timing_func;
        break;
      }

      // optional uint32 timing_func = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_timing_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timing_func_)));
          set_has_timing_func();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cubic_bezier_0;
        break;
      }

      // optional float cubic_bezier_0 = 5;
      case 5: {
        if (tag == 45) {
         parse_cubic_bezier_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_0_)));
          set_has_cubic_bezier_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cubic_bezier_1;
        break;
      }

      // optional float cubic_bezier_1 = 6;
      case 6: {
        if (tag == 53) {
         parse_cubic_bezier_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_1_)));
          set_has_cubic_bezier_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cubic_bezier_2;
        break;
      }

      // optional float cubic_bezier_2 = 7;
      case 7: {
        if (tag == 61) {
         parse_cubic_bezier_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_2_)));
          set_has_cubic_bezier_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cubic_bezier_3;
        break;
      }

      // optional float cubic_bezier_3 = 8;
      case 8: {
        if (tag == 69) {
         parse_cubic_bezier_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_3_)));
          set_has_cubic_bezier_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTransitionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTransitionData)
  return false;
#undef DO_
}

void CMsgTransitionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTransitionData)
  // optional double start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_time(), output);
  }

  // optional double delay_seconds = 2;
  if (has_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delay_seconds(), output);
  }

  // optional double duration_seconds = 3;
  if (has_duration_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration_seconds(), output);
  }

  // optional uint32 timing_func = 4 [default = 0];
  if (has_timing_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timing_func(), output);
  }

  // optional float cubic_bezier_0 = 5;
  if (has_cubic_bezier_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cubic_bezier_0(), output);
  }

  // optional float cubic_bezier_1 = 6;
  if (has_cubic_bezier_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cubic_bezier_1(), output);
  }

  // optional float cubic_bezier_2 = 7;
  if (has_cubic_bezier_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cubic_bezier_2(), output);
  }

  // optional float cubic_bezier_3 = 8;
  if (has_cubic_bezier_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cubic_bezier_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTransitionData)
}

::google::protobuf::uint8* CMsgTransitionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTransitionData)
  // optional double start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time(), target);
  }

  // optional double delay_seconds = 2;
  if (has_delay_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delay_seconds(), target);
  }

  // optional double duration_seconds = 3;
  if (has_duration_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration_seconds(), target);
  }

  // optional uint32 timing_func = 4 [default = 0];
  if (has_timing_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timing_func(), target);
  }

  // optional float cubic_bezier_0 = 5;
  if (has_cubic_bezier_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cubic_bezier_0(), target);
  }

  // optional float cubic_bezier_1 = 6;
  if (has_cubic_bezier_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cubic_bezier_1(), target);
  }

  // optional float cubic_bezier_2 = 7;
  if (has_cubic_bezier_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cubic_bezier_2(), target);
  }

  // optional float cubic_bezier_3 = 8;
  if (has_cubic_bezier_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cubic_bezier_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTransitionData)
  return target;
}

int CMsgTransitionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional double delay_seconds = 2;
    if (has_delay_seconds()) {
      total_size += 1 + 8;
    }

    // optional double duration_seconds = 3;
    if (has_duration_seconds()) {
      total_size += 1 + 8;
    }

    // optional uint32 timing_func = 4 [default = 0];
    if (has_timing_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timing_func());
    }

    // optional float cubic_bezier_0 = 5;
    if (has_cubic_bezier_0()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_1 = 6;
    if (has_cubic_bezier_1()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_2 = 7;
    if (has_cubic_bezier_2()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_3 = 8;
    if (has_cubic_bezier_3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTransitionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTransitionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTransitionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTransitionData::MergeFrom(const CMsgTransitionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_delay_seconds()) {
      set_delay_seconds(from.delay_seconds());
    }
    if (from.has_duration_seconds()) {
      set_duration_seconds(from.duration_seconds());
    }
    if (from.has_timing_func()) {
      set_timing_func(from.timing_func());
    }
    if (from.has_cubic_bezier_0()) {
      set_cubic_bezier_0(from.cubic_bezier_0());
    }
    if (from.has_cubic_bezier_1()) {
      set_cubic_bezier_1(from.cubic_bezier_1());
    }
    if (from.has_cubic_bezier_2()) {
      set_cubic_bezier_2(from.cubic_bezier_2());
    }
    if (from.has_cubic_bezier_3()) {
      set_cubic_bezier_3(from.cubic_bezier_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTransitionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTransitionData::CopyFrom(const CMsgTransitionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTransitionData::IsInitialized() const {

  return true;
}

void CMsgTransitionData::Swap(CMsgTransitionData* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(delay_seconds_, other->delay_seconds_);
    std::swap(duration_seconds_, other->duration_seconds_);
    std::swap(timing_func_, other->timing_func_);
    std::swap(cubic_bezier_0_, other->cubic_bezier_0_);
    std::swap(cubic_bezier_1_, other->cubic_bezier_1_);
    std::swap(cubic_bezier_2_, other->cubic_bezier_2_);
    std::swap(cubic_bezier_3_, other->cubic_bezier_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTransitionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTransitionData_descriptor_;
  metadata.reflection = CMsgTransitionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAnimationData::kStartTimeFieldNumber;
const int CMsgAnimationData::kDelaySecondsFieldNumber;
const int CMsgAnimationData::kDurationSecondsFieldNumber;
const int CMsgAnimationData::kTimingFuncFieldNumber;
const int CMsgAnimationData::kCubicBezier0FieldNumber;
const int CMsgAnimationData::kCubicBezier1FieldNumber;
const int CMsgAnimationData::kCubicBezier2FieldNumber;
const int CMsgAnimationData::kCubicBezier3FieldNumber;
const int CMsgAnimationData::kDirectionFieldNumber;
const int CMsgAnimationData::kIterationFieldNumber;
const int CMsgAnimationData::kFramesFieldNumber;
#endif  // !_MSC_VER

CMsgAnimationData::CMsgAnimationData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAnimationData)
}

void CMsgAnimationData::InitAsDefaultInstance() {
}

CMsgAnimationData::CMsgAnimationData(const CMsgAnimationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgAnimationData)
}

void CMsgAnimationData::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0;
  delay_seconds_ = 0;
  duration_seconds_ = 0;
  timing_func_ = 0u;
  cubic_bezier_0_ = 0;
  cubic_bezier_1_ = 0;
  cubic_bezier_2_ = 0;
  cubic_bezier_3_ = 0;
  direction_ = 0u;
  iteration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAnimationData::~CMsgAnimationData() {
  // @@protoc_insertion_point(destructor:CMsgAnimationData)
  SharedDtor();
}

void CMsgAnimationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAnimationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAnimationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAnimationData_descriptor_;
}

const CMsgAnimationData& CMsgAnimationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgAnimationData* CMsgAnimationData::default_instance_ = NULL;

CMsgAnimationData* CMsgAnimationData::New() const {
  return new CMsgAnimationData;
}

void CMsgAnimationData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgAnimationData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_time_, cubic_bezier_3_);
  }
  if (_has_bits_[8 / 32] & 768) {
    direction_ = 0u;
    iteration_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAnimationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAnimationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_delay_seconds;
        break;
      }

      // optional double delay_seconds = 2;
      case 2: {
        if (tag == 17) {
         parse_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_seconds_)));
          set_has_delay_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_duration_seconds;
        break;
      }

      // optional double duration_seconds = 3;
      case 3: {
        if (tag == 25) {
         parse_duration_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_seconds_)));
          set_has_duration_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timing_func;
        break;
      }

      // optional uint32 timing_func = 4;
      case 4: {
        if (tag == 32) {
         parse_timing_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timing_func_)));
          set_has_timing_func();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cubic_bezier_0;
        break;
      }

      // optional float cubic_bezier_0 = 5;
      case 5: {
        if (tag == 45) {
         parse_cubic_bezier_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_0_)));
          set_has_cubic_bezier_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cubic_bezier_1;
        break;
      }

      // optional float cubic_bezier_1 = 6;
      case 6: {
        if (tag == 53) {
         parse_cubic_bezier_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_1_)));
          set_has_cubic_bezier_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cubic_bezier_2;
        break;
      }

      // optional float cubic_bezier_2 = 7;
      case 7: {
        if (tag == 61) {
         parse_cubic_bezier_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_2_)));
          set_has_cubic_bezier_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_cubic_bezier_3;
        break;
      }

      // optional float cubic_bezier_3 = 8;
      case 8: {
        if (tag == 69) {
         parse_cubic_bezier_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_3_)));
          set_has_cubic_bezier_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 9;
      case 9: {
        if (tag == 72) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_iteration;
        break;
      }

      // optional float iteration = 10;
      case 10: {
        if (tag == 85) {
         parse_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iteration_)));
          set_has_iteration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_frames;
        break;
      }

      // repeated .CMsgAnimationFrameData frames = 11;
      case 11: {
        if (tag == 90) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAnimationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAnimationData)
  return false;
#undef DO_
}

void CMsgAnimationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAnimationData)
  // optional double start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_time(), output);
  }

  // optional double delay_seconds = 2;
  if (has_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delay_seconds(), output);
  }

  // optional double duration_seconds = 3;
  if (has_duration_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration_seconds(), output);
  }

  // optional uint32 timing_func = 4;
  if (has_timing_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timing_func(), output);
  }

  // optional float cubic_bezier_0 = 5;
  if (has_cubic_bezier_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cubic_bezier_0(), output);
  }

  // optional float cubic_bezier_1 = 6;
  if (has_cubic_bezier_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cubic_bezier_1(), output);
  }

  // optional float cubic_bezier_2 = 7;
  if (has_cubic_bezier_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cubic_bezier_2(), output);
  }

  // optional float cubic_bezier_3 = 8;
  if (has_cubic_bezier_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cubic_bezier_3(), output);
  }

  // optional uint32 direction = 9;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->direction(), output);
  }

  // optional float iteration = 10;
  if (has_iteration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->iteration(), output);
  }

  // repeated .CMsgAnimationFrameData frames = 11;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAnimationData)
}

::google::protobuf::uint8* CMsgAnimationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAnimationData)
  // optional double start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time(), target);
  }

  // optional double delay_seconds = 2;
  if (has_delay_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delay_seconds(), target);
  }

  // optional double duration_seconds = 3;
  if (has_duration_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration_seconds(), target);
  }

  // optional uint32 timing_func = 4;
  if (has_timing_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timing_func(), target);
  }

  // optional float cubic_bezier_0 = 5;
  if (has_cubic_bezier_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cubic_bezier_0(), target);
  }

  // optional float cubic_bezier_1 = 6;
  if (has_cubic_bezier_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cubic_bezier_1(), target);
  }

  // optional float cubic_bezier_2 = 7;
  if (has_cubic_bezier_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cubic_bezier_2(), target);
  }

  // optional float cubic_bezier_3 = 8;
  if (has_cubic_bezier_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cubic_bezier_3(), target);
  }

  // optional uint32 direction = 9;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->direction(), target);
  }

  // optional float iteration = 10;
  if (has_iteration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->iteration(), target);
  }

  // repeated .CMsgAnimationFrameData frames = 11;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAnimationData)
  return target;
}

int CMsgAnimationData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional double delay_seconds = 2;
    if (has_delay_seconds()) {
      total_size += 1 + 8;
    }

    // optional double duration_seconds = 3;
    if (has_duration_seconds()) {
      total_size += 1 + 8;
    }

    // optional uint32 timing_func = 4;
    if (has_timing_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timing_func());
    }

    // optional float cubic_bezier_0 = 5;
    if (has_cubic_bezier_0()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_1 = 6;
    if (has_cubic_bezier_1()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_2 = 7;
    if (has_cubic_bezier_2()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_3 = 8;
    if (has_cubic_bezier_3()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 direction = 9;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional float iteration = 10;
    if (has_iteration()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CMsgAnimationFrameData frames = 11;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAnimationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAnimationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAnimationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAnimationData::MergeFrom(const CMsgAnimationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_delay_seconds()) {
      set_delay_seconds(from.delay_seconds());
    }
    if (from.has_duration_seconds()) {
      set_duration_seconds(from.duration_seconds());
    }
    if (from.has_timing_func()) {
      set_timing_func(from.timing_func());
    }
    if (from.has_cubic_bezier_0()) {
      set_cubic_bezier_0(from.cubic_bezier_0());
    }
    if (from.has_cubic_bezier_1()) {
      set_cubic_bezier_1(from.cubic_bezier_1());
    }
    if (from.has_cubic_bezier_2()) {
      set_cubic_bezier_2(from.cubic_bezier_2());
    }
    if (from.has_cubic_bezier_3()) {
      set_cubic_bezier_3(from.cubic_bezier_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_iteration()) {
      set_iteration(from.iteration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAnimationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAnimationData::CopyFrom(const CMsgAnimationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAnimationData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void CMsgAnimationData::Swap(CMsgAnimationData* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(delay_seconds_, other->delay_seconds_);
    std::swap(duration_seconds_, other->duration_seconds_);
    std::swap(timing_func_, other->timing_func_);
    std::swap(cubic_bezier_0_, other->cubic_bezier_0_);
    std::swap(cubic_bezier_1_, other->cubic_bezier_1_);
    std::swap(cubic_bezier_2_, other->cubic_bezier_2_);
    std::swap(cubic_bezier_3_, other->cubic_bezier_3_);
    std::swap(direction_, other->direction_);
    std::swap(iteration_, other->iteration_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAnimationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAnimationData_descriptor_;
  metadata.reflection = CMsgAnimationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAnimationFrameData::kPercentFieldNumber;
const int CMsgAnimationFrameData::kTimingFuncFieldNumber;
const int CMsgAnimationFrameData::kCubicBezier0FieldNumber;
const int CMsgAnimationFrameData::kCubicBezier1FieldNumber;
const int CMsgAnimationFrameData::kCubicBezier2FieldNumber;
const int CMsgAnimationFrameData::kCubicBezier3FieldNumber;
#endif  // !_MSC_VER

CMsgAnimationFrameData::CMsgAnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgAnimationFrameData)
}

void CMsgAnimationFrameData::InitAsDefaultInstance() {
}

CMsgAnimationFrameData::CMsgAnimationFrameData(const CMsgAnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgAnimationFrameData)
}

void CMsgAnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  percent_ = 0;
  timing_func_ = 0u;
  cubic_bezier_0_ = 0;
  cubic_bezier_1_ = 0;
  cubic_bezier_2_ = 0;
  cubic_bezier_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAnimationFrameData::~CMsgAnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgAnimationFrameData)
  SharedDtor();
}

void CMsgAnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAnimationFrameData_descriptor_;
}

const CMsgAnimationFrameData& CMsgAnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgAnimationFrameData* CMsgAnimationFrameData::default_instance_ = NULL;

CMsgAnimationFrameData* CMsgAnimationFrameData::New() const {
  return new CMsgAnimationFrameData;
}

void CMsgAnimationFrameData::Clear() {
  _extensions_.Clear();
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgAnimationFrameData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(percent_, cubic_bezier_3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgAnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float percent = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timing_func;
        break;
      }

      // optional uint32 timing_func = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_timing_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timing_func_)));
          set_has_timing_func();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cubic_bezier_0;
        break;
      }

      // optional float cubic_bezier_0 = 3;
      case 3: {
        if (tag == 29) {
         parse_cubic_bezier_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_0_)));
          set_has_cubic_bezier_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cubic_bezier_1;
        break;
      }

      // optional float cubic_bezier_1 = 4;
      case 4: {
        if (tag == 37) {
         parse_cubic_bezier_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_1_)));
          set_has_cubic_bezier_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cubic_bezier_2;
        break;
      }

      // optional float cubic_bezier_2 = 5;
      case 5: {
        if (tag == 45) {
         parse_cubic_bezier_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_2_)));
          set_has_cubic_bezier_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cubic_bezier_3;
        break;
      }

      // optional float cubic_bezier_3 = 6;
      case 6: {
        if (tag == 53) {
         parse_cubic_bezier_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cubic_bezier_3_)));
          set_has_cubic_bezier_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgAnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgAnimationFrameData)
  return false;
#undef DO_
}

void CMsgAnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgAnimationFrameData)
  // optional float percent = 1;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->percent(), output);
  }

  // optional uint32 timing_func = 2 [default = 0];
  if (has_timing_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timing_func(), output);
  }

  // optional float cubic_bezier_0 = 3;
  if (has_cubic_bezier_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cubic_bezier_0(), output);
  }

  // optional float cubic_bezier_1 = 4;
  if (has_cubic_bezier_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cubic_bezier_1(), output);
  }

  // optional float cubic_bezier_2 = 5;
  if (has_cubic_bezier_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cubic_bezier_2(), output);
  }

  // optional float cubic_bezier_3 = 6;
  if (has_cubic_bezier_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cubic_bezier_3(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgAnimationFrameData)
}

::google::protobuf::uint8* CMsgAnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAnimationFrameData)
  // optional float percent = 1;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->percent(), target);
  }

  // optional uint32 timing_func = 2 [default = 0];
  if (has_timing_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timing_func(), target);
  }

  // optional float cubic_bezier_0 = 3;
  if (has_cubic_bezier_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cubic_bezier_0(), target);
  }

  // optional float cubic_bezier_1 = 4;
  if (has_cubic_bezier_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cubic_bezier_1(), target);
  }

  // optional float cubic_bezier_2 = 5;
  if (has_cubic_bezier_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cubic_bezier_2(), target);
  }

  // optional float cubic_bezier_3 = 6;
  if (has_cubic_bezier_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cubic_bezier_3(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAnimationFrameData)
  return target;
}

int CMsgAnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float percent = 1;
    if (has_percent()) {
      total_size += 1 + 4;
    }

    // optional uint32 timing_func = 2 [default = 0];
    if (has_timing_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timing_func());
    }

    // optional float cubic_bezier_0 = 3;
    if (has_cubic_bezier_0()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_1 = 4;
    if (has_cubic_bezier_1()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_2 = 5;
    if (has_cubic_bezier_2()) {
      total_size += 1 + 4;
    }

    // optional float cubic_bezier_3 = 6;
    if (has_cubic_bezier_3()) {
      total_size += 1 + 4;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAnimationFrameData::MergeFrom(const CMsgAnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_timing_func()) {
      set_timing_func(from.timing_func());
    }
    if (from.has_cubic_bezier_0()) {
      set_cubic_bezier_0(from.cubic_bezier_0());
    }
    if (from.has_cubic_bezier_1()) {
      set_cubic_bezier_1(from.cubic_bezier_1());
    }
    if (from.has_cubic_bezier_2()) {
      set_cubic_bezier_2(from.cubic_bezier_2());
    }
    if (from.has_cubic_bezier_3()) {
      set_cubic_bezier_3(from.cubic_bezier_3());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAnimationFrameData::CopyFrom(const CMsgAnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAnimationFrameData::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void CMsgAnimationFrameData::Swap(CMsgAnimationFrameData* other) {
  if (other != this) {
    std::swap(percent_, other->percent_);
    std::swap(timing_func_, other->timing_func_);
    std::swap(cubic_bezier_0_, other->cubic_bezier_0_);
    std::swap(cubic_bezier_1_, other->cubic_bezier_1_);
    std::swap(cubic_bezier_2_, other->cubic_bezier_2_);
    std::swap(cubic_bezier_3_, other->cubic_bezier_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata CMsgAnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAnimationFrameData_descriptor_;
  metadata.reflection = CMsgAnimationFrameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPointWithTransition_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgPointWithTransition_AnimationFrameData::CMsgPointWithTransition_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPointWithTransition.AnimationFrameData)
}

void CMsgPointWithTransition_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgPointWithTransition_AnimationFrameData::CMsgPointWithTransition_AnimationFrameData(const CMsgPointWithTransition_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPointWithTransition.AnimationFrameData)
}

void CMsgPointWithTransition_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPointWithTransition_AnimationFrameData::~CMsgPointWithTransition_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgPointWithTransition.AnimationFrameData)
  SharedDtor();
}

void CMsgPointWithTransition_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgPointWithTransition_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPointWithTransition_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPointWithTransition_AnimationFrameData_descriptor_;
}

const CMsgPointWithTransition_AnimationFrameData& CMsgPointWithTransition_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPointWithTransition_AnimationFrameData* CMsgPointWithTransition_AnimationFrameData::default_instance_ = NULL;

CMsgPointWithTransition_AnimationFrameData* CMsgPointWithTransition_AnimationFrameData::New() const {
  return new CMsgPointWithTransition_AnimationFrameData;
}

void CMsgPointWithTransition_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgPoint::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPointWithTransition_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPointWithTransition.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPointWithTransition.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPointWithTransition.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgPointWithTransition_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPointWithTransition.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPointWithTransition.AnimationFrameData)
}

::google::protobuf::uint8* CMsgPointWithTransition_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPointWithTransition.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPointWithTransition.AnimationFrameData)
  return target;
}

int CMsgPointWithTransition_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPointWithTransition_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPointWithTransition_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPointWithTransition_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPointWithTransition_AnimationFrameData::MergeFrom(const CMsgPointWithTransition_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgPoint::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPointWithTransition_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPointWithTransition_AnimationFrameData::CopyFrom(const CMsgPointWithTransition_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPointWithTransition_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgPointWithTransition_AnimationFrameData::Swap(CMsgPointWithTransition_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPointWithTransition_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPointWithTransition_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgPointWithTransition_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPointWithTransition::kBaseFieldNumber;
const int CMsgPointWithTransition::kTransitionFieldNumber;
const int CMsgPointWithTransition::kTransitionDataFieldNumber;
const int CMsgPointWithTransition::kStyleSymbolFieldNumber;
const int CMsgPointWithTransition::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgPointWithTransition::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgPointWithTransition_AnimationFrameData >, 11, false >
  CMsgPointWithTransition::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgPointWithTransition_AnimationFrameData::default_instance());
CMsgPointWithTransition::CMsgPointWithTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPointWithTransition)
}

void CMsgPointWithTransition::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgPointWithTransition::CMsgPointWithTransition(const CMsgPointWithTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPointWithTransition)
}

void CMsgPointWithTransition::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPointWithTransition::~CMsgPointWithTransition() {
  // @@protoc_insertion_point(destructor:CMsgPointWithTransition)
  SharedDtor();
}

void CMsgPointWithTransition::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
  }
}

void CMsgPointWithTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPointWithTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPointWithTransition_descriptor_;
}

const CMsgPointWithTransition& CMsgPointWithTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPointWithTransition* CMsgPointWithTransition::default_instance_ = NULL;

CMsgPointWithTransition* CMsgPointWithTransition::New() const {
  return new CMsgPointWithTransition;
}

void CMsgPointWithTransition::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgPoint::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgPoint::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPointWithTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPointWithTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgPoint transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPointWithTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPointWithTransition)
  return false;
#undef DO_
}

void CMsgPointWithTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPointWithTransition)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPointWithTransition)
}

::google::protobuf::uint8* CMsgPointWithTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPointWithTransition)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPointWithTransition)
  return target;
}

int CMsgPointWithTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgPoint transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPointWithTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPointWithTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPointWithTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPointWithTransition::MergeFrom(const CMsgPointWithTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgPoint::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgPoint::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPointWithTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPointWithTransition::CopyFrom(const CMsgPointWithTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPointWithTransition::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgPointWithTransition::Swap(CMsgPointWithTransition* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPointWithTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPointWithTransition_descriptor_;
  metadata.reflection = CMsgPointWithTransition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgColor_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgColor_AnimationFrameData::CMsgColor_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgColor.AnimationFrameData)
}

void CMsgColor_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgColor_AnimationFrameData::CMsgColor_AnimationFrameData(const CMsgColor_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgColor.AnimationFrameData)
}

void CMsgColor_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgColor_AnimationFrameData::~CMsgColor_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgColor.AnimationFrameData)
  SharedDtor();
}

void CMsgColor_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgColor_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgColor_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgColor_AnimationFrameData_descriptor_;
}

const CMsgColor_AnimationFrameData& CMsgColor_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgColor_AnimationFrameData* CMsgColor_AnimationFrameData::default_instance_ = NULL;

CMsgColor_AnimationFrameData* CMsgColor_AnimationFrameData::New() const {
  return new CMsgColor_AnimationFrameData;
}

void CMsgColor_AnimationFrameData::Clear() {
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgColor_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgColor.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgColor.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgColor.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgColor_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgColor.AnimationFrameData)
  // optional uint32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgColor.AnimationFrameData)
}

::google::protobuf::uint8* CMsgColor_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgColor.AnimationFrameData)
  // optional uint32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgColor.AnimationFrameData)
  return target;
}

int CMsgColor_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgColor_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgColor_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgColor_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgColor_AnimationFrameData::MergeFrom(const CMsgColor_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgColor_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgColor_AnimationFrameData::CopyFrom(const CMsgColor_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgColor_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgColor_AnimationFrameData::Swap(CMsgColor_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgColor_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgColor_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgColor_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgColor::kBaseFieldNumber;
const int CMsgColor::kTransitionFieldNumber;
const int CMsgColor::kTransitionDataFieldNumber;
const int CMsgColor::kStyleSymbolFieldNumber;
const int CMsgColor::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgColor::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgColor_AnimationFrameData >, 11, false >
  CMsgColor::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgColor_AnimationFrameData::default_instance());
CMsgColor::CMsgColor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgColor)
}

void CMsgColor::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgColor::CMsgColor(const CMsgColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgColor)
}

void CMsgColor::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0u;
  transition_ = 0u;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgColor::~CMsgColor() {
  // @@protoc_insertion_point(destructor:CMsgColor)
  SharedDtor();
}

void CMsgColor::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgColor_descriptor_;
}

const CMsgColor& CMsgColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgColor* CMsgColor::default_instance_ = NULL;

CMsgColor* CMsgColor::New() const {
  return new CMsgColor;
}

void CMsgColor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgColor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 base = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transition;
        break;
      }

      // optional uint32 transition = 2;
      case 2: {
        if (tag == 16) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgColor)
  return false;
#undef DO_
}

void CMsgColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgColor)
  // optional uint32 base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base(), output);
  }

  // optional uint32 transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgColor)
}

::google::protobuf::uint8* CMsgColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgColor)
  // optional uint32 base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base(), target);
  }

  // optional uint32 transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgColor)
  return target;
}

int CMsgColor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base());
    }

    // optional uint32 transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgColor::MergeFrom(const CMsgColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgColor::CopyFrom(const CMsgColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgColor::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgColor::Swap(CMsgColor* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgColor_descriptor_;
  metadata.reflection = CMsgColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgColorStop::kPositionFieldNumber;
const int CMsgColorStop::kColorRgbaFieldNumber;
#endif  // !_MSC_VER

CMsgColorStop::CMsgColorStop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgColorStop)
}

void CMsgColorStop::InitAsDefaultInstance() {
}

CMsgColorStop::CMsgColorStop(const CMsgColorStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgColorStop)
}

void CMsgColorStop::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  color_rgba_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgColorStop::~CMsgColorStop() {
  // @@protoc_insertion_point(destructor:CMsgColorStop)
  SharedDtor();
}

void CMsgColorStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgColorStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgColorStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgColorStop_descriptor_;
}

const CMsgColorStop& CMsgColorStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgColorStop* CMsgColorStop::default_instance_ = NULL;

CMsgColorStop* CMsgColorStop::New() const {
  return new CMsgColorStop;
}

void CMsgColorStop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgColorStop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(position_, color_rgba_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgColorStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgColorStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double position = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color_rgba;
        break;
      }

      // optional uint32 color_rgba = 2;
      case 2: {
        if (tag == 16) {
         parse_color_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_rgba_)));
          set_has_color_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgColorStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgColorStop)
  return false;
#undef DO_
}

void CMsgColorStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgColorStop)
  // optional double position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->position(), output);
  }

  // optional uint32 color_rgba = 2;
  if (has_color_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color_rgba(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgColorStop)
}

::google::protobuf::uint8* CMsgColorStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgColorStop)
  // optional double position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->position(), target);
  }

  // optional uint32 color_rgba = 2;
  if (has_color_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color_rgba(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgColorStop)
  return target;
}

int CMsgColorStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double position = 1;
    if (has_position()) {
      total_size += 1 + 8;
    }

    // optional uint32 color_rgba = 2;
    if (has_color_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_rgba());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgColorStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgColorStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgColorStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgColorStop::MergeFrom(const CMsgColorStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_color_rgba()) {
      set_color_rgba(from.color_rgba());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgColorStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgColorStop::CopyFrom(const CMsgColorStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgColorStop::IsInitialized() const {

  return true;
}

void CMsgColorStop::Swap(CMsgColorStop* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(color_rgba_, other->color_rgba_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgColorStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgColorStop_descriptor_;
  metadata.reflection = CMsgColorStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLinearGradient::kStartPositionFieldNumber;
const int CMsgLinearGradient::kEndPositionFieldNumber;
const int CMsgLinearGradient::kColorStopFieldNumber;
#endif  // !_MSC_VER

CMsgLinearGradient::CMsgLinearGradient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLinearGradient)
}

void CMsgLinearGradient::InitAsDefaultInstance() {
  start_position_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  end_position_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgLinearGradient::CMsgLinearGradient(const CMsgLinearGradient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLinearGradient)
}

void CMsgLinearGradient::SharedCtor() {
  _cached_size_ = 0;
  start_position_ = NULL;
  end_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLinearGradient::~CMsgLinearGradient() {
  // @@protoc_insertion_point(destructor:CMsgLinearGradient)
  SharedDtor();
}

void CMsgLinearGradient::SharedDtor() {
  if (this != default_instance_) {
    delete start_position_;
    delete end_position_;
  }
}

void CMsgLinearGradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLinearGradient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLinearGradient_descriptor_;
}

const CMsgLinearGradient& CMsgLinearGradient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgLinearGradient* CMsgLinearGradient::default_instance_ = NULL;

CMsgLinearGradient* CMsgLinearGradient::New() const {
  return new CMsgLinearGradient;
}

void CMsgLinearGradient::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_start_position()) {
      if (start_position_ != NULL) start_position_->::CMsgPoint::Clear();
    }
    if (has_end_position()) {
      if (end_position_ != NULL) end_position_->::CMsgPoint::Clear();
    }
  }
  color_stop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLinearGradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLinearGradient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint start_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_position;
        break;
      }

      // optional .CMsgPoint end_position = 2;
      case 2: {
        if (tag == 18) {
         parse_end_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_color_stop;
        break;
      }

      // repeated .CMsgColorStop color_stop = 3;
      case 3: {
        if (tag == 26) {
         parse_color_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_color_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_color_stop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLinearGradient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLinearGradient)
  return false;
#undef DO_
}

void CMsgLinearGradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLinearGradient)
  // optional .CMsgPoint start_position = 1;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start_position(), output);
  }

  // optional .CMsgPoint end_position = 2;
  if (has_end_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end_position(), output);
  }

  // repeated .CMsgColorStop color_stop = 3;
  for (int i = 0; i < this->color_stop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->color_stop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLinearGradient)
}

::google::protobuf::uint8* CMsgLinearGradient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLinearGradient)
  // optional .CMsgPoint start_position = 1;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start_position(), target);
  }

  // optional .CMsgPoint end_position = 2;
  if (has_end_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end_position(), target);
  }

  // repeated .CMsgColorStop color_stop = 3;
  for (int i = 0; i < this->color_stop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->color_stop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLinearGradient)
  return target;
}

int CMsgLinearGradient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint start_position = 1;
    if (has_start_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_position());
    }

    // optional .CMsgPoint end_position = 2;
    if (has_end_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_position());
    }

  }
  // repeated .CMsgColorStop color_stop = 3;
  total_size += 1 * this->color_stop_size();
  for (int i = 0; i < this->color_stop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->color_stop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLinearGradient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLinearGradient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLinearGradient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLinearGradient::MergeFrom(const CMsgLinearGradient& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_stop_.MergeFrom(from.color_stop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_position()) {
      mutable_start_position()->::CMsgPoint::MergeFrom(from.start_position());
    }
    if (from.has_end_position()) {
      mutable_end_position()->::CMsgPoint::MergeFrom(from.end_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLinearGradient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinearGradient::CopyFrom(const CMsgLinearGradient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinearGradient::IsInitialized() const {

  return true;
}

void CMsgLinearGradient::Swap(CMsgLinearGradient* other) {
  if (other != this) {
    std::swap(start_position_, other->start_position_);
    std::swap(end_position_, other->end_position_);
    color_stop_.Swap(&other->color_stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLinearGradient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLinearGradient_descriptor_;
  metadata.reflection = CMsgLinearGradient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRadialGradient::kCenterPositionFieldNumber;
const int CMsgRadialGradient::kOffsetDistanceFieldNumber;
const int CMsgRadialGradient::kRadiiFieldNumber;
const int CMsgRadialGradient::kColorStopFieldNumber;
#endif  // !_MSC_VER

CMsgRadialGradient::CMsgRadialGradient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRadialGradient)
}

void CMsgRadialGradient::InitAsDefaultInstance() {
  center_position_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  offset_distance_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  radii_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgRadialGradient::CMsgRadialGradient(const CMsgRadialGradient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRadialGradient)
}

void CMsgRadialGradient::SharedCtor() {
  _cached_size_ = 0;
  center_position_ = NULL;
  offset_distance_ = NULL;
  radii_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRadialGradient::~CMsgRadialGradient() {
  // @@protoc_insertion_point(destructor:CMsgRadialGradient)
  SharedDtor();
}

void CMsgRadialGradient::SharedDtor() {
  if (this != default_instance_) {
    delete center_position_;
    delete offset_distance_;
    delete radii_;
  }
}

void CMsgRadialGradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRadialGradient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRadialGradient_descriptor_;
}

const CMsgRadialGradient& CMsgRadialGradient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRadialGradient* CMsgRadialGradient::default_instance_ = NULL;

CMsgRadialGradient* CMsgRadialGradient::New() const {
  return new CMsgRadialGradient;
}

void CMsgRadialGradient::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_center_position()) {
      if (center_position_ != NULL) center_position_->::CMsgPoint::Clear();
    }
    if (has_offset_distance()) {
      if (offset_distance_ != NULL) offset_distance_->::CMsgPoint::Clear();
    }
    if (has_radii()) {
      if (radii_ != NULL) radii_->::CMsgPoint::Clear();
    }
  }
  color_stop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRadialGradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRadialGradient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint center_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset_distance;
        break;
      }

      // optional .CMsgPoint offset_distance = 2;
      case 2: {
        if (tag == 18) {
         parse_offset_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset_distance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_radii;
        break;
      }

      // optional .CMsgPoint radii = 3;
      case 3: {
        if (tag == 26) {
         parse_radii:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radii()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color_stop;
        break;
      }

      // repeated .CMsgColorStop color_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_color_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_color_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color_stop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRadialGradient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRadialGradient)
  return false;
#undef DO_
}

void CMsgRadialGradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRadialGradient)
  // optional .CMsgPoint center_position = 1;
  if (has_center_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center_position(), output);
  }

  // optional .CMsgPoint offset_distance = 2;
  if (has_offset_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offset_distance(), output);
  }

  // optional .CMsgPoint radii = 3;
  if (has_radii()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->radii(), output);
  }

  // repeated .CMsgColorStop color_stop = 4;
  for (int i = 0; i < this->color_stop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->color_stop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRadialGradient)
}

::google::protobuf::uint8* CMsgRadialGradient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRadialGradient)
  // optional .CMsgPoint center_position = 1;
  if (has_center_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center_position(), target);
  }

  // optional .CMsgPoint offset_distance = 2;
  if (has_offset_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offset_distance(), target);
  }

  // optional .CMsgPoint radii = 3;
  if (has_radii()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->radii(), target);
  }

  // repeated .CMsgColorStop color_stop = 4;
  for (int i = 0; i < this->color_stop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->color_stop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRadialGradient)
  return target;
}

int CMsgRadialGradient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint center_position = 1;
    if (has_center_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center_position());
    }

    // optional .CMsgPoint offset_distance = 2;
    if (has_offset_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset_distance());
    }

    // optional .CMsgPoint radii = 3;
    if (has_radii()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radii());
    }

  }
  // repeated .CMsgColorStop color_stop = 4;
  total_size += 1 * this->color_stop_size();
  for (int i = 0; i < this->color_stop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->color_stop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRadialGradient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRadialGradient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRadialGradient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRadialGradient::MergeFrom(const CMsgRadialGradient& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_stop_.MergeFrom(from.color_stop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_position()) {
      mutable_center_position()->::CMsgPoint::MergeFrom(from.center_position());
    }
    if (from.has_offset_distance()) {
      mutable_offset_distance()->::CMsgPoint::MergeFrom(from.offset_distance());
    }
    if (from.has_radii()) {
      mutable_radii()->::CMsgPoint::MergeFrom(from.radii());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRadialGradient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRadialGradient::CopyFrom(const CMsgRadialGradient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRadialGradient::IsInitialized() const {

  return true;
}

void CMsgRadialGradient::Swap(CMsgRadialGradient* other) {
  if (other != this) {
    std::swap(center_position_, other->center_position_);
    std::swap(offset_distance_, other->offset_distance_);
    std::swap(radii_, other->radii_);
    color_stop_.Swap(&other->color_stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRadialGradient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRadialGradient_descriptor_;
  metadata.reflection = CMsgRadialGradient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgParticle::kParticlePositionFieldNumber;
const int CMsgParticle::kParticleSizeFieldNumber;
const int CMsgParticle::kParticleSharpnessFieldNumber;
const int CMsgParticle::kColorRgbaFieldNumber;
#endif  // !_MSC_VER

CMsgParticle::CMsgParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgParticle)
}

void CMsgParticle::InitAsDefaultInstance() {
  particle_position_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgParticle::CMsgParticle(const CMsgParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgParticle)
}

void CMsgParticle::SharedCtor() {
  _cached_size_ = 0;
  particle_position_ = NULL;
  particle_size_ = 0;
  particle_sharpness_ = 0;
  color_rgba_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgParticle::~CMsgParticle() {
  // @@protoc_insertion_point(destructor:CMsgParticle)
  SharedDtor();
}

void CMsgParticle::SharedDtor() {
  if (this != default_instance_) {
    delete particle_position_;
  }
}

void CMsgParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgParticle_descriptor_;
}

const CMsgParticle& CMsgParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgParticle* CMsgParticle::default_instance_ = NULL;

CMsgParticle* CMsgParticle::New() const {
  return new CMsgParticle;
}

void CMsgParticle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgParticle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(particle_size_, color_rgba_);
    if (has_particle_position()) {
      if (particle_position_ != NULL) particle_position_->::CMsgPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint particle_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_particle_size;
        break;
      }

      // optional float particle_size = 2;
      case 2: {
        if (tag == 21) {
         parse_particle_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_size_)));
          set_has_particle_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_particle_sharpness;
        break;
      }

      // optional float particle_sharpness = 3;
      case 3: {
        if (tag == 29) {
         parse_particle_sharpness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_sharpness_)));
          set_has_particle_sharpness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_color_rgba;
        break;
      }

      // optional uint32 color_rgba = 4;
      case 4: {
        if (tag == 32) {
         parse_color_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_rgba_)));
          set_has_color_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgParticle)
  return false;
#undef DO_
}

void CMsgParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgParticle)
  // optional .CMsgPoint particle_position = 1;
  if (has_particle_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particle_position(), output);
  }

  // optional float particle_size = 2;
  if (has_particle_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->particle_size(), output);
  }

  // optional float particle_sharpness = 3;
  if (has_particle_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->particle_sharpness(), output);
  }

  // optional uint32 color_rgba = 4;
  if (has_color_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->color_rgba(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgParticle)
}

::google::protobuf::uint8* CMsgParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticle)
  // optional .CMsgPoint particle_position = 1;
  if (has_particle_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->particle_position(), target);
  }

  // optional float particle_size = 2;
  if (has_particle_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->particle_size(), target);
  }

  // optional float particle_sharpness = 3;
  if (has_particle_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->particle_sharpness(), target);
  }

  // optional uint32 color_rgba = 4;
  if (has_color_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->color_rgba(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticle)
  return target;
}

int CMsgParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint particle_position = 1;
    if (has_particle_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_position());
    }

    // optional float particle_size = 2;
    if (has_particle_size()) {
      total_size += 1 + 4;
    }

    // optional float particle_sharpness = 3;
    if (has_particle_sharpness()) {
      total_size += 1 + 4;
    }

    // optional uint32 color_rgba = 4;
    if (has_color_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_rgba());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgParticle::MergeFrom(const CMsgParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_particle_position()) {
      mutable_particle_position()->::CMsgPoint::MergeFrom(from.particle_position());
    }
    if (from.has_particle_size()) {
      set_particle_size(from.particle_size());
    }
    if (from.has_particle_sharpness()) {
      set_particle_sharpness(from.particle_sharpness());
    }
    if (from.has_color_rgba()) {
      set_color_rgba(from.color_rgba());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgParticle::CopyFrom(const CMsgParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticle::IsInitialized() const {

  return true;
}

void CMsgParticle::Swap(CMsgParticle* other) {
  if (other != this) {
    std::swap(particle_position_, other->particle_position_);
    std::swap(particle_size_, other->particle_size_);
    std::swap(particle_sharpness_, other->particle_sharpness_);
    std::swap(color_rgba_, other->color_rgba_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgParticle_descriptor_;
  metadata.reflection = CMsgParticle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgParticleSystem::kBasePositionFieldNumber;
const int CMsgParticleSystem::kBasePositionVarianceFieldNumber;
const int CMsgParticleSystem::kParticleSizeFieldNumber;
const int CMsgParticleSystem::kParticleSizeVarianceFieldNumber;
const int CMsgParticleSystem::kParticlesPerSecondFieldNumber;
const int CMsgParticleSystem::kParticlesPerSecondVarianceFieldNumber;
const int CMsgParticleSystem::kParticleLifespanSecondsFieldNumber;
const int CMsgParticleSystem::kParticleLifespanSecondsVarianceFieldNumber;
const int CMsgParticleSystem::kParticleInitialVelocityFieldNumber;
const int CMsgParticleSystem::kParticleInitialVelocityVarianceFieldNumber;
const int CMsgParticleSystem::kGravityAccelerationFieldNumber;
const int CMsgParticleSystem::kGravityAccelerationParticleVarianceFieldNumber;
const int CMsgParticleSystem::kColorStartRgbaFieldNumber;
const int CMsgParticleSystem::kColorStartRgbaVarianceFieldNumber;
const int CMsgParticleSystem::kColorEndRgbaFieldNumber;
const int CMsgParticleSystem::kColorEndRgbaVarianceFieldNumber;
const int CMsgParticleSystem::kParentPanelHandleFieldNumber;
const int CMsgParticleSystem::kParentBrushIndexFieldNumber;
const int CMsgParticleSystem::kParticleSharpnessFieldNumber;
const int CMsgParticleSystem::kParticleSharpnessVarianceFieldNumber;
const int CMsgParticleSystem::kParticleFlickerFieldNumber;
const int CMsgParticleSystem::kParticleFlickerVarianceFieldNumber;
const int CMsgParticleSystem::kParticleVelocityMinFieldNumber;
const int CMsgParticleSystem::kParticleVelocityMaxFieldNumber;
const int CMsgParticleSystem::kParticlesFieldNumber;
#endif  // !_MSC_VER

CMsgParticleSystem::CMsgParticleSystem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgParticleSystem)
}

void CMsgParticleSystem::InitAsDefaultInstance() {
  base_position_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  base_position_variance_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  particle_initial_velocity_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  particle_initial_velocity_variance_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  gravity_acceleration_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  gravity_acceleration_particle_variance_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  particle_velocity_min_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  particle_velocity_max_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgParticleSystem::CMsgParticleSystem(const CMsgParticleSystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystem)
}

void CMsgParticleSystem::SharedCtor() {
  _cached_size_ = 0;
  base_position_ = NULL;
  base_position_variance_ = NULL;
  particle_size_ = 0;
  particle_size_variance_ = 0;
  particles_per_second_ = 0;
  particles_per_second_variance_ = 0;
  particle_lifespan_seconds_ = 0;
  particle_lifespan_seconds_variance_ = 0;
  particle_initial_velocity_ = NULL;
  particle_initial_velocity_variance_ = NULL;
  gravity_acceleration_ = NULL;
  gravity_acceleration_particle_variance_ = NULL;
  color_start_rgba_ = 0u;
  color_start_rgba_variance_ = 0u;
  color_end_rgba_ = 0u;
  color_end_rgba_variance_ = 0u;
  parent_panel_handle_ = GOOGLE_ULONGLONG(0);
  parent_brush_index_ = 0u;
  particle_sharpness_ = 0;
  particle_sharpness_variance_ = 0;
  particle_flicker_ = 0;
  particle_flicker_variance_ = 0;
  particle_velocity_min_ = NULL;
  particle_velocity_max_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgParticleSystem::~CMsgParticleSystem() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystem)
  SharedDtor();
}

void CMsgParticleSystem::SharedDtor() {
  if (this != default_instance_) {
    delete base_position_;
    delete base_position_variance_;
    delete particle_initial_velocity_;
    delete particle_initial_velocity_variance_;
    delete gravity_acceleration_;
    delete gravity_acceleration_particle_variance_;
    delete particle_velocity_min_;
    delete particle_velocity_max_;
  }
}

void CMsgParticleSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgParticleSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgParticleSystem_descriptor_;
}

const CMsgParticleSystem& CMsgParticleSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgParticleSystem* CMsgParticleSystem::default_instance_ = NULL;

CMsgParticleSystem* CMsgParticleSystem::New() const {
  return new CMsgParticleSystem;
}

void CMsgParticleSystem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgParticleSystem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(particle_size_, particle_lifespan_seconds_variance_);
    if (has_base_position()) {
      if (base_position_ != NULL) base_position_->::CMsgPoint::Clear();
    }
    if (has_base_position_variance()) {
      if (base_position_variance_ != NULL) base_position_variance_->::CMsgPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(color_start_rgba_, color_end_rgba_variance_);
    if (has_particle_initial_velocity()) {
      if (particle_initial_velocity_ != NULL) particle_initial_velocity_->::CMsgPoint::Clear();
    }
    if (has_particle_initial_velocity_variance()) {
      if (particle_initial_velocity_variance_ != NULL) particle_initial_velocity_variance_->::CMsgPoint::Clear();
    }
    if (has_gravity_acceleration()) {
      if (gravity_acceleration_ != NULL) gravity_acceleration_->::CMsgPoint::Clear();
    }
    if (has_gravity_acceleration_particle_variance()) {
      if (gravity_acceleration_particle_variance_ != NULL) gravity_acceleration_particle_variance_->::CMsgPoint::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(parent_panel_handle_, particle_flicker_);
    particle_flicker_variance_ = 0;
    if (has_particle_velocity_min()) {
      if (particle_velocity_min_ != NULL) particle_velocity_min_->::CMsgPoint::Clear();
    }
    if (has_particle_velocity_max()) {
      if (particle_velocity_max_ != NULL) particle_velocity_max_->::CMsgPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  particles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgParticleSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgParticleSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint base_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_position_variance;
        break;
      }

      // optional .CMsgPoint base_position_variance = 2;
      case 2: {
        if (tag == 18) {
         parse_base_position_variance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_position_variance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_particle_size;
        break;
      }

      // optional double particle_size = 3;
      case 3: {
        if (tag == 25) {
         parse_particle_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particle_size_)));
          set_has_particle_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_particle_size_variance;
        break;
      }

      // optional double particle_size_variance = 4;
      case 4: {
        if (tag == 33) {
         parse_particle_size_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particle_size_variance_)));
          set_has_particle_size_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_particles_per_second;
        break;
      }

      // optional double particles_per_second = 5;
      case 5: {
        if (tag == 41) {
         parse_particles_per_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particles_per_second_)));
          set_has_particles_per_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_particles_per_second_variance;
        break;
      }

      // optional double particles_per_second_variance = 6;
      case 6: {
        if (tag == 49) {
         parse_particles_per_second_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particles_per_second_variance_)));
          set_has_particles_per_second_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_particle_lifespan_seconds;
        break;
      }

      // optional double particle_lifespan_seconds = 7;
      case 7: {
        if (tag == 57) {
         parse_particle_lifespan_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particle_lifespan_seconds_)));
          set_has_particle_lifespan_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_particle_lifespan_seconds_variance;
        break;
      }

      // optional double particle_lifespan_seconds_variance = 8;
      case 8: {
        if (tag == 65) {
         parse_particle_lifespan_seconds_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &particle_lifespan_seconds_variance_)));
          set_has_particle_lifespan_seconds_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_particle_initial_velocity;
        break;
      }

      // optional .CMsgPoint particle_initial_velocity = 9;
      case 9: {
        if (tag == 74) {
         parse_particle_initial_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_initial_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_particle_initial_velocity_variance;
        break;
      }

      // optional .CMsgPoint particle_initial_velocity_variance = 10;
      case 10: {
        if (tag == 82) {
         parse_particle_initial_velocity_variance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_initial_velocity_variance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gravity_acceleration;
        break;
      }

      // optional .CMsgPoint gravity_acceleration = 11;
      case 11: {
        if (tag == 90) {
         parse_gravity_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gravity_acceleration_particle_variance;
        break;
      }

      // optional .CMsgPoint gravity_acceleration_particle_variance = 12;
      case 12: {
        if (tag == 98) {
         parse_gravity_acceleration_particle_variance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity_acceleration_particle_variance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_color_start_rgba;
        break;
      }

      // optional uint32 color_start_rgba = 13;
      case 13: {
        if (tag == 104) {
         parse_color_start_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_start_rgba_)));
          set_has_color_start_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_color_start_rgba_variance;
        break;
      }

      // optional uint32 color_start_rgba_variance = 14;
      case 14: {
        if (tag == 112) {
         parse_color_start_rgba_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_start_rgba_variance_)));
          set_has_color_start_rgba_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_color_end_rgba;
        break;
      }

      // optional uint32 color_end_rgba = 15;
      case 15: {
        if (tag == 120) {
         parse_color_end_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_end_rgba_)));
          set_has_color_end_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_color_end_rgba_variance;
        break;
      }

      // optional uint32 color_end_rgba_variance = 16;
      case 16: {
        if (tag == 128) {
         parse_color_end_rgba_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_end_rgba_variance_)));
          set_has_color_end_rgba_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_parent_panel_handle;
        break;
      }

      // optional uint64 parent_panel_handle = 17;
      case 17: {
        if (tag == 136) {
         parse_parent_panel_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_panel_handle_)));
          set_has_parent_panel_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_parent_brush_index;
        break;
      }

      // optional uint32 parent_brush_index = 18;
      case 18: {
        if (tag == 144) {
         parse_parent_brush_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_brush_index_)));
          set_has_parent_brush_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_particle_sharpness;
        break;
      }

      // optional float particle_sharpness = 19;
      case 19: {
        if (tag == 157) {
         parse_particle_sharpness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_sharpness_)));
          set_has_particle_sharpness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_particle_sharpness_variance;
        break;
      }

      // optional float particle_sharpness_variance = 20;
      case 20: {
        if (tag == 165) {
         parse_particle_sharpness_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_sharpness_variance_)));
          set_has_particle_sharpness_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_particle_flicker;
        break;
      }

      // optional float particle_flicker = 21;
      case 21: {
        if (tag == 173) {
         parse_particle_flicker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_flicker_)));
          set_has_particle_flicker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_particle_flicker_variance;
        break;
      }

      // optional float particle_flicker_variance = 22;
      case 22: {
        if (tag == 181) {
         parse_particle_flicker_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &particle_flicker_variance_)));
          set_has_particle_flicker_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_particle_velocity_min;
        break;
      }

      // optional .CMsgPoint particle_velocity_min = 23;
      case 23: {
        if (tag == 186) {
         parse_particle_velocity_min:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_velocity_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_particle_velocity_max;
        break;
      }

      // optional .CMsgPoint particle_velocity_max = 24;
      case 24: {
        if (tag == 194) {
         parse_particle_velocity_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_velocity_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_particles;
        break;
      }

      // repeated .CMsgParticle particles = 50;
      case 50: {
        if (tag == 402) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_particles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgParticleSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgParticleSystem)
  return false;
#undef DO_
}

void CMsgParticleSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgParticleSystem)
  // optional .CMsgPoint base_position = 1;
  if (has_base_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_position(), output);
  }

  // optional .CMsgPoint base_position_variance = 2;
  if (has_base_position_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_position_variance(), output);
  }

  // optional double particle_size = 3;
  if (has_particle_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->particle_size(), output);
  }

  // optional double particle_size_variance = 4;
  if (has_particle_size_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->particle_size_variance(), output);
  }

  // optional double particles_per_second = 5;
  if (has_particles_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->particles_per_second(), output);
  }

  // optional double particles_per_second_variance = 6;
  if (has_particles_per_second_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->particles_per_second_variance(), output);
  }

  // optional double particle_lifespan_seconds = 7;
  if (has_particle_lifespan_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->particle_lifespan_seconds(), output);
  }

  // optional double particle_lifespan_seconds_variance = 8;
  if (has_particle_lifespan_seconds_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->particle_lifespan_seconds_variance(), output);
  }

  // optional .CMsgPoint particle_initial_velocity = 9;
  if (has_particle_initial_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->particle_initial_velocity(), output);
  }

  // optional .CMsgPoint particle_initial_velocity_variance = 10;
  if (has_particle_initial_velocity_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->particle_initial_velocity_variance(), output);
  }

  // optional .CMsgPoint gravity_acceleration = 11;
  if (has_gravity_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gravity_acceleration(), output);
  }

  // optional .CMsgPoint gravity_acceleration_particle_variance = 12;
  if (has_gravity_acceleration_particle_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gravity_acceleration_particle_variance(), output);
  }

  // optional uint32 color_start_rgba = 13;
  if (has_color_start_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->color_start_rgba(), output);
  }

  // optional uint32 color_start_rgba_variance = 14;
  if (has_color_start_rgba_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->color_start_rgba_variance(), output);
  }

  // optional uint32 color_end_rgba = 15;
  if (has_color_end_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->color_end_rgba(), output);
  }

  // optional uint32 color_end_rgba_variance = 16;
  if (has_color_end_rgba_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->color_end_rgba_variance(), output);
  }

  // optional uint64 parent_panel_handle = 17;
  if (has_parent_panel_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->parent_panel_handle(), output);
  }

  // optional uint32 parent_brush_index = 18;
  if (has_parent_brush_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->parent_brush_index(), output);
  }

  // optional float particle_sharpness = 19;
  if (has_particle_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->particle_sharpness(), output);
  }

  // optional float particle_sharpness_variance = 20;
  if (has_particle_sharpness_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->particle_sharpness_variance(), output);
  }

  // optional float particle_flicker = 21;
  if (has_particle_flicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->particle_flicker(), output);
  }

  // optional float particle_flicker_variance = 22;
  if (has_particle_flicker_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->particle_flicker_variance(), output);
  }

  // optional .CMsgPoint particle_velocity_min = 23;
  if (has_particle_velocity_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->particle_velocity_min(), output);
  }

  // optional .CMsgPoint particle_velocity_max = 24;
  if (has_particle_velocity_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->particle_velocity_max(), output);
  }

  // repeated .CMsgParticle particles = 50;
  for (int i = 0; i < this->particles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->particles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgParticleSystem)
}

::google::protobuf::uint8* CMsgParticleSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystem)
  // optional .CMsgPoint base_position = 1;
  if (has_base_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_position(), target);
  }

  // optional .CMsgPoint base_position_variance = 2;
  if (has_base_position_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_position_variance(), target);
  }

  // optional double particle_size = 3;
  if (has_particle_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->particle_size(), target);
  }

  // optional double particle_size_variance = 4;
  if (has_particle_size_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->particle_size_variance(), target);
  }

  // optional double particles_per_second = 5;
  if (has_particles_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->particles_per_second(), target);
  }

  // optional double particles_per_second_variance = 6;
  if (has_particles_per_second_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->particles_per_second_variance(), target);
  }

  // optional double particle_lifespan_seconds = 7;
  if (has_particle_lifespan_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->particle_lifespan_seconds(), target);
  }

  // optional double particle_lifespan_seconds_variance = 8;
  if (has_particle_lifespan_seconds_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->particle_lifespan_seconds_variance(), target);
  }

  // optional .CMsgPoint particle_initial_velocity = 9;
  if (has_particle_initial_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->particle_initial_velocity(), target);
  }

  // optional .CMsgPoint particle_initial_velocity_variance = 10;
  if (has_particle_initial_velocity_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->particle_initial_velocity_variance(), target);
  }

  // optional .CMsgPoint gravity_acceleration = 11;
  if (has_gravity_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gravity_acceleration(), target);
  }

  // optional .CMsgPoint gravity_acceleration_particle_variance = 12;
  if (has_gravity_acceleration_particle_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gravity_acceleration_particle_variance(), target);
  }

  // optional uint32 color_start_rgba = 13;
  if (has_color_start_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->color_start_rgba(), target);
  }

  // optional uint32 color_start_rgba_variance = 14;
  if (has_color_start_rgba_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->color_start_rgba_variance(), target);
  }

  // optional uint32 color_end_rgba = 15;
  if (has_color_end_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->color_end_rgba(), target);
  }

  // optional uint32 color_end_rgba_variance = 16;
  if (has_color_end_rgba_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->color_end_rgba_variance(), target);
  }

  // optional uint64 parent_panel_handle = 17;
  if (has_parent_panel_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->parent_panel_handle(), target);
  }

  // optional uint32 parent_brush_index = 18;
  if (has_parent_brush_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->parent_brush_index(), target);
  }

  // optional float particle_sharpness = 19;
  if (has_particle_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->particle_sharpness(), target);
  }

  // optional float particle_sharpness_variance = 20;
  if (has_particle_sharpness_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->particle_sharpness_variance(), target);
  }

  // optional float particle_flicker = 21;
  if (has_particle_flicker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->particle_flicker(), target);
  }

  // optional float particle_flicker_variance = 22;
  if (has_particle_flicker_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->particle_flicker_variance(), target);
  }

  // optional .CMsgPoint particle_velocity_min = 23;
  if (has_particle_velocity_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->particle_velocity_min(), target);
  }

  // optional .CMsgPoint particle_velocity_max = 24;
  if (has_particle_velocity_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->particle_velocity_max(), target);
  }

  // repeated .CMsgParticle particles = 50;
  for (int i = 0; i < this->particles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->particles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystem)
  return target;
}

int CMsgParticleSystem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint base_position = 1;
    if (has_base_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_position());
    }

    // optional .CMsgPoint base_position_variance = 2;
    if (has_base_position_variance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_position_variance());
    }

    // optional double particle_size = 3;
    if (has_particle_size()) {
      total_size += 1 + 8;
    }

    // optional double particle_size_variance = 4;
    if (has_particle_size_variance()) {
      total_size += 1 + 8;
    }

    // optional double particles_per_second = 5;
    if (has_particles_per_second()) {
      total_size += 1 + 8;
    }

    // optional double particles_per_second_variance = 6;
    if (has_particles_per_second_variance()) {
      total_size += 1 + 8;
    }

    // optional double particle_lifespan_seconds = 7;
    if (has_particle_lifespan_seconds()) {
      total_size += 1 + 8;
    }

    // optional double particle_lifespan_seconds_variance = 8;
    if (has_particle_lifespan_seconds_variance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgPoint particle_initial_velocity = 9;
    if (has_particle_initial_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_initial_velocity());
    }

    // optional .CMsgPoint particle_initial_velocity_variance = 10;
    if (has_particle_initial_velocity_variance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_initial_velocity_variance());
    }

    // optional .CMsgPoint gravity_acceleration = 11;
    if (has_gravity_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity_acceleration());
    }

    // optional .CMsgPoint gravity_acceleration_particle_variance = 12;
    if (has_gravity_acceleration_particle_variance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity_acceleration_particle_variance());
    }

    // optional uint32 color_start_rgba = 13;
    if (has_color_start_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_start_rgba());
    }

    // optional uint32 color_start_rgba_variance = 14;
    if (has_color_start_rgba_variance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_start_rgba_variance());
    }

    // optional uint32 color_end_rgba = 15;
    if (has_color_end_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_end_rgba());
    }

    // optional uint32 color_end_rgba_variance = 16;
    if (has_color_end_rgba_variance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_end_rgba_variance());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 parent_panel_handle = 17;
    if (has_parent_panel_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent_panel_handle());
    }

    // optional uint32 parent_brush_index = 18;
    if (has_parent_brush_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_brush_index());
    }

    // optional float particle_sharpness = 19;
    if (has_particle_sharpness()) {
      total_size += 2 + 4;
    }

    // optional float particle_sharpness_variance = 20;
    if (has_particle_sharpness_variance()) {
      total_size += 2 + 4;
    }

    // optional float particle_flicker = 21;
    if (has_particle_flicker()) {
      total_size += 2 + 4;
    }

    // optional float particle_flicker_variance = 22;
    if (has_particle_flicker_variance()) {
      total_size += 2 + 4;
    }

    // optional .CMsgPoint particle_velocity_min = 23;
    if (has_particle_velocity_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_velocity_min());
    }

    // optional .CMsgPoint particle_velocity_max = 24;
    if (has_particle_velocity_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_velocity_max());
    }

  }
  // repeated .CMsgParticle particles = 50;
  total_size += 2 * this->particles_size();
  for (int i = 0; i < this->particles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgParticleSystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgParticleSystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgParticleSystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgParticleSystem::MergeFrom(const CMsgParticleSystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  particles_.MergeFrom(from.particles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_position()) {
      mutable_base_position()->::CMsgPoint::MergeFrom(from.base_position());
    }
    if (from.has_base_position_variance()) {
      mutable_base_position_variance()->::CMsgPoint::MergeFrom(from.base_position_variance());
    }
    if (from.has_particle_size()) {
      set_particle_size(from.particle_size());
    }
    if (from.has_particle_size_variance()) {
      set_particle_size_variance(from.particle_size_variance());
    }
    if (from.has_particles_per_second()) {
      set_particles_per_second(from.particles_per_second());
    }
    if (from.has_particles_per_second_variance()) {
      set_particles_per_second_variance(from.particles_per_second_variance());
    }
    if (from.has_particle_lifespan_seconds()) {
      set_particle_lifespan_seconds(from.particle_lifespan_seconds());
    }
    if (from.has_particle_lifespan_seconds_variance()) {
      set_particle_lifespan_seconds_variance(from.particle_lifespan_seconds_variance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_particle_initial_velocity()) {
      mutable_particle_initial_velocity()->::CMsgPoint::MergeFrom(from.particle_initial_velocity());
    }
    if (from.has_particle_initial_velocity_variance()) {
      mutable_particle_initial_velocity_variance()->::CMsgPoint::MergeFrom(from.particle_initial_velocity_variance());
    }
    if (from.has_gravity_acceleration()) {
      mutable_gravity_acceleration()->::CMsgPoint::MergeFrom(from.gravity_acceleration());
    }
    if (from.has_gravity_acceleration_particle_variance()) {
      mutable_gravity_acceleration_particle_variance()->::CMsgPoint::MergeFrom(from.gravity_acceleration_particle_variance());
    }
    if (from.has_color_start_rgba()) {
      set_color_start_rgba(from.color_start_rgba());
    }
    if (from.has_color_start_rgba_variance()) {
      set_color_start_rgba_variance(from.color_start_rgba_variance());
    }
    if (from.has_color_end_rgba()) {
      set_color_end_rgba(from.color_end_rgba());
    }
    if (from.has_color_end_rgba_variance()) {
      set_color_end_rgba_variance(from.color_end_rgba_variance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_parent_panel_handle()) {
      set_parent_panel_handle(from.parent_panel_handle());
    }
    if (from.has_parent_brush_index()) {
      set_parent_brush_index(from.parent_brush_index());
    }
    if (from.has_particle_sharpness()) {
      set_particle_sharpness(from.particle_sharpness());
    }
    if (from.has_particle_sharpness_variance()) {
      set_particle_sharpness_variance(from.particle_sharpness_variance());
    }
    if (from.has_particle_flicker()) {
      set_particle_flicker(from.particle_flicker());
    }
    if (from.has_particle_flicker_variance()) {
      set_particle_flicker_variance(from.particle_flicker_variance());
    }
    if (from.has_particle_velocity_min()) {
      mutable_particle_velocity_min()->::CMsgPoint::MergeFrom(from.particle_velocity_min());
    }
    if (from.has_particle_velocity_max()) {
      mutable_particle_velocity_max()->::CMsgPoint::MergeFrom(from.particle_velocity_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgParticleSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgParticleSystem::CopyFrom(const CMsgParticleSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystem::IsInitialized() const {

  return true;
}

void CMsgParticleSystem::Swap(CMsgParticleSystem* other) {
  if (other != this) {
    std::swap(base_position_, other->base_position_);
    std::swap(base_position_variance_, other->base_position_variance_);
    std::swap(particle_size_, other->particle_size_);
    std::swap(particle_size_variance_, other->particle_size_variance_);
    std::swap(particles_per_second_, other->particles_per_second_);
    std::swap(particles_per_second_variance_, other->particles_per_second_variance_);
    std::swap(particle_lifespan_seconds_, other->particle_lifespan_seconds_);
    std::swap(particle_lifespan_seconds_variance_, other->particle_lifespan_seconds_variance_);
    std::swap(particle_initial_velocity_, other->particle_initial_velocity_);
    std::swap(particle_initial_velocity_variance_, other->particle_initial_velocity_variance_);
    std::swap(gravity_acceleration_, other->gravity_acceleration_);
    std::swap(gravity_acceleration_particle_variance_, other->gravity_acceleration_particle_variance_);
    std::swap(color_start_rgba_, other->color_start_rgba_);
    std::swap(color_start_rgba_variance_, other->color_start_rgba_variance_);
    std::swap(color_end_rgba_, other->color_end_rgba_);
    std::swap(color_end_rgba_variance_, other->color_end_rgba_variance_);
    std::swap(parent_panel_handle_, other->parent_panel_handle_);
    std::swap(parent_brush_index_, other->parent_brush_index_);
    std::swap(particle_sharpness_, other->particle_sharpness_);
    std::swap(particle_sharpness_variance_, other->particle_sharpness_variance_);
    std::swap(particle_flicker_, other->particle_flicker_);
    std::swap(particle_flicker_variance_, other->particle_flicker_variance_);
    std::swap(particle_velocity_min_, other->particle_velocity_min_);
    std::swap(particle_velocity_max_, other->particle_velocity_max_);
    particles_.Swap(&other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgParticleSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgParticleSystem_descriptor_;
  metadata.reflection = CMsgParticleSystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFillBrush::kOpacityFieldNumber;
const int CMsgFillBrush::kColorRgbaFieldNumber;
const int CMsgFillBrush::kLinearGradientFieldNumber;
const int CMsgFillBrush::kRadialGradientFieldNumber;
const int CMsgFillBrush::kParticleSystemFieldNumber;
#endif  // !_MSC_VER

CMsgFillBrush::CMsgFillBrush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFillBrush)
}

void CMsgFillBrush::InitAsDefaultInstance() {
  linear_gradient_ = const_cast< ::CMsgLinearGradient*>(&::CMsgLinearGradient::default_instance());
  radial_gradient_ = const_cast< ::CMsgRadialGradient*>(&::CMsgRadialGradient::default_instance());
  particle_system_ = const_cast< ::CMsgParticleSystem*>(&::CMsgParticleSystem::default_instance());
}

CMsgFillBrush::CMsgFillBrush(const CMsgFillBrush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFillBrush)
}

void CMsgFillBrush::SharedCtor() {
  _cached_size_ = 0;
  opacity_ = 0;
  color_rgba_ = 0u;
  linear_gradient_ = NULL;
  radial_gradient_ = NULL;
  particle_system_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFillBrush::~CMsgFillBrush() {
  // @@protoc_insertion_point(destructor:CMsgFillBrush)
  SharedDtor();
}

void CMsgFillBrush::SharedDtor() {
  if (this != default_instance_) {
    delete linear_gradient_;
    delete radial_gradient_;
    delete particle_system_;
  }
}

void CMsgFillBrush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFillBrush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFillBrush_descriptor_;
}

const CMsgFillBrush& CMsgFillBrush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgFillBrush* CMsgFillBrush::default_instance_ = NULL;

CMsgFillBrush* CMsgFillBrush::New() const {
  return new CMsgFillBrush;
}

void CMsgFillBrush::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    opacity_ = 0;
    color_rgba_ = 0u;
    if (has_linear_gradient()) {
      if (linear_gradient_ != NULL) linear_gradient_->::CMsgLinearGradient::Clear();
    }
    if (has_radial_gradient()) {
      if (radial_gradient_ != NULL) radial_gradient_->::CMsgRadialGradient::Clear();
    }
    if (has_particle_system()) {
      if (particle_system_ != NULL) particle_system_->::CMsgParticleSystem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFillBrush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFillBrush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double opacity = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color_rgba;
        break;
      }

      // optional uint32 color_rgba = 2;
      case 2: {
        if (tag == 16) {
         parse_color_rgba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_rgba_)));
          set_has_color_rgba();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_gradient;
        break;
      }

      // optional .CMsgLinearGradient linear_gradient = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_gradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_gradient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_radial_gradient;
        break;
      }

      // optional .CMsgRadialGradient radial_gradient = 4;
      case 4: {
        if (tag == 34) {
         parse_radial_gradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radial_gradient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_particle_system;
        break;
      }

      // optional .CMsgParticleSystem particle_system = 5;
      case 5: {
        if (tag == 42) {
         parse_particle_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particle_system()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFillBrush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFillBrush)
  return false;
#undef DO_
}

void CMsgFillBrush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFillBrush)
  // optional double opacity = 1;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->opacity(), output);
  }

  // optional uint32 color_rgba = 2;
  if (has_color_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color_rgba(), output);
  }

  // optional .CMsgLinearGradient linear_gradient = 3;
  if (has_linear_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->linear_gradient(), output);
  }

  // optional .CMsgRadialGradient radial_gradient = 4;
  if (has_radial_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->radial_gradient(), output);
  }

  // optional .CMsgParticleSystem particle_system = 5;
  if (has_particle_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->particle_system(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFillBrush)
}

::google::protobuf::uint8* CMsgFillBrush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFillBrush)
  // optional double opacity = 1;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->opacity(), target);
  }

  // optional uint32 color_rgba = 2;
  if (has_color_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color_rgba(), target);
  }

  // optional .CMsgLinearGradient linear_gradient = 3;
  if (has_linear_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->linear_gradient(), target);
  }

  // optional .CMsgRadialGradient radial_gradient = 4;
  if (has_radial_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->radial_gradient(), target);
  }

  // optional .CMsgParticleSystem particle_system = 5;
  if (has_particle_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->particle_system(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFillBrush)
  return target;
}

int CMsgFillBrush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double opacity = 1;
    if (has_opacity()) {
      total_size += 1 + 8;
    }

    // optional uint32 color_rgba = 2;
    if (has_color_rgba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color_rgba());
    }

    // optional .CMsgLinearGradient linear_gradient = 3;
    if (has_linear_gradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_gradient());
    }

    // optional .CMsgRadialGradient radial_gradient = 4;
    if (has_radial_gradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radial_gradient());
    }

    // optional .CMsgParticleSystem particle_system = 5;
    if (has_particle_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle_system());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFillBrush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFillBrush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFillBrush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFillBrush::MergeFrom(const CMsgFillBrush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_color_rgba()) {
      set_color_rgba(from.color_rgba());
    }
    if (from.has_linear_gradient()) {
      mutable_linear_gradient()->::CMsgLinearGradient::MergeFrom(from.linear_gradient());
    }
    if (from.has_radial_gradient()) {
      mutable_radial_gradient()->::CMsgRadialGradient::MergeFrom(from.radial_gradient());
    }
    if (from.has_particle_system()) {
      mutable_particle_system()->::CMsgParticleSystem::MergeFrom(from.particle_system());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFillBrush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFillBrush::CopyFrom(const CMsgFillBrush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFillBrush::IsInitialized() const {

  return true;
}

void CMsgFillBrush::Swap(CMsgFillBrush* other) {
  if (other != this) {
    std::swap(opacity_, other->opacity_);
    std::swap(color_rgba_, other->color_rgba_);
    std::swap(linear_gradient_, other->linear_gradient_);
    std::swap(radial_gradient_, other->radial_gradient_);
    std::swap(particle_system_, other->particle_system_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFillBrush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFillBrush_descriptor_;
  metadata.reflection = CMsgFillBrush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFillBrushCollection_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgFillBrushCollection_AnimationFrameData::CMsgFillBrushCollection_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFillBrushCollection.AnimationFrameData)
}

void CMsgFillBrushCollection_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgFillBrushCollection_AnimationFrameData::CMsgFillBrushCollection_AnimationFrameData(const CMsgFillBrushCollection_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFillBrushCollection.AnimationFrameData)
}

void CMsgFillBrushCollection_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFillBrushCollection_AnimationFrameData::~CMsgFillBrushCollection_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgFillBrushCollection.AnimationFrameData)
  SharedDtor();
}

void CMsgFillBrushCollection_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFillBrushCollection_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFillBrushCollection_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFillBrushCollection_AnimationFrameData_descriptor_;
}

const CMsgFillBrushCollection_AnimationFrameData& CMsgFillBrushCollection_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgFillBrushCollection_AnimationFrameData* CMsgFillBrushCollection_AnimationFrameData::default_instance_ = NULL;

CMsgFillBrushCollection_AnimationFrameData* CMsgFillBrushCollection_AnimationFrameData::New() const {
  return new CMsgFillBrushCollection_AnimationFrameData;
}

void CMsgFillBrushCollection_AnimationFrameData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFillBrushCollection_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFillBrushCollection.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgFillBrush data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFillBrushCollection.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFillBrushCollection.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgFillBrushCollection_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFillBrushCollection.AnimationFrameData)
  // repeated .CMsgFillBrush data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFillBrushCollection.AnimationFrameData)
}

::google::protobuf::uint8* CMsgFillBrushCollection_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFillBrushCollection.AnimationFrameData)
  // repeated .CMsgFillBrush data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFillBrushCollection.AnimationFrameData)
  return target;
}

int CMsgFillBrushCollection_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgFillBrush data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFillBrushCollection_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFillBrushCollection_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFillBrushCollection_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFillBrushCollection_AnimationFrameData::MergeFrom(const CMsgFillBrushCollection_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFillBrushCollection_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFillBrushCollection_AnimationFrameData::CopyFrom(const CMsgFillBrushCollection_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFillBrushCollection_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgFillBrushCollection_AnimationFrameData::Swap(CMsgFillBrushCollection_AnimationFrameData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFillBrushCollection_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFillBrushCollection_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgFillBrushCollection_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgFillBrushCollection::kBaseFieldNumber;
const int CMsgFillBrushCollection::kTransitionFieldNumber;
const int CMsgFillBrushCollection::kTransitionDataFieldNumber;
const int CMsgFillBrushCollection::kStyleSymbolFieldNumber;
const int CMsgFillBrushCollection::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgFillBrushCollection::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgFillBrushCollection_AnimationFrameData >, 11, false >
  CMsgFillBrushCollection::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgFillBrushCollection_AnimationFrameData::default_instance());
CMsgFillBrushCollection::CMsgFillBrushCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFillBrushCollection)
}

void CMsgFillBrushCollection::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgFillBrushCollection::CMsgFillBrushCollection(const CMsgFillBrushCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFillBrushCollection)
}

void CMsgFillBrushCollection::SharedCtor() {
  _cached_size_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFillBrushCollection::~CMsgFillBrushCollection() {
  // @@protoc_insertion_point(destructor:CMsgFillBrushCollection)
  SharedDtor();
}

void CMsgFillBrushCollection::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgFillBrushCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFillBrushCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFillBrushCollection_descriptor_;
}

const CMsgFillBrushCollection& CMsgFillBrushCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgFillBrushCollection* CMsgFillBrushCollection::default_instance_ = NULL;

CMsgFillBrushCollection* CMsgFillBrushCollection::New() const {
  return new CMsgFillBrushCollection;
}

void CMsgFillBrushCollection::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  base_.Clear();
  transition_.Clear();
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFillBrushCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFillBrushCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgFillBrush base = 1;
      case 1: {
        if (tag == 10) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_base;
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // repeated .CMsgFillBrush transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFillBrushCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFillBrushCollection)
  return false;
#undef DO_
}

void CMsgFillBrushCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFillBrushCollection)
  // repeated .CMsgFillBrush base = 1;
  for (int i = 0; i < this->base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(i), output);
  }

  // repeated .CMsgFillBrush transition = 2;
  for (int i = 0; i < this->transition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(i), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFillBrushCollection)
}

::google::protobuf::uint8* CMsgFillBrushCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFillBrushCollection)
  // repeated .CMsgFillBrush base = 1;
  for (int i = 0; i < this->base_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(i), target);
  }

  // repeated .CMsgFillBrush transition = 2;
  for (int i = 0; i < this->transition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(i), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFillBrushCollection)
  return target;
}

int CMsgFillBrushCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgFillBrush base = 1;
  total_size += 1 * this->base_size();
  for (int i = 0; i < this->base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base(i));
  }

  // repeated .CMsgFillBrush transition = 2;
  total_size += 1 * this->transition_size();
  for (int i = 0; i < this->transition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transition(i));
  }

  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFillBrushCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFillBrushCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFillBrushCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFillBrushCollection::MergeFrom(const CMsgFillBrushCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_.MergeFrom(from.base_);
  transition_.MergeFrom(from.transition_);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFillBrushCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFillBrushCollection::CopyFrom(const CMsgFillBrushCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFillBrushCollection::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgFillBrushCollection::Swap(CMsgFillBrushCollection* other) {
  if (other != this) {
    base_.Swap(&other->base_);
    transition_.Swap(&other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFillBrushCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFillBrushCollection_descriptor_;
  metadata.reflection = CMsgFillBrushCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderFillBrushCollection::kFillBrushFieldNumber;
#endif  // !_MSC_VER

CMsgRenderFillBrushCollection::CMsgRenderFillBrushCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderFillBrushCollection)
}

void CMsgRenderFillBrushCollection::InitAsDefaultInstance() {
}

CMsgRenderFillBrushCollection::CMsgRenderFillBrushCollection(const CMsgRenderFillBrushCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderFillBrushCollection)
}

void CMsgRenderFillBrushCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderFillBrushCollection::~CMsgRenderFillBrushCollection() {
  // @@protoc_insertion_point(destructor:CMsgRenderFillBrushCollection)
  SharedDtor();
}

void CMsgRenderFillBrushCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRenderFillBrushCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderFillBrushCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderFillBrushCollection_descriptor_;
}

const CMsgRenderFillBrushCollection& CMsgRenderFillBrushCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderFillBrushCollection* CMsgRenderFillBrushCollection::default_instance_ = NULL;

CMsgRenderFillBrushCollection* CMsgRenderFillBrushCollection::New() const {
  return new CMsgRenderFillBrushCollection;
}

void CMsgRenderFillBrushCollection::Clear() {
  fill_brush_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderFillBrushCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderFillBrushCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgFillBrush fill_brush = 1;
      case 1: {
        if (tag == 10) {
         parse_fill_brush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fill_brush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fill_brush;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderFillBrushCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderFillBrushCollection)
  return false;
#undef DO_
}

void CMsgRenderFillBrushCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderFillBrushCollection)
  // repeated .CMsgFillBrush fill_brush = 1;
  for (int i = 0; i < this->fill_brush_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fill_brush(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderFillBrushCollection)
}

::google::protobuf::uint8* CMsgRenderFillBrushCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderFillBrushCollection)
  // repeated .CMsgFillBrush fill_brush = 1;
  for (int i = 0; i < this->fill_brush_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fill_brush(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderFillBrushCollection)
  return target;
}

int CMsgRenderFillBrushCollection::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgFillBrush fill_brush = 1;
  total_size += 1 * this->fill_brush_size();
  for (int i = 0; i < this->fill_brush_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fill_brush(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderFillBrushCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderFillBrushCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderFillBrushCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderFillBrushCollection::MergeFrom(const CMsgRenderFillBrushCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  fill_brush_.MergeFrom(from.fill_brush_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderFillBrushCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderFillBrushCollection::CopyFrom(const CMsgRenderFillBrushCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderFillBrushCollection::IsInitialized() const {

  return true;
}

void CMsgRenderFillBrushCollection::Swap(CMsgRenderFillBrushCollection* other) {
  if (other != this) {
    fill_brush_.Swap(&other->fill_brush_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderFillBrushCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderFillBrushCollection_descriptor_;
  metadata.reflection = CMsgRenderFillBrushCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPanelPosition_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgPanelPosition_AnimationFrameData::CMsgPanelPosition_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPanelPosition.AnimationFrameData)
}

void CMsgPanelPosition_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgPanelPosition_AnimationFrameData::CMsgPanelPosition_AnimationFrameData(const CMsgPanelPosition_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPanelPosition.AnimationFrameData)
}

void CMsgPanelPosition_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPanelPosition_AnimationFrameData::~CMsgPanelPosition_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgPanelPosition.AnimationFrameData)
  SharedDtor();
}

void CMsgPanelPosition_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgPanelPosition_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPanelPosition_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPanelPosition_AnimationFrameData_descriptor_;
}

const CMsgPanelPosition_AnimationFrameData& CMsgPanelPosition_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPanelPosition_AnimationFrameData* CMsgPanelPosition_AnimationFrameData::default_instance_ = NULL;

CMsgPanelPosition_AnimationFrameData* CMsgPanelPosition_AnimationFrameData::New() const {
  return new CMsgPanelPosition_AnimationFrameData;
}

void CMsgPanelPosition_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgPoint::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPanelPosition_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPanelPosition.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPanelPosition.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPanelPosition.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgPanelPosition_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPanelPosition.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPanelPosition.AnimationFrameData)
}

::google::protobuf::uint8* CMsgPanelPosition_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPanelPosition.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPanelPosition.AnimationFrameData)
  return target;
}

int CMsgPanelPosition_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPanelPosition_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPanelPosition_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPanelPosition_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPanelPosition_AnimationFrameData::MergeFrom(const CMsgPanelPosition_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgPoint::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPanelPosition_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPanelPosition_AnimationFrameData::CopyFrom(const CMsgPanelPosition_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPanelPosition_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgPanelPosition_AnimationFrameData::Swap(CMsgPanelPosition_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPanelPosition_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPanelPosition_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgPanelPosition_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPanelPosition::kBaseFieldNumber;
const int CMsgPanelPosition::kTransitionFieldNumber;
const int CMsgPanelPosition::kTransitionDataFieldNumber;
const int CMsgPanelPosition::kStyleSymbolFieldNumber;
const int CMsgPanelPosition::kAnimationsFieldNumber;
const int CMsgPanelPosition::kScrollOffsetFieldNumber;
const int CMsgPanelPosition::kScrollOffsetTargetFieldNumber;
const int CMsgPanelPosition::kScrollTransitionXFieldNumber;
const int CMsgPanelPosition::kScrollTransitionYFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgPanelPosition::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgPanelPosition_AnimationFrameData >, 11, false >
  CMsgPanelPosition::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgPanelPosition_AnimationFrameData::default_instance());
CMsgPanelPosition::CMsgPanelPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPanelPosition)
}

void CMsgPanelPosition::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  scroll_offset_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  scroll_offset_target_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  scroll_transition_x_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  scroll_transition_y_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgPanelPosition::CMsgPanelPosition(const CMsgPanelPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPanelPosition)
}

void CMsgPanelPosition::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  scroll_offset_ = NULL;
  scroll_offset_target_ = NULL;
  scroll_transition_x_ = NULL;
  scroll_transition_y_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPanelPosition::~CMsgPanelPosition() {
  // @@protoc_insertion_point(destructor:CMsgPanelPosition)
  SharedDtor();
}

void CMsgPanelPosition::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
    delete scroll_offset_;
    delete scroll_offset_target_;
    delete scroll_transition_x_;
    delete scroll_transition_y_;
  }
}

void CMsgPanelPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPanelPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPanelPosition_descriptor_;
}

const CMsgPanelPosition& CMsgPanelPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPanelPosition* CMsgPanelPosition::default_instance_ = NULL;

CMsgPanelPosition* CMsgPanelPosition::New() const {
  return new CMsgPanelPosition;
}

void CMsgPanelPosition::Clear() {
  if (_has_bits_[0 / 32] & 239) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgPoint::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgPoint::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
    if (has_scroll_offset()) {
      if (scroll_offset_ != NULL) scroll_offset_->::CMsgPoint::Clear();
    }
    if (has_scroll_offset_target()) {
      if (scroll_offset_target_ != NULL) scroll_offset_target_->::CMsgPoint::Clear();
    }
    if (has_scroll_transition_x()) {
      if (scroll_transition_x_ != NULL) scroll_transition_x_->::CMsgTransitionData::Clear();
    }
  }
  if (has_scroll_transition_y()) {
    if (scroll_transition_y_ != NULL) scroll_transition_y_->::CMsgTransitionData::Clear();
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPanelPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPanelPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgPoint transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectTag(50)) goto parse_scroll_offset;
        break;
      }

      // optional .CMsgPoint scroll_offset = 6;
      case 6: {
        if (tag == 50) {
         parse_scroll_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scroll_offset_target;
        break;
      }

      // optional .CMsgPoint scroll_offset_target = 7;
      case 7: {
        if (tag == 58) {
         parse_scroll_offset_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_offset_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scroll_transition_x;
        break;
      }

      // optional .CMsgTransitionData scroll_transition_x = 8;
      case 8: {
        if (tag == 66) {
         parse_scroll_transition_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_transition_x()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_scroll_transition_y;
        break;
      }

      // optional .CMsgTransitionData scroll_transition_y = 9;
      case 9: {
        if (tag == 74) {
         parse_scroll_transition_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scroll_transition_y()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPanelPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPanelPosition)
  return false;
#undef DO_
}

void CMsgPanelPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPanelPosition)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  // optional .CMsgPoint scroll_offset = 6;
  if (has_scroll_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scroll_offset(), output);
  }

  // optional .CMsgPoint scroll_offset_target = 7;
  if (has_scroll_offset_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scroll_offset_target(), output);
  }

  // optional .CMsgTransitionData scroll_transition_x = 8;
  if (has_scroll_transition_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scroll_transition_x(), output);
  }

  // optional .CMsgTransitionData scroll_transition_y = 9;
  if (has_scroll_transition_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scroll_transition_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPanelPosition)
}

::google::protobuf::uint8* CMsgPanelPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPanelPosition)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  // optional .CMsgPoint scroll_offset = 6;
  if (has_scroll_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scroll_offset(), target);
  }

  // optional .CMsgPoint scroll_offset_target = 7;
  if (has_scroll_offset_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scroll_offset_target(), target);
  }

  // optional .CMsgTransitionData scroll_transition_x = 8;
  if (has_scroll_transition_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scroll_transition_x(), target);
  }

  // optional .CMsgTransitionData scroll_transition_y = 9;
  if (has_scroll_transition_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scroll_transition_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPanelPosition)
  return target;
}

int CMsgPanelPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgPoint transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

    // optional .CMsgPoint scroll_offset = 6;
    if (has_scroll_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_offset());
    }

    // optional .CMsgPoint scroll_offset_target = 7;
    if (has_scroll_offset_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_offset_target());
    }

    // optional .CMsgTransitionData scroll_transition_x = 8;
    if (has_scroll_transition_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_transition_x());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgTransitionData scroll_transition_y = 9;
    if (has_scroll_transition_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scroll_transition_y());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPanelPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPanelPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPanelPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPanelPosition::MergeFrom(const CMsgPanelPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgPoint::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgPoint::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
    if (from.has_scroll_offset()) {
      mutable_scroll_offset()->::CMsgPoint::MergeFrom(from.scroll_offset());
    }
    if (from.has_scroll_offset_target()) {
      mutable_scroll_offset_target()->::CMsgPoint::MergeFrom(from.scroll_offset_target());
    }
    if (from.has_scroll_transition_x()) {
      mutable_scroll_transition_x()->::CMsgTransitionData::MergeFrom(from.scroll_transition_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scroll_transition_y()) {
      mutable_scroll_transition_y()->::CMsgTransitionData::MergeFrom(from.scroll_transition_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPanelPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPanelPosition::CopyFrom(const CMsgPanelPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPanelPosition::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgPanelPosition::Swap(CMsgPanelPosition* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(scroll_offset_, other->scroll_offset_);
    std::swap(scroll_offset_target_, other->scroll_offset_target_);
    std::swap(scroll_transition_x_, other->scroll_transition_x_);
    std::swap(scroll_transition_y_, other->scroll_transition_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPanelPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPanelPosition_descriptor_;
  metadata.reflection = CMsgPanelPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgOpacity_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgOpacity_AnimationFrameData::CMsgOpacity_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgOpacity.AnimationFrameData)
}

void CMsgOpacity_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgOpacity_AnimationFrameData::CMsgOpacity_AnimationFrameData(const CMsgOpacity_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgOpacity.AnimationFrameData)
}

void CMsgOpacity_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpacity_AnimationFrameData::~CMsgOpacity_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgOpacity.AnimationFrameData)
  SharedDtor();
}

void CMsgOpacity_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgOpacity_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpacity_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpacity_AnimationFrameData_descriptor_;
}

const CMsgOpacity_AnimationFrameData& CMsgOpacity_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgOpacity_AnimationFrameData* CMsgOpacity_AnimationFrameData::default_instance_ = NULL;

CMsgOpacity_AnimationFrameData* CMsgOpacity_AnimationFrameData::New() const {
  return new CMsgOpacity_AnimationFrameData;
}

void CMsgOpacity_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpacity_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgOpacity.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgOpacity.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgOpacity.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgOpacity_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgOpacity.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgOpacity.AnimationFrameData)
}

::google::protobuf::uint8* CMsgOpacity_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpacity.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpacity.AnimationFrameData)
  return target;
}

int CMsgOpacity_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpacity_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpacity_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpacity_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpacity_AnimationFrameData::MergeFrom(const CMsgOpacity_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpacity_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpacity_AnimationFrameData::CopyFrom(const CMsgOpacity_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpacity_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgOpacity_AnimationFrameData::Swap(CMsgOpacity_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpacity_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpacity_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgOpacity_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgOpacity::kBaseFieldNumber;
const int CMsgOpacity::kTransitionFieldNumber;
const int CMsgOpacity::kTransitionDataFieldNumber;
const int CMsgOpacity::kStyleSymbolFieldNumber;
const int CMsgOpacity::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgOpacity::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgOpacity_AnimationFrameData >, 11, false >
  CMsgOpacity::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgOpacity_AnimationFrameData::default_instance());
CMsgOpacity::CMsgOpacity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgOpacity)
}

void CMsgOpacity::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgOpacity::CMsgOpacity(const CMsgOpacity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgOpacity)
}

void CMsgOpacity::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpacity::~CMsgOpacity() {
  // @@protoc_insertion_point(destructor:CMsgOpacity)
  SharedDtor();
}

void CMsgOpacity::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgOpacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpacity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpacity_descriptor_;
}

const CMsgOpacity& CMsgOpacity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgOpacity* CMsgOpacity::default_instance_ = NULL;

CMsgOpacity* CMsgOpacity::New() const {
  return new CMsgOpacity;
}

void CMsgOpacity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgOpacity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgOpacity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgOpacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgOpacity)
  return false;
#undef DO_
}

void CMsgOpacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgOpacity)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgOpacity)
}

::google::protobuf::uint8* CMsgOpacity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpacity)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpacity)
  return target;
}

int CMsgOpacity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpacity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpacity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpacity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpacity::MergeFrom(const CMsgOpacity& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpacity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpacity::CopyFrom(const CMsgOpacity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpacity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgOpacity::Swap(CMsgOpacity* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpacity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpacity_descriptor_;
  metadata.reflection = CMsgOpacity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRotate2D_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgRotate2D_AnimationFrameData::CMsgRotate2D_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRotate2D.AnimationFrameData)
}

void CMsgRotate2D_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgRotate2D_AnimationFrameData::CMsgRotate2D_AnimationFrameData(const CMsgRotate2D_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRotate2D.AnimationFrameData)
}

void CMsgRotate2D_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRotate2D_AnimationFrameData::~CMsgRotate2D_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgRotate2D.AnimationFrameData)
  SharedDtor();
}

void CMsgRotate2D_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgRotate2D_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRotate2D_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRotate2D_AnimationFrameData_descriptor_;
}

const CMsgRotate2D_AnimationFrameData& CMsgRotate2D_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRotate2D_AnimationFrameData* CMsgRotate2D_AnimationFrameData::default_instance_ = NULL;

CMsgRotate2D_AnimationFrameData* CMsgRotate2D_AnimationFrameData::New() const {
  return new CMsgRotate2D_AnimationFrameData;
}

void CMsgRotate2D_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRotate2D_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRotate2D.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRotate2D.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRotate2D.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgRotate2D_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRotate2D.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRotate2D.AnimationFrameData)
}

::google::protobuf::uint8* CMsgRotate2D_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRotate2D.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRotate2D.AnimationFrameData)
  return target;
}

int CMsgRotate2D_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRotate2D_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRotate2D_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRotate2D_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRotate2D_AnimationFrameData::MergeFrom(const CMsgRotate2D_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRotate2D_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRotate2D_AnimationFrameData::CopyFrom(const CMsgRotate2D_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRotate2D_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgRotate2D_AnimationFrameData::Swap(CMsgRotate2D_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRotate2D_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRotate2D_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgRotate2D_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgRotate2D::kBaseFieldNumber;
const int CMsgRotate2D::kTransitionFieldNumber;
const int CMsgRotate2D::kTransitionDataFieldNumber;
const int CMsgRotate2D::kStyleSymbolFieldNumber;
const int CMsgRotate2D::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgRotate2D::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgRotate2D_AnimationFrameData >, 11, false >
  CMsgRotate2D::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgRotate2D_AnimationFrameData::default_instance());
CMsgRotate2D::CMsgRotate2D()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRotate2D)
}

void CMsgRotate2D::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgRotate2D::CMsgRotate2D(const CMsgRotate2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRotate2D)
}

void CMsgRotate2D::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRotate2D::~CMsgRotate2D() {
  // @@protoc_insertion_point(destructor:CMsgRotate2D)
  SharedDtor();
}

void CMsgRotate2D::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgRotate2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRotate2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRotate2D_descriptor_;
}

const CMsgRotate2D& CMsgRotate2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRotate2D* CMsgRotate2D::default_instance_ = NULL;

CMsgRotate2D* CMsgRotate2D::New() const {
  return new CMsgRotate2D;
}

void CMsgRotate2D::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgRotate2D*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRotate2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRotate2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRotate2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRotate2D)
  return false;
#undef DO_
}

void CMsgRotate2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRotate2D)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRotate2D)
}

::google::protobuf::uint8* CMsgRotate2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRotate2D)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRotate2D)
  return target;
}

int CMsgRotate2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRotate2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRotate2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRotate2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRotate2D::MergeFrom(const CMsgRotate2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRotate2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRotate2D::CopyFrom(const CMsgRotate2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRotate2D::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgRotate2D::Swap(CMsgRotate2D* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRotate2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRotate2D_descriptor_;
  metadata.reflection = CMsgRotate2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgOpacityMaskData::kOpacityMaskTextureIdFieldNumber;
const int CMsgOpacityMaskData::kOpacityMaskOpacityFieldNumber;
#endif  // !_MSC_VER

CMsgOpacityMaskData::CMsgOpacityMaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgOpacityMaskData)
}

void CMsgOpacityMaskData::InitAsDefaultInstance() {
}

CMsgOpacityMaskData::CMsgOpacityMaskData(const CMsgOpacityMaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgOpacityMaskData)
}

void CMsgOpacityMaskData::SharedCtor() {
  _cached_size_ = 0;
  opacity_mask_texture_id_ = 0u;
  opacity_mask_opacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpacityMaskData::~CMsgOpacityMaskData() {
  // @@protoc_insertion_point(destructor:CMsgOpacityMaskData)
  SharedDtor();
}

void CMsgOpacityMaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgOpacityMaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpacityMaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpacityMaskData_descriptor_;
}

const CMsgOpacityMaskData& CMsgOpacityMaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgOpacityMaskData* CMsgOpacityMaskData::default_instance_ = NULL;

CMsgOpacityMaskData* CMsgOpacityMaskData::New() const {
  return new CMsgOpacityMaskData;
}

void CMsgOpacityMaskData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgOpacityMaskData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(opacity_mask_opacity_, opacity_mask_texture_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpacityMaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgOpacityMaskData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 opacity_mask_texture_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opacity_mask_texture_id_)));
          set_has_opacity_mask_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_opacity_mask_opacity;
        break;
      }

      // optional double opacity_mask_opacity = 2;
      case 2: {
        if (tag == 17) {
         parse_opacity_mask_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opacity_mask_opacity_)));
          set_has_opacity_mask_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgOpacityMaskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgOpacityMaskData)
  return false;
#undef DO_
}

void CMsgOpacityMaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgOpacityMaskData)
  // optional uint32 opacity_mask_texture_id = 1;
  if (has_opacity_mask_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opacity_mask_texture_id(), output);
  }

  // optional double opacity_mask_opacity = 2;
  if (has_opacity_mask_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->opacity_mask_opacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgOpacityMaskData)
}

::google::protobuf::uint8* CMsgOpacityMaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpacityMaskData)
  // optional uint32 opacity_mask_texture_id = 1;
  if (has_opacity_mask_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opacity_mask_texture_id(), target);
  }

  // optional double opacity_mask_opacity = 2;
  if (has_opacity_mask_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->opacity_mask_opacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpacityMaskData)
  return target;
}

int CMsgOpacityMaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 opacity_mask_texture_id = 1;
    if (has_opacity_mask_texture_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opacity_mask_texture_id());
    }

    // optional double opacity_mask_opacity = 2;
    if (has_opacity_mask_opacity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpacityMaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpacityMaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpacityMaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpacityMaskData::MergeFrom(const CMsgOpacityMaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opacity_mask_texture_id()) {
      set_opacity_mask_texture_id(from.opacity_mask_texture_id());
    }
    if (from.has_opacity_mask_opacity()) {
      set_opacity_mask_opacity(from.opacity_mask_opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpacityMaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpacityMaskData::CopyFrom(const CMsgOpacityMaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpacityMaskData::IsInitialized() const {

  return true;
}

void CMsgOpacityMaskData::Swap(CMsgOpacityMaskData* other) {
  if (other != this) {
    std::swap(opacity_mask_texture_id_, other->opacity_mask_texture_id_);
    std::swap(opacity_mask_opacity_, other->opacity_mask_opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpacityMaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpacityMaskData_descriptor_;
  metadata.reflection = CMsgOpacityMaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgOpacityMask_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgOpacityMask_AnimationFrameData::CMsgOpacityMask_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgOpacityMask.AnimationFrameData)
}

void CMsgOpacityMask_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgOpacityMaskData*>(&::CMsgOpacityMaskData::default_instance());
}

CMsgOpacityMask_AnimationFrameData::CMsgOpacityMask_AnimationFrameData(const CMsgOpacityMask_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgOpacityMask.AnimationFrameData)
}

void CMsgOpacityMask_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpacityMask_AnimationFrameData::~CMsgOpacityMask_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgOpacityMask.AnimationFrameData)
  SharedDtor();
}

void CMsgOpacityMask_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgOpacityMask_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpacityMask_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpacityMask_AnimationFrameData_descriptor_;
}

const CMsgOpacityMask_AnimationFrameData& CMsgOpacityMask_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgOpacityMask_AnimationFrameData* CMsgOpacityMask_AnimationFrameData::default_instance_ = NULL;

CMsgOpacityMask_AnimationFrameData* CMsgOpacityMask_AnimationFrameData::New() const {
  return new CMsgOpacityMask_AnimationFrameData;
}

void CMsgOpacityMask_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgOpacityMaskData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpacityMask_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgOpacityMask.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgOpacityMaskData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgOpacityMask.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgOpacityMask.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgOpacityMask_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgOpacityMask.AnimationFrameData)
  // optional .CMsgOpacityMaskData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgOpacityMask.AnimationFrameData)
}

::google::protobuf::uint8* CMsgOpacityMask_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpacityMask.AnimationFrameData)
  // optional .CMsgOpacityMaskData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpacityMask.AnimationFrameData)
  return target;
}

int CMsgOpacityMask_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgOpacityMaskData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpacityMask_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpacityMask_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpacityMask_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpacityMask_AnimationFrameData::MergeFrom(const CMsgOpacityMask_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgOpacityMaskData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpacityMask_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpacityMask_AnimationFrameData::CopyFrom(const CMsgOpacityMask_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpacityMask_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgOpacityMask_AnimationFrameData::Swap(CMsgOpacityMask_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpacityMask_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpacityMask_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgOpacityMask_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgOpacityMask::kBaseFieldNumber;
const int CMsgOpacityMask::kTransitionFieldNumber;
const int CMsgOpacityMask::kTransitionDataFieldNumber;
const int CMsgOpacityMask::kStyleSymbolFieldNumber;
const int CMsgOpacityMask::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgOpacityMask::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgOpacityMask_AnimationFrameData >, 11, false >
  CMsgOpacityMask::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgOpacityMask_AnimationFrameData::default_instance());
CMsgOpacityMask::CMsgOpacityMask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgOpacityMask)
}

void CMsgOpacityMask::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgOpacityMaskData*>(&::CMsgOpacityMaskData::default_instance());
  transition_ = const_cast< ::CMsgOpacityMaskData*>(&::CMsgOpacityMaskData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgOpacityMask::CMsgOpacityMask(const CMsgOpacityMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgOpacityMask)
}

void CMsgOpacityMask::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgOpacityMask::~CMsgOpacityMask() {
  // @@protoc_insertion_point(destructor:CMsgOpacityMask)
  SharedDtor();
}

void CMsgOpacityMask::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
  }
}

void CMsgOpacityMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgOpacityMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgOpacityMask_descriptor_;
}

const CMsgOpacityMask& CMsgOpacityMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgOpacityMask* CMsgOpacityMask::default_instance_ = NULL;

CMsgOpacityMask* CMsgOpacityMask::New() const {
  return new CMsgOpacityMask;
}

void CMsgOpacityMask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgOpacityMaskData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgOpacityMaskData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgOpacityMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgOpacityMask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgOpacityMaskData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgOpacityMaskData transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgOpacityMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgOpacityMask)
  return false;
#undef DO_
}

void CMsgOpacityMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgOpacityMask)
  // optional .CMsgOpacityMaskData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgOpacityMaskData transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgOpacityMask)
}

::google::protobuf::uint8* CMsgOpacityMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgOpacityMask)
  // optional .CMsgOpacityMaskData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgOpacityMaskData transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgOpacityMask)
  return target;
}

int CMsgOpacityMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgOpacityMaskData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgOpacityMaskData transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgOpacityMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgOpacityMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgOpacityMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgOpacityMask::MergeFrom(const CMsgOpacityMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgOpacityMaskData::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgOpacityMaskData::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgOpacityMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpacityMask::CopyFrom(const CMsgOpacityMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpacityMask::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgOpacityMask::Swap(CMsgOpacityMask* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgOpacityMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgOpacityMask_descriptor_;
  metadata.reflection = CMsgOpacityMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHueShift_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgHueShift_AnimationFrameData::CMsgHueShift_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHueShift.AnimationFrameData)
}

void CMsgHueShift_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgHueShift_AnimationFrameData::CMsgHueShift_AnimationFrameData(const CMsgHueShift_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgHueShift.AnimationFrameData)
}

void CMsgHueShift_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHueShift_AnimationFrameData::~CMsgHueShift_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgHueShift.AnimationFrameData)
  SharedDtor();
}

void CMsgHueShift_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgHueShift_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHueShift_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHueShift_AnimationFrameData_descriptor_;
}

const CMsgHueShift_AnimationFrameData& CMsgHueShift_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgHueShift_AnimationFrameData* CMsgHueShift_AnimationFrameData::default_instance_ = NULL;

CMsgHueShift_AnimationFrameData* CMsgHueShift_AnimationFrameData::New() const {
  return new CMsgHueShift_AnimationFrameData;
}

void CMsgHueShift_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHueShift_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHueShift.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHueShift.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHueShift.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgHueShift_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHueShift.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHueShift.AnimationFrameData)
}

::google::protobuf::uint8* CMsgHueShift_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHueShift.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHueShift.AnimationFrameData)
  return target;
}

int CMsgHueShift_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHueShift_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHueShift_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHueShift_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHueShift_AnimationFrameData::MergeFrom(const CMsgHueShift_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHueShift_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHueShift_AnimationFrameData::CopyFrom(const CMsgHueShift_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHueShift_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgHueShift_AnimationFrameData::Swap(CMsgHueShift_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHueShift_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHueShift_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgHueShift_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgHueShift::kBaseFieldNumber;
const int CMsgHueShift::kTransitionFieldNumber;
const int CMsgHueShift::kTransitionDataFieldNumber;
const int CMsgHueShift::kStyleSymbolFieldNumber;
const int CMsgHueShift::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgHueShift::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgHueShift_AnimationFrameData >, 11, false >
  CMsgHueShift::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgHueShift_AnimationFrameData::default_instance());
CMsgHueShift::CMsgHueShift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHueShift)
}

void CMsgHueShift::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgHueShift::CMsgHueShift(const CMsgHueShift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgHueShift)
}

void CMsgHueShift::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHueShift::~CMsgHueShift() {
  // @@protoc_insertion_point(destructor:CMsgHueShift)
  SharedDtor();
}

void CMsgHueShift::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgHueShift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHueShift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHueShift_descriptor_;
}

const CMsgHueShift& CMsgHueShift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgHueShift* CMsgHueShift::default_instance_ = NULL;

CMsgHueShift* CMsgHueShift::New() const {
  return new CMsgHueShift;
}

void CMsgHueShift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgHueShift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHueShift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHueShift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHueShift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHueShift)
  return false;
#undef DO_
}

void CMsgHueShift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHueShift)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHueShift)
}

::google::protobuf::uint8* CMsgHueShift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHueShift)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHueShift)
  return target;
}

int CMsgHueShift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHueShift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHueShift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHueShift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHueShift::MergeFrom(const CMsgHueShift& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHueShift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHueShift::CopyFrom(const CMsgHueShift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHueShift::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgHueShift::Swap(CMsgHueShift* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHueShift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHueShift_descriptor_;
  metadata.reflection = CMsgHueShift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSaturation_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgSaturation_AnimationFrameData::CMsgSaturation_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSaturation.AnimationFrameData)
}

void CMsgSaturation_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgSaturation_AnimationFrameData::CMsgSaturation_AnimationFrameData(const CMsgSaturation_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSaturation.AnimationFrameData)
}

void CMsgSaturation_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSaturation_AnimationFrameData::~CMsgSaturation_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgSaturation.AnimationFrameData)
  SharedDtor();
}

void CMsgSaturation_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSaturation_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSaturation_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSaturation_AnimationFrameData_descriptor_;
}

const CMsgSaturation_AnimationFrameData& CMsgSaturation_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgSaturation_AnimationFrameData* CMsgSaturation_AnimationFrameData::default_instance_ = NULL;

CMsgSaturation_AnimationFrameData* CMsgSaturation_AnimationFrameData::New() const {
  return new CMsgSaturation_AnimationFrameData;
}

void CMsgSaturation_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSaturation_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSaturation.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSaturation.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSaturation.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgSaturation_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSaturation.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSaturation.AnimationFrameData)
}

::google::protobuf::uint8* CMsgSaturation_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSaturation.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSaturation.AnimationFrameData)
  return target;
}

int CMsgSaturation_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSaturation_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSaturation_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSaturation_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSaturation_AnimationFrameData::MergeFrom(const CMsgSaturation_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSaturation_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaturation_AnimationFrameData::CopyFrom(const CMsgSaturation_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaturation_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgSaturation_AnimationFrameData::Swap(CMsgSaturation_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSaturation_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSaturation_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgSaturation_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSaturation::kBaseFieldNumber;
const int CMsgSaturation::kTransitionFieldNumber;
const int CMsgSaturation::kTransitionDataFieldNumber;
const int CMsgSaturation::kStyleSymbolFieldNumber;
const int CMsgSaturation::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgSaturation::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgSaturation_AnimationFrameData >, 11, false >
  CMsgSaturation::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgSaturation_AnimationFrameData::default_instance());
CMsgSaturation::CMsgSaturation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSaturation)
}

void CMsgSaturation::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgSaturation::CMsgSaturation(const CMsgSaturation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgSaturation)
}

void CMsgSaturation::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSaturation::~CMsgSaturation() {
  // @@protoc_insertion_point(destructor:CMsgSaturation)
  SharedDtor();
}

void CMsgSaturation::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgSaturation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSaturation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSaturation_descriptor_;
}

const CMsgSaturation& CMsgSaturation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgSaturation* CMsgSaturation::default_instance_ = NULL;

CMsgSaturation* CMsgSaturation::New() const {
  return new CMsgSaturation;
}

void CMsgSaturation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgSaturation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSaturation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSaturation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSaturation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSaturation)
  return false;
#undef DO_
}

void CMsgSaturation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSaturation)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSaturation)
}

::google::protobuf::uint8* CMsgSaturation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSaturation)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSaturation)
  return target;
}

int CMsgSaturation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSaturation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSaturation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSaturation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSaturation::MergeFrom(const CMsgSaturation& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSaturation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSaturation::CopyFrom(const CMsgSaturation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSaturation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgSaturation::Swap(CMsgSaturation* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSaturation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSaturation_descriptor_;
  metadata.reflection = CMsgSaturation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBrightness_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgBrightness_AnimationFrameData::CMsgBrightness_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBrightness.AnimationFrameData)
}

void CMsgBrightness_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgBrightness_AnimationFrameData::CMsgBrightness_AnimationFrameData(const CMsgBrightness_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBrightness.AnimationFrameData)
}

void CMsgBrightness_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrightness_AnimationFrameData::~CMsgBrightness_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgBrightness.AnimationFrameData)
  SharedDtor();
}

void CMsgBrightness_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBrightness_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrightness_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrightness_AnimationFrameData_descriptor_;
}

const CMsgBrightness_AnimationFrameData& CMsgBrightness_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBrightness_AnimationFrameData* CMsgBrightness_AnimationFrameData::default_instance_ = NULL;

CMsgBrightness_AnimationFrameData* CMsgBrightness_AnimationFrameData::New() const {
  return new CMsgBrightness_AnimationFrameData;
}

void CMsgBrightness_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrightness_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBrightness.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBrightness.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBrightness.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgBrightness_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBrightness.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBrightness.AnimationFrameData)
}

::google::protobuf::uint8* CMsgBrightness_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrightness.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrightness.AnimationFrameData)
  return target;
}

int CMsgBrightness_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrightness_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrightness_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrightness_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrightness_AnimationFrameData::MergeFrom(const CMsgBrightness_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrightness_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrightness_AnimationFrameData::CopyFrom(const CMsgBrightness_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrightness_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgBrightness_AnimationFrameData::Swap(CMsgBrightness_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrightness_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrightness_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgBrightness_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgBrightness::kBaseFieldNumber;
const int CMsgBrightness::kTransitionFieldNumber;
const int CMsgBrightness::kTransitionDataFieldNumber;
const int CMsgBrightness::kStyleSymbolFieldNumber;
const int CMsgBrightness::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgBrightness::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgBrightness_AnimationFrameData >, 11, false >
  CMsgBrightness::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgBrightness_AnimationFrameData::default_instance());
CMsgBrightness::CMsgBrightness()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBrightness)
}

void CMsgBrightness::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgBrightness::CMsgBrightness(const CMsgBrightness& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBrightness)
}

void CMsgBrightness::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBrightness::~CMsgBrightness() {
  // @@protoc_insertion_point(destructor:CMsgBrightness)
  SharedDtor();
}

void CMsgBrightness::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgBrightness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBrightness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBrightness_descriptor_;
}

const CMsgBrightness& CMsgBrightness::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBrightness* CMsgBrightness::default_instance_ = NULL;

CMsgBrightness* CMsgBrightness::New() const {
  return new CMsgBrightness;
}

void CMsgBrightness::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgBrightness*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBrightness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBrightness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBrightness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBrightness)
  return false;
#undef DO_
}

void CMsgBrightness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBrightness)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBrightness)
}

::google::protobuf::uint8* CMsgBrightness::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBrightness)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBrightness)
  return target;
}

int CMsgBrightness::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBrightness::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBrightness* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBrightness*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBrightness::MergeFrom(const CMsgBrightness& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBrightness::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrightness::CopyFrom(const CMsgBrightness& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrightness::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgBrightness::Swap(CMsgBrightness* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBrightness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBrightness_descriptor_;
  metadata.reflection = CMsgBrightness_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgContrast_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgContrast_AnimationFrameData::CMsgContrast_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgContrast.AnimationFrameData)
}

void CMsgContrast_AnimationFrameData::InitAsDefaultInstance() {
}

CMsgContrast_AnimationFrameData::CMsgContrast_AnimationFrameData(const CMsgContrast_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgContrast.AnimationFrameData)
}

void CMsgContrast_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgContrast_AnimationFrameData::~CMsgContrast_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgContrast.AnimationFrameData)
  SharedDtor();
}

void CMsgContrast_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgContrast_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgContrast_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgContrast_AnimationFrameData_descriptor_;
}

const CMsgContrast_AnimationFrameData& CMsgContrast_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgContrast_AnimationFrameData* CMsgContrast_AnimationFrameData::default_instance_ = NULL;

CMsgContrast_AnimationFrameData* CMsgContrast_AnimationFrameData::New() const {
  return new CMsgContrast_AnimationFrameData;
}

void CMsgContrast_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgContrast_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgContrast.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgContrast.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgContrast.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgContrast_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgContrast.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgContrast.AnimationFrameData)
}

::google::protobuf::uint8* CMsgContrast_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgContrast.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgContrast.AnimationFrameData)
  return target;
}

int CMsgContrast_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgContrast_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgContrast_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgContrast_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgContrast_AnimationFrameData::MergeFrom(const CMsgContrast_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgContrast_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgContrast_AnimationFrameData::CopyFrom(const CMsgContrast_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgContrast_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgContrast_AnimationFrameData::Swap(CMsgContrast_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgContrast_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgContrast_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgContrast_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgContrast::kBaseFieldNumber;
const int CMsgContrast::kTransitionFieldNumber;
const int CMsgContrast::kTransitionDataFieldNumber;
const int CMsgContrast::kStyleSymbolFieldNumber;
const int CMsgContrast::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgContrast::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgContrast_AnimationFrameData >, 11, false >
  CMsgContrast::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgContrast_AnimationFrameData::default_instance());
CMsgContrast::CMsgContrast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgContrast)
}

void CMsgContrast::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgContrast::CMsgContrast(const CMsgContrast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgContrast)
}

void CMsgContrast::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgContrast::~CMsgContrast() {
  // @@protoc_insertion_point(destructor:CMsgContrast)
  SharedDtor();
}

void CMsgContrast::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsgContrast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgContrast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgContrast_descriptor_;
}

const CMsgContrast& CMsgContrast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgContrast* CMsgContrast::default_instance_ = NULL;

CMsgContrast* CMsgContrast::New() const {
  return new CMsgContrast;
}

void CMsgContrast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgContrast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgContrast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgContrast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgContrast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgContrast)
  return false;
#undef DO_
}

void CMsgContrast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgContrast)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgContrast)
}

::google::protobuf::uint8* CMsgContrast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgContrast)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgContrast)
  return target;
}

int CMsgContrast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgContrast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgContrast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgContrast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgContrast::MergeFrom(const CMsgContrast& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgContrast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgContrast::CopyFrom(const CMsgContrast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgContrast::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgContrast::Swap(CMsgContrast* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgContrast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgContrast_descriptor_;
  metadata.reflection = CMsgContrast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGaussianValues::kPassesFieldNumber;
const int CMsgGaussianValues::kStddevHorFieldNumber;
const int CMsgGaussianValues::kStddevVerFieldNumber;
#endif  // !_MSC_VER

CMsgGaussianValues::CMsgGaussianValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGaussianValues)
}

void CMsgGaussianValues::InitAsDefaultInstance() {
}

CMsgGaussianValues::CMsgGaussianValues(const CMsgGaussianValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGaussianValues)
}

void CMsgGaussianValues::SharedCtor() {
  _cached_size_ = 0;
  passes_ = 0;
  stddev_hor_ = 0;
  stddev_ver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGaussianValues::~CMsgGaussianValues() {
  // @@protoc_insertion_point(destructor:CMsgGaussianValues)
  SharedDtor();
}

void CMsgGaussianValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGaussianValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGaussianValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGaussianValues_descriptor_;
}

const CMsgGaussianValues& CMsgGaussianValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgGaussianValues* CMsgGaussianValues::default_instance_ = NULL;

CMsgGaussianValues* CMsgGaussianValues::New() const {
  return new CMsgGaussianValues;
}

void CMsgGaussianValues::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgGaussianValues*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(passes_, stddev_ver_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGaussianValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGaussianValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double passes = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &passes_)));
          set_has_passes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_stddev_hor;
        break;
      }

      // optional double stddev_hor = 2;
      case 2: {
        if (tag == 17) {
         parse_stddev_hor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stddev_hor_)));
          set_has_stddev_hor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_stddev_ver;
        break;
      }

      // optional double stddev_ver = 3;
      case 3: {
        if (tag == 25) {
         parse_stddev_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stddev_ver_)));
          set_has_stddev_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGaussianValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGaussianValues)
  return false;
#undef DO_
}

void CMsgGaussianValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGaussianValues)
  // optional double passes = 1;
  if (has_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->passes(), output);
  }

  // optional double stddev_hor = 2;
  if (has_stddev_hor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stddev_hor(), output);
  }

  // optional double stddev_ver = 3;
  if (has_stddev_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stddev_ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGaussianValues)
}

::google::protobuf::uint8* CMsgGaussianValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGaussianValues)
  // optional double passes = 1;
  if (has_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->passes(), target);
  }

  // optional double stddev_hor = 2;
  if (has_stddev_hor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stddev_hor(), target);
  }

  // optional double stddev_ver = 3;
  if (has_stddev_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stddev_ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGaussianValues)
  return target;
}

int CMsgGaussianValues::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double passes = 1;
    if (has_passes()) {
      total_size += 1 + 8;
    }

    // optional double stddev_hor = 2;
    if (has_stddev_hor()) {
      total_size += 1 + 8;
    }

    // optional double stddev_ver = 3;
    if (has_stddev_ver()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGaussianValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGaussianValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGaussianValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGaussianValues::MergeFrom(const CMsgGaussianValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passes()) {
      set_passes(from.passes());
    }
    if (from.has_stddev_hor()) {
      set_stddev_hor(from.stddev_hor());
    }
    if (from.has_stddev_ver()) {
      set_stddev_ver(from.stddev_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGaussianValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGaussianValues::CopyFrom(const CMsgGaussianValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGaussianValues::IsInitialized() const {

  return true;
}

void CMsgGaussianValues::Swap(CMsgGaussianValues* other) {
  if (other != this) {
    std::swap(passes_, other->passes_);
    std::swap(stddev_hor_, other->stddev_hor_);
    std::swap(stddev_ver_, other->stddev_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGaussianValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGaussianValues_descriptor_;
  metadata.reflection = CMsgGaussianValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGaussianBlur_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgGaussianBlur_AnimationFrameData::CMsgGaussianBlur_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGaussianBlur.AnimationFrameData)
}

void CMsgGaussianBlur_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgGaussianValues*>(&::CMsgGaussianValues::default_instance());
}

CMsgGaussianBlur_AnimationFrameData::CMsgGaussianBlur_AnimationFrameData(const CMsgGaussianBlur_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGaussianBlur.AnimationFrameData)
}

void CMsgGaussianBlur_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGaussianBlur_AnimationFrameData::~CMsgGaussianBlur_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgGaussianBlur.AnimationFrameData)
  SharedDtor();
}

void CMsgGaussianBlur_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgGaussianBlur_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGaussianBlur_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGaussianBlur_AnimationFrameData_descriptor_;
}

const CMsgGaussianBlur_AnimationFrameData& CMsgGaussianBlur_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgGaussianBlur_AnimationFrameData* CMsgGaussianBlur_AnimationFrameData::default_instance_ = NULL;

CMsgGaussianBlur_AnimationFrameData* CMsgGaussianBlur_AnimationFrameData::New() const {
  return new CMsgGaussianBlur_AnimationFrameData;
}

void CMsgGaussianBlur_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgGaussianValues::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGaussianBlur_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGaussianBlur.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGaussianValues data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGaussianBlur.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGaussianBlur.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgGaussianBlur_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGaussianBlur.AnimationFrameData)
  // optional .CMsgGaussianValues data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGaussianBlur.AnimationFrameData)
}

::google::protobuf::uint8* CMsgGaussianBlur_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGaussianBlur.AnimationFrameData)
  // optional .CMsgGaussianValues data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGaussianBlur.AnimationFrameData)
  return target;
}

int CMsgGaussianBlur_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGaussianValues data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGaussianBlur_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGaussianBlur_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGaussianBlur_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGaussianBlur_AnimationFrameData::MergeFrom(const CMsgGaussianBlur_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgGaussianValues::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGaussianBlur_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGaussianBlur_AnimationFrameData::CopyFrom(const CMsgGaussianBlur_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGaussianBlur_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgGaussianBlur_AnimationFrameData::Swap(CMsgGaussianBlur_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGaussianBlur_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGaussianBlur_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgGaussianBlur_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGaussianBlur::kBaseFieldNumber;
const int CMsgGaussianBlur::kTransitionFieldNumber;
const int CMsgGaussianBlur::kTransitionDataFieldNumber;
const int CMsgGaussianBlur::kStyleSymbolFieldNumber;
const int CMsgGaussianBlur::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgGaussianBlur::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgGaussianBlur_AnimationFrameData >, 11, false >
  CMsgGaussianBlur::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgGaussianBlur_AnimationFrameData::default_instance());
CMsgGaussianBlur::CMsgGaussianBlur()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGaussianBlur)
}

void CMsgGaussianBlur::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgGaussianValues*>(&::CMsgGaussianValues::default_instance());
  transition_ = const_cast< ::CMsgGaussianValues*>(&::CMsgGaussianValues::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsgGaussianBlur::CMsgGaussianBlur(const CMsgGaussianBlur& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgGaussianBlur)
}

void CMsgGaussianBlur::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGaussianBlur::~CMsgGaussianBlur() {
  // @@protoc_insertion_point(destructor:CMsgGaussianBlur)
  SharedDtor();
}

void CMsgGaussianBlur::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
  }
}

void CMsgGaussianBlur::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGaussianBlur::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGaussianBlur_descriptor_;
}

const CMsgGaussianBlur& CMsgGaussianBlur::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgGaussianBlur* CMsgGaussianBlur::default_instance_ = NULL;

CMsgGaussianBlur* CMsgGaussianBlur::New() const {
  return new CMsgGaussianBlur;
}

void CMsgGaussianBlur::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgGaussianValues::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgGaussianValues::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGaussianBlur::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGaussianBlur)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgGaussianValues base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgGaussianValues transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGaussianBlur)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGaussianBlur)
  return false;
#undef DO_
}

void CMsgGaussianBlur::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGaussianBlur)
  // optional .CMsgGaussianValues base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgGaussianValues transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGaussianBlur)
}

::google::protobuf::uint8* CMsgGaussianBlur::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGaussianBlur)
  // optional .CMsgGaussianValues base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgGaussianValues transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGaussianBlur)
  return target;
}

int CMsgGaussianBlur::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgGaussianValues base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgGaussianValues transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGaussianBlur::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGaussianBlur* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGaussianBlur*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGaussianBlur::MergeFrom(const CMsgGaussianBlur& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgGaussianValues::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgGaussianValues::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGaussianBlur::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGaussianBlur::CopyFrom(const CMsgGaussianBlur& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGaussianBlur::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgGaussianBlur::Swap(CMsgGaussianBlur* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGaussianBlur::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGaussianBlur_descriptor_;
  metadata.reflection = CMsgGaussianBlur_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsg3DTransformPerspective_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsg3DTransformPerspective_AnimationFrameData::CMsg3DTransformPerspective_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformPerspective.AnimationFrameData)
}

void CMsg3DTransformPerspective_AnimationFrameData::InitAsDefaultInstance() {
}

CMsg3DTransformPerspective_AnimationFrameData::CMsg3DTransformPerspective_AnimationFrameData(const CMsg3DTransformPerspective_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformPerspective.AnimationFrameData)
}

void CMsg3DTransformPerspective_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformPerspective_AnimationFrameData::~CMsg3DTransformPerspective_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformPerspective.AnimationFrameData)
  SharedDtor();
}

void CMsg3DTransformPerspective_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsg3DTransformPerspective_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformPerspective_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformPerspective_AnimationFrameData_descriptor_;
}

const CMsg3DTransformPerspective_AnimationFrameData& CMsg3DTransformPerspective_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformPerspective_AnimationFrameData* CMsg3DTransformPerspective_AnimationFrameData::default_instance_ = NULL;

CMsg3DTransformPerspective_AnimationFrameData* CMsg3DTransformPerspective_AnimationFrameData::New() const {
  return new CMsg3DTransformPerspective_AnimationFrameData;
}

void CMsg3DTransformPerspective_AnimationFrameData::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformPerspective_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformPerspective.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double data = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformPerspective.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformPerspective.AnimationFrameData)
  return false;
#undef DO_
}

void CMsg3DTransformPerspective_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformPerspective.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformPerspective.AnimationFrameData)
}

::google::protobuf::uint8* CMsg3DTransformPerspective_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformPerspective.AnimationFrameData)
  // optional double data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformPerspective.AnimationFrameData)
  return target;
}

int CMsg3DTransformPerspective_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double data = 1;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformPerspective_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformPerspective_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformPerspective_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformPerspective_AnimationFrameData::MergeFrom(const CMsg3DTransformPerspective_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformPerspective_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformPerspective_AnimationFrameData::CopyFrom(const CMsg3DTransformPerspective_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformPerspective_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsg3DTransformPerspective_AnimationFrameData::Swap(CMsg3DTransformPerspective_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformPerspective_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformPerspective_AnimationFrameData_descriptor_;
  metadata.reflection = CMsg3DTransformPerspective_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsg3DTransformPerspective::kBaseFieldNumber;
const int CMsg3DTransformPerspective::kTransitionFieldNumber;
const int CMsg3DTransformPerspective::kTransitionDataFieldNumber;
const int CMsg3DTransformPerspective::kStyleSymbolFieldNumber;
const int CMsg3DTransformPerspective::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsg3DTransformPerspective::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsg3DTransformPerspective_AnimationFrameData >, 11, false >
  CMsg3DTransformPerspective::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsg3DTransformPerspective_AnimationFrameData::default_instance());
CMsg3DTransformPerspective::CMsg3DTransformPerspective()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformPerspective)
}

void CMsg3DTransformPerspective::InitAsDefaultInstance() {
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsg3DTransformPerspective::CMsg3DTransformPerspective(const CMsg3DTransformPerspective& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformPerspective)
}

void CMsg3DTransformPerspective::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  transition_ = 0;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformPerspective::~CMsg3DTransformPerspective() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformPerspective)
  SharedDtor();
}

void CMsg3DTransformPerspective::SharedDtor() {
  if (this != default_instance_) {
    delete transition_data_;
  }
}

void CMsg3DTransformPerspective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformPerspective::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformPerspective_descriptor_;
}

const CMsg3DTransformPerspective& CMsg3DTransformPerspective::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformPerspective* CMsg3DTransformPerspective::default_instance_ = NULL;

CMsg3DTransformPerspective* CMsg3DTransformPerspective::New() const {
  return new CMsg3DTransformPerspective;
}

void CMsg3DTransformPerspective::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsg3DTransformPerspective*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(base_, transition_);
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformPerspective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformPerspective)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transition;
        break;
      }

      // optional double transition = 2;
      case 2: {
        if (tag == 17) {
         parse_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transition_)));
          set_has_transition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformPerspective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformPerspective)
  return false;
#undef DO_
}

void CMsg3DTransformPerspective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformPerspective)
  // optional double base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->base(), output);
  }

  // optional double transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformPerspective)
}

::google::protobuf::uint8* CMsg3DTransformPerspective::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformPerspective)
  // optional double base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->base(), target);
  }

  // optional double transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformPerspective)
  return target;
}

int CMsg3DTransformPerspective::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double base = 1;
    if (has_base()) {
      total_size += 1 + 8;
    }

    // optional double transition = 2;
    if (has_transition()) {
      total_size += 1 + 8;
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformPerspective::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformPerspective* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformPerspective*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformPerspective::MergeFrom(const CMsg3DTransformPerspective& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_transition()) {
      set_transition(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformPerspective::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformPerspective::CopyFrom(const CMsg3DTransformPerspective& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformPerspective::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsg3DTransformPerspective::Swap(CMsg3DTransformPerspective* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformPerspective::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformPerspective_descriptor_;
  metadata.reflection = CMsg3DTransformPerspective_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsg3DTransformPerspectiveOrigin_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsg3DTransformPerspectiveOrigin_AnimationFrameData::CMsg3DTransformPerspectiveOrigin_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsg3DTransformPerspectiveOrigin_AnimationFrameData::CMsg3DTransformPerspectiveOrigin_AnimationFrameData(const CMsg3DTransformPerspectiveOrigin_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformPerspectiveOrigin_AnimationFrameData::~CMsg3DTransformPerspectiveOrigin_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  SharedDtor();
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformPerspectiveOrigin_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_;
}

const CMsg3DTransformPerspectiveOrigin_AnimationFrameData& CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformPerspectiveOrigin_AnimationFrameData* CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance_ = NULL;

CMsg3DTransformPerspectiveOrigin_AnimationFrameData* CMsg3DTransformPerspectiveOrigin_AnimationFrameData::New() const {
  return new CMsg3DTransformPerspectiveOrigin_AnimationFrameData;
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgPoint::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformPerspectiveOrigin_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  return false;
#undef DO_
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
}

::google::protobuf::uint8* CMsg3DTransformPerspectiveOrigin_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  // optional .CMsgPoint data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformPerspectiveOrigin.AnimationFrameData)
  return target;
}

int CMsg3DTransformPerspectiveOrigin_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformPerspectiveOrigin_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformPerspectiveOrigin_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::MergeFrom(const CMsg3DTransformPerspectiveOrigin_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgPoint::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::CopyFrom(const CMsg3DTransformPerspectiveOrigin_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformPerspectiveOrigin_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsg3DTransformPerspectiveOrigin_AnimationFrameData::Swap(CMsg3DTransformPerspectiveOrigin_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformPerspectiveOrigin_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformPerspectiveOrigin_AnimationFrameData_descriptor_;
  metadata.reflection = CMsg3DTransformPerspectiveOrigin_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsg3DTransformPerspectiveOrigin::kBaseFieldNumber;
const int CMsg3DTransformPerspectiveOrigin::kTransitionFieldNumber;
const int CMsg3DTransformPerspectiveOrigin::kTransitionDataFieldNumber;
const int CMsg3DTransformPerspectiveOrigin::kStyleSymbolFieldNumber;
const int CMsg3DTransformPerspectiveOrigin::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsg3DTransformPerspectiveOrigin::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsg3DTransformPerspectiveOrigin_AnimationFrameData >, 11, false >
  CMsg3DTransformPerspectiveOrigin::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsg3DTransformPerspectiveOrigin_AnimationFrameData::default_instance());
CMsg3DTransformPerspectiveOrigin::CMsg3DTransformPerspectiveOrigin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformPerspectiveOrigin)
}

void CMsg3DTransformPerspectiveOrigin::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsg3DTransformPerspectiveOrigin::CMsg3DTransformPerspectiveOrigin(const CMsg3DTransformPerspectiveOrigin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformPerspectiveOrigin)
}

void CMsg3DTransformPerspectiveOrigin::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformPerspectiveOrigin::~CMsg3DTransformPerspectiveOrigin() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformPerspectiveOrigin)
  SharedDtor();
}

void CMsg3DTransformPerspectiveOrigin::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
  }
}

void CMsg3DTransformPerspectiveOrigin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformPerspectiveOrigin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformPerspectiveOrigin_descriptor_;
}

const CMsg3DTransformPerspectiveOrigin& CMsg3DTransformPerspectiveOrigin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformPerspectiveOrigin* CMsg3DTransformPerspectiveOrigin::default_instance_ = NULL;

CMsg3DTransformPerspectiveOrigin* CMsg3DTransformPerspectiveOrigin::New() const {
  return new CMsg3DTransformPerspectiveOrigin;
}

void CMsg3DTransformPerspectiveOrigin::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgPoint::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgPoint::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformPerspectiveOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformPerspectiveOrigin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgPoint transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformPerspectiveOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformPerspectiveOrigin)
  return false;
#undef DO_
}

void CMsg3DTransformPerspectiveOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformPerspectiveOrigin)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformPerspectiveOrigin)
}

::google::protobuf::uint8* CMsg3DTransformPerspectiveOrigin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformPerspectiveOrigin)
  // optional .CMsgPoint base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgPoint transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformPerspectiveOrigin)
  return target;
}

int CMsg3DTransformPerspectiveOrigin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgPoint transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformPerspectiveOrigin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformPerspectiveOrigin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformPerspectiveOrigin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformPerspectiveOrigin::MergeFrom(const CMsg3DTransformPerspectiveOrigin& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgPoint::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgPoint::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformPerspectiveOrigin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformPerspectiveOrigin::CopyFrom(const CMsg3DTransformPerspectiveOrigin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformPerspectiveOrigin::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsg3DTransformPerspectiveOrigin::Swap(CMsg3DTransformPerspectiveOrigin* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformPerspectiveOrigin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformPerspectiveOrigin_descriptor_;
  metadata.reflection = CMsg3DTransformPerspectiveOrigin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTransformOriginData::kXFieldNumber;
const int CMsgTransformOriginData::kYFieldNumber;
const int CMsgTransformOriginData::kXIsPercentFieldNumber;
const int CMsgTransformOriginData::kYIsPercentFieldNumber;
const int CMsgTransformOriginData::kIsParentRelativeFieldNumber;
#endif  // !_MSC_VER

CMsgTransformOriginData::CMsgTransformOriginData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTransformOriginData)
}

void CMsgTransformOriginData::InitAsDefaultInstance() {
}

CMsgTransformOriginData::CMsgTransformOriginData(const CMsgTransformOriginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTransformOriginData)
}

void CMsgTransformOriginData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  x_is_percent_ = false;
  y_is_percent_ = false;
  is_parent_relative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTransformOriginData::~CMsgTransformOriginData() {
  // @@protoc_insertion_point(destructor:CMsgTransformOriginData)
  SharedDtor();
}

void CMsgTransformOriginData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTransformOriginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTransformOriginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTransformOriginData_descriptor_;
}

const CMsgTransformOriginData& CMsgTransformOriginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTransformOriginData* CMsgTransformOriginData::default_instance_ = NULL;

CMsgTransformOriginData* CMsgTransformOriginData::New() const {
  return new CMsgTransformOriginData;
}

void CMsgTransformOriginData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTransformOriginData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, is_parent_relative_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTransformOriginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTransformOriginData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x_is_percent;
        break;
      }

      // optional bool x_is_percent = 3;
      case 3: {
        if (tag == 24) {
         parse_x_is_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &x_is_percent_)));
          set_has_x_is_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y_is_percent;
        break;
      }

      // optional bool y_is_percent = 4;
      case 4: {
        if (tag == 32) {
         parse_y_is_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &y_is_percent_)));
          set_has_y_is_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_parent_relative;
        break;
      }

      // optional bool is_parent_relative = 5;
      case 5: {
        if (tag == 40) {
         parse_is_parent_relative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_relative_)));
          set_has_is_parent_relative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTransformOriginData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTransformOriginData)
  return false;
#undef DO_
}

void CMsgTransformOriginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTransformOriginData)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional bool x_is_percent = 3;
  if (has_x_is_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->x_is_percent(), output);
  }

  // optional bool y_is_percent = 4;
  if (has_y_is_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->y_is_percent(), output);
  }

  // optional bool is_parent_relative = 5;
  if (has_is_parent_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_parent_relative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTransformOriginData)
}

::google::protobuf::uint8* CMsgTransformOriginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTransformOriginData)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional bool x_is_percent = 3;
  if (has_x_is_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->x_is_percent(), target);
  }

  // optional bool y_is_percent = 4;
  if (has_y_is_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->y_is_percent(), target);
  }

  // optional bool is_parent_relative = 5;
  if (has_is_parent_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_parent_relative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTransformOriginData)
  return target;
}

int CMsgTransformOriginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional bool x_is_percent = 3;
    if (has_x_is_percent()) {
      total_size += 1 + 1;
    }

    // optional bool y_is_percent = 4;
    if (has_y_is_percent()) {
      total_size += 1 + 1;
    }

    // optional bool is_parent_relative = 5;
    if (has_is_parent_relative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTransformOriginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTransformOriginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTransformOriginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTransformOriginData::MergeFrom(const CMsgTransformOriginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_x_is_percent()) {
      set_x_is_percent(from.x_is_percent());
    }
    if (from.has_y_is_percent()) {
      set_y_is_percent(from.y_is_percent());
    }
    if (from.has_is_parent_relative()) {
      set_is_parent_relative(from.is_parent_relative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTransformOriginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTransformOriginData::CopyFrom(const CMsgTransformOriginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTransformOriginData::IsInitialized() const {

  return true;
}

void CMsgTransformOriginData::Swap(CMsgTransformOriginData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(x_is_percent_, other->x_is_percent_);
    std::swap(y_is_percent_, other->y_is_percent_);
    std::swap(is_parent_relative_, other->is_parent_relative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTransformOriginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTransformOriginData_descriptor_;
  metadata.reflection = CMsgTransformOriginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsg3DTransformOrigin_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsg3DTransformOrigin_AnimationFrameData::CMsg3DTransformOrigin_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformOrigin.AnimationFrameData)
}

void CMsg3DTransformOrigin_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgTransformOriginData*>(&::CMsgTransformOriginData::default_instance());
}

CMsg3DTransformOrigin_AnimationFrameData::CMsg3DTransformOrigin_AnimationFrameData(const CMsg3DTransformOrigin_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformOrigin.AnimationFrameData)
}

void CMsg3DTransformOrigin_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformOrigin_AnimationFrameData::~CMsg3DTransformOrigin_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformOrigin.AnimationFrameData)
  SharedDtor();
}

void CMsg3DTransformOrigin_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsg3DTransformOrigin_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformOrigin_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformOrigin_AnimationFrameData_descriptor_;
}

const CMsg3DTransformOrigin_AnimationFrameData& CMsg3DTransformOrigin_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformOrigin_AnimationFrameData* CMsg3DTransformOrigin_AnimationFrameData::default_instance_ = NULL;

CMsg3DTransformOrigin_AnimationFrameData* CMsg3DTransformOrigin_AnimationFrameData::New() const {
  return new CMsg3DTransformOrigin_AnimationFrameData;
}

void CMsg3DTransformOrigin_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgTransformOriginData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformOrigin_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformOrigin.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgTransformOriginData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformOrigin.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformOrigin.AnimationFrameData)
  return false;
#undef DO_
}

void CMsg3DTransformOrigin_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformOrigin.AnimationFrameData)
  // optional .CMsgTransformOriginData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformOrigin.AnimationFrameData)
}

::google::protobuf::uint8* CMsg3DTransformOrigin_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformOrigin.AnimationFrameData)
  // optional .CMsgTransformOriginData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformOrigin.AnimationFrameData)
  return target;
}

int CMsg3DTransformOrigin_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgTransformOriginData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformOrigin_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformOrigin_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformOrigin_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformOrigin_AnimationFrameData::MergeFrom(const CMsg3DTransformOrigin_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgTransformOriginData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformOrigin_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformOrigin_AnimationFrameData::CopyFrom(const CMsg3DTransformOrigin_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformOrigin_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsg3DTransformOrigin_AnimationFrameData::Swap(CMsg3DTransformOrigin_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformOrigin_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformOrigin_AnimationFrameData_descriptor_;
  metadata.reflection = CMsg3DTransformOrigin_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsg3DTransformOrigin::kBaseFieldNumber;
const int CMsg3DTransformOrigin::kTransitionFieldNumber;
const int CMsg3DTransformOrigin::kTransitionDataFieldNumber;
const int CMsg3DTransformOrigin::kStyleSymbolFieldNumber;
const int CMsg3DTransformOrigin::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsg3DTransformOrigin::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsg3DTransformOrigin_AnimationFrameData >, 11, false >
  CMsg3DTransformOrigin::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsg3DTransformOrigin_AnimationFrameData::default_instance());
CMsg3DTransformOrigin::CMsg3DTransformOrigin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformOrigin)
}

void CMsg3DTransformOrigin::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgTransformOriginData*>(&::CMsgTransformOriginData::default_instance());
  transition_ = const_cast< ::CMsgTransformOriginData*>(&::CMsgTransformOriginData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
}

CMsg3DTransformOrigin::CMsg3DTransformOrigin(const CMsg3DTransformOrigin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformOrigin)
}

void CMsg3DTransformOrigin::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_ = NULL;
  transition_data_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformOrigin::~CMsg3DTransformOrigin() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformOrigin)
  SharedDtor();
}

void CMsg3DTransformOrigin::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_;
    delete transition_data_;
  }
}

void CMsg3DTransformOrigin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformOrigin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformOrigin_descriptor_;
}

const CMsg3DTransformOrigin& CMsg3DTransformOrigin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformOrigin* CMsg3DTransformOrigin::default_instance_ = NULL;

CMsg3DTransformOrigin* CMsg3DTransformOrigin::New() const {
  return new CMsg3DTransformOrigin;
}

void CMsg3DTransformOrigin::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgTransformOriginData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgTransformOriginData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformOrigin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformOrigin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgTransformOriginData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .CMsgTransformOriginData transition = 2;
      case 2: {
        if (tag == 18) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformOrigin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformOrigin)
  return false;
#undef DO_
}

void CMsg3DTransformOrigin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformOrigin)
  // optional .CMsgTransformOriginData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransformOriginData transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_data(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformOrigin)
}

::google::protobuf::uint8* CMsg3DTransformOrigin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformOrigin)
  // optional .CMsgTransformOriginData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransformOriginData transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional .CMsgTransitionData transition_data = 3;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_data(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformOrigin)
  return target;
}

int CMsg3DTransformOrigin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgTransformOriginData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransformOriginData transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .CMsgTransitionData transition_data = 3;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformOrigin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformOrigin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformOrigin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformOrigin::MergeFrom(const CMsg3DTransformOrigin& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgTransformOriginData::MergeFrom(from.base());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgTransformOriginData::MergeFrom(from.transition());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformOrigin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformOrigin::CopyFrom(const CMsg3DTransformOrigin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformOrigin::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsg3DTransformOrigin::Swap(CMsg3DTransformOrigin* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_, other->transition_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformOrigin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformOrigin_descriptor_;
  metadata.reflection = CMsg3DTransformOrigin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsg3DTransformMatrix_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsg3DTransformMatrix_AnimationFrameData::CMsg3DTransformMatrix_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformMatrix.AnimationFrameData)
}

void CMsg3DTransformMatrix_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgMatrix4x4*>(&::CMsgMatrix4x4::default_instance());
}

CMsg3DTransformMatrix_AnimationFrameData::CMsg3DTransformMatrix_AnimationFrameData(const CMsg3DTransformMatrix_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformMatrix.AnimationFrameData)
}

void CMsg3DTransformMatrix_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformMatrix_AnimationFrameData::~CMsg3DTransformMatrix_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformMatrix.AnimationFrameData)
  SharedDtor();
}

void CMsg3DTransformMatrix_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsg3DTransformMatrix_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformMatrix_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformMatrix_AnimationFrameData_descriptor_;
}

const CMsg3DTransformMatrix_AnimationFrameData& CMsg3DTransformMatrix_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformMatrix_AnimationFrameData* CMsg3DTransformMatrix_AnimationFrameData::default_instance_ = NULL;

CMsg3DTransformMatrix_AnimationFrameData* CMsg3DTransformMatrix_AnimationFrameData::New() const {
  return new CMsg3DTransformMatrix_AnimationFrameData;
}

void CMsg3DTransformMatrix_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgMatrix4x4::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformMatrix_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformMatrix.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgMatrix4x4 data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformMatrix.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformMatrix.AnimationFrameData)
  return false;
#undef DO_
}

void CMsg3DTransformMatrix_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformMatrix.AnimationFrameData)
  // optional .CMsgMatrix4x4 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformMatrix.AnimationFrameData)
}

::google::protobuf::uint8* CMsg3DTransformMatrix_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformMatrix.AnimationFrameData)
  // optional .CMsgMatrix4x4 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformMatrix.AnimationFrameData)
  return target;
}

int CMsg3DTransformMatrix_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgMatrix4x4 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformMatrix_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformMatrix_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformMatrix_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformMatrix_AnimationFrameData::MergeFrom(const CMsg3DTransformMatrix_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgMatrix4x4::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformMatrix_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformMatrix_AnimationFrameData::CopyFrom(const CMsg3DTransformMatrix_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformMatrix_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsg3DTransformMatrix_AnimationFrameData::Swap(CMsg3DTransformMatrix_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformMatrix_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformMatrix_AnimationFrameData_descriptor_;
  metadata.reflection = CMsg3DTransformMatrix_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsg3DTransformMatrix::kBaseFieldNumber;
const int CMsg3DTransformMatrix::kTransitionDataFieldNumber;
const int CMsg3DTransformMatrix::kTransitionFieldNumber;
const int CMsg3DTransformMatrix::kStyleSymbolFieldNumber;
const int CMsg3DTransformMatrix::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsg3DTransformMatrix::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsg3DTransformMatrix_AnimationFrameData >, 11, false >
  CMsg3DTransformMatrix::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsg3DTransformMatrix_AnimationFrameData::default_instance());
CMsg3DTransformMatrix::CMsg3DTransformMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg3DTransformMatrix)
}

void CMsg3DTransformMatrix::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgMatrix4x4*>(&::CMsgMatrix4x4::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CMsgMatrix4x4*>(&::CMsgMatrix4x4::default_instance());
}

CMsg3DTransformMatrix::CMsg3DTransformMatrix(const CMsg3DTransformMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsg3DTransformMatrix)
}

void CMsg3DTransformMatrix::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsg3DTransformMatrix::~CMsg3DTransformMatrix() {
  // @@protoc_insertion_point(destructor:CMsg3DTransformMatrix)
  SharedDtor();
}

void CMsg3DTransformMatrix::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsg3DTransformMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg3DTransformMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsg3DTransformMatrix_descriptor_;
}

const CMsg3DTransformMatrix& CMsg3DTransformMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsg3DTransformMatrix* CMsg3DTransformMatrix::default_instance_ = NULL;

CMsg3DTransformMatrix* CMsg3DTransformMatrix::New() const {
  return new CMsg3DTransformMatrix;
}

void CMsg3DTransformMatrix::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgMatrix4x4::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgMatrix4x4::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsg3DTransformMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg3DTransformMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgMatrix4x4 base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CMsgMatrix4x4 transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg3DTransformMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg3DTransformMatrix)
  return false;
#undef DO_
}

void CMsg3DTransformMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg3DTransformMatrix)
  // optional .CMsgMatrix4x4 base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CMsgMatrix4x4 transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg3DTransformMatrix)
}

::google::protobuf::uint8* CMsg3DTransformMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg3DTransformMatrix)
  // optional .CMsgMatrix4x4 base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CMsgMatrix4x4 transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg3DTransformMatrix)
  return target;
}

int CMsg3DTransformMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgMatrix4x4 base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CMsgMatrix4x4 transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg3DTransformMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsg3DTransformMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsg3DTransformMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsg3DTransformMatrix::MergeFrom(const CMsg3DTransformMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgMatrix4x4::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgMatrix4x4::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsg3DTransformMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg3DTransformMatrix::CopyFrom(const CMsg3DTransformMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg3DTransformMatrix::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsg3DTransformMatrix::Swap(CMsg3DTransformMatrix* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsg3DTransformMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsg3DTransformMatrix_descriptor_;
  metadata.reflection = CMsg3DTransformMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBorderRadius_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgBorderRadius_AnimationFrameData::CMsgBorderRadius_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBorderRadius.AnimationFrameData)
}

void CMsgBorderRadius_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CRadiusData*>(&::CRadiusData::default_instance());
}

CMsgBorderRadius_AnimationFrameData::CMsgBorderRadius_AnimationFrameData(const CMsgBorderRadius_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBorderRadius.AnimationFrameData)
}

void CMsgBorderRadius_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBorderRadius_AnimationFrameData::~CMsgBorderRadius_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgBorderRadius.AnimationFrameData)
  SharedDtor();
}

void CMsgBorderRadius_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgBorderRadius_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBorderRadius_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBorderRadius_AnimationFrameData_descriptor_;
}

const CMsgBorderRadius_AnimationFrameData& CMsgBorderRadius_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBorderRadius_AnimationFrameData* CMsgBorderRadius_AnimationFrameData::default_instance_ = NULL;

CMsgBorderRadius_AnimationFrameData* CMsgBorderRadius_AnimationFrameData::New() const {
  return new CMsgBorderRadius_AnimationFrameData;
}

void CMsgBorderRadius_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CRadiusData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBorderRadius_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBorderRadius.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CRadiusData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBorderRadius.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBorderRadius.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgBorderRadius_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBorderRadius.AnimationFrameData)
  // optional .CRadiusData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBorderRadius.AnimationFrameData)
}

::google::protobuf::uint8* CMsgBorderRadius_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBorderRadius.AnimationFrameData)
  // optional .CRadiusData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBorderRadius.AnimationFrameData)
  return target;
}

int CMsgBorderRadius_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CRadiusData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBorderRadius_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBorderRadius_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBorderRadius_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBorderRadius_AnimationFrameData::MergeFrom(const CMsgBorderRadius_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CRadiusData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBorderRadius_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBorderRadius_AnimationFrameData::CopyFrom(const CMsgBorderRadius_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBorderRadius_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgBorderRadius_AnimationFrameData::Swap(CMsgBorderRadius_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBorderRadius_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBorderRadius_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgBorderRadius_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgBorderRadius::kBaseFieldNumber;
const int CMsgBorderRadius::kTransitionDataFieldNumber;
const int CMsgBorderRadius::kTransitionFieldNumber;
const int CMsgBorderRadius::kStyleSymbolFieldNumber;
const int CMsgBorderRadius::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgBorderRadius::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgBorderRadius_AnimationFrameData >, 11, false >
  CMsgBorderRadius::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgBorderRadius_AnimationFrameData::default_instance());
CMsgBorderRadius::CMsgBorderRadius()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBorderRadius)
}

void CMsgBorderRadius::InitAsDefaultInstance() {
  base_ = const_cast< ::CRadiusData*>(&::CRadiusData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CRadiusData*>(&::CRadiusData::default_instance());
}

CMsgBorderRadius::CMsgBorderRadius(const CMsgBorderRadius& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBorderRadius)
}

void CMsgBorderRadius::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBorderRadius::~CMsgBorderRadius() {
  // @@protoc_insertion_point(destructor:CMsgBorderRadius)
  SharedDtor();
}

void CMsgBorderRadius::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsgBorderRadius::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBorderRadius::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBorderRadius_descriptor_;
}

const CMsgBorderRadius& CMsgBorderRadius::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBorderRadius* CMsgBorderRadius::default_instance_ = NULL;

CMsgBorderRadius* CMsgBorderRadius::New() const {
  return new CMsgBorderRadius;
}

void CMsgBorderRadius::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CRadiusData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CRadiusData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBorderRadius::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBorderRadius)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CRadiusData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CRadiusData transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBorderRadius)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBorderRadius)
  return false;
#undef DO_
}

void CMsgBorderRadius::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBorderRadius)
  // optional .CRadiusData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CRadiusData transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBorderRadius)
}

::google::protobuf::uint8* CMsgBorderRadius::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBorderRadius)
  // optional .CRadiusData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CRadiusData transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBorderRadius)
  return target;
}

int CMsgBorderRadius::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CRadiusData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CRadiusData transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBorderRadius::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBorderRadius* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBorderRadius*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBorderRadius::MergeFrom(const CMsgBorderRadius& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CRadiusData::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CRadiusData::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBorderRadius::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBorderRadius::CopyFrom(const CMsgBorderRadius& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBorderRadius::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgBorderRadius::Swap(CMsgBorderRadius* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBorderRadius::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBorderRadius_descriptor_;
  metadata.reflection = CMsgBorderRadius_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBorder_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgBorder_AnimationFrameData::CMsgBorder_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBorder.AnimationFrameData)
}

void CMsgBorder_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CBorderData*>(&::CBorderData::default_instance());
}

CMsgBorder_AnimationFrameData::CMsgBorder_AnimationFrameData(const CMsgBorder_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBorder.AnimationFrameData)
}

void CMsgBorder_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBorder_AnimationFrameData::~CMsgBorder_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgBorder.AnimationFrameData)
  SharedDtor();
}

void CMsgBorder_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgBorder_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBorder_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBorder_AnimationFrameData_descriptor_;
}

const CMsgBorder_AnimationFrameData& CMsgBorder_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBorder_AnimationFrameData* CMsgBorder_AnimationFrameData::default_instance_ = NULL;

CMsgBorder_AnimationFrameData* CMsgBorder_AnimationFrameData::New() const {
  return new CMsgBorder_AnimationFrameData;
}

void CMsgBorder_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CBorderData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBorder_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBorder.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBorderData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBorder.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBorder.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgBorder_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBorder.AnimationFrameData)
  // optional .CBorderData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBorder.AnimationFrameData)
}

::google::protobuf::uint8* CMsgBorder_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBorder.AnimationFrameData)
  // optional .CBorderData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBorder.AnimationFrameData)
  return target;
}

int CMsgBorder_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBorderData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBorder_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBorder_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBorder_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBorder_AnimationFrameData::MergeFrom(const CMsgBorder_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CBorderData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBorder_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBorder_AnimationFrameData::CopyFrom(const CMsgBorder_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBorder_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgBorder_AnimationFrameData::Swap(CMsgBorder_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBorder_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBorder_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgBorder_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgBorder::kBaseFieldNumber;
const int CMsgBorder::kTransitionDataFieldNumber;
const int CMsgBorder::kTransitionFieldNumber;
const int CMsgBorder::kStyleSymbolFieldNumber;
const int CMsgBorder::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgBorder::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgBorder_AnimationFrameData >, 11, false >
  CMsgBorder::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgBorder_AnimationFrameData::default_instance());
CMsgBorder::CMsgBorder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBorder)
}

void CMsgBorder::InitAsDefaultInstance() {
  base_ = const_cast< ::CBorderData*>(&::CBorderData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CBorderData*>(&::CBorderData::default_instance());
}

CMsgBorder::CMsgBorder(const CMsgBorder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBorder)
}

void CMsgBorder::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBorder::~CMsgBorder() {
  // @@protoc_insertion_point(destructor:CMsgBorder)
  SharedDtor();
}

void CMsgBorder::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsgBorder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBorder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBorder_descriptor_;
}

const CMsgBorder& CMsgBorder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBorder* CMsgBorder::default_instance_ = NULL;

CMsgBorder* CMsgBorder::New() const {
  return new CMsgBorder;
}

void CMsgBorder::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CBorderData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CBorderData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBorder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBorder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBorderData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CBorderData transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBorder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBorder)
  return false;
#undef DO_
}

void CMsgBorder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBorder)
  // optional .CBorderData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CBorderData transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBorder)
}

::google::protobuf::uint8* CMsgBorder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBorder)
  // optional .CBorderData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CBorderData transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBorder)
  return target;
}

int CMsgBorder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBorderData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CBorderData transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBorder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBorder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBorder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBorder::MergeFrom(const CMsgBorder& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CBorderData::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CBorderData::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBorder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBorder::CopyFrom(const CMsgBorder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBorder::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgBorder::Swap(CMsgBorder* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBorder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBorder_descriptor_;
  metadata.reflection = CMsgBorder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBoxShadow_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgBoxShadow_AnimationFrameData::CMsgBoxShadow_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBoxShadow.AnimationFrameData)
}

void CMsgBoxShadow_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CBoxShadowData*>(&::CBoxShadowData::default_instance());
}

CMsgBoxShadow_AnimationFrameData::CMsgBoxShadow_AnimationFrameData(const CMsgBoxShadow_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBoxShadow.AnimationFrameData)
}

void CMsgBoxShadow_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBoxShadow_AnimationFrameData::~CMsgBoxShadow_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgBoxShadow.AnimationFrameData)
  SharedDtor();
}

void CMsgBoxShadow_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgBoxShadow_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBoxShadow_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBoxShadow_AnimationFrameData_descriptor_;
}

const CMsgBoxShadow_AnimationFrameData& CMsgBoxShadow_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBoxShadow_AnimationFrameData* CMsgBoxShadow_AnimationFrameData::default_instance_ = NULL;

CMsgBoxShadow_AnimationFrameData* CMsgBoxShadow_AnimationFrameData::New() const {
  return new CMsgBoxShadow_AnimationFrameData;
}

void CMsgBoxShadow_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CBoxShadowData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBoxShadow_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBoxShadow.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBoxShadowData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBoxShadow.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBoxShadow.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgBoxShadow_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBoxShadow.AnimationFrameData)
  // optional .CBoxShadowData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBoxShadow.AnimationFrameData)
}

::google::protobuf::uint8* CMsgBoxShadow_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBoxShadow.AnimationFrameData)
  // optional .CBoxShadowData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBoxShadow.AnimationFrameData)
  return target;
}

int CMsgBoxShadow_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBoxShadowData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBoxShadow_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBoxShadow_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBoxShadow_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBoxShadow_AnimationFrameData::MergeFrom(const CMsgBoxShadow_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CBoxShadowData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBoxShadow_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBoxShadow_AnimationFrameData::CopyFrom(const CMsgBoxShadow_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBoxShadow_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgBoxShadow_AnimationFrameData::Swap(CMsgBoxShadow_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBoxShadow_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBoxShadow_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgBoxShadow_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgBoxShadow::kBaseFieldNumber;
const int CMsgBoxShadow::kTransitionDataFieldNumber;
const int CMsgBoxShadow::kTransitionFieldNumber;
const int CMsgBoxShadow::kStyleSymbolFieldNumber;
const int CMsgBoxShadow::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgBoxShadow::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgBoxShadow_AnimationFrameData >, 11, false >
  CMsgBoxShadow::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgBoxShadow_AnimationFrameData::default_instance());
CMsgBoxShadow::CMsgBoxShadow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBoxShadow)
}

void CMsgBoxShadow::InitAsDefaultInstance() {
  base_ = const_cast< ::CBoxShadowData*>(&::CBoxShadowData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CBoxShadowData*>(&::CBoxShadowData::default_instance());
}

CMsgBoxShadow::CMsgBoxShadow(const CMsgBoxShadow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBoxShadow)
}

void CMsgBoxShadow::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBoxShadow::~CMsgBoxShadow() {
  // @@protoc_insertion_point(destructor:CMsgBoxShadow)
  SharedDtor();
}

void CMsgBoxShadow::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsgBoxShadow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBoxShadow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBoxShadow_descriptor_;
}

const CMsgBoxShadow& CMsgBoxShadow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBoxShadow* CMsgBoxShadow::default_instance_ = NULL;

CMsgBoxShadow* CMsgBoxShadow::New() const {
  return new CMsgBoxShadow;
}

void CMsgBoxShadow::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CBoxShadowData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CBoxShadowData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBoxShadow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBoxShadow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CBoxShadowData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CBoxShadowData transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBoxShadow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBoxShadow)
  return false;
#undef DO_
}

void CMsgBoxShadow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBoxShadow)
  // optional .CBoxShadowData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CBoxShadowData transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBoxShadow)
}

::google::protobuf::uint8* CMsgBoxShadow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBoxShadow)
  // optional .CBoxShadowData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CBoxShadowData transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBoxShadow)
  return target;
}

int CMsgBoxShadow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CBoxShadowData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CBoxShadowData transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBoxShadow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBoxShadow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBoxShadow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBoxShadow::MergeFrom(const CMsgBoxShadow& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CBoxShadowData::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CBoxShadowData::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBoxShadow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBoxShadow::CopyFrom(const CMsgBoxShadow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBoxShadow::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgBoxShadow::Swap(CMsgBoxShadow* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBoxShadow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBoxShadow_descriptor_;
  metadata.reflection = CMsgBoxShadow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTextShadow_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgTextShadow_AnimationFrameData::CMsgTextShadow_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTextShadow.AnimationFrameData)
}

void CMsgTextShadow_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CTextShadowData*>(&::CTextShadowData::default_instance());
}

CMsgTextShadow_AnimationFrameData::CMsgTextShadow_AnimationFrameData(const CMsgTextShadow_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTextShadow.AnimationFrameData)
}

void CMsgTextShadow_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTextShadow_AnimationFrameData::~CMsgTextShadow_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgTextShadow.AnimationFrameData)
  SharedDtor();
}

void CMsgTextShadow_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgTextShadow_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTextShadow_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTextShadow_AnimationFrameData_descriptor_;
}

const CMsgTextShadow_AnimationFrameData& CMsgTextShadow_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTextShadow_AnimationFrameData* CMsgTextShadow_AnimationFrameData::default_instance_ = NULL;

CMsgTextShadow_AnimationFrameData* CMsgTextShadow_AnimationFrameData::New() const {
  return new CMsgTextShadow_AnimationFrameData;
}

void CMsgTextShadow_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CTextShadowData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTextShadow_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTextShadow.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CTextShadowData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTextShadow.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTextShadow.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgTextShadow_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTextShadow.AnimationFrameData)
  // optional .CTextShadowData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTextShadow.AnimationFrameData)
}

::google::protobuf::uint8* CMsgTextShadow_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTextShadow.AnimationFrameData)
  // optional .CTextShadowData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTextShadow.AnimationFrameData)
  return target;
}

int CMsgTextShadow_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CTextShadowData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTextShadow_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTextShadow_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTextShadow_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTextShadow_AnimationFrameData::MergeFrom(const CMsgTextShadow_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CTextShadowData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTextShadow_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTextShadow_AnimationFrameData::CopyFrom(const CMsgTextShadow_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTextShadow_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgTextShadow_AnimationFrameData::Swap(CMsgTextShadow_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTextShadow_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTextShadow_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgTextShadow_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgTextShadow::kBaseFieldNumber;
const int CMsgTextShadow::kTransitionDataFieldNumber;
const int CMsgTextShadow::kTransitionFieldNumber;
const int CMsgTextShadow::kStyleSymbolFieldNumber;
const int CMsgTextShadow::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgTextShadow::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgTextShadow_AnimationFrameData >, 11, false >
  CMsgTextShadow::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgTextShadow_AnimationFrameData::default_instance());
CMsgTextShadow::CMsgTextShadow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTextShadow)
}

void CMsgTextShadow::InitAsDefaultInstance() {
  base_ = const_cast< ::CTextShadowData*>(&::CTextShadowData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CTextShadowData*>(&::CTextShadowData::default_instance());
}

CMsgTextShadow::CMsgTextShadow(const CMsgTextShadow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTextShadow)
}

void CMsgTextShadow::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTextShadow::~CMsgTextShadow() {
  // @@protoc_insertion_point(destructor:CMsgTextShadow)
  SharedDtor();
}

void CMsgTextShadow::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsgTextShadow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTextShadow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTextShadow_descriptor_;
}

const CMsgTextShadow& CMsgTextShadow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTextShadow* CMsgTextShadow::default_instance_ = NULL;

CMsgTextShadow* CMsgTextShadow::New() const {
  return new CMsgTextShadow;
}

void CMsgTextShadow::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CTextShadowData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CTextShadowData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTextShadow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTextShadow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CTextShadowData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CTextShadowData transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTextShadow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTextShadow)
  return false;
#undef DO_
}

void CMsgTextShadow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTextShadow)
  // optional .CTextShadowData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CTextShadowData transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTextShadow)
}

::google::protobuf::uint8* CMsgTextShadow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTextShadow)
  // optional .CTextShadowData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CTextShadowData transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTextShadow)
  return target;
}

int CMsgTextShadow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CTextShadowData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CTextShadowData transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTextShadow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTextShadow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTextShadow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTextShadow::MergeFrom(const CMsgTextShadow& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CTextShadowData::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CTextShadowData::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTextShadow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTextShadow::CopyFrom(const CMsgTextShadow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTextShadow::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgTextShadow::Swap(CMsgTextShadow* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTextShadow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTextShadow_descriptor_;
  metadata.reflection = CMsgTextShadow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClip_AnimationFrameData::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClip_AnimationFrameData::CMsgClip_AnimationFrameData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClip.AnimationFrameData)
}

void CMsgClip_AnimationFrameData::InitAsDefaultInstance() {
  data_ = const_cast< ::CMsgClipData*>(&::CMsgClipData::default_instance());
}

CMsgClip_AnimationFrameData::CMsgClip_AnimationFrameData(const CMsgClip_AnimationFrameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClip.AnimationFrameData)
}

void CMsgClip_AnimationFrameData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClip_AnimationFrameData::~CMsgClip_AnimationFrameData() {
  // @@protoc_insertion_point(destructor:CMsgClip.AnimationFrameData)
  SharedDtor();
}

void CMsgClip_AnimationFrameData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CMsgClip_AnimationFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClip_AnimationFrameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClip_AnimationFrameData_descriptor_;
}

const CMsgClip_AnimationFrameData& CMsgClip_AnimationFrameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgClip_AnimationFrameData* CMsgClip_AnimationFrameData::default_instance_ = NULL;

CMsgClip_AnimationFrameData* CMsgClip_AnimationFrameData::New() const {
  return new CMsgClip_AnimationFrameData;
}

void CMsgClip_AnimationFrameData::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::CMsgClipData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClip_AnimationFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClip.AnimationFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgClipData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClip.AnimationFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClip.AnimationFrameData)
  return false;
#undef DO_
}

void CMsgClip_AnimationFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClip.AnimationFrameData)
  // optional .CMsgClipData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClip.AnimationFrameData)
}

::google::protobuf::uint8* CMsgClip_AnimationFrameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClip.AnimationFrameData)
  // optional .CMsgClipData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClip.AnimationFrameData)
  return target;
}

int CMsgClip_AnimationFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgClipData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClip_AnimationFrameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClip_AnimationFrameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClip_AnimationFrameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClip_AnimationFrameData::MergeFrom(const CMsgClip_AnimationFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::CMsgClipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClip_AnimationFrameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClip_AnimationFrameData::CopyFrom(const CMsgClip_AnimationFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClip_AnimationFrameData::IsInitialized() const {

  return true;
}

void CMsgClip_AnimationFrameData::Swap(CMsgClip_AnimationFrameData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClip_AnimationFrameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClip_AnimationFrameData_descriptor_;
  metadata.reflection = CMsgClip_AnimationFrameData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClip::kBaseFieldNumber;
const int CMsgClip::kTransitionDataFieldNumber;
const int CMsgClip::kTransitionFieldNumber;
const int CMsgClip::kStyleSymbolFieldNumber;
const int CMsgClip::kAnimationsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CMsgClip::kAnimationFrameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::CMsgAnimationFrameData,
    ::google::protobuf::internal::MessageTypeTraits< ::CMsgClip_AnimationFrameData >, 11, false >
  CMsgClip::animation_frame_data(kAnimationFrameDataFieldNumber, ::CMsgClip_AnimationFrameData::default_instance());
CMsgClip::CMsgClip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgClip)
}

void CMsgClip::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgClipData*>(&::CMsgClipData::default_instance());
  transition_data_ = const_cast< ::CMsgTransitionData*>(&::CMsgTransitionData::default_instance());
  transition_ = const_cast< ::CMsgClipData*>(&::CMsgClipData::default_instance());
}

CMsgClip::CMsgClip(const CMsgClip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgClip)
}

void CMsgClip::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  transition_data_ = NULL;
  transition_ = NULL;
  style_symbol_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClip::~CMsgClip() {
  // @@protoc_insertion_point(destructor:CMsgClip)
  SharedDtor();
}

void CMsgClip::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete transition_data_;
    delete transition_;
  }
}

void CMsgClip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClip_descriptor_;
}

const CMsgClip& CMsgClip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgClip* CMsgClip::default_instance_ = NULL;

CMsgClip* CMsgClip::New() const {
  return new CMsgClip;
}

void CMsgClip::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgClipData::Clear();
    }
    if (has_transition_data()) {
      if (transition_data_ != NULL) transition_data_->::CMsgTransitionData::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::CMsgClipData::Clear();
    }
    style_symbol_ = 0u;
  }
  animations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgClip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgClipData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transition_data;
        break;
      }

      // optional .CMsgTransitionData transition_data = 2;
      case 2: {
        if (tag == 18) {
         parse_transition_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition;
        break;
      }

      // optional .CMsgClipData transition = 3;
      case 3: {
        if (tag == 26) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_symbol;
        break;
      }

      // optional uint32 style_symbol = 4;
      case 4: {
        if (tag == 32) {
         parse_style_symbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_symbol_)));
          set_has_style_symbol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        break;
      }

      // repeated .CMsgAnimationData animations = 5;
      case 5: {
        if (tag == 42) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgClip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgClip)
  return false;
#undef DO_
}

void CMsgClip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgClip)
  // optional .CMsgClipData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition_data(), output);
  }

  // optional .CMsgClipData transition = 3;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition(), output);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_symbol(), output);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgClip)
}

::google::protobuf::uint8* CMsgClip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClip)
  // optional .CMsgClipData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgTransitionData transition_data = 2;
  if (has_transition_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition_data(), target);
  }

  // optional .CMsgClipData transition = 3;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition(), target);
  }

  // optional uint32 style_symbol = 4;
  if (has_style_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_symbol(), target);
  }

  // repeated .CMsgAnimationData animations = 5;
  for (int i = 0; i < this->animations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClip)
  return target;
}

int CMsgClip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgClipData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgTransitionData transition_data = 2;
    if (has_transition_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_data());
    }

    // optional .CMsgClipData transition = 3;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional uint32 style_symbol = 4;
    if (has_style_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_symbol());
    }

  }
  // repeated .CMsgAnimationData animations = 5;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClip::MergeFrom(const CMsgClip& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgClipData::MergeFrom(from.base());
    }
    if (from.has_transition_data()) {
      mutable_transition_data()->::CMsgTransitionData::MergeFrom(from.transition_data());
    }
    if (from.has_transition()) {
      mutable_transition()->::CMsgClipData::MergeFrom(from.transition());
    }
    if (from.has_style_symbol()) {
      set_style_symbol(from.style_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClip::CopyFrom(const CMsgClip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClip::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->animations())) return false;
  return true;
}

void CMsgClip::Swap(CMsgClip* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(transition_data_, other->transition_data_);
    std::swap(transition_, other->transition_);
    std::swap(style_symbol_, other->style_symbol_);
    animations_.Swap(&other->animations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClip_descriptor_;
  metadata.reflection = CMsgClip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPushClipLayer::kTopLeftFieldNumber;
const int CMsgPushClipLayer::kBottomRightFieldNumber;
const int CMsgPushClipLayer::kBorderRadiusFieldNumber;
#endif  // !_MSC_VER

CMsgPushClipLayer::CMsgPushClipLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPushClipLayer)
}

void CMsgPushClipLayer::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  border_radius_ = const_cast< ::CRadiusData*>(&::CRadiusData::default_instance());
}

CMsgPushClipLayer::CMsgPushClipLayer(const CMsgPushClipLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPushClipLayer)
}

void CMsgPushClipLayer::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  bottom_right_ = NULL;
  border_radius_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPushClipLayer::~CMsgPushClipLayer() {
  // @@protoc_insertion_point(destructor:CMsgPushClipLayer)
  SharedDtor();
}

void CMsgPushClipLayer::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete border_radius_;
  }
}

void CMsgPushClipLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPushClipLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPushClipLayer_descriptor_;
}

const CMsgPushClipLayer& CMsgPushClipLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPushClipLayer* CMsgPushClipLayer::default_instance_ = NULL;

CMsgPushClipLayer* CMsgPushClipLayer::New() const {
  return new CMsgPushClipLayer;
}

void CMsgPushClipLayer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_border_radius()) {
      if (border_radius_ != NULL) border_radius_->::CRadiusData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPushClipLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPushClipLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_border_radius;
        break;
      }

      // optional .CRadiusData border_radius = 3;
      case 3: {
        if (tag == 26) {
         parse_border_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border_radius()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPushClipLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPushClipLayer)
  return false;
#undef DO_
}

void CMsgPushClipLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPushClipLayer)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottom_right(), output);
  }

  // optional .CRadiusData border_radius = 3;
  if (has_border_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->border_radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPushClipLayer)
}

::google::protobuf::uint8* CMsgPushClipLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPushClipLayer)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottom_right(), target);
  }

  // optional .CRadiusData border_radius = 3;
  if (has_border_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->border_radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPushClipLayer)
  return target;
}

int CMsgPushClipLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 2;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional .CRadiusData border_radius = 3;
    if (has_border_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border_radius());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPushClipLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPushClipLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPushClipLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPushClipLayer::MergeFrom(const CMsgPushClipLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_border_radius()) {
      mutable_border_radius()->::CRadiusData::MergeFrom(from.border_radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPushClipLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPushClipLayer::CopyFrom(const CMsgPushClipLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPushClipLayer::IsInitialized() const {

  return true;
}

void CMsgPushClipLayer::Swap(CMsgPushClipLayer* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(border_radius_, other->border_radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPushClipLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPushClipLayer_descriptor_;
  metadata.reflection = CMsgPushClipLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPopClipLayer::CMsgPopClipLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPopClipLayer)
}

void CMsgPopClipLayer::InitAsDefaultInstance() {
}

CMsgPopClipLayer::CMsgPopClipLayer(const CMsgPopClipLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPopClipLayer)
}

void CMsgPopClipLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopClipLayer::~CMsgPopClipLayer() {
  // @@protoc_insertion_point(destructor:CMsgPopClipLayer)
  SharedDtor();
}

void CMsgPopClipLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPopClipLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopClipLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopClipLayer_descriptor_;
}

const CMsgPopClipLayer& CMsgPopClipLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPopClipLayer* CMsgPopClipLayer::default_instance_ = NULL;

CMsgPopClipLayer* CMsgPopClipLayer::New() const {
  return new CMsgPopClipLayer;
}

void CMsgPopClipLayer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopClipLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPopClipLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPopClipLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPopClipLayer)
  return false;
#undef DO_
}

void CMsgPopClipLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPopClipLayer)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPopClipLayer)
}

::google::protobuf::uint8* CMsgPopClipLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopClipLayer)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopClipLayer)
  return target;
}

int CMsgPopClipLayer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopClipLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopClipLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopClipLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopClipLayer::MergeFrom(const CMsgPopClipLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopClipLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopClipLayer::CopyFrom(const CMsgPopClipLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopClipLayer::IsInitialized() const {

  return true;
}

void CMsgPopClipLayer::Swap(CMsgPopClipLayer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopClipLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopClipLayer_descriptor_;
  metadata.reflection = CMsgPopClipLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPushPanelContextInLayer::kTransformM00FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM01FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM02FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM03FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM10FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM11FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM12FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM13FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM20FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM21FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM22FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM23FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM30FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM31FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM32FieldNumber;
const int CMsgPushPanelContextInLayer::kTransformM33FieldNumber;
const int CMsgPushPanelContextInLayer::kBoxShadowFieldNumber;
const int CMsgPushPanelContextInLayer::kWidthFieldNumber;
const int CMsgPushPanelContextInLayer::kHeightFieldNumber;
const int CMsgPushPanelContextInLayer::kPositionXFieldNumber;
const int CMsgPushPanelContextInLayer::kPositionYFieldNumber;
const int CMsgPushPanelContextInLayer::kPositionZFieldNumber;
const int CMsgPushPanelContextInLayer::kBorderFieldNumber;
const int CMsgPushPanelContextInLayer::kScrollXFieldNumber;
const int CMsgPushPanelContextInLayer::kScrollYFieldNumber;
#endif  // !_MSC_VER

CMsgPushPanelContextInLayer::CMsgPushPanelContextInLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPushPanelContextInLayer)
}

void CMsgPushPanelContextInLayer::InitAsDefaultInstance() {
  box_shadow_ = const_cast< ::CBoxShadowData*>(&::CBoxShadowData::default_instance());
  border_ = const_cast< ::CBorderData*>(&::CBorderData::default_instance());
}

CMsgPushPanelContextInLayer::CMsgPushPanelContextInLayer(const CMsgPushPanelContextInLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPushPanelContextInLayer)
}

void CMsgPushPanelContextInLayer::SharedCtor() {
  _cached_size_ = 0;
  transform_m00_ = 0;
  transform_m01_ = 0;
  transform_m02_ = 0;
  transform_m03_ = 0;
  transform_m10_ = 0;
  transform_m11_ = 0;
  transform_m12_ = 0;
  transform_m13_ = 0;
  transform_m20_ = 0;
  transform_m21_ = 0;
  transform_m22_ = 0;
  transform_m23_ = 0;
  transform_m30_ = 0;
  transform_m31_ = 0;
  transform_m32_ = 0;
  transform_m33_ = 0;
  box_shadow_ = NULL;
  width_ = 0;
  height_ = 0;
  position_x_ = 0;
  position_y_ = 0;
  position_z_ = 0;
  border_ = NULL;
  scroll_x_ = 0;
  scroll_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPushPanelContextInLayer::~CMsgPushPanelContextInLayer() {
  // @@protoc_insertion_point(destructor:CMsgPushPanelContextInLayer)
  SharedDtor();
}

void CMsgPushPanelContextInLayer::SharedDtor() {
  if (this != default_instance_) {
    delete box_shadow_;
    delete border_;
  }
}

void CMsgPushPanelContextInLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPushPanelContextInLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPushPanelContextInLayer_descriptor_;
}

const CMsgPushPanelContextInLayer& CMsgPushPanelContextInLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPushPanelContextInLayer* CMsgPushPanelContextInLayer::default_instance_ = NULL;

CMsgPushPanelContextInLayer* CMsgPushPanelContextInLayer::New() const {
  return new CMsgPushPanelContextInLayer;
}

void CMsgPushPanelContextInLayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPushPanelContextInLayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(transform_m00_, transform_m13_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(transform_m20_, transform_m33_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(width_, position_z_);
    if (has_box_shadow()) {
      if (box_shadow_ != NULL) box_shadow_->::CBoxShadowData::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::CBorderData::Clear();
    }
    scroll_x_ = 0;
  }
  scroll_y_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPushPanelContextInLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPushPanelContextInLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double transform_m00 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m00_)));
          set_has_transform_m00();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_transform_m01;
        break;
      }

      // optional double transform_m01 = 2;
      case 2: {
        if (tag == 17) {
         parse_transform_m01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m01_)));
          set_has_transform_m01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_transform_m02;
        break;
      }

      // optional double transform_m02 = 3;
      case 3: {
        if (tag == 25) {
         parse_transform_m02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m02_)));
          set_has_transform_m02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_transform_m03;
        break;
      }

      // optional double transform_m03 = 4;
      case 4: {
        if (tag == 33) {
         parse_transform_m03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m03_)));
          set_has_transform_m03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_transform_m10;
        break;
      }

      // optional double transform_m10 = 5;
      case 5: {
        if (tag == 41) {
         parse_transform_m10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m10_)));
          set_has_transform_m10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_transform_m11;
        break;
      }

      // optional double transform_m11 = 6;
      case 6: {
        if (tag == 49) {
         parse_transform_m11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m11_)));
          set_has_transform_m11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_transform_m12;
        break;
      }

      // optional double transform_m12 = 7;
      case 7: {
        if (tag == 57) {
         parse_transform_m12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m12_)));
          set_has_transform_m12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_transform_m13;
        break;
      }

      // optional double transform_m13 = 8;
      case 8: {
        if (tag == 65) {
         parse_transform_m13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m13_)));
          set_has_transform_m13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_transform_m20;
        break;
      }

      // optional double transform_m20 = 9;
      case 9: {
        if (tag == 73) {
         parse_transform_m20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m20_)));
          set_has_transform_m20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_transform_m21;
        break;
      }

      // optional double transform_m21 = 10;
      case 10: {
        if (tag == 81) {
         parse_transform_m21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m21_)));
          set_has_transform_m21();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_transform_m22;
        break;
      }

      // optional double transform_m22 = 11;
      case 11: {
        if (tag == 89) {
         parse_transform_m22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m22_)));
          set_has_transform_m22();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_transform_m23;
        break;
      }

      // optional double transform_m23 = 12;
      case 12: {
        if (tag == 97) {
         parse_transform_m23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m23_)));
          set_has_transform_m23();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_transform_m30;
        break;
      }

      // optional double transform_m30 = 13;
      case 13: {
        if (tag == 105) {
         parse_transform_m30:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m30_)));
          set_has_transform_m30();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_transform_m31;
        break;
      }

      // optional double transform_m31 = 14;
      case 14: {
        if (tag == 113) {
         parse_transform_m31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m31_)));
          set_has_transform_m31();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_transform_m32;
        break;
      }

      // optional double transform_m32 = 15;
      case 15: {
        if (tag == 121) {
         parse_transform_m32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m32_)));
          set_has_transform_m32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_transform_m33;
        break;
      }

      // optional double transform_m33 = 16;
      case 16: {
        if (tag == 129) {
         parse_transform_m33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_m33_)));
          set_has_transform_m33();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_box_shadow;
        break;
      }

      // optional .CBoxShadowData box_shadow = 17;
      case 17: {
        if (tag == 138) {
         parse_box_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_width;
        break;
      }

      // optional double width = 18;
      case 18: {
        if (tag == 145) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_height;
        break;
      }

      // optional double height = 19;
      case 19: {
        if (tag == 153) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_position_x;
        break;
      }

      // optional double position_x = 20;
      case 20: {
        if (tag == 161) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_position_y;
        break;
      }

      // optional double position_y = 21;
      case 21: {
        if (tag == 169) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_position_z;
        break;
      }

      // optional double position_z = 22;
      case 22: {
        if (tag == 177) {
         parse_position_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
          set_has_position_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_border;
        break;
      }

      // optional .CBorderData border = 23;
      case 23: {
        if (tag == 186) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_scroll_x;
        break;
      }

      // optional double scroll_x = 24;
      case 24: {
        if (tag == 193) {
         parse_scroll_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scroll_x_)));
          set_has_scroll_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_scroll_y;
        break;
      }

      // optional double scroll_y = 25;
      case 25: {
        if (tag == 201) {
         parse_scroll_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scroll_y_)));
          set_has_scroll_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPushPanelContextInLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPushPanelContextInLayer)
  return false;
#undef DO_
}

void CMsgPushPanelContextInLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPushPanelContextInLayer)
  // optional double transform_m00 = 1;
  if (has_transform_m00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->transform_m00(), output);
  }

  // optional double transform_m01 = 2;
  if (has_transform_m01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->transform_m01(), output);
  }

  // optional double transform_m02 = 3;
  if (has_transform_m02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->transform_m02(), output);
  }

  // optional double transform_m03 = 4;
  if (has_transform_m03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->transform_m03(), output);
  }

  // optional double transform_m10 = 5;
  if (has_transform_m10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->transform_m10(), output);
  }

  // optional double transform_m11 = 6;
  if (has_transform_m11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->transform_m11(), output);
  }

  // optional double transform_m12 = 7;
  if (has_transform_m12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->transform_m12(), output);
  }

  // optional double transform_m13 = 8;
  if (has_transform_m13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->transform_m13(), output);
  }

  // optional double transform_m20 = 9;
  if (has_transform_m20()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->transform_m20(), output);
  }

  // optional double transform_m21 = 10;
  if (has_transform_m21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->transform_m21(), output);
  }

  // optional double transform_m22 = 11;
  if (has_transform_m22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->transform_m22(), output);
  }

  // optional double transform_m23 = 12;
  if (has_transform_m23()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->transform_m23(), output);
  }

  // optional double transform_m30 = 13;
  if (has_transform_m30()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->transform_m30(), output);
  }

  // optional double transform_m31 = 14;
  if (has_transform_m31()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->transform_m31(), output);
  }

  // optional double transform_m32 = 15;
  if (has_transform_m32()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->transform_m32(), output);
  }

  // optional double transform_m33 = 16;
  if (has_transform_m33()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->transform_m33(), output);
  }

  // optional .CBoxShadowData box_shadow = 17;
  if (has_box_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->box_shadow(), output);
  }

  // optional double width = 18;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->width(), output);
  }

  // optional double height = 19;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->height(), output);
  }

  // optional double position_x = 20;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->position_x(), output);
  }

  // optional double position_y = 21;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->position_y(), output);
  }

  // optional double position_z = 22;
  if (has_position_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->position_z(), output);
  }

  // optional .CBorderData border = 23;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->border(), output);
  }

  // optional double scroll_x = 24;
  if (has_scroll_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->scroll_x(), output);
  }

  // optional double scroll_y = 25;
  if (has_scroll_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->scroll_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPushPanelContextInLayer)
}

::google::protobuf::uint8* CMsgPushPanelContextInLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPushPanelContextInLayer)
  // optional double transform_m00 = 1;
  if (has_transform_m00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->transform_m00(), target);
  }

  // optional double transform_m01 = 2;
  if (has_transform_m01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->transform_m01(), target);
  }

  // optional double transform_m02 = 3;
  if (has_transform_m02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->transform_m02(), target);
  }

  // optional double transform_m03 = 4;
  if (has_transform_m03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->transform_m03(), target);
  }

  // optional double transform_m10 = 5;
  if (has_transform_m10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->transform_m10(), target);
  }

  // optional double transform_m11 = 6;
  if (has_transform_m11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->transform_m11(), target);
  }

  // optional double transform_m12 = 7;
  if (has_transform_m12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->transform_m12(), target);
  }

  // optional double transform_m13 = 8;
  if (has_transform_m13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->transform_m13(), target);
  }

  // optional double transform_m20 = 9;
  if (has_transform_m20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->transform_m20(), target);
  }

  // optional double transform_m21 = 10;
  if (has_transform_m21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->transform_m21(), target);
  }

  // optional double transform_m22 = 11;
  if (has_transform_m22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->transform_m22(), target);
  }

  // optional double transform_m23 = 12;
  if (has_transform_m23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->transform_m23(), target);
  }

  // optional double transform_m30 = 13;
  if (has_transform_m30()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->transform_m30(), target);
  }

  // optional double transform_m31 = 14;
  if (has_transform_m31()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->transform_m31(), target);
  }

  // optional double transform_m32 = 15;
  if (has_transform_m32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->transform_m32(), target);
  }

  // optional double transform_m33 = 16;
  if (has_transform_m33()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->transform_m33(), target);
  }

  // optional .CBoxShadowData box_shadow = 17;
  if (has_box_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->box_shadow(), target);
  }

  // optional double width = 18;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->width(), target);
  }

  // optional double height = 19;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->height(), target);
  }

  // optional double position_x = 20;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->position_x(), target);
  }

  // optional double position_y = 21;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->position_y(), target);
  }

  // optional double position_z = 22;
  if (has_position_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->position_z(), target);
  }

  // optional .CBorderData border = 23;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->border(), target);
  }

  // optional double scroll_x = 24;
  if (has_scroll_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->scroll_x(), target);
  }

  // optional double scroll_y = 25;
  if (has_scroll_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->scroll_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPushPanelContextInLayer)
  return target;
}

int CMsgPushPanelContextInLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double transform_m00 = 1;
    if (has_transform_m00()) {
      total_size += 1 + 8;
    }

    // optional double transform_m01 = 2;
    if (has_transform_m01()) {
      total_size += 1 + 8;
    }

    // optional double transform_m02 = 3;
    if (has_transform_m02()) {
      total_size += 1 + 8;
    }

    // optional double transform_m03 = 4;
    if (has_transform_m03()) {
      total_size += 1 + 8;
    }

    // optional double transform_m10 = 5;
    if (has_transform_m10()) {
      total_size += 1 + 8;
    }

    // optional double transform_m11 = 6;
    if (has_transform_m11()) {
      total_size += 1 + 8;
    }

    // optional double transform_m12 = 7;
    if (has_transform_m12()) {
      total_size += 1 + 8;
    }

    // optional double transform_m13 = 8;
    if (has_transform_m13()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double transform_m20 = 9;
    if (has_transform_m20()) {
      total_size += 1 + 8;
    }

    // optional double transform_m21 = 10;
    if (has_transform_m21()) {
      total_size += 1 + 8;
    }

    // optional double transform_m22 = 11;
    if (has_transform_m22()) {
      total_size += 1 + 8;
    }

    // optional double transform_m23 = 12;
    if (has_transform_m23()) {
      total_size += 1 + 8;
    }

    // optional double transform_m30 = 13;
    if (has_transform_m30()) {
      total_size += 1 + 8;
    }

    // optional double transform_m31 = 14;
    if (has_transform_m31()) {
      total_size += 1 + 8;
    }

    // optional double transform_m32 = 15;
    if (has_transform_m32()) {
      total_size += 1 + 8;
    }

    // optional double transform_m33 = 16;
    if (has_transform_m33()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CBoxShadowData box_shadow = 17;
    if (has_box_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_shadow());
    }

    // optional double width = 18;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // optional double height = 19;
    if (has_height()) {
      total_size += 2 + 8;
    }

    // optional double position_x = 20;
    if (has_position_x()) {
      total_size += 2 + 8;
    }

    // optional double position_y = 21;
    if (has_position_y()) {
      total_size += 2 + 8;
    }

    // optional double position_z = 22;
    if (has_position_z()) {
      total_size += 2 + 8;
    }

    // optional .CBorderData border = 23;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

    // optional double scroll_x = 24;
    if (has_scroll_x()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double scroll_y = 25;
    if (has_scroll_y()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPushPanelContextInLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPushPanelContextInLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPushPanelContextInLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPushPanelContextInLayer::MergeFrom(const CMsgPushPanelContextInLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform_m00()) {
      set_transform_m00(from.transform_m00());
    }
    if (from.has_transform_m01()) {
      set_transform_m01(from.transform_m01());
    }
    if (from.has_transform_m02()) {
      set_transform_m02(from.transform_m02());
    }
    if (from.has_transform_m03()) {
      set_transform_m03(from.transform_m03());
    }
    if (from.has_transform_m10()) {
      set_transform_m10(from.transform_m10());
    }
    if (from.has_transform_m11()) {
      set_transform_m11(from.transform_m11());
    }
    if (from.has_transform_m12()) {
      set_transform_m12(from.transform_m12());
    }
    if (from.has_transform_m13()) {
      set_transform_m13(from.transform_m13());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transform_m20()) {
      set_transform_m20(from.transform_m20());
    }
    if (from.has_transform_m21()) {
      set_transform_m21(from.transform_m21());
    }
    if (from.has_transform_m22()) {
      set_transform_m22(from.transform_m22());
    }
    if (from.has_transform_m23()) {
      set_transform_m23(from.transform_m23());
    }
    if (from.has_transform_m30()) {
      set_transform_m30(from.transform_m30());
    }
    if (from.has_transform_m31()) {
      set_transform_m31(from.transform_m31());
    }
    if (from.has_transform_m32()) {
      set_transform_m32(from.transform_m32());
    }
    if (from.has_transform_m33()) {
      set_transform_m33(from.transform_m33());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_box_shadow()) {
      mutable_box_shadow()->::CBoxShadowData::MergeFrom(from.box_shadow());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_position_z()) {
      set_position_z(from.position_z());
    }
    if (from.has_border()) {
      mutable_border()->::CBorderData::MergeFrom(from.border());
    }
    if (from.has_scroll_x()) {
      set_scroll_x(from.scroll_x());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scroll_y()) {
      set_scroll_y(from.scroll_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPushPanelContextInLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPushPanelContextInLayer::CopyFrom(const CMsgPushPanelContextInLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPushPanelContextInLayer::IsInitialized() const {

  return true;
}

void CMsgPushPanelContextInLayer::Swap(CMsgPushPanelContextInLayer* other) {
  if (other != this) {
    std::swap(transform_m00_, other->transform_m00_);
    std::swap(transform_m01_, other->transform_m01_);
    std::swap(transform_m02_, other->transform_m02_);
    std::swap(transform_m03_, other->transform_m03_);
    std::swap(transform_m10_, other->transform_m10_);
    std::swap(transform_m11_, other->transform_m11_);
    std::swap(transform_m12_, other->transform_m12_);
    std::swap(transform_m13_, other->transform_m13_);
    std::swap(transform_m20_, other->transform_m20_);
    std::swap(transform_m21_, other->transform_m21_);
    std::swap(transform_m22_, other->transform_m22_);
    std::swap(transform_m23_, other->transform_m23_);
    std::swap(transform_m30_, other->transform_m30_);
    std::swap(transform_m31_, other->transform_m31_);
    std::swap(transform_m32_, other->transform_m32_);
    std::swap(transform_m33_, other->transform_m33_);
    std::swap(box_shadow_, other->box_shadow_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(position_z_, other->position_z_);
    std::swap(border_, other->border_);
    std::swap(scroll_x_, other->scroll_x_);
    std::swap(scroll_y_, other->scroll_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPushPanelContextInLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPushPanelContextInLayer_descriptor_;
  metadata.reflection = CMsgPushPanelContextInLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgPopPanelContextInLayer::CMsgPopPanelContextInLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPopPanelContextInLayer)
}

void CMsgPopPanelContextInLayer::InitAsDefaultInstance() {
}

CMsgPopPanelContextInLayer::CMsgPopPanelContextInLayer(const CMsgPopPanelContextInLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPopPanelContextInLayer)
}

void CMsgPopPanelContextInLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopPanelContextInLayer::~CMsgPopPanelContextInLayer() {
  // @@protoc_insertion_point(destructor:CMsgPopPanelContextInLayer)
  SharedDtor();
}

void CMsgPopPanelContextInLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPopPanelContextInLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopPanelContextInLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopPanelContextInLayer_descriptor_;
}

const CMsgPopPanelContextInLayer& CMsgPopPanelContextInLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPopPanelContextInLayer* CMsgPopPanelContextInLayer::default_instance_ = NULL;

CMsgPopPanelContextInLayer* CMsgPopPanelContextInLayer::New() const {
  return new CMsgPopPanelContextInLayer;
}

void CMsgPopPanelContextInLayer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopPanelContextInLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPopPanelContextInLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPopPanelContextInLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPopPanelContextInLayer)
  return false;
#undef DO_
}

void CMsgPopPanelContextInLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPopPanelContextInLayer)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPopPanelContextInLayer)
}

::google::protobuf::uint8* CMsgPopPanelContextInLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopPanelContextInLayer)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopPanelContextInLayer)
  return target;
}

int CMsgPopPanelContextInLayer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopPanelContextInLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopPanelContextInLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopPanelContextInLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopPanelContextInLayer::MergeFrom(const CMsgPopPanelContextInLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopPanelContextInLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopPanelContextInLayer::CopyFrom(const CMsgPopPanelContextInLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopPanelContextInLayer::IsInitialized() const {

  return true;
}

void CMsgPopPanelContextInLayer::Swap(CMsgPopPanelContextInLayer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopPanelContextInLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopPanelContextInLayer_descriptor_;
  metadata.reflection = CMsgPopPanelContextInLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPushAAndTContext::kContextIdFieldNumber;
const int CMsgPushAAndTContext::kWidthFieldNumber;
const int CMsgPushAAndTContext::kHeightFieldNumber;
const int CMsgPushAAndTContext::kChilrenHave3DtransformsFieldNumber;
const int CMsgPushAAndTContext::kZindexFieldNumber;
const int CMsgPushAAndTContext::kPanelPositionFieldNumber;
const int CMsgPushAAndTContext::kTransformMatrixFieldNumber;
const int CMsgPushAAndTContext::kTransformOriginFieldNumber;
const int CMsgPushAAndTContext::kTransformPerspectiveFieldNumber;
const int CMsgPushAAndTContext::kTransformPerspectiveOriginFieldNumber;
const int CMsgPushAAndTContext::kOpacityFieldNumber;
const int CMsgPushAAndTContext::kWashColorFieldNumber;
const int CMsgPushAAndTContext::kHueShiftFieldNumber;
const int CMsgPushAAndTContext::kSaturationFieldNumber;
const int CMsgPushAAndTContext::kBrightnessFieldNumber;
const int CMsgPushAAndTContext::kContrastFieldNumber;
const int CMsgPushAAndTContext::kOpacityMaskFieldNumber;
const int CMsgPushAAndTContext::kBorderRadiusFieldNumber;
const int CMsgPushAAndTContext::kGaussianBlurFieldNumber;
const int CMsgPushAAndTContext::kBorderFieldNumber;
const int CMsgPushAAndTContext::kBoxShadowFieldNumber;
const int CMsgPushAAndTContext::kScale2DCenteredFieldNumber;
const int CMsgPushAAndTContext::kRotate2DCenteredFieldNumber;
const int CMsgPushAAndTContext::kTextShadowFieldNumber;
const int CMsgPushAAndTContext::kClipFieldNumber;
const int CMsgPushAAndTContext::kSuppressClipToBoundsFieldNumber;
const int CMsgPushAAndTContext::kNeedsFullRepaintFieldNumber;
const int CMsgPushAAndTContext::kNeedsIntermediateTextureFieldNumber;
const int CMsgPushAAndTContext::kClipAfterTransformFieldNumber;
const int CMsgPushAAndTContext::kWantsHitTestFieldNumber;
const int CMsgPushAAndTContext::kWantsHitTestChildrenFieldNumber;
const int CMsgPushAAndTContext::kMixBlendModeFieldNumber;
const int CMsgPushAAndTContext::kOpaqueBackgroundFieldNumber;
const int CMsgPushAAndTContext::kChildPanelCountFieldNumber;
const int CMsgPushAAndTContext::kWantsScreenspaceQuadOutputFieldNumber;
const int CMsgPushAAndTContext::kCompositionLayerTextureNameFieldNumber;
#endif  // !_MSC_VER

CMsgPushAAndTContext::CMsgPushAAndTContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPushAAndTContext)
}

void CMsgPushAAndTContext::InitAsDefaultInstance() {
  panel_position_ = const_cast< ::CMsgPanelPosition*>(&::CMsgPanelPosition::default_instance());
  transform_matrix_ = const_cast< ::CMsg3DTransformMatrix*>(&::CMsg3DTransformMatrix::default_instance());
  transform_origin_ = const_cast< ::CMsg3DTransformOrigin*>(&::CMsg3DTransformOrigin::default_instance());
  transform_perspective_ = const_cast< ::CMsg3DTransformPerspective*>(&::CMsg3DTransformPerspective::default_instance());
  transform_perspective_origin_ = const_cast< ::CMsg3DTransformPerspectiveOrigin*>(&::CMsg3DTransformPerspectiveOrigin::default_instance());
  opacity_ = const_cast< ::CMsgOpacity*>(&::CMsgOpacity::default_instance());
  wash_color_ = const_cast< ::CMsgColor*>(&::CMsgColor::default_instance());
  hue_shift_ = const_cast< ::CMsgHueShift*>(&::CMsgHueShift::default_instance());
  saturation_ = const_cast< ::CMsgSaturation*>(&::CMsgSaturation::default_instance());
  brightness_ = const_cast< ::CMsgBrightness*>(&::CMsgBrightness::default_instance());
  contrast_ = const_cast< ::CMsgContrast*>(&::CMsgContrast::default_instance());
  opacity_mask_ = const_cast< ::CMsgOpacityMask*>(&::CMsgOpacityMask::default_instance());
  border_radius_ = const_cast< ::CMsgBorderRadius*>(&::CMsgBorderRadius::default_instance());
  gaussian_blur_ = const_cast< ::CMsgGaussianBlur*>(&::CMsgGaussianBlur::default_instance());
  border_ = const_cast< ::CMsgBorder*>(&::CMsgBorder::default_instance());
  box_shadow_ = const_cast< ::CMsgBoxShadow*>(&::CMsgBoxShadow::default_instance());
  scale_2d_centered_ = const_cast< ::CMsgPointWithTransition*>(&::CMsgPointWithTransition::default_instance());
  rotate_2d_centered_ = const_cast< ::CMsgRotate2D*>(&::CMsgRotate2D::default_instance());
  text_shadow_ = const_cast< ::CMsgTextShadow*>(&::CMsgTextShadow::default_instance());
  clip_ = const_cast< ::CMsgClip*>(&::CMsgClip::default_instance());
}

CMsgPushAAndTContext::CMsgPushAAndTContext(const CMsgPushAAndTContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPushAAndTContext)
}

void CMsgPushAAndTContext::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  context_id_ = GOOGLE_ULONGLONG(0);
  width_ = 0;
  height_ = 0;
  chilren_have_3dtransforms_ = false;
  zindex_ = 0;
  panel_position_ = NULL;
  transform_matrix_ = NULL;
  transform_origin_ = NULL;
  transform_perspective_ = NULL;
  transform_perspective_origin_ = NULL;
  opacity_ = NULL;
  wash_color_ = NULL;
  hue_shift_ = NULL;
  saturation_ = NULL;
  brightness_ = NULL;
  contrast_ = NULL;
  opacity_mask_ = NULL;
  border_radius_ = NULL;
  gaussian_blur_ = NULL;
  border_ = NULL;
  box_shadow_ = NULL;
  scale_2d_centered_ = NULL;
  rotate_2d_centered_ = NULL;
  text_shadow_ = NULL;
  clip_ = NULL;
  suppress_clip_to_bounds_ = false;
  needs_full_repaint_ = 0;
  needs_intermediate_texture_ = false;
  clip_after_transform_ = false;
  wants_hit_test_ = false;
  wants_hit_test_children_ = false;
  mix_blend_mode_ = 0u;
  opaque_background_ = false;
  child_panel_count_ = 0u;
  wants_screenspace_quad_output_ = false;
  composition_layer_texture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPushAAndTContext::~CMsgPushAAndTContext() {
  // @@protoc_insertion_point(destructor:CMsgPushAAndTContext)
  SharedDtor();
}

void CMsgPushAAndTContext::SharedDtor() {
  if (composition_layer_texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete composition_layer_texture_name_;
  }
  if (this != default_instance_) {
    delete panel_position_;
    delete transform_matrix_;
    delete transform_origin_;
    delete transform_perspective_;
    delete transform_perspective_origin_;
    delete opacity_;
    delete wash_color_;
    delete hue_shift_;
    delete saturation_;
    delete brightness_;
    delete contrast_;
    delete opacity_mask_;
    delete border_radius_;
    delete gaussian_blur_;
    delete border_;
    delete box_shadow_;
    delete scale_2d_centered_;
    delete rotate_2d_centered_;
    delete text_shadow_;
    delete clip_;
  }
}

void CMsgPushAAndTContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPushAAndTContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPushAAndTContext_descriptor_;
}

const CMsgPushAAndTContext& CMsgPushAAndTContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPushAAndTContext* CMsgPushAAndTContext::default_instance_ = NULL;

CMsgPushAAndTContext* CMsgPushAAndTContext::New() const {
  return new CMsgPushAAndTContext;
}

void CMsgPushAAndTContext::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgPushAAndTContext*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(context_id_, height_);
    ZR_(zindex_, chilren_have_3dtransforms_);
    if (has_panel_position()) {
      if (panel_position_ != NULL) panel_position_->::CMsgPanelPosition::Clear();
    }
    if (has_transform_matrix()) {
      if (transform_matrix_ != NULL) transform_matrix_->::CMsg3DTransformMatrix::Clear();
    }
    if (has_transform_origin()) {
      if (transform_origin_ != NULL) transform_origin_->::CMsg3DTransformOrigin::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_transform_perspective()) {
      if (transform_perspective_ != NULL) transform_perspective_->::CMsg3DTransformPerspective::Clear();
    }
    if (has_transform_perspective_origin()) {
      if (transform_perspective_origin_ != NULL) transform_perspective_origin_->::CMsg3DTransformPerspectiveOrigin::Clear();
    }
    if (has_opacity()) {
      if (opacity_ != NULL) opacity_->::CMsgOpacity::Clear();
    }
    if (has_wash_color()) {
      if (wash_color_ != NULL) wash_color_->::CMsgColor::Clear();
    }
    if (has_hue_shift()) {
      if (hue_shift_ != NULL) hue_shift_->::CMsgHueShift::Clear();
    }
    if (has_saturation()) {
      if (saturation_ != NULL) saturation_->::CMsgSaturation::Clear();
    }
    if (has_brightness()) {
      if (brightness_ != NULL) brightness_->::CMsgBrightness::Clear();
    }
    if (has_contrast()) {
      if (contrast_ != NULL) contrast_->::CMsgContrast::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_opacity_mask()) {
      if (opacity_mask_ != NULL) opacity_mask_->::CMsgOpacityMask::Clear();
    }
    if (has_border_radius()) {
      if (border_radius_ != NULL) border_radius_->::CMsgBorderRadius::Clear();
    }
    if (has_gaussian_blur()) {
      if (gaussian_blur_ != NULL) gaussian_blur_->::CMsgGaussianBlur::Clear();
    }
    if (has_border()) {
      if (border_ != NULL) border_->::CMsgBorder::Clear();
    }
    if (has_box_shadow()) {
      if (box_shadow_ != NULL) box_shadow_->::CMsgBoxShadow::Clear();
    }
    if (has_scale_2d_centered()) {
      if (scale_2d_centered_ != NULL) scale_2d_centered_->::CMsgPointWithTransition::Clear();
    }
    if (has_rotate_2d_centered()) {
      if (rotate_2d_centered_ != NULL) rotate_2d_centered_->::CMsgRotate2D::Clear();
    }
    if (has_text_shadow()) {
      if (text_shadow_ != NULL) text_shadow_->::CMsgTextShadow::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(suppress_clip_to_bounds_, clip_after_transform_);
    ZR_(needs_full_repaint_, wants_hit_test_children_);
    if (has_clip()) {
      if (clip_ != NULL) clip_->::CMsgClip::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 15) {
    ZR_(opaque_background_, child_panel_count_);
    if (has_composition_layer_texture_name()) {
      if (composition_layer_texture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        composition_layer_texture_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPushAAndTContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPushAAndTContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 context_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_id_)));
          set_has_context_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_width;
        break;
      }

      // optional double width = 3;
      case 3: {
        if (tag == 25) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_height;
        break;
      }

      // optional double height = 4;
      case 4: {
        if (tag == 33) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chilren_have_3dtransforms;
        break;
      }

      // optional bool chilren_have_3dtransforms = 5;
      case 5: {
        if (tag == 40) {
         parse_chilren_have_3dtransforms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chilren_have_3dtransforms_)));
          set_has_chilren_have_3dtransforms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_zindex;
        break;
      }

      // optional float zindex = 6;
      case 6: {
        if (tag == 53) {
         parse_zindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zindex_)));
          set_has_zindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_panel_position;
        break;
      }

      // optional .CMsgPanelPosition panel_position = 7;
      case 7: {
        if (tag == 58) {
         parse_panel_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_panel_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_transform_matrix;
        break;
      }

      // optional .CMsg3DTransformMatrix transform_matrix = 8;
      case 8: {
        if (tag == 66) {
         parse_transform_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_transform_origin;
        break;
      }

      // optional .CMsg3DTransformOrigin transform_origin = 9;
      case 9: {
        if (tag == 74) {
         parse_transform_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_transform_perspective;
        break;
      }

      // optional .CMsg3DTransformPerspective transform_perspective = 10;
      case 10: {
        if (tag == 82) {
         parse_transform_perspective:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_perspective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_transform_perspective_origin;
        break;
      }

      // optional .CMsg3DTransformPerspectiveOrigin transform_perspective_origin = 11;
      case 11: {
        if (tag == 90) {
         parse_transform_perspective_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_perspective_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_opacity;
        break;
      }

      // optional .CMsgOpacity opacity = 12;
      case 12: {
        if (tag == 98) {
         parse_opacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_wash_color;
        break;
      }

      // optional .CMsgColor wash_color = 13;
      case 13: {
        if (tag == 106) {
         parse_wash_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wash_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hue_shift;
        break;
      }

      // optional .CMsgHueShift hue_shift = 14;
      case 14: {
        if (tag == 114) {
         parse_hue_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hue_shift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_saturation;
        break;
      }

      // optional .CMsgSaturation saturation = 15;
      case 15: {
        if (tag == 122) {
         parse_saturation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saturation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_brightness;
        break;
      }

      // optional .CMsgBrightness brightness = 16;
      case 16: {
        if (tag == 130) {
         parse_brightness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brightness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_contrast;
        break;
      }

      // optional .CMsgContrast contrast = 17;
      case 17: {
        if (tag == 138) {
         parse_contrast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_opacity_mask;
        break;
      }

      // optional .CMsgOpacityMask opacity_mask = 18;
      case 18: {
        if (tag == 146) {
         parse_opacity_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opacity_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_border_radius;
        break;
      }

      // optional .CMsgBorderRadius border_radius = 19;
      case 19: {
        if (tag == 154) {
         parse_border_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border_radius()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_gaussian_blur;
        break;
      }

      // optional .CMsgGaussianBlur gaussian_blur = 20;
      case 20: {
        if (tag == 162) {
         parse_gaussian_blur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaussian_blur()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_border;
        break;
      }

      // optional .CMsgBorder border = 21;
      case 21: {
        if (tag == 170) {
         parse_border:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_box_shadow;
        break;
      }

      // optional .CMsgBoxShadow box_shadow = 22;
      case 22: {
        if (tag == 178) {
         parse_box_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_scale_2d_centered;
        break;
      }

      // optional .CMsgPointWithTransition scale_2d_centered = 23;
      case 23: {
        if (tag == 186) {
         parse_scale_2d_centered:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_2d_centered()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_rotate_2d_centered;
        break;
      }

      // optional .CMsgRotate2D rotate_2d_centered = 24;
      case 24: {
        if (tag == 194) {
         parse_rotate_2d_centered:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotate_2d_centered()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_text_shadow;
        break;
      }

      // optional .CMsgTextShadow text_shadow = 25;
      case 25: {
        if (tag == 202) {
         parse_text_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_clip;
        break;
      }

      // optional .CMsgClip clip = 26;
      case 26: {
        if (tag == 210) {
         parse_clip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_suppress_clip_to_bounds;
        break;
      }

      // optional bool suppress_clip_to_bounds = 27;
      case 27: {
        if (tag == 216) {
         parse_suppress_clip_to_bounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_clip_to_bounds_)));
          set_has_suppress_clip_to_bounds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_needs_full_repaint;
        break;
      }

      // optional int32 needs_full_repaint = 28;
      case 28: {
        if (tag == 224) {
         parse_needs_full_repaint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needs_full_repaint_)));
          set_has_needs_full_repaint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_needs_intermediate_texture;
        break;
      }

      // optional bool needs_intermediate_texture = 29;
      case 29: {
        if (tag == 232) {
         parse_needs_intermediate_texture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_intermediate_texture_)));
          set_has_needs_intermediate_texture();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_clip_after_transform;
        break;
      }

      // optional bool clip_after_transform = 30;
      case 30: {
        if (tag == 240) {
         parse_clip_after_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_after_transform_)));
          set_has_clip_after_transform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_wants_hit_test;
        break;
      }

      // optional bool wants_hit_test = 31;
      case 31: {
        if (tag == 248) {
         parse_wants_hit_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_hit_test_)));
          set_has_wants_hit_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_wants_hit_test_children;
        break;
      }

      // optional bool wants_hit_test_children = 32;
      case 32: {
        if (tag == 256) {
         parse_wants_hit_test_children:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_hit_test_children_)));
          set_has_wants_hit_test_children();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_mix_blend_mode;
        break;
      }

      // optional uint32 mix_blend_mode = 33;
      case 33: {
        if (tag == 264) {
         parse_mix_blend_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mix_blend_mode_)));
          set_has_mix_blend_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_opaque_background;
        break;
      }

      // optional bool opaque_background = 34;
      case 34: {
        if (tag == 272) {
         parse_opaque_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opaque_background_)));
          set_has_opaque_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_child_panel_count;
        break;
      }

      // optional uint32 child_panel_count = 35;
      case 35: {
        if (tag == 280) {
         parse_child_panel_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_panel_count_)));
          set_has_child_panel_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_wants_screenspace_quad_output;
        break;
      }

      // optional bool wants_screenspace_quad_output = 36;
      case 36: {
        if (tag == 288) {
         parse_wants_screenspace_quad_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_screenspace_quad_output_)));
          set_has_wants_screenspace_quad_output();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_composition_layer_texture_name;
        break;
      }

      // optional string composition_layer_texture_name = 38;
      case 38: {
        if (tag == 306) {
         parse_composition_layer_texture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_composition_layer_texture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "composition_layer_texture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPushAAndTContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPushAAndTContext)
  return false;
#undef DO_
}

void CMsgPushAAndTContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPushAAndTContext)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->context_id(), output);
  }

  // optional double width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  // optional bool chilren_have_3dtransforms = 5;
  if (has_chilren_have_3dtransforms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->chilren_have_3dtransforms(), output);
  }

  // optional float zindex = 6;
  if (has_zindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zindex(), output);
  }

  // optional .CMsgPanelPosition panel_position = 7;
  if (has_panel_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->panel_position(), output);
  }

  // optional .CMsg3DTransformMatrix transform_matrix = 8;
  if (has_transform_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->transform_matrix(), output);
  }

  // optional .CMsg3DTransformOrigin transform_origin = 9;
  if (has_transform_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->transform_origin(), output);
  }

  // optional .CMsg3DTransformPerspective transform_perspective = 10;
  if (has_transform_perspective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->transform_perspective(), output);
  }

  // optional .CMsg3DTransformPerspectiveOrigin transform_perspective_origin = 11;
  if (has_transform_perspective_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->transform_perspective_origin(), output);
  }

  // optional .CMsgOpacity opacity = 12;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->opacity(), output);
  }

  // optional .CMsgColor wash_color = 13;
  if (has_wash_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->wash_color(), output);
  }

  // optional .CMsgHueShift hue_shift = 14;
  if (has_hue_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hue_shift(), output);
  }

  // optional .CMsgSaturation saturation = 15;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->saturation(), output);
  }

  // optional .CMsgBrightness brightness = 16;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->brightness(), output);
  }

  // optional .CMsgContrast contrast = 17;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->contrast(), output);
  }

  // optional .CMsgOpacityMask opacity_mask = 18;
  if (has_opacity_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->opacity_mask(), output);
  }

  // optional .CMsgBorderRadius border_radius = 19;
  if (has_border_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->border_radius(), output);
  }

  // optional .CMsgGaussianBlur gaussian_blur = 20;
  if (has_gaussian_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gaussian_blur(), output);
  }

  // optional .CMsgBorder border = 21;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->border(), output);
  }

  // optional .CMsgBoxShadow box_shadow = 22;
  if (has_box_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->box_shadow(), output);
  }

  // optional .CMsgPointWithTransition scale_2d_centered = 23;
  if (has_scale_2d_centered()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->scale_2d_centered(), output);
  }

  // optional .CMsgRotate2D rotate_2d_centered = 24;
  if (has_rotate_2d_centered()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->rotate_2d_centered(), output);
  }

  // optional .CMsgTextShadow text_shadow = 25;
  if (has_text_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->text_shadow(), output);
  }

  // optional .CMsgClip clip = 26;
  if (has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->clip(), output);
  }

  // optional bool suppress_clip_to_bounds = 27;
  if (has_suppress_clip_to_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->suppress_clip_to_bounds(), output);
  }

  // optional int32 needs_full_repaint = 28;
  if (has_needs_full_repaint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->needs_full_repaint(), output);
  }

  // optional bool needs_intermediate_texture = 29;
  if (has_needs_intermediate_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->needs_intermediate_texture(), output);
  }

  // optional bool clip_after_transform = 30;
  if (has_clip_after_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->clip_after_transform(), output);
  }

  // optional bool wants_hit_test = 31;
  if (has_wants_hit_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->wants_hit_test(), output);
  }

  // optional bool wants_hit_test_children = 32;
  if (has_wants_hit_test_children()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->wants_hit_test_children(), output);
  }

  // optional uint32 mix_blend_mode = 33;
  if (has_mix_blend_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->mix_blend_mode(), output);
  }

  // optional bool opaque_background = 34;
  if (has_opaque_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->opaque_background(), output);
  }

  // optional uint32 child_panel_count = 35;
  if (has_child_panel_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->child_panel_count(), output);
  }

  // optional bool wants_screenspace_quad_output = 36;
  if (has_wants_screenspace_quad_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->wants_screenspace_quad_output(), output);
  }

  // optional string composition_layer_texture_name = 38;
  if (has_composition_layer_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "composition_layer_texture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->composition_layer_texture_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPushAAndTContext)
}

::google::protobuf::uint8* CMsgPushAAndTContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPushAAndTContext)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->context_id(), target);
  }

  // optional double width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  // optional bool chilren_have_3dtransforms = 5;
  if (has_chilren_have_3dtransforms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->chilren_have_3dtransforms(), target);
  }

  // optional float zindex = 6;
  if (has_zindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zindex(), target);
  }

  // optional .CMsgPanelPosition panel_position = 7;
  if (has_panel_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->panel_position(), target);
  }

  // optional .CMsg3DTransformMatrix transform_matrix = 8;
  if (has_transform_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->transform_matrix(), target);
  }

  // optional .CMsg3DTransformOrigin transform_origin = 9;
  if (has_transform_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->transform_origin(), target);
  }

  // optional .CMsg3DTransformPerspective transform_perspective = 10;
  if (has_transform_perspective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->transform_perspective(), target);
  }

  // optional .CMsg3DTransformPerspectiveOrigin transform_perspective_origin = 11;
  if (has_transform_perspective_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->transform_perspective_origin(), target);
  }

  // optional .CMsgOpacity opacity = 12;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->opacity(), target);
  }

  // optional .CMsgColor wash_color = 13;
  if (has_wash_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->wash_color(), target);
  }

  // optional .CMsgHueShift hue_shift = 14;
  if (has_hue_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->hue_shift(), target);
  }

  // optional .CMsgSaturation saturation = 15;
  if (has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->saturation(), target);
  }

  // optional .CMsgBrightness brightness = 16;
  if (has_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->brightness(), target);
  }

  // optional .CMsgContrast contrast = 17;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->contrast(), target);
  }

  // optional .CMsgOpacityMask opacity_mask = 18;
  if (has_opacity_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->opacity_mask(), target);
  }

  // optional .CMsgBorderRadius border_radius = 19;
  if (has_border_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->border_radius(), target);
  }

  // optional .CMsgGaussianBlur gaussian_blur = 20;
  if (has_gaussian_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gaussian_blur(), target);
  }

  // optional .CMsgBorder border = 21;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->border(), target);
  }

  // optional .CMsgBoxShadow box_shadow = 22;
  if (has_box_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->box_shadow(), target);
  }

  // optional .CMsgPointWithTransition scale_2d_centered = 23;
  if (has_scale_2d_centered()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->scale_2d_centered(), target);
  }

  // optional .CMsgRotate2D rotate_2d_centered = 24;
  if (has_rotate_2d_centered()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->rotate_2d_centered(), target);
  }

  // optional .CMsgTextShadow text_shadow = 25;
  if (has_text_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->text_shadow(), target);
  }

  // optional .CMsgClip clip = 26;
  if (has_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->clip(), target);
  }

  // optional bool suppress_clip_to_bounds = 27;
  if (has_suppress_clip_to_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->suppress_clip_to_bounds(), target);
  }

  // optional int32 needs_full_repaint = 28;
  if (has_needs_full_repaint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->needs_full_repaint(), target);
  }

  // optional bool needs_intermediate_texture = 29;
  if (has_needs_intermediate_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->needs_intermediate_texture(), target);
  }

  // optional bool clip_after_transform = 30;
  if (has_clip_after_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->clip_after_transform(), target);
  }

  // optional bool wants_hit_test = 31;
  if (has_wants_hit_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->wants_hit_test(), target);
  }

  // optional bool wants_hit_test_children = 32;
  if (has_wants_hit_test_children()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->wants_hit_test_children(), target);
  }

  // optional uint32 mix_blend_mode = 33;
  if (has_mix_blend_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->mix_blend_mode(), target);
  }

  // optional bool opaque_background = 34;
  if (has_opaque_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->opaque_background(), target);
  }

  // optional uint32 child_panel_count = 35;
  if (has_child_panel_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->child_panel_count(), target);
  }

  // optional bool wants_screenspace_quad_output = 36;
  if (has_wants_screenspace_quad_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->wants_screenspace_quad_output(), target);
  }

  // optional string composition_layer_texture_name = 38;
  if (has_composition_layer_texture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->composition_layer_texture_name().data(), this->composition_layer_texture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "composition_layer_texture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->composition_layer_texture_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPushAAndTContext)
  return target;
}

int CMsgPushAAndTContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 context_id = 1;
    if (has_context_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context_id());
    }

    // optional double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 4;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional bool chilren_have_3dtransforms = 5;
    if (has_chilren_have_3dtransforms()) {
      total_size += 1 + 1;
    }

    // optional float zindex = 6;
    if (has_zindex()) {
      total_size += 1 + 4;
    }

    // optional .CMsgPanelPosition panel_position = 7;
    if (has_panel_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->panel_position());
    }

    // optional .CMsg3DTransformMatrix transform_matrix = 8;
    if (has_transform_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_matrix());
    }

    // optional .CMsg3DTransformOrigin transform_origin = 9;
    if (has_transform_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_origin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsg3DTransformPerspective transform_perspective = 10;
    if (has_transform_perspective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_perspective());
    }

    // optional .CMsg3DTransformPerspectiveOrigin transform_perspective_origin = 11;
    if (has_transform_perspective_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_perspective_origin());
    }

    // optional .CMsgOpacity opacity = 12;
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opacity());
    }

    // optional .CMsgColor wash_color = 13;
    if (has_wash_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wash_color());
    }

    // optional .CMsgHueShift hue_shift = 14;
    if (has_hue_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hue_shift());
    }

    // optional .CMsgSaturation saturation = 15;
    if (has_saturation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saturation());
    }

    // optional .CMsgBrightness brightness = 16;
    if (has_brightness()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brightness());
    }

    // optional .CMsgContrast contrast = 17;
    if (has_contrast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contrast());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CMsgOpacityMask opacity_mask = 18;
    if (has_opacity_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opacity_mask());
    }

    // optional .CMsgBorderRadius border_radius = 19;
    if (has_border_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border_radius());
    }

    // optional .CMsgGaussianBlur gaussian_blur = 20;
    if (has_gaussian_blur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gaussian_blur());
    }

    // optional .CMsgBorder border = 21;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->border());
    }

    // optional .CMsgBoxShadow box_shadow = 22;
    if (has_box_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_shadow());
    }

    // optional .CMsgPointWithTransition scale_2d_centered = 23;
    if (has_scale_2d_centered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_2d_centered());
    }

    // optional .CMsgRotate2D rotate_2d_centered = 24;
    if (has_rotate_2d_centered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotate_2d_centered());
    }

    // optional .CMsgTextShadow text_shadow = 25;
    if (has_text_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_shadow());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .CMsgClip clip = 26;
    if (has_clip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clip());
    }

    // optional bool suppress_clip_to_bounds = 27;
    if (has_suppress_clip_to_bounds()) {
      total_size += 2 + 1;
    }

    // optional int32 needs_full_repaint = 28;
    if (has_needs_full_repaint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needs_full_repaint());
    }

    // optional bool needs_intermediate_texture = 29;
    if (has_needs_intermediate_texture()) {
      total_size += 2 + 1;
    }

    // optional bool clip_after_transform = 30;
    if (has_clip_after_transform()) {
      total_size += 2 + 1;
    }

    // optional bool wants_hit_test = 31;
    if (has_wants_hit_test()) {
      total_size += 2 + 1;
    }

    // optional bool wants_hit_test_children = 32;
    if (has_wants_hit_test_children()) {
      total_size += 2 + 1;
    }

    // optional uint32 mix_blend_mode = 33;
    if (has_mix_blend_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mix_blend_mode());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool opaque_background = 34;
    if (has_opaque_background()) {
      total_size += 2 + 1;
    }

    // optional uint32 child_panel_count = 35;
    if (has_child_panel_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_panel_count());
    }

    // optional bool wants_screenspace_quad_output = 36;
    if (has_wants_screenspace_quad_output()) {
      total_size += 2 + 1;
    }

    // optional string composition_layer_texture_name = 38;
    if (has_composition_layer_texture_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->composition_layer_texture_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPushAAndTContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPushAAndTContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPushAAndTContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPushAAndTContext::MergeFrom(const CMsgPushAAndTContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context_id()) {
      set_context_id(from.context_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_chilren_have_3dtransforms()) {
      set_chilren_have_3dtransforms(from.chilren_have_3dtransforms());
    }
    if (from.has_zindex()) {
      set_zindex(from.zindex());
    }
    if (from.has_panel_position()) {
      mutable_panel_position()->::CMsgPanelPosition::MergeFrom(from.panel_position());
    }
    if (from.has_transform_matrix()) {
      mutable_transform_matrix()->::CMsg3DTransformMatrix::MergeFrom(from.transform_matrix());
    }
    if (from.has_transform_origin()) {
      mutable_transform_origin()->::CMsg3DTransformOrigin::MergeFrom(from.transform_origin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transform_perspective()) {
      mutable_transform_perspective()->::CMsg3DTransformPerspective::MergeFrom(from.transform_perspective());
    }
    if (from.has_transform_perspective_origin()) {
      mutable_transform_perspective_origin()->::CMsg3DTransformPerspectiveOrigin::MergeFrom(from.transform_perspective_origin());
    }
    if (from.has_opacity()) {
      mutable_opacity()->::CMsgOpacity::MergeFrom(from.opacity());
    }
    if (from.has_wash_color()) {
      mutable_wash_color()->::CMsgColor::MergeFrom(from.wash_color());
    }
    if (from.has_hue_shift()) {
      mutable_hue_shift()->::CMsgHueShift::MergeFrom(from.hue_shift());
    }
    if (from.has_saturation()) {
      mutable_saturation()->::CMsgSaturation::MergeFrom(from.saturation());
    }
    if (from.has_brightness()) {
      mutable_brightness()->::CMsgBrightness::MergeFrom(from.brightness());
    }
    if (from.has_contrast()) {
      mutable_contrast()->::CMsgContrast::MergeFrom(from.contrast());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_opacity_mask()) {
      mutable_opacity_mask()->::CMsgOpacityMask::MergeFrom(from.opacity_mask());
    }
    if (from.has_border_radius()) {
      mutable_border_radius()->::CMsgBorderRadius::MergeFrom(from.border_radius());
    }
    if (from.has_gaussian_blur()) {
      mutable_gaussian_blur()->::CMsgGaussianBlur::MergeFrom(from.gaussian_blur());
    }
    if (from.has_border()) {
      mutable_border()->::CMsgBorder::MergeFrom(from.border());
    }
    if (from.has_box_shadow()) {
      mutable_box_shadow()->::CMsgBoxShadow::MergeFrom(from.box_shadow());
    }
    if (from.has_scale_2d_centered()) {
      mutable_scale_2d_centered()->::CMsgPointWithTransition::MergeFrom(from.scale_2d_centered());
    }
    if (from.has_rotate_2d_centered()) {
      mutable_rotate_2d_centered()->::CMsgRotate2D::MergeFrom(from.rotate_2d_centered());
    }
    if (from.has_text_shadow()) {
      mutable_text_shadow()->::CMsgTextShadow::MergeFrom(from.text_shadow());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clip()) {
      mutable_clip()->::CMsgClip::MergeFrom(from.clip());
    }
    if (from.has_suppress_clip_to_bounds()) {
      set_suppress_clip_to_bounds(from.suppress_clip_to_bounds());
    }
    if (from.has_needs_full_repaint()) {
      set_needs_full_repaint(from.needs_full_repaint());
    }
    if (from.has_needs_intermediate_texture()) {
      set_needs_intermediate_texture(from.needs_intermediate_texture());
    }
    if (from.has_clip_after_transform()) {
      set_clip_after_transform(from.clip_after_transform());
    }
    if (from.has_wants_hit_test()) {
      set_wants_hit_test(from.wants_hit_test());
    }
    if (from.has_wants_hit_test_children()) {
      set_wants_hit_test_children(from.wants_hit_test_children());
    }
    if (from.has_mix_blend_mode()) {
      set_mix_blend_mode(from.mix_blend_mode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_opaque_background()) {
      set_opaque_background(from.opaque_background());
    }
    if (from.has_child_panel_count()) {
      set_child_panel_count(from.child_panel_count());
    }
    if (from.has_wants_screenspace_quad_output()) {
      set_wants_screenspace_quad_output(from.wants_screenspace_quad_output());
    }
    if (from.has_composition_layer_texture_name()) {
      set_composition_layer_texture_name(from.composition_layer_texture_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPushAAndTContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPushAAndTContext::CopyFrom(const CMsgPushAAndTContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPushAAndTContext::IsInitialized() const {

  if (has_panel_position()) {
    if (!this->panel_position().IsInitialized()) return false;
  }
  if (has_transform_matrix()) {
    if (!this->transform_matrix().IsInitialized()) return false;
  }
  if (has_transform_origin()) {
    if (!this->transform_origin().IsInitialized()) return false;
  }
  if (has_transform_perspective()) {
    if (!this->transform_perspective().IsInitialized()) return false;
  }
  if (has_transform_perspective_origin()) {
    if (!this->transform_perspective_origin().IsInitialized()) return false;
  }
  if (has_opacity()) {
    if (!this->opacity().IsInitialized()) return false;
  }
  if (has_wash_color()) {
    if (!this->wash_color().IsInitialized()) return false;
  }
  if (has_hue_shift()) {
    if (!this->hue_shift().IsInitialized()) return false;
  }
  if (has_saturation()) {
    if (!this->saturation().IsInitialized()) return false;
  }
  if (has_brightness()) {
    if (!this->brightness().IsInitialized()) return false;
  }
  if (has_contrast()) {
    if (!this->contrast().IsInitialized()) return false;
  }
  if (has_opacity_mask()) {
    if (!this->opacity_mask().IsInitialized()) return false;
  }
  if (has_border_radius()) {
    if (!this->border_radius().IsInitialized()) return false;
  }
  if (has_gaussian_blur()) {
    if (!this->gaussian_blur().IsInitialized()) return false;
  }
  if (has_border()) {
    if (!this->border().IsInitialized()) return false;
  }
  if (has_box_shadow()) {
    if (!this->box_shadow().IsInitialized()) return false;
  }
  if (has_scale_2d_centered()) {
    if (!this->scale_2d_centered().IsInitialized()) return false;
  }
  if (has_rotate_2d_centered()) {
    if (!this->rotate_2d_centered().IsInitialized()) return false;
  }
  if (has_text_shadow()) {
    if (!this->text_shadow().IsInitialized()) return false;
  }
  if (has_clip()) {
    if (!this->clip().IsInitialized()) return false;
  }
  return true;
}

void CMsgPushAAndTContext::Swap(CMsgPushAAndTContext* other) {
  if (other != this) {
    std::swap(context_id_, other->context_id_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(chilren_have_3dtransforms_, other->chilren_have_3dtransforms_);
    std::swap(zindex_, other->zindex_);
    std::swap(panel_position_, other->panel_position_);
    std::swap(transform_matrix_, other->transform_matrix_);
    std::swap(transform_origin_, other->transform_origin_);
    std::swap(transform_perspective_, other->transform_perspective_);
    std::swap(transform_perspective_origin_, other->transform_perspective_origin_);
    std::swap(opacity_, other->opacity_);
    std::swap(wash_color_, other->wash_color_);
    std::swap(hue_shift_, other->hue_shift_);
    std::swap(saturation_, other->saturation_);
    std::swap(brightness_, other->brightness_);
    std::swap(contrast_, other->contrast_);
    std::swap(opacity_mask_, other->opacity_mask_);
    std::swap(border_radius_, other->border_radius_);
    std::swap(gaussian_blur_, other->gaussian_blur_);
    std::swap(border_, other->border_);
    std::swap(box_shadow_, other->box_shadow_);
    std::swap(scale_2d_centered_, other->scale_2d_centered_);
    std::swap(rotate_2d_centered_, other->rotate_2d_centered_);
    std::swap(text_shadow_, other->text_shadow_);
    std::swap(clip_, other->clip_);
    std::swap(suppress_clip_to_bounds_, other->suppress_clip_to_bounds_);
    std::swap(needs_full_repaint_, other->needs_full_repaint_);
    std::swap(needs_intermediate_texture_, other->needs_intermediate_texture_);
    std::swap(clip_after_transform_, other->clip_after_transform_);
    std::swap(wants_hit_test_, other->wants_hit_test_);
    std::swap(wants_hit_test_children_, other->wants_hit_test_children_);
    std::swap(mix_blend_mode_, other->mix_blend_mode_);
    std::swap(opaque_background_, other->opaque_background_);
    std::swap(child_panel_count_, other->child_panel_count_);
    std::swap(wants_screenspace_quad_output_, other->wants_screenspace_quad_output_);
    std::swap(composition_layer_texture_name_, other->composition_layer_texture_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPushAAndTContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPushAAndTContext_descriptor_;
  metadata.reflection = CMsgPushAAndTContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPopAAndTContext::kContextIdFieldNumber;
#endif  // !_MSC_VER

CMsgPopAAndTContext::CMsgPopAAndTContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPopAAndTContext)
}

void CMsgPopAAndTContext::InitAsDefaultInstance() {
}

CMsgPopAAndTContext::CMsgPopAAndTContext(const CMsgPopAAndTContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPopAAndTContext)
}

void CMsgPopAAndTContext::SharedCtor() {
  _cached_size_ = 0;
  context_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPopAAndTContext::~CMsgPopAAndTContext() {
  // @@protoc_insertion_point(destructor:CMsgPopAAndTContext)
  SharedDtor();
}

void CMsgPopAAndTContext::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgPopAAndTContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPopAAndTContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPopAAndTContext_descriptor_;
}

const CMsgPopAAndTContext& CMsgPopAAndTContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgPopAAndTContext* CMsgPopAAndTContext::default_instance_ = NULL;

CMsgPopAAndTContext* CMsgPopAAndTContext::New() const {
  return new CMsgPopAAndTContext;
}

void CMsgPopAAndTContext::Clear() {
  context_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPopAAndTContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPopAAndTContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 context_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_id_)));
          set_has_context_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPopAAndTContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPopAAndTContext)
  return false;
#undef DO_
}

void CMsgPopAAndTContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPopAAndTContext)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->context_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPopAAndTContext)
}

::google::protobuf::uint8* CMsgPopAAndTContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPopAAndTContext)
  // optional uint64 context_id = 1;
  if (has_context_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->context_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPopAAndTContext)
  return target;
}

int CMsgPopAAndTContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 context_id = 1;
    if (has_context_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPopAAndTContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPopAAndTContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPopAAndTContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPopAAndTContext::MergeFrom(const CMsgPopAAndTContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context_id()) {
      set_context_id(from.context_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPopAAndTContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopAAndTContext::CopyFrom(const CMsgPopAAndTContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopAAndTContext::IsInitialized() const {

  return true;
}

void CMsgPopAAndTContext::Swap(CMsgPopAAndTContext* other) {
  if (other != this) {
    std::swap(context_id_, other->context_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPopAAndTContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPopAAndTContext_descriptor_;
  metadata.reflection = CMsgPopAAndTContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgBeginPaintBackground::CMsgBeginPaintBackground()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBeginPaintBackground)
}

void CMsgBeginPaintBackground::InitAsDefaultInstance() {
}

CMsgBeginPaintBackground::CMsgBeginPaintBackground(const CMsgBeginPaintBackground& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBeginPaintBackground)
}

void CMsgBeginPaintBackground::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBeginPaintBackground::~CMsgBeginPaintBackground() {
  // @@protoc_insertion_point(destructor:CMsgBeginPaintBackground)
  SharedDtor();
}

void CMsgBeginPaintBackground::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBeginPaintBackground::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBeginPaintBackground::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBeginPaintBackground_descriptor_;
}

const CMsgBeginPaintBackground& CMsgBeginPaintBackground::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBeginPaintBackground* CMsgBeginPaintBackground::default_instance_ = NULL;

CMsgBeginPaintBackground* CMsgBeginPaintBackground::New() const {
  return new CMsgBeginPaintBackground;
}

void CMsgBeginPaintBackground::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBeginPaintBackground::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBeginPaintBackground)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBeginPaintBackground)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBeginPaintBackground)
  return false;
#undef DO_
}

void CMsgBeginPaintBackground::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBeginPaintBackground)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBeginPaintBackground)
}

::google::protobuf::uint8* CMsgBeginPaintBackground::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBeginPaintBackground)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBeginPaintBackground)
  return target;
}

int CMsgBeginPaintBackground::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBeginPaintBackground::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBeginPaintBackground* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBeginPaintBackground*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBeginPaintBackground::MergeFrom(const CMsgBeginPaintBackground& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBeginPaintBackground::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBeginPaintBackground::CopyFrom(const CMsgBeginPaintBackground& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBeginPaintBackground::IsInitialized() const {

  return true;
}

void CMsgBeginPaintBackground::Swap(CMsgBeginPaintBackground* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBeginPaintBackground::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBeginPaintBackground_descriptor_;
  metadata.reflection = CMsgBeginPaintBackground_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgEndPaintBackground::CMsgEndPaintBackground()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgEndPaintBackground)
}

void CMsgEndPaintBackground::InitAsDefaultInstance() {
}

CMsgEndPaintBackground::CMsgEndPaintBackground(const CMsgEndPaintBackground& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgEndPaintBackground)
}

void CMsgEndPaintBackground::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEndPaintBackground::~CMsgEndPaintBackground() {
  // @@protoc_insertion_point(destructor:CMsgEndPaintBackground)
  SharedDtor();
}

void CMsgEndPaintBackground::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEndPaintBackground::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEndPaintBackground::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEndPaintBackground_descriptor_;
}

const CMsgEndPaintBackground& CMsgEndPaintBackground::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgEndPaintBackground* CMsgEndPaintBackground::default_instance_ = NULL;

CMsgEndPaintBackground* CMsgEndPaintBackground::New() const {
  return new CMsgEndPaintBackground;
}

void CMsgEndPaintBackground::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEndPaintBackground::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgEndPaintBackground)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgEndPaintBackground)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgEndPaintBackground)
  return false;
#undef DO_
}

void CMsgEndPaintBackground::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgEndPaintBackground)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgEndPaintBackground)
}

::google::protobuf::uint8* CMsgEndPaintBackground::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEndPaintBackground)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEndPaintBackground)
  return target;
}

int CMsgEndPaintBackground::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEndPaintBackground::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEndPaintBackground* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEndPaintBackground*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEndPaintBackground::MergeFrom(const CMsgEndPaintBackground& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEndPaintBackground::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEndPaintBackground::CopyFrom(const CMsgEndPaintBackground& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEndPaintBackground::IsInitialized() const {

  return true;
}

void CMsgEndPaintBackground::Swap(CMsgEndPaintBackground* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEndPaintBackground::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEndPaintBackground_descriptor_;
  metadata.reflection = CMsgEndPaintBackground_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgBeginPaintLast::CMsgBeginPaintLast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgBeginPaintLast)
}

void CMsgBeginPaintLast::InitAsDefaultInstance() {
}

CMsgBeginPaintLast::CMsgBeginPaintLast(const CMsgBeginPaintLast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgBeginPaintLast)
}

void CMsgBeginPaintLast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBeginPaintLast::~CMsgBeginPaintLast() {
  // @@protoc_insertion_point(destructor:CMsgBeginPaintLast)
  SharedDtor();
}

void CMsgBeginPaintLast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBeginPaintLast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBeginPaintLast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBeginPaintLast_descriptor_;
}

const CMsgBeginPaintLast& CMsgBeginPaintLast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgBeginPaintLast* CMsgBeginPaintLast::default_instance_ = NULL;

CMsgBeginPaintLast* CMsgBeginPaintLast::New() const {
  return new CMsgBeginPaintLast;
}

void CMsgBeginPaintLast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBeginPaintLast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgBeginPaintLast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgBeginPaintLast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgBeginPaintLast)
  return false;
#undef DO_
}

void CMsgBeginPaintLast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgBeginPaintLast)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgBeginPaintLast)
}

::google::protobuf::uint8* CMsgBeginPaintLast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBeginPaintLast)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBeginPaintLast)
  return target;
}

int CMsgBeginPaintLast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBeginPaintLast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBeginPaintLast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBeginPaintLast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBeginPaintLast::MergeFrom(const CMsgBeginPaintLast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBeginPaintLast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBeginPaintLast::CopyFrom(const CMsgBeginPaintLast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBeginPaintLast::IsInitialized() const {

  return true;
}

void CMsgBeginPaintLast::Swap(CMsgBeginPaintLast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBeginPaintLast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBeginPaintLast_descriptor_;
  metadata.reflection = CMsgBeginPaintLast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgEndPaintLast::CMsgEndPaintLast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgEndPaintLast)
}

void CMsgEndPaintLast::InitAsDefaultInstance() {
}

CMsgEndPaintLast::CMsgEndPaintLast(const CMsgEndPaintLast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgEndPaintLast)
}

void CMsgEndPaintLast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgEndPaintLast::~CMsgEndPaintLast() {
  // @@protoc_insertion_point(destructor:CMsgEndPaintLast)
  SharedDtor();
}

void CMsgEndPaintLast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgEndPaintLast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEndPaintLast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgEndPaintLast_descriptor_;
}

const CMsgEndPaintLast& CMsgEndPaintLast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgEndPaintLast* CMsgEndPaintLast::default_instance_ = NULL;

CMsgEndPaintLast* CMsgEndPaintLast::New() const {
  return new CMsgEndPaintLast;
}

void CMsgEndPaintLast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgEndPaintLast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgEndPaintLast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgEndPaintLast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgEndPaintLast)
  return false;
#undef DO_
}

void CMsgEndPaintLast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgEndPaintLast)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgEndPaintLast)
}

::google::protobuf::uint8* CMsgEndPaintLast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEndPaintLast)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEndPaintLast)
  return target;
}

int CMsgEndPaintLast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEndPaintLast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgEndPaintLast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgEndPaintLast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgEndPaintLast::MergeFrom(const CMsgEndPaintLast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgEndPaintLast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEndPaintLast::CopyFrom(const CMsgEndPaintLast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEndPaintLast::IsInitialized() const {

  return true;
}

void CMsgEndPaintLast::Swap(CMsgEndPaintLast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgEndPaintLast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgEndPaintLast_descriptor_;
  metadata.reflection = CMsgEndPaintLast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDrawFilledRect::kTopLeftFieldNumber;
const int CMsgDrawFilledRect::kBottomRightFieldNumber;
const int CMsgDrawFilledRect::kFillBrushCollectionFieldNumber;
const int CMsgDrawFilledRect::kAntialiasingFieldNumber;
#endif  // !_MSC_VER

CMsgDrawFilledRect::CMsgDrawFilledRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDrawFilledRect)
}

void CMsgDrawFilledRect::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  fill_brush_collection_ = const_cast< ::CMsgFillBrushCollection*>(&::CMsgFillBrushCollection::default_instance());
}

CMsgDrawFilledRect::CMsgDrawFilledRect(const CMsgDrawFilledRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDrawFilledRect)
}

void CMsgDrawFilledRect::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  bottom_right_ = NULL;
  fill_brush_collection_ = NULL;
  antialiasing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDrawFilledRect::~CMsgDrawFilledRect() {
  // @@protoc_insertion_point(destructor:CMsgDrawFilledRect)
  SharedDtor();
}

void CMsgDrawFilledRect::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete fill_brush_collection_;
  }
}

void CMsgDrawFilledRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDrawFilledRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDrawFilledRect_descriptor_;
}

const CMsgDrawFilledRect& CMsgDrawFilledRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDrawFilledRect* CMsgDrawFilledRect::default_instance_ = NULL;

CMsgDrawFilledRect* CMsgDrawFilledRect::New() const {
  return new CMsgDrawFilledRect;
}

void CMsgDrawFilledRect::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_fill_brush_collection()) {
      if (fill_brush_collection_ != NULL) fill_brush_collection_->::CMsgFillBrushCollection::Clear();
    }
    antialiasing_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDrawFilledRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDrawFilledRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fill_brush_collection;
        break;
      }

      // optional .CMsgFillBrushCollection fill_brush_collection = 3;
      case 3: {
        if (tag == 26) {
         parse_fill_brush_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_brush_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_antialiasing;
        break;
      }

      // optional uint32 antialiasing = 4;
      case 4: {
        if (tag == 32) {
         parse_antialiasing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antialiasing_)));
          set_has_antialiasing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDrawFilledRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDrawFilledRect)
  return false;
#undef DO_
}

void CMsgDrawFilledRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDrawFilledRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottom_right(), output);
  }

  // optional .CMsgFillBrushCollection fill_brush_collection = 3;
  if (has_fill_brush_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fill_brush_collection(), output);
  }

  // optional uint32 antialiasing = 4;
  if (has_antialiasing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->antialiasing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDrawFilledRect)
}

::google::protobuf::uint8* CMsgDrawFilledRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDrawFilledRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottom_right(), target);
  }

  // optional .CMsgFillBrushCollection fill_brush_collection = 3;
  if (has_fill_brush_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fill_brush_collection(), target);
  }

  // optional uint32 antialiasing = 4;
  if (has_antialiasing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->antialiasing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDrawFilledRect)
  return target;
}

int CMsgDrawFilledRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 2;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional .CMsgFillBrushCollection fill_brush_collection = 3;
    if (has_fill_brush_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill_brush_collection());
    }

    // optional uint32 antialiasing = 4;
    if (has_antialiasing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antialiasing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDrawFilledRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDrawFilledRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDrawFilledRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDrawFilledRect::MergeFrom(const CMsgDrawFilledRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_fill_brush_collection()) {
      mutable_fill_brush_collection()->::CMsgFillBrushCollection::MergeFrom(from.fill_brush_collection());
    }
    if (from.has_antialiasing()) {
      set_antialiasing(from.antialiasing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDrawFilledRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDrawFilledRect::CopyFrom(const CMsgDrawFilledRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDrawFilledRect::IsInitialized() const {

  if (has_fill_brush_collection()) {
    if (!this->fill_brush_collection().IsInitialized()) return false;
  }
  return true;
}

void CMsgDrawFilledRect::Swap(CMsgDrawFilledRect* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(fill_brush_collection_, other->fill_brush_collection_);
    std::swap(antialiasing_, other->antialiasing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDrawFilledRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDrawFilledRect_descriptor_;
  metadata.reflection = CMsgDrawFilledRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderFilledRect::kTopLeftFieldNumber;
const int CMsgRenderFilledRect::kBottomRightFieldNumber;
const int CMsgRenderFilledRect::kFillBrushCollectionFieldNumber;
const int CMsgRenderFilledRect::kAntialiasingFieldNumber;
#endif  // !_MSC_VER

CMsgRenderFilledRect::CMsgRenderFilledRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderFilledRect)
}

void CMsgRenderFilledRect::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  fill_brush_collection_ = const_cast< ::CMsgRenderFillBrushCollection*>(&::CMsgRenderFillBrushCollection::default_instance());
}

CMsgRenderFilledRect::CMsgRenderFilledRect(const CMsgRenderFilledRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderFilledRect)
}

void CMsgRenderFilledRect::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  bottom_right_ = NULL;
  fill_brush_collection_ = NULL;
  antialiasing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderFilledRect::~CMsgRenderFilledRect() {
  // @@protoc_insertion_point(destructor:CMsgRenderFilledRect)
  SharedDtor();
}

void CMsgRenderFilledRect::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete fill_brush_collection_;
  }
}

void CMsgRenderFilledRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderFilledRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderFilledRect_descriptor_;
}

const CMsgRenderFilledRect& CMsgRenderFilledRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderFilledRect* CMsgRenderFilledRect::default_instance_ = NULL;

CMsgRenderFilledRect* CMsgRenderFilledRect::New() const {
  return new CMsgRenderFilledRect;
}

void CMsgRenderFilledRect::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_fill_brush_collection()) {
      if (fill_brush_collection_ != NULL) fill_brush_collection_->::CMsgRenderFillBrushCollection::Clear();
    }
    antialiasing_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderFilledRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderFilledRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fill_brush_collection;
        break;
      }

      // optional .CMsgRenderFillBrushCollection fill_brush_collection = 3;
      case 3: {
        if (tag == 26) {
         parse_fill_brush_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_brush_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_antialiasing;
        break;
      }

      // optional uint32 antialiasing = 4;
      case 4: {
        if (tag == 32) {
         parse_antialiasing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antialiasing_)));
          set_has_antialiasing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderFilledRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderFilledRect)
  return false;
#undef DO_
}

void CMsgRenderFilledRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderFilledRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottom_right(), output);
  }

  // optional .CMsgRenderFillBrushCollection fill_brush_collection = 3;
  if (has_fill_brush_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fill_brush_collection(), output);
  }

  // optional uint32 antialiasing = 4;
  if (has_antialiasing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->antialiasing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderFilledRect)
}

::google::protobuf::uint8* CMsgRenderFilledRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderFilledRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottom_right(), target);
  }

  // optional .CMsgRenderFillBrushCollection fill_brush_collection = 3;
  if (has_fill_brush_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fill_brush_collection(), target);
  }

  // optional uint32 antialiasing = 4;
  if (has_antialiasing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->antialiasing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderFilledRect)
  return target;
}

int CMsgRenderFilledRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 2;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional .CMsgRenderFillBrushCollection fill_brush_collection = 3;
    if (has_fill_brush_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill_brush_collection());
    }

    // optional uint32 antialiasing = 4;
    if (has_antialiasing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antialiasing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderFilledRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderFilledRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderFilledRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderFilledRect::MergeFrom(const CMsgRenderFilledRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_fill_brush_collection()) {
      mutable_fill_brush_collection()->::CMsgRenderFillBrushCollection::MergeFrom(from.fill_brush_collection());
    }
    if (from.has_antialiasing()) {
      set_antialiasing(from.antialiasing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderFilledRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderFilledRect::CopyFrom(const CMsgRenderFilledRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderFilledRect::IsInitialized() const {

  return true;
}

void CMsgRenderFilledRect::Swap(CMsgRenderFilledRect* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(fill_brush_collection_, other->fill_brush_collection_);
    std::swap(antialiasing_, other->antialiasing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderFilledRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderFilledRect_descriptor_;
  metadata.reflection = CMsgRenderFilledRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDrawTexturedRect::kTopLeftFieldNumber;
const int CMsgDrawTexturedRect::kBottomRightFieldNumber;
const int CMsgDrawTexturedRect::kTextureIdFieldNumber;
const int CMsgDrawTexturedRect::kTextureTopLeftFieldNumber;
const int CMsgDrawTexturedRect::kTextureBottomRightFieldNumber;
const int CMsgDrawTexturedRect::kTextureSerialFieldNumber;
const int CMsgDrawTexturedRect::kTextureSampleModeFieldNumber;
const int CMsgDrawTexturedRect::kTextureOpacityFieldNumber;
#endif  // !_MSC_VER

CMsgDrawTexturedRect::CMsgDrawTexturedRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDrawTexturedRect)
}

void CMsgDrawTexturedRect::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  texture_top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  texture_bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  texture_opacity_ = const_cast< ::CMsgOpacity*>(&::CMsgOpacity::default_instance());
}

CMsgDrawTexturedRect::CMsgDrawTexturedRect(const CMsgDrawTexturedRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDrawTexturedRect)
}

void CMsgDrawTexturedRect::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  bottom_right_ = NULL;
  texture_id_ = 0u;
  texture_top_left_ = NULL;
  texture_bottom_right_ = NULL;
  texture_serial_ = 0;
  texture_sample_mode_ = 0u;
  texture_opacity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDrawTexturedRect::~CMsgDrawTexturedRect() {
  // @@protoc_insertion_point(destructor:CMsgDrawTexturedRect)
  SharedDtor();
}

void CMsgDrawTexturedRect::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete texture_top_left_;
    delete texture_bottom_right_;
    delete texture_opacity_;
  }
}

void CMsgDrawTexturedRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDrawTexturedRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDrawTexturedRect_descriptor_;
}

const CMsgDrawTexturedRect& CMsgDrawTexturedRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDrawTexturedRect* CMsgDrawTexturedRect::default_instance_ = NULL;

CMsgDrawTexturedRect* CMsgDrawTexturedRect::New() const {
  return new CMsgDrawTexturedRect;
}

void CMsgDrawTexturedRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDrawTexturedRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(texture_id_, texture_serial_);
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_texture_top_left()) {
      if (texture_top_left_ != NULL) texture_top_left_->::CMsgPoint::Clear();
    }
    if (has_texture_bottom_right()) {
      if (texture_bottom_right_ != NULL) texture_bottom_right_->::CMsgPoint::Clear();
    }
    texture_sample_mode_ = 0u;
    if (has_texture_opacity()) {
      if (texture_opacity_ != NULL) texture_opacity_->::CMsgOpacity::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDrawTexturedRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDrawTexturedRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_texture_id;
        break;
      }

      // optional uint32 texture_id = 3;
      case 3: {
        if (tag == 24) {
         parse_texture_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_id_)));
          set_has_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_texture_top_left;
        break;
      }

      // optional .CMsgPoint texture_top_left = 4;
      case 4: {
        if (tag == 34) {
         parse_texture_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_texture_bottom_right;
        break;
      }

      // optional .CMsgPoint texture_bottom_right = 5;
      case 5: {
        if (tag == 42) {
         parse_texture_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_texture_serial;
        break;
      }

      // optional int32 texture_serial = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_texture_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texture_serial_)));
          set_has_texture_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_texture_sample_mode;
        break;
      }

      // optional uint32 texture_sample_mode = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_texture_sample_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_sample_mode_)));
          set_has_texture_sample_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_texture_opacity;
        break;
      }

      // optional .CMsgOpacity texture_opacity = 8;
      case 8: {
        if (tag == 66) {
         parse_texture_opacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_opacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDrawTexturedRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDrawTexturedRect)
  return false;
#undef DO_
}

void CMsgDrawTexturedRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDrawTexturedRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottom_right(), output);
  }

  // optional uint32 texture_id = 3;
  if (has_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->texture_id(), output);
  }

  // optional .CMsgPoint texture_top_left = 4;
  if (has_texture_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->texture_top_left(), output);
  }

  // optional .CMsgPoint texture_bottom_right = 5;
  if (has_texture_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->texture_bottom_right(), output);
  }

  // optional int32 texture_serial = 6 [default = 0];
  if (has_texture_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->texture_serial(), output);
  }

  // optional uint32 texture_sample_mode = 7 [default = 0];
  if (has_texture_sample_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->texture_sample_mode(), output);
  }

  // optional .CMsgOpacity texture_opacity = 8;
  if (has_texture_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->texture_opacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDrawTexturedRect)
}

::google::protobuf::uint8* CMsgDrawTexturedRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDrawTexturedRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottom_right(), target);
  }

  // optional uint32 texture_id = 3;
  if (has_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->texture_id(), target);
  }

  // optional .CMsgPoint texture_top_left = 4;
  if (has_texture_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->texture_top_left(), target);
  }

  // optional .CMsgPoint texture_bottom_right = 5;
  if (has_texture_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->texture_bottom_right(), target);
  }

  // optional int32 texture_serial = 6 [default = 0];
  if (has_texture_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->texture_serial(), target);
  }

  // optional uint32 texture_sample_mode = 7 [default = 0];
  if (has_texture_sample_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->texture_sample_mode(), target);
  }

  // optional .CMsgOpacity texture_opacity = 8;
  if (has_texture_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->texture_opacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDrawTexturedRect)
  return target;
}

int CMsgDrawTexturedRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 2;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional uint32 texture_id = 3;
    if (has_texture_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_id());
    }

    // optional .CMsgPoint texture_top_left = 4;
    if (has_texture_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_top_left());
    }

    // optional .CMsgPoint texture_bottom_right = 5;
    if (has_texture_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_bottom_right());
    }

    // optional int32 texture_serial = 6 [default = 0];
    if (has_texture_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texture_serial());
    }

    // optional uint32 texture_sample_mode = 7 [default = 0];
    if (has_texture_sample_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_sample_mode());
    }

    // optional .CMsgOpacity texture_opacity = 8;
    if (has_texture_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_opacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDrawTexturedRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDrawTexturedRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDrawTexturedRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDrawTexturedRect::MergeFrom(const CMsgDrawTexturedRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_texture_id()) {
      set_texture_id(from.texture_id());
    }
    if (from.has_texture_top_left()) {
      mutable_texture_top_left()->::CMsgPoint::MergeFrom(from.texture_top_left());
    }
    if (from.has_texture_bottom_right()) {
      mutable_texture_bottom_right()->::CMsgPoint::MergeFrom(from.texture_bottom_right());
    }
    if (from.has_texture_serial()) {
      set_texture_serial(from.texture_serial());
    }
    if (from.has_texture_sample_mode()) {
      set_texture_sample_mode(from.texture_sample_mode());
    }
    if (from.has_texture_opacity()) {
      mutable_texture_opacity()->::CMsgOpacity::MergeFrom(from.texture_opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDrawTexturedRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDrawTexturedRect::CopyFrom(const CMsgDrawTexturedRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDrawTexturedRect::IsInitialized() const {

  if (has_texture_opacity()) {
    if (!this->texture_opacity().IsInitialized()) return false;
  }
  return true;
}

void CMsgDrawTexturedRect::Swap(CMsgDrawTexturedRect* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(texture_id_, other->texture_id_);
    std::swap(texture_top_left_, other->texture_top_left_);
    std::swap(texture_bottom_right_, other->texture_bottom_right_);
    std::swap(texture_serial_, other->texture_serial_);
    std::swap(texture_sample_mode_, other->texture_sample_mode_);
    std::swap(texture_opacity_, other->texture_opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDrawTexturedRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDrawTexturedRect_descriptor_;
  metadata.reflection = CMsgDrawTexturedRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderTexturedRect::kTopLeftFieldNumber;
const int CMsgRenderTexturedRect::kBottomRightFieldNumber;
const int CMsgRenderTexturedRect::kTextureIdFieldNumber;
const int CMsgRenderTexturedRect::kTextureTopLeftFieldNumber;
const int CMsgRenderTexturedRect::kTextureBottomRightFieldNumber;
const int CMsgRenderTexturedRect::kTextureSerialFieldNumber;
const int CMsgRenderTexturedRect::kTextureSampleModeFieldNumber;
const int CMsgRenderTexturedRect::kTextureOpacityFieldNumber;
#endif  // !_MSC_VER

CMsgRenderTexturedRect::CMsgRenderTexturedRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderTexturedRect)
}

void CMsgRenderTexturedRect::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  texture_top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  texture_bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgRenderTexturedRect::CMsgRenderTexturedRect(const CMsgRenderTexturedRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderTexturedRect)
}

void CMsgRenderTexturedRect::SharedCtor() {
  _cached_size_ = 0;
  top_left_ = NULL;
  bottom_right_ = NULL;
  texture_id_ = 0u;
  texture_top_left_ = NULL;
  texture_bottom_right_ = NULL;
  texture_serial_ = 0;
  texture_sample_mode_ = 0u;
  texture_opacity_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderTexturedRect::~CMsgRenderTexturedRect() {
  // @@protoc_insertion_point(destructor:CMsgRenderTexturedRect)
  SharedDtor();
}

void CMsgRenderTexturedRect::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete texture_top_left_;
    delete texture_bottom_right_;
  }
}

void CMsgRenderTexturedRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderTexturedRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderTexturedRect_descriptor_;
}

const CMsgRenderTexturedRect& CMsgRenderTexturedRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderTexturedRect* CMsgRenderTexturedRect::default_instance_ = NULL;

CMsgRenderTexturedRect* CMsgRenderTexturedRect::New() const {
  return new CMsgRenderTexturedRect;
}

void CMsgRenderTexturedRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgRenderTexturedRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(texture_id_, texture_serial_);
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_texture_top_left()) {
      if (texture_top_left_ != NULL) texture_top_left_->::CMsgPoint::Clear();
    }
    if (has_texture_bottom_right()) {
      if (texture_bottom_right_ != NULL) texture_bottom_right_->::CMsgPoint::Clear();
    }
    texture_sample_mode_ = 0u;
    texture_opacity_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderTexturedRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderTexturedRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPoint top_left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_texture_id;
        break;
      }

      // optional uint32 texture_id = 3;
      case 3: {
        if (tag == 24) {
         parse_texture_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_id_)));
          set_has_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_texture_top_left;
        break;
      }

      // optional .CMsgPoint texture_top_left = 4;
      case 4: {
        if (tag == 34) {
         parse_texture_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_texture_bottom_right;
        break;
      }

      // optional .CMsgPoint texture_bottom_right = 5;
      case 5: {
        if (tag == 42) {
         parse_texture_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_texture_serial;
        break;
      }

      // optional int32 texture_serial = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_texture_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texture_serial_)));
          set_has_texture_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_texture_sample_mode;
        break;
      }

      // optional uint32 texture_sample_mode = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_texture_sample_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_sample_mode_)));
          set_has_texture_sample_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_texture_opacity;
        break;
      }

      // optional float texture_opacity = 8 [default = 1];
      case 8: {
        if (tag == 69) {
         parse_texture_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &texture_opacity_)));
          set_has_texture_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderTexturedRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderTexturedRect)
  return false;
#undef DO_
}

void CMsgRenderTexturedRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderTexturedRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottom_right(), output);
  }

  // optional uint32 texture_id = 3;
  if (has_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->texture_id(), output);
  }

  // optional .CMsgPoint texture_top_left = 4;
  if (has_texture_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->texture_top_left(), output);
  }

  // optional .CMsgPoint texture_bottom_right = 5;
  if (has_texture_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->texture_bottom_right(), output);
  }

  // optional int32 texture_serial = 6 [default = 0];
  if (has_texture_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->texture_serial(), output);
  }

  // optional uint32 texture_sample_mode = 7 [default = 0];
  if (has_texture_sample_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->texture_sample_mode(), output);
  }

  // optional float texture_opacity = 8 [default = 1];
  if (has_texture_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->texture_opacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderTexturedRect)
}

::google::protobuf::uint8* CMsgRenderTexturedRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderTexturedRect)
  // optional .CMsgPoint top_left = 1;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 2;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottom_right(), target);
  }

  // optional uint32 texture_id = 3;
  if (has_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->texture_id(), target);
  }

  // optional .CMsgPoint texture_top_left = 4;
  if (has_texture_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->texture_top_left(), target);
  }

  // optional .CMsgPoint texture_bottom_right = 5;
  if (has_texture_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->texture_bottom_right(), target);
  }

  // optional int32 texture_serial = 6 [default = 0];
  if (has_texture_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->texture_serial(), target);
  }

  // optional uint32 texture_sample_mode = 7 [default = 0];
  if (has_texture_sample_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->texture_sample_mode(), target);
  }

  // optional float texture_opacity = 8 [default = 1];
  if (has_texture_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->texture_opacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderTexturedRect)
  return target;
}

int CMsgRenderTexturedRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgPoint top_left = 1;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 2;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional uint32 texture_id = 3;
    if (has_texture_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_id());
    }

    // optional .CMsgPoint texture_top_left = 4;
    if (has_texture_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_top_left());
    }

    // optional .CMsgPoint texture_bottom_right = 5;
    if (has_texture_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_bottom_right());
    }

    // optional int32 texture_serial = 6 [default = 0];
    if (has_texture_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texture_serial());
    }

    // optional uint32 texture_sample_mode = 7 [default = 0];
    if (has_texture_sample_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_sample_mode());
    }

    // optional float texture_opacity = 8 [default = 1];
    if (has_texture_opacity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderTexturedRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderTexturedRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderTexturedRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderTexturedRect::MergeFrom(const CMsgRenderTexturedRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_texture_id()) {
      set_texture_id(from.texture_id());
    }
    if (from.has_texture_top_left()) {
      mutable_texture_top_left()->::CMsgPoint::MergeFrom(from.texture_top_left());
    }
    if (from.has_texture_bottom_right()) {
      mutable_texture_bottom_right()->::CMsgPoint::MergeFrom(from.texture_bottom_right());
    }
    if (from.has_texture_serial()) {
      set_texture_serial(from.texture_serial());
    }
    if (from.has_texture_sample_mode()) {
      set_texture_sample_mode(from.texture_sample_mode());
    }
    if (from.has_texture_opacity()) {
      set_texture_opacity(from.texture_opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderTexturedRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderTexturedRect::CopyFrom(const CMsgRenderTexturedRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderTexturedRect::IsInitialized() const {

  return true;
}

void CMsgRenderTexturedRect::Swap(CMsgRenderTexturedRect* other) {
  if (other != this) {
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(texture_id_, other->texture_id_);
    std::swap(texture_top_left_, other->texture_top_left_);
    std::swap(texture_bottom_right_, other->texture_bottom_right_);
    std::swap(texture_serial_, other->texture_serial_);
    std::swap(texture_sample_mode_, other->texture_sample_mode_);
    std::swap(texture_opacity_, other->texture_opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderTexturedRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderTexturedRect_descriptor_;
  metadata.reflection = CMsgRenderTexturedRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgLockTexture::kTextureIdFieldNumber;
const int CMsgLockTexture::kTextureSerialFieldNumber;
#endif  // !_MSC_VER

CMsgLockTexture::CMsgLockTexture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgLockTexture)
}

void CMsgLockTexture::InitAsDefaultInstance() {
}

CMsgLockTexture::CMsgLockTexture(const CMsgLockTexture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgLockTexture)
}

void CMsgLockTexture::SharedCtor() {
  _cached_size_ = 0;
  texture_id_ = 0u;
  texture_serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgLockTexture::~CMsgLockTexture() {
  // @@protoc_insertion_point(destructor:CMsgLockTexture)
  SharedDtor();
}

void CMsgLockTexture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgLockTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLockTexture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgLockTexture_descriptor_;
}

const CMsgLockTexture& CMsgLockTexture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgLockTexture* CMsgLockTexture::default_instance_ = NULL;

CMsgLockTexture* CMsgLockTexture::New() const {
  return new CMsgLockTexture;
}

void CMsgLockTexture::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgLockTexture*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(texture_id_, texture_serial_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgLockTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgLockTexture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 texture_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_id_)));
          set_has_texture_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_texture_serial;
        break;
      }

      // optional int32 texture_serial = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_texture_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texture_serial_)));
          set_has_texture_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgLockTexture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgLockTexture)
  return false;
#undef DO_
}

void CMsgLockTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgLockTexture)
  // optional uint32 texture_id = 1;
  if (has_texture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->texture_id(), output);
  }

  // optional int32 texture_serial = 2 [default = 0];
  if (has_texture_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->texture_serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgLockTexture)
}

::google::protobuf::uint8* CMsgLockTexture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLockTexture)
  // optional uint32 texture_id = 1;
  if (has_texture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->texture_id(), target);
  }

  // optional int32 texture_serial = 2 [default = 0];
  if (has_texture_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->texture_serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLockTexture)
  return target;
}

int CMsgLockTexture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 texture_id = 1;
    if (has_texture_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_id());
    }

    // optional int32 texture_serial = 2 [default = 0];
    if (has_texture_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texture_serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLockTexture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgLockTexture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgLockTexture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgLockTexture::MergeFrom(const CMsgLockTexture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_texture_id()) {
      set_texture_id(from.texture_id());
    }
    if (from.has_texture_serial()) {
      set_texture_serial(from.texture_serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgLockTexture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLockTexture::CopyFrom(const CMsgLockTexture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLockTexture::IsInitialized() const {

  return true;
}

void CMsgLockTexture::Swap(CMsgLockTexture* other) {
  if (other != this) {
    std::swap(texture_id_, other->texture_id_);
    std::swap(texture_serial_, other->texture_serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgLockTexture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgLockTexture_descriptor_;
  metadata.reflection = CMsgLockTexture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTextInlineObject::kWidthFieldNumber;
const int CMsgTextInlineObject::kHeightFieldNumber;
#endif  // !_MSC_VER

CMsgTextInlineObject::CMsgTextInlineObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTextInlineObject)
}

void CMsgTextInlineObject::InitAsDefaultInstance() {
}

CMsgTextInlineObject::CMsgTextInlineObject(const CMsgTextInlineObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTextInlineObject)
}

void CMsgTextInlineObject::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTextInlineObject::~CMsgTextInlineObject() {
  // @@protoc_insertion_point(destructor:CMsgTextInlineObject)
  SharedDtor();
}

void CMsgTextInlineObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTextInlineObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTextInlineObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTextInlineObject_descriptor_;
}

const CMsgTextInlineObject& CMsgTextInlineObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTextInlineObject* CMsgTextInlineObject::default_instance_ = NULL;

CMsgTextInlineObject* CMsgTextInlineObject::New() const {
  return new CMsgTextInlineObject;
}

void CMsgTextInlineObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTextInlineObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTextInlineObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTextInlineObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTextInlineObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTextInlineObject)
  return false;
#undef DO_
}

void CMsgTextInlineObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTextInlineObject)
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTextInlineObject)
}

::google::protobuf::uint8* CMsgTextInlineObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTextInlineObject)
  // optional float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // optional float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTextInlineObject)
  return target;
}

int CMsgTextInlineObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTextInlineObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTextInlineObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTextInlineObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTextInlineObject::MergeFrom(const CMsgTextInlineObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTextInlineObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTextInlineObject::CopyFrom(const CMsgTextInlineObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTextInlineObject::IsInitialized() const {

  return true;
}

void CMsgTextInlineObject::Swap(CMsgTextInlineObject* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTextInlineObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTextInlineObject_descriptor_;
  metadata.reflection = CMsgTextInlineObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTextFormat::kFontNameFieldNumber;
const int CMsgTextFormat::kFontSizeFieldNumber;
const int CMsgTextFormat::kFontWeightFieldNumber;
const int CMsgTextFormat::kFontStyleFieldNumber;
const int CMsgTextFormat::kUnderlineFieldNumber;
const int CMsgTextFormat::kStrikethroughFieldNumber;
const int CMsgTextFormat::kFillBrushCollectionFieldNumber;
const int CMsgTextFormat::kLetterSpacingFieldNumber;
const int CMsgTextFormat::kInlineObjectFieldNumber;
#endif  // !_MSC_VER

CMsgTextFormat::CMsgTextFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTextFormat)
}

void CMsgTextFormat::InitAsDefaultInstance() {
  fill_brush_collection_ = const_cast< ::CMsgFillBrushCollection*>(&::CMsgFillBrushCollection::default_instance());
  inline_object_ = const_cast< ::CMsgTextInlineObject*>(&::CMsgTextInlineObject::default_instance());
}

CMsgTextFormat::CMsgTextFormat(const CMsgTextFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTextFormat)
}

void CMsgTextFormat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_size_ = 0;
  font_weight_ = -1;
  font_style_ = -1;
  underline_ = false;
  strikethrough_ = false;
  fill_brush_collection_ = NULL;
  letter_spacing_ = 0;
  inline_object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTextFormat::~CMsgTextFormat() {
  // @@protoc_insertion_point(destructor:CMsgTextFormat)
  SharedDtor();
}

void CMsgTextFormat::SharedDtor() {
  if (font_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete font_name_;
  }
  if (this != default_instance_) {
    delete fill_brush_collection_;
    delete inline_object_;
  }
}

void CMsgTextFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTextFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTextFormat_descriptor_;
}

const CMsgTextFormat& CMsgTextFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTextFormat* CMsgTextFormat::default_instance_ = NULL;

CMsgTextFormat* CMsgTextFormat::New() const {
  return new CMsgTextFormat;
}

void CMsgTextFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTextFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(underline_, letter_spacing_);
    if (has_font_name()) {
      if (font_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        font_name_->clear();
      }
    }
    font_size_ = 0;
    font_weight_ = -1;
    font_style_ = -1;
    if (has_fill_brush_collection()) {
      if (fill_brush_collection_ != NULL) fill_brush_collection_->::CMsgFillBrushCollection::Clear();
    }
  }
  if (has_inline_object()) {
    if (inline_object_ != NULL) inline_object_->::CMsgTextInlineObject::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTextFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTextFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string font_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "font_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_font_size;
        break;
      }

      // optional double font_size = 2;
      case 2: {
        if (tag == 17) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_font_weight;
        break;
      }

      // optional int32 font_weight = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_font_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_weight_)));
          set_has_font_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_font_style;
        break;
      }

      // optional int32 font_style = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_font_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_style_)));
          set_has_font_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_underline;
        break;
      }

      // optional bool underline = 5;
      case 5: {
        if (tag == 40) {
         parse_underline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strikethrough;
        break;
      }

      // optional bool strikethrough = 6;
      case 6: {
        if (tag == 48) {
         parse_strikethrough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strikethrough_)));
          set_has_strikethrough();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fill_brush_collection;
        break;
      }

      // optional .CMsgFillBrushCollection fill_brush_collection = 7;
      case 7: {
        if (tag == 58) {
         parse_fill_brush_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_brush_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_letter_spacing;
        break;
      }

      // optional int32 letter_spacing = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_letter_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &letter_spacing_)));
          set_has_letter_spacing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_inline_object;
        break;
      }

      // optional .CMsgTextInlineObject inline_object = 9;
      case 9: {
        if (tag == 74) {
         parse_inline_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inline_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTextFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTextFormat)
  return false;
#undef DO_
}

void CMsgTextFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTextFormat)
  // optional string font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "font_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->font_name(), output);
  }

  // optional double font_size = 2;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->font_size(), output);
  }

  // optional int32 font_weight = 3 [default = -1];
  if (has_font_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->font_weight(), output);
  }

  // optional int32 font_style = 4 [default = -1];
  if (has_font_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->font_style(), output);
  }

  // optional bool underline = 5;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->underline(), output);
  }

  // optional bool strikethrough = 6;
  if (has_strikethrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->strikethrough(), output);
  }

  // optional .CMsgFillBrushCollection fill_brush_collection = 7;
  if (has_fill_brush_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fill_brush_collection(), output);
  }

  // optional int32 letter_spacing = 8 [default = 0];
  if (has_letter_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->letter_spacing(), output);
  }

  // optional .CMsgTextInlineObject inline_object = 9;
  if (has_inline_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->inline_object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTextFormat)
}

::google::protobuf::uint8* CMsgTextFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTextFormat)
  // optional string font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "font_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->font_name(), target);
  }

  // optional double font_size = 2;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->font_size(), target);
  }

  // optional int32 font_weight = 3 [default = -1];
  if (has_font_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->font_weight(), target);
  }

  // optional int32 font_style = 4 [default = -1];
  if (has_font_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->font_style(), target);
  }

  // optional bool underline = 5;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->underline(), target);
  }

  // optional bool strikethrough = 6;
  if (has_strikethrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->strikethrough(), target);
  }

  // optional .CMsgFillBrushCollection fill_brush_collection = 7;
  if (has_fill_brush_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fill_brush_collection(), target);
  }

  // optional int32 letter_spacing = 8 [default = 0];
  if (has_letter_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->letter_spacing(), target);
  }

  // optional .CMsgTextInlineObject inline_object = 9;
  if (has_inline_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->inline_object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTextFormat)
  return target;
}

int CMsgTextFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string font_name = 1;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional double font_size = 2;
    if (has_font_size()) {
      total_size += 1 + 8;
    }

    // optional int32 font_weight = 3 [default = -1];
    if (has_font_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_weight());
    }

    // optional int32 font_style = 4 [default = -1];
    if (has_font_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_style());
    }

    // optional bool underline = 5;
    if (has_underline()) {
      total_size += 1 + 1;
    }

    // optional bool strikethrough = 6;
    if (has_strikethrough()) {
      total_size += 1 + 1;
    }

    // optional .CMsgFillBrushCollection fill_brush_collection = 7;
    if (has_fill_brush_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill_brush_collection());
    }

    // optional int32 letter_spacing = 8 [default = 0];
    if (has_letter_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->letter_spacing());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgTextInlineObject inline_object = 9;
    if (has_inline_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inline_object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTextFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTextFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTextFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTextFormat::MergeFrom(const CMsgTextFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_font_weight()) {
      set_font_weight(from.font_weight());
    }
    if (from.has_font_style()) {
      set_font_style(from.font_style());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_strikethrough()) {
      set_strikethrough(from.strikethrough());
    }
    if (from.has_fill_brush_collection()) {
      mutable_fill_brush_collection()->::CMsgFillBrushCollection::MergeFrom(from.fill_brush_collection());
    }
    if (from.has_letter_spacing()) {
      set_letter_spacing(from.letter_spacing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inline_object()) {
      mutable_inline_object()->::CMsgTextInlineObject::MergeFrom(from.inline_object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTextFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTextFormat::CopyFrom(const CMsgTextFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTextFormat::IsInitialized() const {

  if (has_fill_brush_collection()) {
    if (!this->fill_brush_collection().IsInitialized()) return false;
  }
  return true;
}

void CMsgTextFormat::Swap(CMsgTextFormat* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(font_weight_, other->font_weight_);
    std::swap(font_style_, other->font_style_);
    std::swap(underline_, other->underline_);
    std::swap(strikethrough_, other->strikethrough_);
    std::swap(fill_brush_collection_, other->fill_brush_collection_);
    std::swap(letter_spacing_, other->letter_spacing_);
    std::swap(inline_object_, other->inline_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTextFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTextFormat_descriptor_;
  metadata.reflection = CMsgTextFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTextRangeFormat::kStartIndexFieldNumber;
const int CMsgTextRangeFormat::kEndIndexFieldNumber;
const int CMsgTextRangeFormat::kFormatFieldNumber;
#endif  // !_MSC_VER

CMsgTextRangeFormat::CMsgTextRangeFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgTextRangeFormat)
}

void CMsgTextRangeFormat::InitAsDefaultInstance() {
  format_ = const_cast< ::CMsgTextFormat*>(&::CMsgTextFormat::default_instance());
}

CMsgTextRangeFormat::CMsgTextRangeFormat(const CMsgTextRangeFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgTextRangeFormat)
}

void CMsgTextRangeFormat::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0u;
  end_index_ = 0u;
  format_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTextRangeFormat::~CMsgTextRangeFormat() {
  // @@protoc_insertion_point(destructor:CMsgTextRangeFormat)
  SharedDtor();
}

void CMsgTextRangeFormat::SharedDtor() {
  if (this != default_instance_) {
    delete format_;
  }
}

void CMsgTextRangeFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTextRangeFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTextRangeFormat_descriptor_;
}

const CMsgTextRangeFormat& CMsgTextRangeFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgTextRangeFormat* CMsgTextRangeFormat::default_instance_ = NULL;

CMsgTextRangeFormat* CMsgTextRangeFormat::New() const {
  return new CMsgTextRangeFormat;
}

void CMsgTextRangeFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgTextRangeFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_index_, end_index_);
    if (has_format()) {
      if (format_ != NULL) format_->::CMsgTextFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTextRangeFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgTextRangeFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_index;
        break;
      }

      // optional uint32 end_index = 2;
      case 2: {
        if (tag == 16) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // optional .CMsgTextFormat format = 3;
      case 3: {
        if (tag == 26) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgTextRangeFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgTextRangeFormat)
  return false;
#undef DO_
}

void CMsgTextRangeFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgTextRangeFormat)
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_index(), output);
  }

  // optional uint32 end_index = 2;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_index(), output);
  }

  // optional .CMsgTextFormat format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgTextRangeFormat)
}

::google::protobuf::uint8* CMsgTextRangeFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTextRangeFormat)
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_index(), target);
  }

  // optional uint32 end_index = 2;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_index(), target);
  }

  // optional .CMsgTextFormat format = 3;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTextRangeFormat)
  return target;
}

int CMsgTextRangeFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 end_index = 2;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

    // optional .CMsgTextFormat format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTextRangeFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTextRangeFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTextRangeFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTextRangeFormat::MergeFrom(const CMsgTextRangeFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_format()) {
      mutable_format()->::CMsgTextFormat::MergeFrom(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTextRangeFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTextRangeFormat::CopyFrom(const CMsgTextRangeFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTextRangeFormat::IsInitialized() const {

  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  return true;
}

void CMsgTextRangeFormat::Swap(CMsgTextRangeFormat* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTextRangeFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTextRangeFormat_descriptor_;
  metadata.reflection = CMsgTextRangeFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderTextFormat::kFontNameFieldNumber;
const int CMsgRenderTextFormat::kFontSizeFieldNumber;
const int CMsgRenderTextFormat::kFontWeightFieldNumber;
const int CMsgRenderTextFormat::kFontStyleFieldNumber;
const int CMsgRenderTextFormat::kUnderlineFieldNumber;
const int CMsgRenderTextFormat::kStrikethroughFieldNumber;
const int CMsgRenderTextFormat::kFillBrushCollectionFieldNumber;
const int CMsgRenderTextFormat::kLetterSpacingFieldNumber;
const int CMsgRenderTextFormat::kInlineObjectFieldNumber;
#endif  // !_MSC_VER

CMsgRenderTextFormat::CMsgRenderTextFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderTextFormat)
}

void CMsgRenderTextFormat::InitAsDefaultInstance() {
  fill_brush_collection_ = const_cast< ::CMsgRenderFillBrushCollection*>(&::CMsgRenderFillBrushCollection::default_instance());
  inline_object_ = const_cast< ::CMsgTextInlineObject*>(&::CMsgTextInlineObject::default_instance());
}

CMsgRenderTextFormat::CMsgRenderTextFormat(const CMsgRenderTextFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderTextFormat)
}

void CMsgRenderTextFormat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_size_ = 0;
  font_weight_ = -1;
  font_style_ = -1;
  underline_ = false;
  strikethrough_ = false;
  fill_brush_collection_ = NULL;
  letter_spacing_ = 0;
  inline_object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderTextFormat::~CMsgRenderTextFormat() {
  // @@protoc_insertion_point(destructor:CMsgRenderTextFormat)
  SharedDtor();
}

void CMsgRenderTextFormat::SharedDtor() {
  if (font_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete font_name_;
  }
  if (this != default_instance_) {
    delete fill_brush_collection_;
    delete inline_object_;
  }
}

void CMsgRenderTextFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderTextFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderTextFormat_descriptor_;
}

const CMsgRenderTextFormat& CMsgRenderTextFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderTextFormat* CMsgRenderTextFormat::default_instance_ = NULL;

CMsgRenderTextFormat* CMsgRenderTextFormat::New() const {
  return new CMsgRenderTextFormat;
}

void CMsgRenderTextFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgRenderTextFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(underline_, letter_spacing_);
    if (has_font_name()) {
      if (font_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        font_name_->clear();
      }
    }
    font_size_ = 0;
    font_weight_ = -1;
    font_style_ = -1;
    if (has_fill_brush_collection()) {
      if (fill_brush_collection_ != NULL) fill_brush_collection_->::CMsgRenderFillBrushCollection::Clear();
    }
  }
  if (has_inline_object()) {
    if (inline_object_ != NULL) inline_object_->::CMsgTextInlineObject::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderTextFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderTextFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string font_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "font_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_font_size;
        break;
      }

      // optional double font_size = 2;
      case 2: {
        if (tag == 17) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_font_weight;
        break;
      }

      // optional int32 font_weight = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_font_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_weight_)));
          set_has_font_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_font_style;
        break;
      }

      // optional int32 font_style = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_font_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_style_)));
          set_has_font_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_underline;
        break;
      }

      // optional bool underline = 5;
      case 5: {
        if (tag == 40) {
         parse_underline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strikethrough;
        break;
      }

      // optional bool strikethrough = 6;
      case 6: {
        if (tag == 48) {
         parse_strikethrough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strikethrough_)));
          set_has_strikethrough();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fill_brush_collection;
        break;
      }

      // optional .CMsgRenderFillBrushCollection fill_brush_collection = 7;
      case 7: {
        if (tag == 58) {
         parse_fill_brush_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_brush_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_letter_spacing;
        break;
      }

      // optional int32 letter_spacing = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_letter_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &letter_spacing_)));
          set_has_letter_spacing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_inline_object;
        break;
      }

      // optional .CMsgTextInlineObject inline_object = 9;
      case 9: {
        if (tag == 74) {
         parse_inline_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inline_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderTextFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderTextFormat)
  return false;
#undef DO_
}

void CMsgRenderTextFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderTextFormat)
  // optional string font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "font_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->font_name(), output);
  }

  // optional double font_size = 2;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->font_size(), output);
  }

  // optional int32 font_weight = 3 [default = -1];
  if (has_font_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->font_weight(), output);
  }

  // optional int32 font_style = 4 [default = -1];
  if (has_font_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->font_style(), output);
  }

  // optional bool underline = 5;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->underline(), output);
  }

  // optional bool strikethrough = 6;
  if (has_strikethrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->strikethrough(), output);
  }

  // optional .CMsgRenderFillBrushCollection fill_brush_collection = 7;
  if (has_fill_brush_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fill_brush_collection(), output);
  }

  // optional int32 letter_spacing = 8 [default = 0];
  if (has_letter_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->letter_spacing(), output);
  }

  // optional .CMsgTextInlineObject inline_object = 9;
  if (has_inline_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->inline_object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderTextFormat)
}

::google::protobuf::uint8* CMsgRenderTextFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderTextFormat)
  // optional string font_name = 1;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "font_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->font_name(), target);
  }

  // optional double font_size = 2;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->font_size(), target);
  }

  // optional int32 font_weight = 3 [default = -1];
  if (has_font_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->font_weight(), target);
  }

  // optional int32 font_style = 4 [default = -1];
  if (has_font_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->font_style(), target);
  }

  // optional bool underline = 5;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->underline(), target);
  }

  // optional bool strikethrough = 6;
  if (has_strikethrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->strikethrough(), target);
  }

  // optional .CMsgRenderFillBrushCollection fill_brush_collection = 7;
  if (has_fill_brush_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fill_brush_collection(), target);
  }

  // optional int32 letter_spacing = 8 [default = 0];
  if (has_letter_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->letter_spacing(), target);
  }

  // optional .CMsgTextInlineObject inline_object = 9;
  if (has_inline_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->inline_object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderTextFormat)
  return target;
}

int CMsgRenderTextFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string font_name = 1;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional double font_size = 2;
    if (has_font_size()) {
      total_size += 1 + 8;
    }

    // optional int32 font_weight = 3 [default = -1];
    if (has_font_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_weight());
    }

    // optional int32 font_style = 4 [default = -1];
    if (has_font_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_style());
    }

    // optional bool underline = 5;
    if (has_underline()) {
      total_size += 1 + 1;
    }

    // optional bool strikethrough = 6;
    if (has_strikethrough()) {
      total_size += 1 + 1;
    }

    // optional .CMsgRenderFillBrushCollection fill_brush_collection = 7;
    if (has_fill_brush_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill_brush_collection());
    }

    // optional int32 letter_spacing = 8 [default = 0];
    if (has_letter_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->letter_spacing());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgTextInlineObject inline_object = 9;
    if (has_inline_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inline_object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderTextFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderTextFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderTextFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderTextFormat::MergeFrom(const CMsgRenderTextFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_font_weight()) {
      set_font_weight(from.font_weight());
    }
    if (from.has_font_style()) {
      set_font_style(from.font_style());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_strikethrough()) {
      set_strikethrough(from.strikethrough());
    }
    if (from.has_fill_brush_collection()) {
      mutable_fill_brush_collection()->::CMsgRenderFillBrushCollection::MergeFrom(from.fill_brush_collection());
    }
    if (from.has_letter_spacing()) {
      set_letter_spacing(from.letter_spacing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inline_object()) {
      mutable_inline_object()->::CMsgTextInlineObject::MergeFrom(from.inline_object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderTextFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderTextFormat::CopyFrom(const CMsgRenderTextFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderTextFormat::IsInitialized() const {

  return true;
}

void CMsgRenderTextFormat::Swap(CMsgRenderTextFormat* other) {
  if (other != this) {
    std::swap(font_name_, other->font_name_);
    std::swap(font_size_, other->font_size_);
    std::swap(font_weight_, other->font_weight_);
    std::swap(font_style_, other->font_style_);
    std::swap(underline_, other->underline_);
    std::swap(strikethrough_, other->strikethrough_);
    std::swap(fill_brush_collection_, other->fill_brush_collection_);
    std::swap(letter_spacing_, other->letter_spacing_);
    std::swap(inline_object_, other->inline_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderTextFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderTextFormat_descriptor_;
  metadata.reflection = CMsgRenderTextFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderTextRangeFormat::kStartIndexFieldNumber;
const int CMsgRenderTextRangeFormat::kEndIndexFieldNumber;
const int CMsgRenderTextRangeFormat::kFormatFieldNumber;
#endif  // !_MSC_VER

CMsgRenderTextRangeFormat::CMsgRenderTextRangeFormat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderTextRangeFormat)
}

void CMsgRenderTextRangeFormat::InitAsDefaultInstance() {
  format_ = const_cast< ::CMsgRenderTextFormat*>(&::CMsgRenderTextFormat::default_instance());
}

CMsgRenderTextRangeFormat::CMsgRenderTextRangeFormat(const CMsgRenderTextRangeFormat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderTextRangeFormat)
}

void CMsgRenderTextRangeFormat::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0u;
  end_index_ = 0u;
  format_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderTextRangeFormat::~CMsgRenderTextRangeFormat() {
  // @@protoc_insertion_point(destructor:CMsgRenderTextRangeFormat)
  SharedDtor();
}

void CMsgRenderTextRangeFormat::SharedDtor() {
  if (this != default_instance_) {
    delete format_;
  }
}

void CMsgRenderTextRangeFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderTextRangeFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderTextRangeFormat_descriptor_;
}

const CMsgRenderTextRangeFormat& CMsgRenderTextRangeFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderTextRangeFormat* CMsgRenderTextRangeFormat::default_instance_ = NULL;

CMsgRenderTextRangeFormat* CMsgRenderTextRangeFormat::New() const {
  return new CMsgRenderTextRangeFormat;
}

void CMsgRenderTextRangeFormat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgRenderTextRangeFormat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_index_, end_index_);
    if (has_format()) {
      if (format_ != NULL) format_->::CMsgRenderTextFormat::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderTextRangeFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderTextRangeFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_index;
        break;
      }

      // optional uint32 end_index = 2;
      case 2: {
        if (tag == 16) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // optional .CMsgRenderTextFormat format = 3;
      case 3: {
        if (tag == 26) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderTextRangeFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderTextRangeFormat)
  return false;
#undef DO_
}

void CMsgRenderTextRangeFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderTextRangeFormat)
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_index(), output);
  }

  // optional uint32 end_index = 2;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_index(), output);
  }

  // optional .CMsgRenderTextFormat format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderTextRangeFormat)
}

::google::protobuf::uint8* CMsgRenderTextRangeFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderTextRangeFormat)
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_index(), target);
  }

  // optional uint32 end_index = 2;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_index(), target);
  }

  // optional .CMsgRenderTextFormat format = 3;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderTextRangeFormat)
  return target;
}

int CMsgRenderTextRangeFormat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 end_index = 2;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

    // optional .CMsgRenderTextFormat format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderTextRangeFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderTextRangeFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderTextRangeFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderTextRangeFormat::MergeFrom(const CMsgRenderTextRangeFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_format()) {
      mutable_format()->::CMsgRenderTextFormat::MergeFrom(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderTextRangeFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderTextRangeFormat::CopyFrom(const CMsgRenderTextRangeFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderTextRangeFormat::IsInitialized() const {

  return true;
}

void CMsgRenderTextRangeFormat::Swap(CMsgRenderTextRangeFormat* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderTextRangeFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderTextRangeFormat_descriptor_;
  metadata.reflection = CMsgRenderTextRangeFormat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDrawTextRegion::kRawTextFieldNumber;
const int CMsgDrawTextRegion::kTextCharsFieldNumber;
const int CMsgDrawTextRegion::kTextEncodingFieldNumber;
const int CMsgDrawTextRegion::kDefaultFormatFieldNumber;
const int CMsgDrawTextRegion::kTextAlignFieldNumber;
const int CMsgDrawTextRegion::kLineHeightFieldNumber;
const int CMsgDrawTextRegion::kTopLeftFieldNumber;
const int CMsgDrawTextRegion::kBottomRightFieldNumber;
const int CMsgDrawTextRegion::kWrappingFieldNumber;
const int CMsgDrawTextRegion::kEllipsisFieldNumber;
const int CMsgDrawTextRegion::kRangeFormatsFieldNumber;
#endif  // !_MSC_VER

CMsgDrawTextRegion::CMsgDrawTextRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDrawTextRegion)
}

void CMsgDrawTextRegion::InitAsDefaultInstance() {
  default_format_ = const_cast< ::CMsgTextFormat*>(&::CMsgTextFormat::default_instance());
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgDrawTextRegion::CMsgDrawTextRegion(const CMsgDrawTextRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgDrawTextRegion)
}

void CMsgDrawTextRegion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raw_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_chars_ = 0;
  text_encoding_ = 0;
  default_format_ = NULL;
  text_align_ = 0u;
  line_height_ = 0u;
  top_left_ = NULL;
  bottom_right_ = NULL;
  wrapping_ = false;
  ellipsis_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDrawTextRegion::~CMsgDrawTextRegion() {
  // @@protoc_insertion_point(destructor:CMsgDrawTextRegion)
  SharedDtor();
}

void CMsgDrawTextRegion::SharedDtor() {
  if (raw_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_text_;
  }
  if (this != default_instance_) {
    delete default_format_;
    delete top_left_;
    delete bottom_right_;
  }
}

void CMsgDrawTextRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDrawTextRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDrawTextRegion_descriptor_;
}

const CMsgDrawTextRegion& CMsgDrawTextRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgDrawTextRegion* CMsgDrawTextRegion::default_instance_ = NULL;

CMsgDrawTextRegion* CMsgDrawTextRegion::New() const {
  return new CMsgDrawTextRegion;
}

void CMsgDrawTextRegion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgDrawTextRegion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(text_chars_, text_encoding_);
    ZR_(text_align_, line_height_);
    if (has_raw_text()) {
      if (raw_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_text_->clear();
      }
    }
    if (has_default_format()) {
      if (default_format_ != NULL) default_format_->::CMsgTextFormat::Clear();
    }
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
  }
  ZR_(wrapping_, ellipsis_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  range_formats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDrawTextRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDrawTextRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgTextFormat default_format = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_text_align;
        break;
      }

      // optional uint32 text_align = 4;
      case 4: {
        if (tag == 32) {
         parse_text_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_align_)));
          set_has_text_align();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line_height;
        break;
      }

      // optional uint32 line_height = 5;
      case 5: {
        if (tag == 40) {
         parse_line_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_height_)));
          set_has_line_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_top_left;
        break;
      }

      // optional .CMsgPoint top_left = 6;
      case 6: {
        if (tag == 50) {
         parse_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 7;
      case 7: {
        if (tag == 58) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wrapping;
        break;
      }

      // optional bool wrapping = 8;
      case 8: {
        if (tag == 64) {
         parse_wrapping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrapping_)));
          set_has_wrapping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ellipsis;
        break;
      }

      // optional bool ellipsis = 9;
      case 9: {
        if (tag == 72) {
         parse_ellipsis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ellipsis_)));
          set_has_ellipsis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_range_formats;
        break;
      }

      // repeated .CMsgTextRangeFormat range_formats = 10;
      case 10: {
        if (tag == 82) {
         parse_range_formats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_formats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_range_formats;
        if (input->ExpectTag(90)) goto parse_raw_text;
        break;
      }

      // optional bytes raw_text = 11;
      case 11: {
        if (tag == 90) {
         parse_raw_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_text_chars;
        break;
      }

      // optional int32 text_chars = 12;
      case 12: {
        if (tag == 96) {
         parse_text_chars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_chars_)));
          set_has_text_chars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_text_encoding;
        break;
      }

      // optional int32 text_encoding = 13;
      case 13: {
        if (tag == 104) {
         parse_text_encoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_encoding_)));
          set_has_text_encoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDrawTextRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDrawTextRegion)
  return false;
#undef DO_
}

void CMsgDrawTextRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDrawTextRegion)
  // optional .CMsgTextFormat default_format = 3;
  if (has_default_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->default_format(), output);
  }

  // optional uint32 text_align = 4;
  if (has_text_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->text_align(), output);
  }

  // optional uint32 line_height = 5;
  if (has_line_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_height(), output);
  }

  // optional .CMsgPoint top_left = 6;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 7;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bottom_right(), output);
  }

  // optional bool wrapping = 8;
  if (has_wrapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wrapping(), output);
  }

  // optional bool ellipsis = 9;
  if (has_ellipsis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ellipsis(), output);
  }

  // repeated .CMsgTextRangeFormat range_formats = 10;
  for (int i = 0; i < this->range_formats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->range_formats(i), output);
  }

  // optional bytes raw_text = 11;
  if (has_raw_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->raw_text(), output);
  }

  // optional int32 text_chars = 12;
  if (has_text_chars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->text_chars(), output);
  }

  // optional int32 text_encoding = 13;
  if (has_text_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->text_encoding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDrawTextRegion)
}

::google::protobuf::uint8* CMsgDrawTextRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDrawTextRegion)
  // optional .CMsgTextFormat default_format = 3;
  if (has_default_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->default_format(), target);
  }

  // optional uint32 text_align = 4;
  if (has_text_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->text_align(), target);
  }

  // optional uint32 line_height = 5;
  if (has_line_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_height(), target);
  }

  // optional .CMsgPoint top_left = 6;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 7;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bottom_right(), target);
  }

  // optional bool wrapping = 8;
  if (has_wrapping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wrapping(), target);
  }

  // optional bool ellipsis = 9;
  if (has_ellipsis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ellipsis(), target);
  }

  // repeated .CMsgTextRangeFormat range_formats = 10;
  for (int i = 0; i < this->range_formats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->range_formats(i), target);
  }

  // optional bytes raw_text = 11;
  if (has_raw_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->raw_text(), target);
  }

  // optional int32 text_chars = 12;
  if (has_text_chars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->text_chars(), target);
  }

  // optional int32 text_encoding = 13;
  if (has_text_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->text_encoding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDrawTextRegion)
  return target;
}

int CMsgDrawTextRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes raw_text = 11;
    if (has_raw_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_text());
    }

    // optional int32 text_chars = 12;
    if (has_text_chars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_chars());
    }

    // optional int32 text_encoding = 13;
    if (has_text_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_encoding());
    }

    // optional .CMsgTextFormat default_format = 3;
    if (has_default_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_format());
    }

    // optional uint32 text_align = 4;
    if (has_text_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_align());
    }

    // optional uint32 line_height = 5;
    if (has_line_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_height());
    }

    // optional .CMsgPoint top_left = 6;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 7;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool wrapping = 8;
    if (has_wrapping()) {
      total_size += 1 + 1;
    }

    // optional bool ellipsis = 9;
    if (has_ellipsis()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgTextRangeFormat range_formats = 10;
  total_size += 1 * this->range_formats_size();
  for (int i = 0; i < this->range_formats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range_formats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDrawTextRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDrawTextRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDrawTextRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDrawTextRegion::MergeFrom(const CMsgDrawTextRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_formats_.MergeFrom(from.range_formats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_text()) {
      set_raw_text(from.raw_text());
    }
    if (from.has_text_chars()) {
      set_text_chars(from.text_chars());
    }
    if (from.has_text_encoding()) {
      set_text_encoding(from.text_encoding());
    }
    if (from.has_default_format()) {
      mutable_default_format()->::CMsgTextFormat::MergeFrom(from.default_format());
    }
    if (from.has_text_align()) {
      set_text_align(from.text_align());
    }
    if (from.has_line_height()) {
      set_line_height(from.line_height());
    }
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wrapping()) {
      set_wrapping(from.wrapping());
    }
    if (from.has_ellipsis()) {
      set_ellipsis(from.ellipsis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDrawTextRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDrawTextRegion::CopyFrom(const CMsgDrawTextRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDrawTextRegion::IsInitialized() const {

  if (has_default_format()) {
    if (!this->default_format().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->range_formats())) return false;
  return true;
}

void CMsgDrawTextRegion::Swap(CMsgDrawTextRegion* other) {
  if (other != this) {
    std::swap(raw_text_, other->raw_text_);
    std::swap(text_chars_, other->text_chars_);
    std::swap(text_encoding_, other->text_encoding_);
    std::swap(default_format_, other->default_format_);
    std::swap(text_align_, other->text_align_);
    std::swap(line_height_, other->line_height_);
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(wrapping_, other->wrapping_);
    std::swap(ellipsis_, other->ellipsis_);
    range_formats_.Swap(&other->range_formats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDrawTextRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDrawTextRegion_descriptor_;
  metadata.reflection = CMsgDrawTextRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRenderTextRegion::kRawTextFieldNumber;
const int CMsgRenderTextRegion::kTextCharsFieldNumber;
const int CMsgRenderTextRegion::kTextEncodingFieldNumber;
const int CMsgRenderTextRegion::kDefaultFormatFieldNumber;
const int CMsgRenderTextRegion::kTextAlignFieldNumber;
const int CMsgRenderTextRegion::kLineHeightFieldNumber;
const int CMsgRenderTextRegion::kTopLeftFieldNumber;
const int CMsgRenderTextRegion::kBottomRightFieldNumber;
const int CMsgRenderTextRegion::kWrappingFieldNumber;
const int CMsgRenderTextRegion::kEllipsisFieldNumber;
const int CMsgRenderTextRegion::kRangeFormatsFieldNumber;
const int CMsgRenderTextRegion::kTextShadowFieldNumber;
#endif  // !_MSC_VER

CMsgRenderTextRegion::CMsgRenderTextRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRenderTextRegion)
}

void CMsgRenderTextRegion::InitAsDefaultInstance() {
  default_format_ = const_cast< ::CMsgRenderTextFormat*>(&::CMsgRenderTextFormat::default_instance());
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  text_shadow_ = const_cast< ::CTextShadowData*>(&::CTextShadowData::default_instance());
}

CMsgRenderTextRegion::CMsgRenderTextRegion(const CMsgRenderTextRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRenderTextRegion)
}

void CMsgRenderTextRegion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raw_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_chars_ = 0;
  text_encoding_ = 0;
  default_format_ = NULL;
  text_align_ = 0u;
  line_height_ = 0u;
  top_left_ = NULL;
  bottom_right_ = NULL;
  wrapping_ = false;
  ellipsis_ = false;
  text_shadow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRenderTextRegion::~CMsgRenderTextRegion() {
  // @@protoc_insertion_point(destructor:CMsgRenderTextRegion)
  SharedDtor();
}

void CMsgRenderTextRegion::SharedDtor() {
  if (raw_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_text_;
  }
  if (this != default_instance_) {
    delete default_format_;
    delete top_left_;
    delete bottom_right_;
    delete text_shadow_;
  }
}

void CMsgRenderTextRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRenderTextRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRenderTextRegion_descriptor_;
}

const CMsgRenderTextRegion& CMsgRenderTextRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRenderTextRegion* CMsgRenderTextRegion::default_instance_ = NULL;

CMsgRenderTextRegion* CMsgRenderTextRegion::New() const {
  return new CMsgRenderTextRegion;
}

void CMsgRenderTextRegion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgRenderTextRegion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(text_chars_, text_encoding_);
    ZR_(text_align_, line_height_);
    if (has_raw_text()) {
      if (raw_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_text_->clear();
      }
    }
    if (has_default_format()) {
      if (default_format_ != NULL) default_format_->::CMsgRenderTextFormat::Clear();
    }
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 2816) {
    ZR_(wrapping_, ellipsis_);
    if (has_text_shadow()) {
      if (text_shadow_ != NULL) text_shadow_->::CTextShadowData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  range_formats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRenderTextRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRenderTextRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgRenderTextFormat default_format = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_format()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_text_align;
        break;
      }

      // optional uint32 text_align = 4;
      case 4: {
        if (tag == 32) {
         parse_text_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_align_)));
          set_has_text_align();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line_height;
        break;
      }

      // optional uint32 line_height = 5;
      case 5: {
        if (tag == 40) {
         parse_line_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_height_)));
          set_has_line_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_top_left;
        break;
      }

      // optional .CMsgPoint top_left = 6;
      case 6: {
        if (tag == 50) {
         parse_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 7;
      case 7: {
        if (tag == 58) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wrapping;
        break;
      }

      // optional bool wrapping = 8;
      case 8: {
        if (tag == 64) {
         parse_wrapping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrapping_)));
          set_has_wrapping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ellipsis;
        break;
      }

      // optional bool ellipsis = 9;
      case 9: {
        if (tag == 72) {
         parse_ellipsis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ellipsis_)));
          set_has_ellipsis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_range_formats;
        break;
      }

      // repeated .CMsgRenderTextRangeFormat range_formats = 10;
      case 10: {
        if (tag == 82) {
         parse_range_formats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range_formats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_range_formats;
        if (input->ExpectTag(90)) goto parse_text_shadow;
        break;
      }

      // optional .CTextShadowData text_shadow = 11;
      case 11: {
        if (tag == 90) {
         parse_text_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_shadow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_raw_text;
        break;
      }

      // optional bytes raw_text = 12;
      case 12: {
        if (tag == 98) {
         parse_raw_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_text_chars;
        break;
      }

      // optional int32 text_chars = 13;
      case 13: {
        if (tag == 104) {
         parse_text_chars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_chars_)));
          set_has_text_chars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_text_encoding;
        break;
      }

      // optional int32 text_encoding = 14;
      case 14: {
        if (tag == 112) {
         parse_text_encoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_encoding_)));
          set_has_text_encoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRenderTextRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRenderTextRegion)
  return false;
#undef DO_
}

void CMsgRenderTextRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRenderTextRegion)
  // optional .CMsgRenderTextFormat default_format = 3;
  if (has_default_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->default_format(), output);
  }

  // optional uint32 text_align = 4;
  if (has_text_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->text_align(), output);
  }

  // optional uint32 line_height = 5;
  if (has_line_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_height(), output);
  }

  // optional .CMsgPoint top_left = 6;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 7;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bottom_right(), output);
  }

  // optional bool wrapping = 8;
  if (has_wrapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wrapping(), output);
  }

  // optional bool ellipsis = 9;
  if (has_ellipsis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ellipsis(), output);
  }

  // repeated .CMsgRenderTextRangeFormat range_formats = 10;
  for (int i = 0; i < this->range_formats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->range_formats(i), output);
  }

  // optional .CTextShadowData text_shadow = 11;
  if (has_text_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->text_shadow(), output);
  }

  // optional bytes raw_text = 12;
  if (has_raw_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->raw_text(), output);
  }

  // optional int32 text_chars = 13;
  if (has_text_chars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->text_chars(), output);
  }

  // optional int32 text_encoding = 14;
  if (has_text_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->text_encoding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRenderTextRegion)
}

::google::protobuf::uint8* CMsgRenderTextRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRenderTextRegion)
  // optional .CMsgRenderTextFormat default_format = 3;
  if (has_default_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->default_format(), target);
  }

  // optional uint32 text_align = 4;
  if (has_text_align()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->text_align(), target);
  }

  // optional uint32 line_height = 5;
  if (has_line_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_height(), target);
  }

  // optional .CMsgPoint top_left = 6;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 7;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bottom_right(), target);
  }

  // optional bool wrapping = 8;
  if (has_wrapping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wrapping(), target);
  }

  // optional bool ellipsis = 9;
  if (has_ellipsis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ellipsis(), target);
  }

  // repeated .CMsgRenderTextRangeFormat range_formats = 10;
  for (int i = 0; i < this->range_formats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->range_formats(i), target);
  }

  // optional .CTextShadowData text_shadow = 11;
  if (has_text_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->text_shadow(), target);
  }

  // optional bytes raw_text = 12;
  if (has_raw_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->raw_text(), target);
  }

  // optional int32 text_chars = 13;
  if (has_text_chars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->text_chars(), target);
  }

  // optional int32 text_encoding = 14;
  if (has_text_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->text_encoding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRenderTextRegion)
  return target;
}

int CMsgRenderTextRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes raw_text = 12;
    if (has_raw_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_text());
    }

    // optional int32 text_chars = 13;
    if (has_text_chars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_chars());
    }

    // optional int32 text_encoding = 14;
    if (has_text_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_encoding());
    }

    // optional .CMsgRenderTextFormat default_format = 3;
    if (has_default_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_format());
    }

    // optional uint32 text_align = 4;
    if (has_text_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_align());
    }

    // optional uint32 line_height = 5;
    if (has_line_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_height());
    }

    // optional .CMsgPoint top_left = 6;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 7;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool wrapping = 8;
    if (has_wrapping()) {
      total_size += 1 + 1;
    }

    // optional bool ellipsis = 9;
    if (has_ellipsis()) {
      total_size += 1 + 1;
    }

    // optional .CTextShadowData text_shadow = 11;
    if (has_text_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_shadow());
    }

  }
  // repeated .CMsgRenderTextRangeFormat range_formats = 10;
  total_size += 1 * this->range_formats_size();
  for (int i = 0; i < this->range_formats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range_formats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRenderTextRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRenderTextRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRenderTextRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRenderTextRegion::MergeFrom(const CMsgRenderTextRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_formats_.MergeFrom(from.range_formats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_text()) {
      set_raw_text(from.raw_text());
    }
    if (from.has_text_chars()) {
      set_text_chars(from.text_chars());
    }
    if (from.has_text_encoding()) {
      set_text_encoding(from.text_encoding());
    }
    if (from.has_default_format()) {
      mutable_default_format()->::CMsgRenderTextFormat::MergeFrom(from.default_format());
    }
    if (from.has_text_align()) {
      set_text_align(from.text_align());
    }
    if (from.has_line_height()) {
      set_line_height(from.line_height());
    }
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wrapping()) {
      set_wrapping(from.wrapping());
    }
    if (from.has_ellipsis()) {
      set_ellipsis(from.ellipsis());
    }
    if (from.has_text_shadow()) {
      mutable_text_shadow()->::CTextShadowData::MergeFrom(from.text_shadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRenderTextRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRenderTextRegion::CopyFrom(const CMsgRenderTextRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRenderTextRegion::IsInitialized() const {

  return true;
}

void CMsgRenderTextRegion::Swap(CMsgRenderTextRegion* other) {
  if (other != this) {
    std::swap(raw_text_, other->raw_text_);
    std::swap(text_chars_, other->text_chars_);
    std::swap(text_encoding_, other->text_encoding_);
    std::swap(default_format_, other->default_format_);
    std::swap(text_align_, other->text_align_);
    std::swap(line_height_, other->line_height_);
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(wrapping_, other->wrapping_);
    std::swap(ellipsis_, other->ellipsis_);
    range_formats_.Swap(&other->range_formats_);
    std::swap(text_shadow_, other->text_shadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRenderTextRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRenderTextRegion_descriptor_;
  metadata.reflection = CMsgRenderTextRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgRequestRenderCallback::kCallbackObjFieldNumber;
const int CMsgRequestRenderCallback::kTopLeftFieldNumber;
const int CMsgRequestRenderCallback::kBottomRightFieldNumber;
const int CMsgRequestRenderCallback::kTopLeftPaddingFieldNumber;
const int CMsgRequestRenderCallback::kBottomRightPaddingFieldNumber;
const int CMsgRequestRenderCallback::kNeedsRedrawEveryFrameFieldNumber;
#endif  // !_MSC_VER

CMsgRequestRenderCallback::CMsgRequestRenderCallback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRequestRenderCallback)
}

void CMsgRequestRenderCallback::InitAsDefaultInstance() {
  top_left_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  top_left_padding_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
  bottom_right_padding_ = const_cast< ::CMsgPoint*>(&::CMsgPoint::default_instance());
}

CMsgRequestRenderCallback::CMsgRequestRenderCallback(const CMsgRequestRenderCallback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestRenderCallback)
}

void CMsgRequestRenderCallback::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callback_obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_left_ = NULL;
  bottom_right_ = NULL;
  top_left_padding_ = NULL;
  bottom_right_padding_ = NULL;
  needs_redraw_every_frame_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgRequestRenderCallback::~CMsgRequestRenderCallback() {
  // @@protoc_insertion_point(destructor:CMsgRequestRenderCallback)
  SharedDtor();
}

void CMsgRequestRenderCallback::SharedDtor() {
  if (callback_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callback_obj_;
  }
  if (this != default_instance_) {
    delete top_left_;
    delete bottom_right_;
    delete top_left_padding_;
    delete bottom_right_padding_;
  }
}

void CMsgRequestRenderCallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestRenderCallback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgRequestRenderCallback_descriptor_;
}

const CMsgRequestRenderCallback& CMsgRequestRenderCallback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rendermessages_2eproto();
  return *default_instance_;
}

CMsgRequestRenderCallback* CMsgRequestRenderCallback::default_instance_ = NULL;

CMsgRequestRenderCallback* CMsgRequestRenderCallback::New() const {
  return new CMsgRequestRenderCallback;
}

void CMsgRequestRenderCallback::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_callback_obj()) {
      if (callback_obj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callback_obj_->clear();
      }
    }
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::CMsgPoint::Clear();
    }
    if (has_bottom_right()) {
      if (bottom_right_ != NULL) bottom_right_->::CMsgPoint::Clear();
    }
    if (has_top_left_padding()) {
      if (top_left_padding_ != NULL) top_left_padding_->::CMsgPoint::Clear();
    }
    if (has_bottom_right_padding()) {
      if (bottom_right_padding_ != NULL) bottom_right_padding_->::CMsgPoint::Clear();
    }
    needs_redraw_every_frame_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgRequestRenderCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRequestRenderCallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes callback_obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_callback_obj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_left;
        break;
      }

      // optional .CMsgPoint top_left = 2;
      case 2: {
        if (tag == 18) {
         parse_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bottom_right;
        break;
      }

      // optional .CMsgPoint bottom_right = 3;
      case 3: {
        if (tag == 26) {
         parse_bottom_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_top_left_padding;
        break;
      }

      // optional .CMsgPoint top_left_padding = 4;
      case 4: {
        if (tag == 34) {
         parse_top_left_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left_padding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bottom_right_padding;
        break;
      }

      // optional .CMsgPoint bottom_right_padding = 5;
      case 5: {
        if (tag == 42) {
         parse_bottom_right_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_right_padding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_needs_redraw_every_frame;
        break;
      }

      // optional bool needs_redraw_every_frame = 6;
      case 6: {
        if (tag == 48) {
         parse_needs_redraw_every_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_redraw_every_frame_)));
          set_has_needs_redraw_every_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRequestRenderCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRequestRenderCallback)
  return false;
#undef DO_
}

void CMsgRequestRenderCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRequestRenderCallback)
  // optional bytes callback_obj = 1;
  if (has_callback_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->callback_obj(), output);
  }

  // optional .CMsgPoint top_left = 2;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_left(), output);
  }

  // optional .CMsgPoint bottom_right = 3;
  if (has_bottom_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bottom_right(), output);
  }

  // optional .CMsgPoint top_left_padding = 4;
  if (has_top_left_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->top_left_padding(), output);
  }

  // optional .CMsgPoint bottom_right_padding = 5;
  if (has_bottom_right_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bottom_right_padding(), output);
  }

  // optional bool needs_redraw_every_frame = 6;
  if (has_needs_redraw_every_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->needs_redraw_every_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRequestRenderCallback)
}

::google::protobuf::uint8* CMsgRequestRenderCallback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestRenderCallback)
  // optional bytes callback_obj = 1;
  if (has_callback_obj()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->callback_obj(), target);
  }

  // optional .CMsgPoint top_left = 2;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_left(), target);
  }

  // optional .CMsgPoint bottom_right = 3;
  if (has_bottom_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bottom_right(), target);
  }

  // optional .CMsgPoint top_left_padding = 4;
  if (has_top_left_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->top_left_padding(), target);
  }

  // optional .CMsgPoint bottom_right_padding = 5;
  if (has_bottom_right_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bottom_right_padding(), target);
  }

  // optional bool needs_redraw_every_frame = 6;
  if (has_needs_redraw_every_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->needs_redraw_every_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestRenderCallback)
  return target;
}

int CMsgRequestRenderCallback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes callback_obj = 1;
    if (has_callback_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->callback_obj());
    }

    // optional .CMsgPoint top_left = 2;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left());
    }

    // optional .CMsgPoint bottom_right = 3;
    if (has_bottom_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right());
    }

    // optional .CMsgPoint top_left_padding = 4;
    if (has_top_left_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left_padding());
    }

    // optional .CMsgPoint bottom_right_padding = 5;
    if (has_bottom_right_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right_padding());
    }

    // optional bool needs_redraw_every_frame = 6;
    if (has_needs_redraw_every_frame()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestRenderCallback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgRequestRenderCallback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgRequestRenderCallback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgRequestRenderCallback::MergeFrom(const CMsgRequestRenderCallback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_obj()) {
      set_callback_obj(from.callback_obj());
    }
    if (from.has_top_left()) {
      mutable_top_left()->::CMsgPoint::MergeFrom(from.top_left());
    }
    if (from.has_bottom_right()) {
      mutable_bottom_right()->::CMsgPoint::MergeFrom(from.bottom_right());
    }
    if (from.has_top_left_padding()) {
      mutable_top_left_padding()->::CMsgPoint::MergeFrom(from.top_left_padding());
    }
    if (from.has_bottom_right_padding()) {
      mutable_bottom_right_padding()->::CMsgPoint::MergeFrom(from.bottom_right_padding());
    }
    if (from.has_needs_redraw_every_frame()) {
      set_needs_redraw_every_frame(from.needs_redraw_every_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgRequestRenderCallback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestRenderCallback::CopyFrom(const CMsgRequestRenderCallback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestRenderCallback::IsInitialized() const {

  return true;
}

void CMsgRequestRenderCallback::Swap(CMsgRequestRenderCallback* other) {
  if (other != this) {
    std::swap(callback_obj_, other->callback_obj_);
    std::swap(top_left_, other->top_left_);
    std::swap(bottom_right_, other->bottom_right_);
    std::swap(top_left_padding_, other->top_left_padding_);
    std::swap(bottom_right_padding_, other->bottom_right_padding_);
    std::swap(needs_redraw_every_frame_, other->needs_redraw_every_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgRequestRenderCallback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgRequestRenderCallback_descriptor_;
  metadata.reflection = CMsgRequestRenderCallback_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
