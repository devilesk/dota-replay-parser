// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamworkssdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_cloud.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_GetUploadServerInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_GetUploadServerInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_GetFileDetails_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_UserFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_UserFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_GetFileDetails_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_EnumerateUserFiles_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_EnumerateUserFiles_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_Delete_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_Delete_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCloud_Delete_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCloud_Delete_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_cloud.steamworkssdk.proto");
  GOOGLE_CHECK(file != NULL);
  CCloud_GetUploadServerInfo_Request_descriptor_ = file->message_type(0);
  static const int CCloud_GetUploadServerInfo_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, appid_),
  };
  CCloud_GetUploadServerInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_GetUploadServerInfo_Request_descriptor_,
      CCloud_GetUploadServerInfo_Request::default_instance_,
      CCloud_GetUploadServerInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_GetUploadServerInfo_Request));
  CCloud_GetUploadServerInfo_Response_descriptor_ = file->message_type(1);
  static const int CCloud_GetUploadServerInfo_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, server_url_),
  };
  CCloud_GetUploadServerInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_GetUploadServerInfo_Response_descriptor_,
      CCloud_GetUploadServerInfo_Response::default_instance_,
      CCloud_GetUploadServerInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_GetUploadServerInfo_Response));
  CCloud_GetFileDetails_Request_descriptor_ = file->message_type(2);
  static const int CCloud_GetFileDetails_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, ugcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, appid_),
  };
  CCloud_GetFileDetails_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_GetFileDetails_Request_descriptor_,
      CCloud_GetFileDetails_Request::default_instance_,
      CCloud_GetFileDetails_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_GetFileDetails_Request));
  CCloud_UserFile_descriptor_ = file->message_type(3);
  static const int CCloud_UserFile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, ugcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, steamid_creator_),
  };
  CCloud_UserFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_UserFile_descriptor_,
      CCloud_UserFile::default_instance_,
      CCloud_UserFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_UserFile));
  CCloud_GetFileDetails_Response_descriptor_ = file->message_type(4);
  static const int CCloud_GetFileDetails_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, details_),
  };
  CCloud_GetFileDetails_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_GetFileDetails_Response_descriptor_,
      CCloud_GetFileDetails_Response::default_instance_,
      CCloud_GetFileDetails_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_GetFileDetails_Response));
  CCloud_EnumerateUserFiles_Request_descriptor_ = file->message_type(5);
  static const int CCloud_EnumerateUserFiles_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, extended_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, start_index_),
  };
  CCloud_EnumerateUserFiles_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_EnumerateUserFiles_Request_descriptor_,
      CCloud_EnumerateUserFiles_Request::default_instance_,
      CCloud_EnumerateUserFiles_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_EnumerateUserFiles_Request));
  CCloud_EnumerateUserFiles_Response_descriptor_ = file->message_type(6);
  static const int CCloud_EnumerateUserFiles_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, total_files_),
  };
  CCloud_EnumerateUserFiles_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_EnumerateUserFiles_Response_descriptor_,
      CCloud_EnumerateUserFiles_Response::default_instance_,
      CCloud_EnumerateUserFiles_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_EnumerateUserFiles_Response));
  CCloud_Delete_Request_descriptor_ = file->message_type(7);
  static const int CCloud_Delete_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, appid_),
  };
  CCloud_Delete_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_Delete_Request_descriptor_,
      CCloud_Delete_Request::default_instance_,
      CCloud_Delete_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_Delete_Request));
  CCloud_Delete_Response_descriptor_ = file->message_type(8);
  static const int CCloud_Delete_Response_offsets_[1] = {
  };
  CCloud_Delete_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCloud_Delete_Response_descriptor_,
      CCloud_Delete_Response::default_instance_,
      CCloud_Delete_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCloud_Delete_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fcloud_2esteamworkssdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_GetUploadServerInfo_Request_descriptor_, &CCloud_GetUploadServerInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_GetUploadServerInfo_Response_descriptor_, &CCloud_GetUploadServerInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_GetFileDetails_Request_descriptor_, &CCloud_GetFileDetails_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_UserFile_descriptor_, &CCloud_UserFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_GetFileDetails_Response_descriptor_, &CCloud_GetFileDetails_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_EnumerateUserFiles_Request_descriptor_, &CCloud_EnumerateUserFiles_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_EnumerateUserFiles_Response_descriptor_, &CCloud_EnumerateUserFiles_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_Delete_Request_descriptor_, &CCloud_Delete_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCloud_Delete_Response_descriptor_, &CCloud_Delete_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  delete CCloud_GetUploadServerInfo_Request::default_instance_;
  delete CCloud_GetUploadServerInfo_Request_reflection_;
  delete CCloud_GetUploadServerInfo_Response::default_instance_;
  delete CCloud_GetUploadServerInfo_Response_reflection_;
  delete CCloud_GetFileDetails_Request::default_instance_;
  delete CCloud_GetFileDetails_Request_reflection_;
  delete CCloud_UserFile::default_instance_;
  delete CCloud_UserFile_reflection_;
  delete CCloud_GetFileDetails_Response::default_instance_;
  delete CCloud_GetFileDetails_Response_reflection_;
  delete CCloud_EnumerateUserFiles_Request::default_instance_;
  delete CCloud_EnumerateUserFiles_Request_reflection_;
  delete CCloud_EnumerateUserFiles_Response::default_instance_;
  delete CCloud_EnumerateUserFiles_Response_reflection_;
  delete CCloud_Delete_Request::default_instance_;
  delete CCloud_Delete_Request_reflection_;
  delete CCloud_Delete_Response::default_instance_;
  delete CCloud_Delete_Response_reflection_;
}

void protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5funified_5fbase_2esteamworkssdk_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'steammessages_cloud.steamworkssdk.prot"
    "o\032.steammessages_unified_base.steamworks"
    "sdk.proto\"d\n\"CCloud_GetUploadServerInfo_"
    "Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+App ID to wh"
    "ich a file will be uploaded to.\"9\n#CClou"
    "d_GetUploadServerInfo_Response\022\022\n\nserver"
    "_url\030\001 \001(\t\"\214\001\n\035CCloud_GetFileDetails_Req"
    "uest\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID of the Cloud"
    " file to get details for.\022.\n\005appid\030\002 \001(\r"
    "B\037\202\265\030\033App ID the file belongs to.\"\215\001\n\017CC"
    "loud_UserFile\022\r\n\005appid\030\001 \001(\r\022\r\n\005ugcid\030\002 "
    "\001(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004"
    "\022\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006 \001(\t\022\027\n\017stea"
    "mid_creator\030\007 \001(\006\"C\n\036CCloud_GetFileDetai"
    "ls_Response\022!\n\007details\030\001 \001(\0132\020.CCloud_Us"
    "erFile\"\351\003\n!CCloud_EnumerateUserFiles_Req"
    "uest\0224\n\005appid\030\001 \001(\rB%\202\265\030!App ID to enume"
    "rate the files of.\022\233\001\n\020extended_details\030"
    "\002 \001(\010B\200\001\202\265\030|(Optional) Get extended deta"
    "ils back on the files found. Defaults to"
    " only returned the app Id and UGC Id of "
    "the files found.\022|\n\005count\030\003 \001(\rBm\202\265\030i(Op"
    "tional) Maximum number of results to ret"
    "urn on this call. Defaults to a maximum "
    "of 500 files returned.\022r\n\013start_index\030\004 "
    "\001(\rB]\202\265\030Y(Optional) Starting index to be"
    "gin enumeration at. Defaults to the begi"
    "nning of the list.\"Z\n\"CCloud_EnumerateUs"
    "erFiles_Response\022\037\n\005files\030\001 \003(\0132\020.CCloud"
    "_UserFile\022\023\n\013total_files\030\002 \001(\r\"Y\n\025CCloud"
    "_Delete_Request\022\020\n\010filename\030\001 \001(\t\022.\n\005app"
    "id\030\002 \001(\rB\037\202\265\030\033App ID the file belongs to"
    ".\"\030\n\026CCloud_Delete_Response2\355\004\n\005Cloud\022\234\001"
    "\n\023GetUploadServerInfo\022#.CCloud_GetUpload"
    "ServerInfo_Request\032$.CCloud_GetUploadSer"
    "verInfo_Response\":\202\265\0306Returns the URL of"
    " the proper cloud server for a user.\022w\n\016"
    "GetFileDetails\022\036.CCloud_GetFileDetails_R"
    "equest\032\037.CCloud_GetFileDetails_Response\""
    "$\202\265\030 Returns details on a Cloud file.\022\272\001"
    "\n\022EnumerateUserFiles\022\".CCloud_EnumerateU"
    "serFiles_Request\032#.CCloud_EnumerateUserF"
    "iles_Response\"[\202\265\030WEnumerates Cloud file"
    "s for a user of a given app ID. Returns "
    "up to 500 files at a time.\022d\n\006Delete\022\026.C"
    "Cloud_Delete_Request\032\027.CCloud_Delete_Res"
    "ponse\")\202\265\030%Deletes a file from the user\'"
    "s cloud.\032)\202\265\030%A service for Steam Cloud "
    "operations.", 1931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_cloud.steamworkssdk.proto", &protobuf_RegisterTypes);
  CCloud_GetUploadServerInfo_Request::default_instance_ = new CCloud_GetUploadServerInfo_Request();
  CCloud_GetUploadServerInfo_Response::default_instance_ = new CCloud_GetUploadServerInfo_Response();
  CCloud_GetFileDetails_Request::default_instance_ = new CCloud_GetFileDetails_Request();
  CCloud_UserFile::default_instance_ = new CCloud_UserFile();
  CCloud_GetFileDetails_Response::default_instance_ = new CCloud_GetFileDetails_Response();
  CCloud_EnumerateUserFiles_Request::default_instance_ = new CCloud_EnumerateUserFiles_Request();
  CCloud_EnumerateUserFiles_Response::default_instance_ = new CCloud_EnumerateUserFiles_Response();
  CCloud_Delete_Request::default_instance_ = new CCloud_Delete_Request();
  CCloud_Delete_Response::default_instance_ = new CCloud_Delete_Response();
  CCloud_GetUploadServerInfo_Request::default_instance_->InitAsDefaultInstance();
  CCloud_GetUploadServerInfo_Response::default_instance_->InitAsDefaultInstance();
  CCloud_GetFileDetails_Request::default_instance_->InitAsDefaultInstance();
  CCloud_UserFile::default_instance_->InitAsDefaultInstance();
  CCloud_GetFileDetails_Response::default_instance_->InitAsDefaultInstance();
  CCloud_EnumerateUserFiles_Request::default_instance_->InitAsDefaultInstance();
  CCloud_EnumerateUserFiles_Response::default_instance_->InitAsDefaultInstance();
  CCloud_Delete_Request::default_instance_->InitAsDefaultInstance();
  CCloud_Delete_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fcloud_2esteamworkssdk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fcloud_2esteamworkssdk_2eproto {
  StaticDescriptorInitializer_steammessages_5fcloud_2esteamworkssdk_2eproto() {
    protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  }
} static_descriptor_initializer_steammessages_5fcloud_2esteamworkssdk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CCloud_GetUploadServerInfo_Request::kAppidFieldNumber;
#endif  // !_MSC_VER

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::InitAsDefaultInstance() {
}

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Request)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_GetUploadServerInfo_Request_descriptor_;
}

const CCloud_GetUploadServerInfo_Request& CCloud_GetUploadServerInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_GetUploadServerInfo_Request* CCloud_GetUploadServerInfo_Request::default_instance_ = NULL;

CCloud_GetUploadServerInfo_Request* CCloud_GetUploadServerInfo_Request::New() const {
  return new CCloud_GetUploadServerInfo_Request;
}

void CCloud_GetUploadServerInfo_Request::Clear() {
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_GetUploadServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_GetUploadServerInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_GetUploadServerInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_GetUploadServerInfo_Request)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_GetUploadServerInfo_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_GetUploadServerInfo_Request)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Request)
  return target;
}

int CCloud_GetUploadServerInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_GetUploadServerInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {

  return true;
}

void CCloud_GetUploadServerInfo_Request::Swap(CCloud_GetUploadServerInfo_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_GetUploadServerInfo_Request_descriptor_;
  metadata.reflection = CCloud_GetUploadServerInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_GetUploadServerInfo_Response::kServerUrlFieldNumber;
#endif  // !_MSC_VER

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::InitAsDefaultInstance() {
}

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Response)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  if (server_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_url_;
  }
  if (this != default_instance_) {
  }
}

void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_GetUploadServerInfo_Response_descriptor_;
}

const CCloud_GetUploadServerInfo_Response& CCloud_GetUploadServerInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_GetUploadServerInfo_Response* CCloud_GetUploadServerInfo_Response::default_instance_ = NULL;

CCloud_GetUploadServerInfo_Response* CCloud_GetUploadServerInfo_Response::New() const {
  return new CCloud_GetUploadServerInfo_Response;
}

void CCloud_GetUploadServerInfo_Response::Clear() {
  if (has_server_url()) {
    if (server_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      server_url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_GetUploadServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_GetUploadServerInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_url().data(), this->server_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_GetUploadServerInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_GetUploadServerInfo_Response)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_GetUploadServerInfo_Response)
  // optional string server_url = 1;
  if (has_server_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_GetUploadServerInfo_Response)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Response)
  // optional string server_url = 1;
  if (has_server_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Response)
  return target;
}

int CCloud_GetUploadServerInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_url = 1;
    if (has_server_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_GetUploadServerInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_url()) {
      set_server_url(from.server_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {

  return true;
}

void CCloud_GetUploadServerInfo_Response::Swap(CCloud_GetUploadServerInfo_Response* other) {
  if (other != this) {
    std::swap(server_url_, other->server_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_GetUploadServerInfo_Response_descriptor_;
  metadata.reflection = CCloud_GetUploadServerInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_GetFileDetails_Request::kUgcidFieldNumber;
const int CCloud_GetFileDetails_Request::kAppidFieldNumber;
#endif  // !_MSC_VER

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::InitAsDefaultInstance() {
}

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  ugcid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Request)
  SharedDtor();
}

void CCloud_GetFileDetails_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_GetFileDetails_Request_descriptor_;
}

const CCloud_GetFileDetails_Request& CCloud_GetFileDetails_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_GetFileDetails_Request* CCloud_GetFileDetails_Request::default_instance_ = NULL;

CCloud_GetFileDetails_Request* CCloud_GetFileDetails_Request::New() const {
  return new CCloud_GetFileDetails_Request;
}

void CCloud_GetFileDetails_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCloud_GetFileDetails_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ugcid_, appid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_GetFileDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_GetFileDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
          set_has_ugcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_GetFileDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_GetFileDetails_Request)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_GetFileDetails_Request)
  // optional uint64 ugcid = 1;
  if (has_ugcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugcid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_GetFileDetails_Request)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Request)
  // optional uint64 ugcid = 1;
  if (has_ugcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugcid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Request)
  return target;
}

int CCloud_GetFileDetails_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ugcid = 1;
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_GetFileDetails_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_GetFileDetails_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ugcid()) {
      set_ugcid(from.ugcid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_GetFileDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {

  return true;
}

void CCloud_GetFileDetails_Request::Swap(CCloud_GetFileDetails_Request* other) {
  if (other != this) {
    std::swap(ugcid_, other->ugcid_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_GetFileDetails_Request_descriptor_;
  metadata.reflection = CCloud_GetFileDetails_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_UserFile::kAppidFieldNumber;
const int CCloud_UserFile::kUgcidFieldNumber;
const int CCloud_UserFile::kFilenameFieldNumber;
const int CCloud_UserFile::kTimestampFieldNumber;
const int CCloud_UserFile::kFileSizeFieldNumber;
const int CCloud_UserFile::kUrlFieldNumber;
const int CCloud_UserFile::kSteamidCreatorFieldNumber;
#endif  // !_MSC_VER

CCloud_UserFile::CCloud_UserFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_UserFile)
}

void CCloud_UserFile::InitAsDefaultInstance() {
}

CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_UserFile)
}

void CCloud_UserFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  ugcid_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  file_size_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_creator_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:CCloud_UserFile)
  SharedDtor();
}

void CCloud_UserFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CCloud_UserFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_UserFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_UserFile_descriptor_;
}

const CCloud_UserFile& CCloud_UserFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_UserFile* CCloud_UserFile::default_instance_ = NULL;

CCloud_UserFile* CCloud_UserFile::New() const {
  return new CCloud_UserFile;
}

void CCloud_UserFile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCloud_UserFile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(appid_, timestamp_);
    ugcid_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    steamid_creator_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_UserFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_UserFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ugcid;
        break;
      }

      // optional uint64 ugcid = 2;
      case 2: {
        if (tag == 16) {
         parse_ugcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
          set_has_ugcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (tag == 40) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_steamid_creator;
        break;
      }

      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (tag == 57) {
         parse_steamid_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
          set_has_steamid_creator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_UserFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_UserFile)
  return false;
#undef DO_
}

void CCloud_UserFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_UserFile)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 ugcid = 2;
  if (has_ugcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugcid(), output);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint32 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional fixed64 steamid_creator = 7;
  if (has_steamid_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steamid_creator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_UserFile)
}

::google::protobuf::uint8* CCloud_UserFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_UserFile)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (has_ugcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugcid(), target);
  }

  // optional string filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (has_steamid_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steamid_creator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_UserFile)
  return target;
}

int CCloud_UserFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 ugcid = 2;
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional fixed64 steamid_creator = 7;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_UserFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_UserFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_UserFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_ugcid()) {
      set_ugcid(from.ugcid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_steamid_creator()) {
      set_steamid_creator(from.steamid_creator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_UserFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {

  return true;
}

void CCloud_UserFile::Swap(CCloud_UserFile* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(ugcid_, other->ugcid_);
    std::swap(filename_, other->filename_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(file_size_, other->file_size_);
    std::swap(url_, other->url_);
    std::swap(steamid_creator_, other->steamid_creator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_UserFile_descriptor_;
  metadata.reflection = CCloud_UserFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_GetFileDetails_Response::kDetailsFieldNumber;
#endif  // !_MSC_VER

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::InitAsDefaultInstance() {
  details_ = const_cast< ::CCloud_UserFile*>(&::CCloud_UserFile::default_instance());
}

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Response)
  SharedDtor();
}

void CCloud_GetFileDetails_Response::SharedDtor() {
  if (this != default_instance_) {
    delete details_;
  }
}

void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_GetFileDetails_Response_descriptor_;
}

const CCloud_GetFileDetails_Response& CCloud_GetFileDetails_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_GetFileDetails_Response* CCloud_GetFileDetails_Response::default_instance_ = NULL;

CCloud_GetFileDetails_Response* CCloud_GetFileDetails_Response::New() const {
  return new CCloud_GetFileDetails_Response;
}

void CCloud_GetFileDetails_Response::Clear() {
  if (has_details()) {
    if (details_ != NULL) details_->::CCloud_UserFile::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_GetFileDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_GetFileDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CCloud_UserFile details = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_GetFileDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_GetFileDetails_Response)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_GetFileDetails_Response)
  // optional .CCloud_UserFile details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_GetFileDetails_Response)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Response)
  // optional .CCloud_UserFile details = 1;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Response)
  return target;
}

int CCloud_GetFileDetails_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CCloud_UserFile details = 1;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_GetFileDetails_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_GetFileDetails_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::CCloud_UserFile::MergeFrom(from.details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_GetFileDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {

  return true;
}

void CCloud_GetFileDetails_Response::Swap(CCloud_GetFileDetails_Response* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_GetFileDetails_Response_descriptor_;
  metadata.reflection = CCloud_GetFileDetails_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_EnumerateUserFiles_Request::kAppidFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kExtendedDetailsFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kCountFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kStartIndexFieldNumber;
#endif  // !_MSC_VER

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::InitAsDefaultInstance() {
}

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  extended_details_ = false;
  count_ = 0u;
  start_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Request)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_EnumerateUserFiles_Request_descriptor_;
}

const CCloud_EnumerateUserFiles_Request& CCloud_EnumerateUserFiles_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_EnumerateUserFiles_Request* CCloud_EnumerateUserFiles_Request::default_instance_ = NULL;

CCloud_EnumerateUserFiles_Request* CCloud_EnumerateUserFiles_Request::New() const {
  return new CCloud_EnumerateUserFiles_Request;
}

void CCloud_EnumerateUserFiles_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCloud_EnumerateUserFiles_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(appid_, start_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_EnumerateUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_EnumerateUserFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extended_details;
        break;
      }

      // optional bool extended_details = 2;
      case 2: {
        if (tag == 16) {
         parse_extended_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_details_)));
          set_has_extended_details();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 4;
      case 4: {
        if (tag == 32) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_EnumerateUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_EnumerateUserFiles_Request)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_EnumerateUserFiles_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool extended_details = 2;
  if (has_extended_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extended_details(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 start_index = 4;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_EnumerateUserFiles_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool extended_details = 2;
  if (has_extended_details()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extended_details(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 start_index = 4;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Request)
  return target;
}

int CCloud_EnumerateUserFiles_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool extended_details = 2;
    if (has_extended_details()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_EnumerateUserFiles_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_extended_details()) {
      set_extended_details(from.extended_details());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {

  return true;
}

void CCloud_EnumerateUserFiles_Request::Swap(CCloud_EnumerateUserFiles_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(extended_details_, other->extended_details_);
    std::swap(count_, other->count_);
    std::swap(start_index_, other->start_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_EnumerateUserFiles_Request_descriptor_;
  metadata.reflection = CCloud_EnumerateUserFiles_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_EnumerateUserFiles_Response::kFilesFieldNumber;
const int CCloud_EnumerateUserFiles_Response::kTotalFilesFieldNumber;
#endif  // !_MSC_VER

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::InitAsDefaultInstance() {
}

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  total_files_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Response)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_EnumerateUserFiles_Response_descriptor_;
}

const CCloud_EnumerateUserFiles_Response& CCloud_EnumerateUserFiles_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_EnumerateUserFiles_Response* CCloud_EnumerateUserFiles_Response::default_instance_ = NULL;

CCloud_EnumerateUserFiles_Response* CCloud_EnumerateUserFiles_Response::New() const {
  return new CCloud_EnumerateUserFiles_Response;
}

void CCloud_EnumerateUserFiles_Response::Clear() {
  total_files_ = 0u;
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_EnumerateUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_EnumerateUserFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCloud_UserFile files = 1;
      case 1: {
        if (tag == 10) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_files;
        if (input->ExpectTag(16)) goto parse_total_files;
        break;
      }

      // optional uint32 total_files = 2;
      case 2: {
        if (tag == 16) {
         parse_total_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_)));
          set_has_total_files();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_EnumerateUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_EnumerateUserFiles_Response)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_EnumerateUserFiles_Response)
  // repeated .CCloud_UserFile files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  // optional uint32 total_files = 2;
  if (has_total_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_files(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_EnumerateUserFiles_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Response)
  // repeated .CCloud_UserFile files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->files(i), target);
  }

  // optional uint32 total_files = 2;
  if (has_total_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_files(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Response)
  return target;
}

int CCloud_EnumerateUserFiles_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_files = 2;
    if (has_total_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_files());
    }

  }
  // repeated .CCloud_UserFile files = 1;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_EnumerateUserFiles_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_files()) {
      set_total_files(from.total_files());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {

  return true;
}

void CCloud_EnumerateUserFiles_Response::Swap(CCloud_EnumerateUserFiles_Response* other) {
  if (other != this) {
    files_.Swap(&other->files_);
    std::swap(total_files_, other->total_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_EnumerateUserFiles_Response_descriptor_;
  metadata.reflection = CCloud_EnumerateUserFiles_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCloud_Delete_Request::kFilenameFieldNumber;
const int CCloud_Delete_Request::kAppidFieldNumber;
#endif  // !_MSC_VER

CCloud_Delete_Request::CCloud_Delete_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_Delete_Request)
}

void CCloud_Delete_Request::InitAsDefaultInstance() {
}

CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Request)
}

void CCloud_Delete_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:CCloud_Delete_Request)
  SharedDtor();
}

void CCloud_Delete_Request::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CCloud_Delete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_Delete_Request_descriptor_;
}

const CCloud_Delete_Request& CCloud_Delete_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_Delete_Request* CCloud_Delete_Request::default_instance_ = NULL;

CCloud_Delete_Request* CCloud_Delete_Request::New() const {
  return new CCloud_Delete_Request;
}

void CCloud_Delete_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_Delete_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_Delete_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_Delete_Request)
  return false;
#undef DO_
}

void CCloud_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_Delete_Request)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_Delete_Request)
}

::google::protobuf::uint8* CCloud_Delete_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_Delete_Request)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_Delete_Request)
  return target;
}

int CCloud_Delete_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_Delete_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_Delete_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {

  return true;
}

void CCloud_Delete_Request::Swap(CCloud_Delete_Request* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_Delete_Request_descriptor_;
  metadata.reflection = CCloud_Delete_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CCloud_Delete_Response::CCloud_Delete_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCloud_Delete_Response)
}

void CCloud_Delete_Response::InitAsDefaultInstance() {
}

CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Response)
}

void CCloud_Delete_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCloud_Delete_Response::~CCloud_Delete_Response() {
  // @@protoc_insertion_point(destructor:CCloud_Delete_Response)
  SharedDtor();
}

void CCloud_Delete_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCloud_Delete_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCloud_Delete_Response_descriptor_;
}

const CCloud_Delete_Response& CCloud_Delete_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fcloud_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CCloud_Delete_Response* CCloud_Delete_Response::default_instance_ = NULL;

CCloud_Delete_Response* CCloud_Delete_Response::New() const {
  return new CCloud_Delete_Response;
}

void CCloud_Delete_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCloud_Delete_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCloud_Delete_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CCloud_Delete_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCloud_Delete_Response)
  return false;
#undef DO_
}

void CCloud_Delete_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCloud_Delete_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCloud_Delete_Response)
}

::google::protobuf::uint8* CCloud_Delete_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_Delete_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_Delete_Response)
  return target;
}

int CCloud_Delete_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCloud_Delete_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCloud_Delete_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCloud_Delete_Response::MergeFrom(const CCloud_Delete_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCloud_Delete_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Response::CopyFrom(const CCloud_Delete_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Response::IsInitialized() const {

  return true;
}

void CCloud_Delete_Response::Swap(CCloud_Delete_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCloud_Delete_Response_descriptor_;
  metadata.reflection = CCloud_Delete_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
