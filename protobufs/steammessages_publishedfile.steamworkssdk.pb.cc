// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamworkssdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_publishedfile.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Subscribe_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Subscribe_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Unsubscribe_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Unsubscribe_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Publish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Publish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_GetDetails_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_Preview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_Preview_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_Child_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_Child_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_KVTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_KVTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishedFileDetails_VoteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishedFileDetails_VoteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_GetDetails_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_GetUserFiles_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_GetUserFiles_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_GetUserFiles_Response_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Update_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Update_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_Update_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_Update_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_RefreshVotingQueue_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPublishedFile_RefreshVotingQueue_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_publishedfile.steamworkssdk.proto");
  GOOGLE_CHECK(file != NULL);
  CPublishedFile_Subscribe_Request_descriptor_ = file->message_type(0);
  static const int CPublishedFile_Subscribe_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, notify_client_),
  };
  CPublishedFile_Subscribe_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Subscribe_Request_descriptor_,
      CPublishedFile_Subscribe_Request::default_instance_,
      CPublishedFile_Subscribe_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Subscribe_Request));
  CPublishedFile_Subscribe_Response_descriptor_ = file->message_type(1);
  static const int CPublishedFile_Subscribe_Response_offsets_[1] = {
  };
  CPublishedFile_Subscribe_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Subscribe_Response_descriptor_,
      CPublishedFile_Subscribe_Response::default_instance_,
      CPublishedFile_Subscribe_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Subscribe_Response));
  CPublishedFile_Unsubscribe_Request_descriptor_ = file->message_type(2);
  static const int CPublishedFile_Unsubscribe_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, notify_client_),
  };
  CPublishedFile_Unsubscribe_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Unsubscribe_Request_descriptor_,
      CPublishedFile_Unsubscribe_Request::default_instance_,
      CPublishedFile_Unsubscribe_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Unsubscribe_Request));
  CPublishedFile_Unsubscribe_Response_descriptor_ = file->message_type(3);
  static const int CPublishedFile_Unsubscribe_Response_offsets_[1] = {
  };
  CPublishedFile_Unsubscribe_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Unsubscribe_Response_descriptor_,
      CPublishedFile_Unsubscribe_Response::default_instance_,
      CPublishedFile_Unsubscribe_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Unsubscribe_Response));
  CPublishedFile_Publish_Request_descriptor_ = file->message_type(4);
  static const int CPublishedFile_Publish_Request_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, consumer_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, cloudfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, preview_cloudfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, file_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, consumer_shortcut_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, youtube_username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, youtube_videoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, redirect_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, collection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, url_),
  };
  CPublishedFile_Publish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Publish_Request_descriptor_,
      CPublishedFile_Publish_Request::default_instance_,
      CPublishedFile_Publish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Publish_Request));
  CPublishedFile_Publish_Response_descriptor_ = file->message_type(5);
  static const int CPublishedFile_Publish_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, redirect_uri_),
  };
  CPublishedFile_Publish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Publish_Response_descriptor_,
      CPublishedFile_Publish_Response::default_instance_,
      CPublishedFile_Publish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Publish_Response));
  CPublishedFile_GetDetails_Request_descriptor_ = file->message_type(6);
  static const int CPublishedFile_GetDetails_Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, publishedfileids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includetags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includeadditionalpreviews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includechildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includekvtags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includevotes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, short_description_),
  };
  CPublishedFile_GetDetails_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_GetDetails_Request_descriptor_,
      CPublishedFile_GetDetails_Request::default_instance_,
      CPublishedFile_GetDetails_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_GetDetails_Request));
  PublishedFileDetails_descriptor_ = file->message_type(7);
  static const int PublishedFileDetails_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, creator_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, consumer_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, consumer_shortcutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, preview_file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, preview_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, youtubevideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, hcontent_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, hcontent_preview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, short_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, workshop_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, workshop_accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, show_subscribe_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_comments_developer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_comments_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, ban_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, can_be_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, incompatible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, can_subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, favorited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_favorited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, views_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, spoiler_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, shortcutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, shortcutname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, previews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, kvtags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, vote_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_subscribed_),
  };
  PublishedFileDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_descriptor_,
      PublishedFileDetails::default_instance_,
      PublishedFileDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails));
  PublishedFileDetails_Tag_descriptor_ = PublishedFileDetails_descriptor_->nested_type(0);
  static const int PublishedFileDetails_Tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, adminonly_),
  };
  PublishedFileDetails_Tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_Tag_descriptor_,
      PublishedFileDetails_Tag::default_instance_,
      PublishedFileDetails_Tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails_Tag));
  PublishedFileDetails_Preview_descriptor_ = PublishedFileDetails_descriptor_->nested_type(1);
  static const int PublishedFileDetails_Preview_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, previewid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, sortorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, youtubevideoid_),
  };
  PublishedFileDetails_Preview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_Preview_descriptor_,
      PublishedFileDetails_Preview::default_instance_,
      PublishedFileDetails_Preview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails_Preview));
  PublishedFileDetails_Child_descriptor_ = PublishedFileDetails_descriptor_->nested_type(2);
  static const int PublishedFileDetails_Child_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, sortorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, file_type_),
  };
  PublishedFileDetails_Child_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_Child_descriptor_,
      PublishedFileDetails_Child::default_instance_,
      PublishedFileDetails_Child_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails_Child));
  PublishedFileDetails_KVTag_descriptor_ = PublishedFileDetails_descriptor_->nested_type(3);
  static const int PublishedFileDetails_KVTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, value_),
  };
  PublishedFileDetails_KVTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_KVTag_descriptor_,
      PublishedFileDetails_KVTag::default_instance_,
      PublishedFileDetails_KVTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails_KVTag));
  PublishedFileDetails_VoteData_descriptor_ = PublishedFileDetails_descriptor_->nested_type(4);
  static const int PublishedFileDetails_VoteData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_down_),
  };
  PublishedFileDetails_VoteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishedFileDetails_VoteData_descriptor_,
      PublishedFileDetails_VoteData::default_instance_,
      PublishedFileDetails_VoteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishedFileDetails_VoteData));
  CPublishedFile_GetDetails_Response_descriptor_ = file->message_type(8);
  static const int CPublishedFile_GetDetails_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, publishedfiledetails_),
  };
  CPublishedFile_GetDetails_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_GetDetails_Response_descriptor_,
      CPublishedFile_GetDetails_Response::default_instance_,
      CPublishedFile_GetDetails_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_GetDetails_Response));
  CPublishedFile_GetUserFiles_Request_descriptor_ = file->message_type(9);
  static const int CPublishedFile_GetUserFiles_Request_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, numperpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, sortmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, totalonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, privacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, ids_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, requiredtags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, excludedtags_),
  };
  CPublishedFile_GetUserFiles_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_GetUserFiles_Request_descriptor_,
      CPublishedFile_GetUserFiles_Request::default_instance_,
      CPublishedFile_GetUserFiles_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_GetUserFiles_Request));
  CPublishedFile_GetUserFiles_Response_descriptor_ = file->message_type(10);
  static const int CPublishedFile_GetUserFiles_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, startindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, publishedfiledetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, apps_),
  };
  CPublishedFile_GetUserFiles_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_GetUserFiles_Response_descriptor_,
      CPublishedFile_GetUserFiles_Response::default_instance_,
      CPublishedFile_GetUserFiles_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_GetUserFiles_Response));
  CPublishedFile_GetUserFiles_Response_App_descriptor_ = CPublishedFile_GetUserFiles_Response_descriptor_->nested_type(0);
  static const int CPublishedFile_GetUserFiles_Response_App_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, shortcutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, private__),
  };
  CPublishedFile_GetUserFiles_Response_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_GetUserFiles_Response_App_descriptor_,
      CPublishedFile_GetUserFiles_Response_App::default_instance_,
      CPublishedFile_GetUserFiles_Response_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_GetUserFiles_Response_App));
  CPublishedFile_Update_Request_descriptor_ = file->message_type(11);
  static const int CPublishedFile_Update_Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, publishedfileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, file_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, preview_filename_),
  };
  CPublishedFile_Update_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Update_Request_descriptor_,
      CPublishedFile_Update_Request::default_instance_,
      CPublishedFile_Update_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Update_Request));
  CPublishedFile_Update_Response_descriptor_ = file->message_type(12);
  static const int CPublishedFile_Update_Response_offsets_[1] = {
  };
  CPublishedFile_Update_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_Update_Response_descriptor_,
      CPublishedFile_Update_Response::default_instance_,
      CPublishedFile_Update_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_Update_Response));
  CPublishedFile_RefreshVotingQueue_Request_descriptor_ = file->message_type(13);
  static const int CPublishedFile_RefreshVotingQueue_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, matching_file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, match_all_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, excluded_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_),
  };
  CPublishedFile_RefreshVotingQueue_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_RefreshVotingQueue_Request_descriptor_,
      CPublishedFile_RefreshVotingQueue_Request::default_instance_,
      CPublishedFile_RefreshVotingQueue_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_RefreshVotingQueue_Request));
  CPublishedFile_RefreshVotingQueue_Response_descriptor_ = file->message_type(14);
  static const int CPublishedFile_RefreshVotingQueue_Response_offsets_[1] = {
  };
  CPublishedFile_RefreshVotingQueue_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPublishedFile_RefreshVotingQueue_Response_descriptor_,
      CPublishedFile_RefreshVotingQueue_Response::default_instance_,
      CPublishedFile_RefreshVotingQueue_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPublishedFile_RefreshVotingQueue_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Subscribe_Request_descriptor_, &CPublishedFile_Subscribe_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Subscribe_Response_descriptor_, &CPublishedFile_Subscribe_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Unsubscribe_Request_descriptor_, &CPublishedFile_Unsubscribe_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Unsubscribe_Response_descriptor_, &CPublishedFile_Unsubscribe_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Publish_Request_descriptor_, &CPublishedFile_Publish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Publish_Response_descriptor_, &CPublishedFile_Publish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_GetDetails_Request_descriptor_, &CPublishedFile_GetDetails_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_descriptor_, &PublishedFileDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_Tag_descriptor_, &PublishedFileDetails_Tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_Preview_descriptor_, &PublishedFileDetails_Preview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_Child_descriptor_, &PublishedFileDetails_Child::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_KVTag_descriptor_, &PublishedFileDetails_KVTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishedFileDetails_VoteData_descriptor_, &PublishedFileDetails_VoteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_GetDetails_Response_descriptor_, &CPublishedFile_GetDetails_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_GetUserFiles_Request_descriptor_, &CPublishedFile_GetUserFiles_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_GetUserFiles_Response_descriptor_, &CPublishedFile_GetUserFiles_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_GetUserFiles_Response_App_descriptor_, &CPublishedFile_GetUserFiles_Response_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Update_Request_descriptor_, &CPublishedFile_Update_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_Update_Response_descriptor_, &CPublishedFile_Update_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_RefreshVotingQueue_Request_descriptor_, &CPublishedFile_RefreshVotingQueue_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPublishedFile_RefreshVotingQueue_Response_descriptor_, &CPublishedFile_RefreshVotingQueue_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  delete CPublishedFile_Subscribe_Request::default_instance_;
  delete CPublishedFile_Subscribe_Request_reflection_;
  delete CPublishedFile_Subscribe_Response::default_instance_;
  delete CPublishedFile_Subscribe_Response_reflection_;
  delete CPublishedFile_Unsubscribe_Request::default_instance_;
  delete CPublishedFile_Unsubscribe_Request_reflection_;
  delete CPublishedFile_Unsubscribe_Response::default_instance_;
  delete CPublishedFile_Unsubscribe_Response_reflection_;
  delete CPublishedFile_Publish_Request::default_instance_;
  delete CPublishedFile_Publish_Request_reflection_;
  delete CPublishedFile_Publish_Response::default_instance_;
  delete CPublishedFile_Publish_Response_reflection_;
  delete CPublishedFile_GetDetails_Request::default_instance_;
  delete CPublishedFile_GetDetails_Request_reflection_;
  delete PublishedFileDetails::default_instance_;
  delete PublishedFileDetails_reflection_;
  delete PublishedFileDetails_Tag::default_instance_;
  delete PublishedFileDetails_Tag_reflection_;
  delete PublishedFileDetails_Preview::default_instance_;
  delete PublishedFileDetails_Preview_reflection_;
  delete PublishedFileDetails_Child::default_instance_;
  delete PublishedFileDetails_Child_reflection_;
  delete PublishedFileDetails_KVTag::default_instance_;
  delete PublishedFileDetails_KVTag_reflection_;
  delete PublishedFileDetails_VoteData::default_instance_;
  delete PublishedFileDetails_VoteData_reflection_;
  delete CPublishedFile_GetDetails_Response::default_instance_;
  delete CPublishedFile_GetDetails_Response_reflection_;
  delete CPublishedFile_GetUserFiles_Request::default_instance_;
  delete CPublishedFile_GetUserFiles_Request_reflection_;
  delete CPublishedFile_GetUserFiles_Request::_default_sortmethod_;
  delete CPublishedFile_GetUserFiles_Response::default_instance_;
  delete CPublishedFile_GetUserFiles_Response_reflection_;
  delete CPublishedFile_GetUserFiles_Response_App::default_instance_;
  delete CPublishedFile_GetUserFiles_Response_App_reflection_;
  delete CPublishedFile_Update_Request::default_instance_;
  delete CPublishedFile_Update_Request_reflection_;
  delete CPublishedFile_Update_Response::default_instance_;
  delete CPublishedFile_Update_Response_reflection_;
  delete CPublishedFile_RefreshVotingQueue_Request::default_instance_;
  delete CPublishedFile_RefreshVotingQueue_Request_reflection_;
  delete CPublishedFile_RefreshVotingQueue_Response::default_instance_;
  delete CPublishedFile_RefreshVotingQueue_Response_reflection_;
}

void protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5funified_5fbase_2esteamworkssdk_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n/steammessages_publishedfile.steamworks"
    "sdk.proto\032.steammessages_unified_base.st"
    "eamworkssdk.proto\"t\n CPublishedFile_Subs"
    "cribe_Request\022\027\n\017publishedfileid\030\001 \001(\004\022\021"
    "\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnoti"
    "fy_client\030\004 \001(\010\"#\n!CPublishedFile_Subscr"
    "ibe_Response\"v\n\"CPublishedFile_Unsubscri"
    "be_Request\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tl"
    "ist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnotify_"
    "client\030\004 \001(\010\"%\n#CPublishedFile_Unsubscri"
    "be_Response\"\314\n\n\036CPublishedFile_Publish_R"
    "equest\022<\n\005appid\030\001 \001(\rB-\202\265\030)App Id this f"
    "ile is being published FROM.\022C\n\016consumer"
    "_appid\030\002 \001(\rB+\202\265\030\'App Id this file is be"
    "ing published TO.\022K\n\rcloudfilename\030\003 \001(\t"
    "B4\202\265\0300Name of the file to publish in the"
    " user\'s cloud.\022[\n\025preview_cloudfilename\030"
    "\004 \001(\tB<\202\265\0308Name of the file to use as th"
    "e published file\'s preview.\0225\n\005title\030\005 \001"
    "(\tB&\202\265\030\"Text title for the published fil"
    "e.\022F\n\020file_description\030\006 \001(\tB,\202\265\030(Text d"
    "escription for the published file.\022L\n\tfi"
    "le_type\030\007 \001(\rB9\202\265\0305(EWorkshopFileType) T"
    "ype of Workshop file to publish.\022I\n\026cons"
    "umer_shortcut_name\030\010 \001(\tB)\202\265\030%Shortcut n"
    "ame for the published file.\022I\n\020youtube_u"
    "sername\030\t \001(\tB/\202\265\030+(Optional) User\'s You"
    "Tube account username.\022\\\n\017youtube_videoi"
    "d\030\n \001(\tBC\202\265\030\?(Optional) Video Id of a Yo"
    "uTube video for this published file.\022\201\001\n"
    "\nvisibility\030\013 \001(\rBm\202\265\030i(ERemoteStoragePu"
    "blishedFileVisibility) Visibility of the"
    " published file (private, friends, publi"
    "c, etc.)\022k\n\014redirect_uri\030\014 \001(\tBU\202\265\030Q(Opt"
    "ional) If supplied, the resulting publis"
    "hed file\'s Id is appended to the URI.\022D\n"
    "\004tags\030\r \003(\tB6\202\265\0302Array of text tags to a"
    "pply to the published file.\022Y\n\017collectio"
    "n_type\030\016 \001(\tB@\202\265\030<(Optional) Type of col"
    "lection the published file represents.\022M"
    "\n\tgame_type\030\017 \001(\tB:\202\265\0306(Optional) Type o"
    "f game the published file represents.\022[\n"
    "\003url\030\020 \001(\tBN\202\265\030J(Optional) If this repre"
    "sents a game, this is the URL to that ga"
    "me\'s page.\"P\n\037CPublishedFile_Publish_Res"
    "ponse\022\027\n\017publishedfileid\030\001 \001(\004\022\024\n\014redire"
    "ct_uri\030\002 \001(\t\"\204\005\n!CPublishedFile_GetDetai"
    "ls_Request\022P\n\020publishedfileids\030\001 \003(\006B6\202\265"
    "\0302Set of published file Ids to retrieve "
    "details for.\022Q\n\013includetags\030\002 \001(\010B<\202\265\0308I"
    "f true, return tag information in the re"
    "turned details.\022c\n\031includeadditionalprev"
    "iews\030\003 \001(\010B@\202\265\030<If true, return preview "
    "information in the returned details.\022N\n\017"
    "includechildren\030\004 \001(\010B5\202\265\0301If true, retu"
    "rn children in the returned details.\022R\n\r"
    "includekvtags\030\005 \001(\010B;\202\265\0307If true, return"
    " key value tags in the returned details."
    "\022L\n\014includevotes\030\006 \001(\010B6\202\265\0302If true, ret"
    "urn vote data in the returned details.\022c"
    "\n\021short_description\030\010 \001(\010BH\202\265\030DIf true, "
    "return a short description instead of th"
    "e full description.\"\211\016\n\024PublishedFileDet"
    "ails\022\016\n\006result\030\001 \001(\r\022\027\n\017publishedfileid\030"
    "\002 \001(\004\022\017\n\007creator\030\003 \001(\006\022\025\n\rcreator_appid\030"
    "\004 \001(\r\022\026\n\016consumer_appid\030\005 \001(\r\022\033\n\023consume"
    "r_shortcutid\030\006 \001(\r\022\020\n\010filename\030\007 \001(\t\022\021\n\t"
    "file_size\030\010 \001(\004\022\031\n\021preview_file_size\030\t \001"
    "(\004\022\020\n\010file_url\030\n \001(\t\022\023\n\013preview_url\030\013 \001("
    "\t\022\026\n\016youtubevideoid\030\014 \001(\t\022\013\n\003url\030\r \001(\t\022\025"
    "\n\rhcontent_file\030\016 \001(\006\022\030\n\020hcontent_previe"
    "w\030\017 \001(\006\022\r\n\005title\030\020 \001(\t\022\030\n\020file_descripti"
    "on\030\021 \001(\t\022\031\n\021short_description\030\022 \001(\t\022\024\n\014t"
    "ime_created\030\023 \001(\r\022\024\n\014time_updated\030\024 \001(\r\022"
    "\022\n\nvisibility\030\025 \001(\r\022\r\n\005flags\030\026 \001(\r\022\025\n\rwo"
    "rkshop_file\030\027 \001(\010\022\031\n\021workshop_accepted\030\030"
    " \001(\010\022\032\n\022show_subscribe_all\030\031 \001(\010\022\036\n\026num_"
    "comments_developer\030\032 \001(\005\022\033\n\023num_comments"
    "_public\030\033 \001(\005\022\016\n\006banned\030\034 \001(\010\022\022\n\nban_rea"
    "son\030\035 \001(\t\022\016\n\006banner\030\036 \001(\006\022\026\n\016can_be_dele"
    "ted\030\037 \001(\010\022\024\n\014incompatible\030  \001(\010\022\020\n\010app_n"
    "ame\030! \001(\t\022\021\n\tfile_type\030\" \001(\r\022\025\n\rcan_subs"
    "cribe\030# \001(\010\022\025\n\rsubscriptions\030$ \001(\r\022\021\n\tfa"
    "vorited\030% \001(\r\022\021\n\tfollowers\030& \001(\r\022\036\n\026life"
    "time_subscriptions\030\' \001(\r\022\032\n\022lifetime_fav"
    "orited\030( \001(\r\022\032\n\022lifetime_followers\030) \001(\r"
    "\022\r\n\005views\030* \001(\r\022\023\n\013image_width\030+ \001(\r\022\024\n\014"
    "image_height\030, \001(\r\022\021\n\timage_url\030- \001(\t\022\023\n"
    "\013spoiler_tag\030. \001(\010\022\022\n\nshortcutid\030/ \001(\r\022\024"
    "\n\014shortcutname\0300 \001(\t\022\024\n\014num_children\0301 \001"
    "(\r\022\023\n\013num_reports\0302 \001(\r\022/\n\010previews\0303 \003("
    "\0132\035.PublishedFileDetails.Preview\022\'\n\004tags"
    "\0304 \003(\0132\031.PublishedFileDetails.Tag\022-\n\010chi"
    "ldren\0305 \003(\0132\033.PublishedFileDetails.Child"
    "\022+\n\006kvtags\0306 \003(\0132\033.PublishedFileDetails."
    "KVTag\0221\n\tvote_data\0307 \001(\0132\036.PublishedFile"
    "Details.VoteData\022r\n\017time_subscribed\0308 \001("
    "\rBY\202\265\030UOnly valid in PublishedFile.GetUs"
    "erFiles and not normal PublishedFile.Get"
    "Detail calls\032%\n\003Tag\022\013\n\003tag\030\001 \001(\t\022\021\n\tadmi"
    "nonly\030\002 \001(\010\032t\n\007Preview\022\021\n\tpreviewid\030\001 \001("
    "\004\022\021\n\tsortorder\030\002 \001(\r\022\013\n\003url\030\003 \001(\t\022\014\n\004siz"
    "e\030\004 \001(\r\022\020\n\010filename\030\005 \001(\t\022\026\n\016youtubevide"
    "oid\030\006 \001(\t\032F\n\005Child\022\027\n\017publishedfileid\030\001 "
    "\001(\004\022\021\n\tsortorder\030\002 \001(\r\022\021\n\tfile_type\030\003 \001("
    "\r\032#\n\005KVTag\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\?"
    "\n\010VoteData\022\r\n\005score\030\001 \001(\002\022\020\n\010votes_up\030\002 "
    "\001(\r\022\022\n\nvotes_down\030\003 \001(\r\"Y\n\"CPublishedFil"
    "e_GetDetails_Response\0223\n\024publishedfilede"
    "tails\030\001 \003(\0132\025.PublishedFileDetails\"\273\006\n#C"
    "PublishedFile_GetUserFiles_Request\022;\n\005ap"
    "pid\030\001 \001(\rB,\202\265\030(App Id to retrieve publis"
    "hed files from.\022:\n\004page\030\003 \001(\r:\0011B)\202\265\030%(O"
    "ptional) Starting page for results.\022P\n\nn"
    "umperpage\030\004 \001(\r:\0011B9\202\265\0305(Optional) The n"
    "umber of results, per page to return.\022Y\n"
    "\nsortmethod\030\006 \001(\t:\013lastupdatedB8\202\265\0304(Opt"
    "ional) Sorting method to use on returned"
    " values.\022i\n\ttotalonly\030\007 \001(\010BV\202\265\030R(Option"
    "al) If true, only return the total numbe"
    "r of files that satisfy this query.\022;\n\007p"
    "rivacy\030\t \001(\rB*\202\265\030&(optional) Filter by p"
    "rivacy settings.\022n\n\010ids_only\030\n \001(\010B\\\202\265\030X"
    "(Optional) If true, only return the publ"
    "ished file ids of files that satisfy thi"
    "s query.\022h\n\014requiredtags\030\013 \003(\tBR\202\265\030N(Opt"
    "ional) Tags that must be present on a pu"
    "blished file to satisfy the query.\022l\n\014ex"
    "cludedtags\030\014 \003(\tBV\202\265\030R(Optional) Tags th"
    "at must NOT be present on a published fi"
    "le to satisfy the query.\"\200\002\n$CPublishedF"
    "ile_GetUserFiles_Response\022\r\n\005total\030\001 \001(\r"
    "\022\022\n\nstartindex\030\002 \001(\r\0223\n\024publishedfiledet"
    "ails\030\003 \003(\0132\025.PublishedFileDetails\0227\n\004app"
    "s\030\004 \003(\0132).CPublishedFile_GetUserFiles_Re"
    "sponse.App\032G\n\003App\022\r\n\005appid\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\022\022\n\nshortcutid\030\003 \001(\r\022\017\n\007private\030\004 "
    "\001(\010\"\317\004\n\035CPublishedFile_Update_Request\0229\n"
    "\005appid\030\001 \001(\rB*\202\265\030&App Id this published "
    "file belongs to.\022L\n\017publishedfileid\030\002 \001("
    "\006B3\202\265\030/Published file id of the file we\'"
    "d like update.\022:\n\005title\030\003 \001(\tB+\202\265\030\'(Opti"
    "onal) Title of the published file.\022K\n\020fi"
    "le_description\030\004 \001(\tB1\202\265\030-(Optional) Des"
    "cription of the published file.\022D\n\nvisib"
    "ility\030\005 \001(\rB0\202\265\030,(Optional) Visibility o"
    "f the published file.\022@\n\004tags\030\006 \003(\tB2\202\265\030"
    ".(Optional) Set of tags for the publishe"
    "d file.\022A\n\010filename\030\007 \001(\tB/\202\265\030+(Optional"
    ") Filename for the published file.\022Q\n\020pr"
    "eview_filename\030\010 \001(\tB7\202\265\0303(Optional) Pre"
    "view filename for the published file.\" \n"
    "\036CPublishedFile_Update_Response\"\273\004\n)CPub"
    "lishedFile_RefreshVotingQueue_Request\022\r\n"
    "\005appid\030\001 \001(\r\022B\n\022matching_file_type\030\002 \001(\r"
    "B&\202\265\030\"EPublishedFileInfoMatchingFileType"
    "\022l\n\004tags\030\003 \003(\tB^\202\265\030ZInclude files that h"
    "ave all the tags or any of the tags if m"
    "atch_all_tags is set to false.\022\225\001\n\016match"
    "_all_tags\030\004 \001(\010:\004trueBw\202\265\030sIf true, then"
    " files must have all the tags specified."
    "  If false, then must have at least one "
    "of the tags specified.\022I\n\rexcluded_tags\030"
    "\005 \003(\tB2\202\265\030.Exclude any files that have a"
    "ny of these tags.\022j\n\022desired_queue_size\030"
    "\006 \001(\rBN\202\265\030JDesired number of items in th"
    "e voting queue.  May be clamped by the s"
    "erver\",\n*CPublishedFile_RefreshVotingQue"
    "ue_Response2\203\010\n\rPublishedFile\022\201\001\n\tSubscr"
    "ibe\022!.CPublishedFile_Subscribe_Request\032\""
    ".CPublishedFile_Subscribe_Response\"-\202\265\030)"
    "Subscribes the user to the published fil"
    "e\022\213\001\n\013Unsubscribe\022#.CPublishedFile_Unsub"
    "scribe_Request\032$.CPublishedFile_Unsubscr"
    "ibe_Response\"1\202\265\030-Unsubscribes the user "
    "from the published file\022\200\001\n\007Publish\022\037.CP"
    "ublishedFile_Publish_Request\032 .CPublishe"
    "dFile_Publish_Response\"2\202\265\030.Publishes a "
    "clouded user file to the Workshop.\022\220\001\n\nG"
    "etDetails\022\".CPublishedFile_GetDetails_Re"
    "quest\032#.CPublishedFile_GetDetails_Respon"
    "se\"9\202\265\0305Retrieves information about a se"
    "t of published files.\022\205\001\n\014GetUserFiles\022$"
    ".CPublishedFile_GetUserFiles_Request\032%.C"
    "PublishedFile_GetUserFiles_Response\"(\202\265\030"
    "$Retrieves files published by a user.\022z\n"
    "\006Update\022\036.CPublishedFile_Update_Request\032"
    "\037.CPublishedFile_Update_Response\"/\202\265\030+Up"
    "dates information about a published file"
    ".\022\230\001\n\022RefreshVotingQueue\022*.CPublishedFil"
    "e_RefreshVotingQueue_Request\032+.CPublishe"
    "dFile_RefreshVotingQueue_Response\")\202\265\030%R"
    "efresh the voting queue for the user\032+\202\265"
    "\030\'A service to access published file dat"
    "a", 7761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_publishedfile.steamworkssdk.proto", &protobuf_RegisterTypes);
  CPublishedFile_Subscribe_Request::default_instance_ = new CPublishedFile_Subscribe_Request();
  CPublishedFile_Subscribe_Response::default_instance_ = new CPublishedFile_Subscribe_Response();
  CPublishedFile_Unsubscribe_Request::default_instance_ = new CPublishedFile_Unsubscribe_Request();
  CPublishedFile_Unsubscribe_Response::default_instance_ = new CPublishedFile_Unsubscribe_Response();
  CPublishedFile_Publish_Request::default_instance_ = new CPublishedFile_Publish_Request();
  CPublishedFile_Publish_Response::default_instance_ = new CPublishedFile_Publish_Response();
  CPublishedFile_GetDetails_Request::default_instance_ = new CPublishedFile_GetDetails_Request();
  PublishedFileDetails::default_instance_ = new PublishedFileDetails();
  PublishedFileDetails_Tag::default_instance_ = new PublishedFileDetails_Tag();
  PublishedFileDetails_Preview::default_instance_ = new PublishedFileDetails_Preview();
  PublishedFileDetails_Child::default_instance_ = new PublishedFileDetails_Child();
  PublishedFileDetails_KVTag::default_instance_ = new PublishedFileDetails_KVTag();
  PublishedFileDetails_VoteData::default_instance_ = new PublishedFileDetails_VoteData();
  CPublishedFile_GetDetails_Response::default_instance_ = new CPublishedFile_GetDetails_Response();
  CPublishedFile_GetUserFiles_Request::_default_sortmethod_ =
      new ::std::string("lastupdated", 11);
  CPublishedFile_GetUserFiles_Request::default_instance_ = new CPublishedFile_GetUserFiles_Request();
  CPublishedFile_GetUserFiles_Response::default_instance_ = new CPublishedFile_GetUserFiles_Response();
  CPublishedFile_GetUserFiles_Response_App::default_instance_ = new CPublishedFile_GetUserFiles_Response_App();
  CPublishedFile_Update_Request::default_instance_ = new CPublishedFile_Update_Request();
  CPublishedFile_Update_Response::default_instance_ = new CPublishedFile_Update_Response();
  CPublishedFile_RefreshVotingQueue_Request::default_instance_ = new CPublishedFile_RefreshVotingQueue_Request();
  CPublishedFile_RefreshVotingQueue_Response::default_instance_ = new CPublishedFile_RefreshVotingQueue_Response();
  CPublishedFile_Subscribe_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Subscribe_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Unsubscribe_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Unsubscribe_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Publish_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Publish_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_GetDetails_Request::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails_Tag::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails_Preview::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails_Child::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails_KVTag::default_instance_->InitAsDefaultInstance();
  PublishedFileDetails_VoteData::default_instance_->InitAsDefaultInstance();
  CPublishedFile_GetDetails_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_GetUserFiles_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_GetUserFiles_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_GetUserFiles_Response_App::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Update_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_Update_Response::default_instance_->InitAsDefaultInstance();
  CPublishedFile_RefreshVotingQueue_Request::default_instance_->InitAsDefaultInstance();
  CPublishedFile_RefreshVotingQueue_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fpublishedfile_2esteamworkssdk_2eproto {
  StaticDescriptorInitializer_steammessages_5fpublishedfile_2esteamworkssdk_2eproto() {
    protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  }
} static_descriptor_initializer_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_Subscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Subscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Subscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Subscribe_Request::kNotifyClientFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Subscribe_Request)
}

void CPublishedFile_Subscribe_Request::InitAsDefaultInstance() {
}

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Request)
}

void CPublishedFile_Subscribe_Request::SharedCtor() {
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  list_type_ = 0u;
  appid_ = 0;
  notify_client_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Subscribe_Request::~CPublishedFile_Subscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Subscribe_Request)
  SharedDtor();
}

void CPublishedFile_Subscribe_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_Subscribe_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Subscribe_Request_descriptor_;
}

const CPublishedFile_Subscribe_Request& CPublishedFile_Subscribe_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Subscribe_Request* CPublishedFile_Subscribe_Request::default_instance_ = NULL;

CPublishedFile_Subscribe_Request* CPublishedFile_Subscribe_Request::New() const {
  return new CPublishedFile_Subscribe_Request;
}

void CPublishedFile_Subscribe_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_Subscribe_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(publishedfileid_, notify_client_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Subscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Subscribe_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list_type;
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (tag == 16) {
         parse_list_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
          set_has_list_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (tag == 24) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_notify_client;
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (tag == 32) {
         parse_notify_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
          set_has_notify_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Subscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Subscribe_Request)
  return false;
#undef DO_
}

void CPublishedFile_Subscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Subscribe_Request)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (has_notify_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Subscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Subscribe_Request)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (has_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (has_notify_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Subscribe_Request)
  return target;
}

int CPublishedFile_Subscribe_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (has_notify_client()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Subscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Subscribe_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Request::MergeFrom(const CPublishedFile_Subscribe_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_notify_client()) {
      set_notify_client(from.notify_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Subscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Request::CopyFrom(const CPublishedFile_Subscribe_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_Subscribe_Request::Swap(CPublishedFile_Subscribe_Request* other) {
  if (other != this) {
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(list_type_, other->list_type_);
    std::swap(appid_, other->appid_);
    std::swap(notify_client_, other->notify_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Subscribe_Request_descriptor_;
  metadata.reflection = CPublishedFile_Subscribe_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Subscribe_Response)
}

void CPublishedFile_Subscribe_Response::InitAsDefaultInstance() {
}

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Response)
}

void CPublishedFile_Subscribe_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Subscribe_Response::~CPublishedFile_Subscribe_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Subscribe_Response)
  SharedDtor();
}

void CPublishedFile_Subscribe_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_Subscribe_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Subscribe_Response_descriptor_;
}

const CPublishedFile_Subscribe_Response& CPublishedFile_Subscribe_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Subscribe_Response* CPublishedFile_Subscribe_Response::default_instance_ = NULL;

CPublishedFile_Subscribe_Response* CPublishedFile_Subscribe_Response::New() const {
  return new CPublishedFile_Subscribe_Response;
}

void CPublishedFile_Subscribe_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Subscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Subscribe_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Subscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Subscribe_Response)
  return false;
#undef DO_
}

void CPublishedFile_Subscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Subscribe_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Subscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Subscribe_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Subscribe_Response)
  return target;
}

int CPublishedFile_Subscribe_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Subscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Subscribe_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Response::MergeFrom(const CPublishedFile_Subscribe_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Subscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Response::CopyFrom(const CPublishedFile_Subscribe_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_Subscribe_Response::Swap(CPublishedFile_Subscribe_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Subscribe_Response_descriptor_;
  metadata.reflection = CPublishedFile_Subscribe_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_Unsubscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kNotifyClientFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Unsubscribe_Request)
}

void CPublishedFile_Unsubscribe_Request::InitAsDefaultInstance() {
}

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Request)
}

void CPublishedFile_Unsubscribe_Request::SharedCtor() {
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  list_type_ = 0u;
  appid_ = 0;
  notify_client_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Unsubscribe_Request::~CPublishedFile_Unsubscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Unsubscribe_Request)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_Unsubscribe_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Unsubscribe_Request_descriptor_;
}

const CPublishedFile_Unsubscribe_Request& CPublishedFile_Unsubscribe_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Unsubscribe_Request* CPublishedFile_Unsubscribe_Request::default_instance_ = NULL;

CPublishedFile_Unsubscribe_Request* CPublishedFile_Unsubscribe_Request::New() const {
  return new CPublishedFile_Unsubscribe_Request;
}

void CPublishedFile_Unsubscribe_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_Unsubscribe_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(publishedfileid_, notify_client_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Unsubscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Unsubscribe_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list_type;
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (tag == 16) {
         parse_list_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
          set_has_list_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (tag == 24) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_notify_client;
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (tag == 32) {
         parse_notify_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
          set_has_notify_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Unsubscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Unsubscribe_Request)
  return false;
#undef DO_
}

void CPublishedFile_Unsubscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Unsubscribe_Request)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (has_notify_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Unsubscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Unsubscribe_Request)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (has_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (has_notify_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Unsubscribe_Request)
  return target;
}

int CPublishedFile_Unsubscribe_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (has_notify_client()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Unsubscribe_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const CPublishedFile_Unsubscribe_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_notify_client()) {
      set_notify_client(from.notify_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const CPublishedFile_Unsubscribe_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_Unsubscribe_Request::Swap(CPublishedFile_Unsubscribe_Request* other) {
  if (other != this) {
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(list_type_, other->list_type_);
    std::swap(appid_, other->appid_);
    std::swap(notify_client_, other->notify_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Unsubscribe_Request_descriptor_;
  metadata.reflection = CPublishedFile_Unsubscribe_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Unsubscribe_Response)
}

void CPublishedFile_Unsubscribe_Response::InitAsDefaultInstance() {
}

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Response)
}

void CPublishedFile_Unsubscribe_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Unsubscribe_Response::~CPublishedFile_Unsubscribe_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Unsubscribe_Response)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_Unsubscribe_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Unsubscribe_Response_descriptor_;
}

const CPublishedFile_Unsubscribe_Response& CPublishedFile_Unsubscribe_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Unsubscribe_Response* CPublishedFile_Unsubscribe_Response::default_instance_ = NULL;

CPublishedFile_Unsubscribe_Response* CPublishedFile_Unsubscribe_Response::New() const {
  return new CPublishedFile_Unsubscribe_Response;
}

void CPublishedFile_Unsubscribe_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Unsubscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Unsubscribe_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Unsubscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Unsubscribe_Response)
  return false;
#undef DO_
}

void CPublishedFile_Unsubscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Unsubscribe_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Unsubscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Unsubscribe_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Unsubscribe_Response)
  return target;
}

int CPublishedFile_Unsubscribe_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Unsubscribe_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const CPublishedFile_Unsubscribe_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const CPublishedFile_Unsubscribe_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_Unsubscribe_Response::Swap(CPublishedFile_Unsubscribe_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Unsubscribe_Response_descriptor_;
  metadata.reflection = CPublishedFile_Unsubscribe_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_Publish_Request::kAppidFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerAppidFieldNumber;
const int CPublishedFile_Publish_Request::kCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kPreviewCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kTitleFieldNumber;
const int CPublishedFile_Publish_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Publish_Request::kFileTypeFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerShortcutNameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeUsernameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeVideoidFieldNumber;
const int CPublishedFile_Publish_Request::kVisibilityFieldNumber;
const int CPublishedFile_Publish_Request::kRedirectUriFieldNumber;
const int CPublishedFile_Publish_Request::kTagsFieldNumber;
const int CPublishedFile_Publish_Request::kCollectionTypeFieldNumber;
const int CPublishedFile_Publish_Request::kGameTypeFieldNumber;
const int CPublishedFile_Publish_Request::kUrlFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Publish_Request)
}

void CPublishedFile_Publish_Request::InitAsDefaultInstance() {
}

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Request)
}

void CPublishedFile_Publish_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  consumer_appid_ = 0u;
  cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_type_ = 0u;
  consumer_shortcut_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visibility_ = 0u;
  redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Publish_Request::~CPublishedFile_Publish_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Request)
  SharedDtor();
}

void CPublishedFile_Publish_Request::SharedDtor() {
  if (cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cloudfilename_;
  }
  if (preview_cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_cloudfilename_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (consumer_shortcut_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete consumer_shortcut_name_;
  }
  if (youtube_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtube_username_;
  }
  if (youtube_videoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtube_videoid_;
  }
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_uri_;
  }
  if (collection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collection_type_;
  }
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_type_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CPublishedFile_Publish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Publish_Request_descriptor_;
}

const CPublishedFile_Publish_Request& CPublishedFile_Publish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Publish_Request* CPublishedFile_Publish_Request::default_instance_ = NULL;

CPublishedFile_Publish_Request* CPublishedFile_Publish_Request::New() const {
  return new CPublishedFile_Publish_Request;
}

void CPublishedFile_Publish_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_Publish_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(appid_, consumer_appid_);
    if (has_cloudfilename()) {
      if (cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cloudfilename_->clear();
      }
    }
    if (has_preview_cloudfilename()) {
      if (preview_cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preview_cloudfilename_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_file_description()) {
      if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_description_->clear();
      }
    }
    file_type_ = 0u;
    if (has_consumer_shortcut_name()) {
      if (consumer_shortcut_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        consumer_shortcut_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    if (has_youtube_username()) {
      if (youtube_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        youtube_username_->clear();
      }
    }
    if (has_youtube_videoid()) {
      if (youtube_videoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        youtube_videoid_->clear();
      }
    }
    visibility_ = 0u;
    if (has_redirect_uri()) {
      if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redirect_uri_->clear();
      }
    }
    if (has_collection_type()) {
      if (collection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        collection_type_->clear();
      }
    }
    if (has_game_type()) {
      if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_type_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Publish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Publish_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_consumer_appid;
        break;
      }

      // optional uint32 consumer_appid = 2;
      case 2: {
        if (tag == 16) {
         parse_consumer_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
          set_has_consumer_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cloudfilename;
        break;
      }

      // optional string cloudfilename = 3;
      case 3: {
        if (tag == 26) {
         parse_cloudfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cloudfilename().data(), this->cloudfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_preview_cloudfilename;
        break;
      }

      // optional string preview_cloudfilename = 4;
      case 4: {
        if (tag == 34) {
         parse_preview_cloudfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preview_cloudfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (tag == 42) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_file_description;
        break;
      }

      // optional string file_description = 6;
      case 6: {
        if (tag == 50) {
         parse_file_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_file_type;
        break;
      }

      // optional uint32 file_type = 7;
      case 7: {
        if (tag == 56) {
         parse_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
          set_has_file_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_consumer_shortcut_name;
        break;
      }

      // optional string consumer_shortcut_name = 8;
      case 8: {
        if (tag == 66) {
         parse_consumer_shortcut_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_shortcut_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "consumer_shortcut_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_youtube_username;
        break;
      }

      // optional string youtube_username = 9;
      case 9: {
        if (tag == 74) {
         parse_youtube_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_username().data(), this->youtube_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "youtube_username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_youtube_videoid;
        break;
      }

      // optional string youtube_videoid = 10;
      case 10: {
        if (tag == 82) {
         parse_youtube_videoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_videoid().data(), this->youtube_videoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "youtube_videoid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_visibility;
        break;
      }

      // optional uint32 visibility = 11;
      case 11: {
        if (tag == 88) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_redirect_uri;
        break;
      }

      // optional string redirect_uri = 12;
      case 12: {
        if (tag == 98) {
         parse_redirect_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), this->redirect_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redirect_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tags;
        break;
      }

      // repeated string tags = 13;
      case 13: {
        if (tag == 106) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tags;
        if (input->ExpectTag(114)) goto parse_collection_type;
        break;
      }

      // optional string collection_type = 14;
      case 14: {
        if (tag == 114) {
         parse_collection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collection_type().data(), this->collection_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "collection_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_game_type;
        break;
      }

      // optional string game_type = 15;
      case 15: {
        if (tag == 122) {
         parse_game_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), this->game_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "game_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_url;
        break;
      }

      // optional string url = 16;
      case 16: {
        if (tag == 130) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Publish_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Publish_Request)
  return false;
#undef DO_
}

void CPublishedFile_Publish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Publish_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 consumer_appid = 2;
  if (has_consumer_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consumer_appid(), output);
  }

  // optional string cloudfilename = 3;
  if (has_cloudfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), this->cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cloudfilename(), output);
  }

  // optional string preview_cloudfilename = 4;
  if (has_preview_cloudfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preview_cloudfilename(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string file_description = 6;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_description(), output);
  }

  // optional uint32 file_type = 7;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->file_type(), output);
  }

  // optional string consumer_shortcut_name = 8;
  if (has_consumer_shortcut_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "consumer_shortcut_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->consumer_shortcut_name(), output);
  }

  // optional string youtube_username = 9;
  if (has_youtube_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), this->youtube_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtube_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->youtube_username(), output);
  }

  // optional string youtube_videoid = 10;
  if (has_youtube_videoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), this->youtube_videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtube_videoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->youtube_videoid(), output);
  }

  // optional uint32 visibility = 11;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->visibility(), output);
  }

  // optional string redirect_uri = 12;
  if (has_redirect_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->redirect_uri(), output);
  }

  // repeated string tags = 13;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tags(i), output);
  }

  // optional string collection_type = 14;
  if (has_collection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), this->collection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->collection_type(), output);
  }

  // optional string game_type = 15;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->game_type(), output);
  }

  // optional string url = 16;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Publish_Request)
}

::google::protobuf::uint8* CPublishedFile_Publish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 consumer_appid = 2;
  if (has_consumer_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consumer_appid(), target);
  }

  // optional string cloudfilename = 3;
  if (has_cloudfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), this->cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cloudfilename(), target);
  }

  // optional string preview_cloudfilename = 4;
  if (has_preview_cloudfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preview_cloudfilename(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string file_description = 6;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_description(), target);
  }

  // optional uint32 file_type = 7;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->file_type(), target);
  }

  // optional string consumer_shortcut_name = 8;
  if (has_consumer_shortcut_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "consumer_shortcut_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->consumer_shortcut_name(), target);
  }

  // optional string youtube_username = 9;
  if (has_youtube_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), this->youtube_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtube_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->youtube_username(), target);
  }

  // optional string youtube_videoid = 10;
  if (has_youtube_videoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), this->youtube_videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtube_videoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->youtube_videoid(), target);
  }

  // optional uint32 visibility = 11;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->visibility(), target);
  }

  // optional string redirect_uri = 12;
  if (has_redirect_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->redirect_uri(), target);
  }

  // repeated string tags = 13;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->tags(i), target);
  }

  // optional string collection_type = 14;
  if (has_collection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), this->collection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->collection_type(), target);
  }

  // optional string game_type = 15;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->game_type(), target);
  }

  // optional string url = 16;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Request)
  return target;
}

int CPublishedFile_Publish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 consumer_appid = 2;
    if (has_consumer_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional string cloudfilename = 3;
    if (has_cloudfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloudfilename());
    }

    // optional string preview_cloudfilename = 4;
    if (has_preview_cloudfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_cloudfilename());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 6;
    if (has_file_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional uint32 file_type = 7;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional string consumer_shortcut_name = 8;
    if (has_consumer_shortcut_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumer_shortcut_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string youtube_username = 9;
    if (has_youtube_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_username());
    }

    // optional string youtube_videoid = 10;
    if (has_youtube_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_videoid());
    }

    // optional uint32 visibility = 11;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional string redirect_uri = 12;
    if (has_redirect_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

    // optional string collection_type = 14;
    if (has_collection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_type());
    }

    // optional string game_type = 15;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional string url = 16;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated string tags = 13;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Publish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Publish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Publish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Request::MergeFrom(const CPublishedFile_Publish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_consumer_appid()) {
      set_consumer_appid(from.consumer_appid());
    }
    if (from.has_cloudfilename()) {
      set_cloudfilename(from.cloudfilename());
    }
    if (from.has_preview_cloudfilename()) {
      set_preview_cloudfilename(from.preview_cloudfilename());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_file_description()) {
      set_file_description(from.file_description());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_consumer_shortcut_name()) {
      set_consumer_shortcut_name(from.consumer_shortcut_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_youtube_username()) {
      set_youtube_username(from.youtube_username());
    }
    if (from.has_youtube_videoid()) {
      set_youtube_videoid(from.youtube_videoid());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_redirect_uri()) {
      set_redirect_uri(from.redirect_uri());
    }
    if (from.has_collection_type()) {
      set_collection_type(from.collection_type());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Publish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Request::CopyFrom(const CPublishedFile_Publish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_Publish_Request::Swap(CPublishedFile_Publish_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(consumer_appid_, other->consumer_appid_);
    std::swap(cloudfilename_, other->cloudfilename_);
    std::swap(preview_cloudfilename_, other->preview_cloudfilename_);
    std::swap(title_, other->title_);
    std::swap(file_description_, other->file_description_);
    std::swap(file_type_, other->file_type_);
    std::swap(consumer_shortcut_name_, other->consumer_shortcut_name_);
    std::swap(youtube_username_, other->youtube_username_);
    std::swap(youtube_videoid_, other->youtube_videoid_);
    std::swap(visibility_, other->visibility_);
    std::swap(redirect_uri_, other->redirect_uri_);
    tags_.Swap(&other->tags_);
    std::swap(collection_type_, other->collection_type_);
    std::swap(game_type_, other->game_type_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Publish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Publish_Request_descriptor_;
  metadata.reflection = CPublishedFile_Publish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_Publish_Response::kPublishedfileidFieldNumber;
const int CPublishedFile_Publish_Response::kRedirectUriFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Publish_Response)
}

void CPublishedFile_Publish_Response::InitAsDefaultInstance() {
}

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Response)
}

void CPublishedFile_Publish_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Publish_Response::~CPublishedFile_Publish_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Response)
  SharedDtor();
}

void CPublishedFile_Publish_Response::SharedDtor() {
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_uri_;
  }
  if (this != default_instance_) {
  }
}

void CPublishedFile_Publish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Publish_Response_descriptor_;
}

const CPublishedFile_Publish_Response& CPublishedFile_Publish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Publish_Response* CPublishedFile_Publish_Response::default_instance_ = NULL;

CPublishedFile_Publish_Response* CPublishedFile_Publish_Response::New() const {
  return new CPublishedFile_Publish_Response;
}

void CPublishedFile_Publish_Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    publishedfileid_ = GOOGLE_ULONGLONG(0);
    if (has_redirect_uri()) {
      if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redirect_uri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Publish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Publish_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redirect_uri;
        break;
      }

      // optional string redirect_uri = 2;
      case 2: {
        if (tag == 18) {
         parse_redirect_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), this->redirect_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redirect_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Publish_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Publish_Response)
  return false;
#undef DO_
}

void CPublishedFile_Publish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Publish_Response)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional string redirect_uri = 2;
  if (has_redirect_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect_uri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Publish_Response)
}

::google::protobuf::uint8* CPublishedFile_Publish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Response)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional string redirect_uri = 2;
  if (has_redirect_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect_uri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Response)
  return target;
}

int CPublishedFile_Publish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional string redirect_uri = 2;
    if (has_redirect_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Publish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Publish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Publish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Response::MergeFrom(const CPublishedFile_Publish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_redirect_uri()) {
      set_redirect_uri(from.redirect_uri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Publish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Response::CopyFrom(const CPublishedFile_Publish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_Publish_Response::Swap(CPublishedFile_Publish_Response* other) {
  if (other != this) {
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(redirect_uri_, other->redirect_uri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Publish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Publish_Response_descriptor_;
  metadata.reflection = CPublishedFile_Publish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_GetDetails_Request::kPublishedfileidsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludetagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludeadditionalpreviewsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludechildrenFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludekvtagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludevotesFieldNumber;
const int CPublishedFile_GetDetails_Request::kShortDescriptionFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_GetDetails_Request)
}

void CPublishedFile_GetDetails_Request::InitAsDefaultInstance() {
}

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Request)
}

void CPublishedFile_GetDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  includetags_ = false;
  includeadditionalpreviews_ = false;
  includechildren_ = false;
  includekvtags_ = false;
  includevotes_ = false;
  short_description_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_GetDetails_Request::~CPublishedFile_GetDetails_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Request)
  SharedDtor();
}

void CPublishedFile_GetDetails_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_GetDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_GetDetails_Request_descriptor_;
}

const CPublishedFile_GetDetails_Request& CPublishedFile_GetDetails_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_GetDetails_Request* CPublishedFile_GetDetails_Request::default_instance_ = NULL;

CPublishedFile_GetDetails_Request* CPublishedFile_GetDetails_Request::New() const {
  return new CPublishedFile_GetDetails_Request;
}

void CPublishedFile_GetDetails_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_GetDetails_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(includetags_, short_description_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  publishedfileids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_GetDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_GetDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 publishedfileids = 1;
      case 1: {
        if (tag == 9) {
         parse_publishedfileids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_publishedfileids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publishedfileids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_publishedfileids;
        if (input->ExpectTag(16)) goto parse_includetags;
        break;
      }

      // optional bool includetags = 2;
      case 2: {
        if (tag == 16) {
         parse_includetags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includetags_)));
          set_has_includetags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_includeadditionalpreviews;
        break;
      }

      // optional bool includeadditionalpreviews = 3;
      case 3: {
        if (tag == 24) {
         parse_includeadditionalpreviews:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeadditionalpreviews_)));
          set_has_includeadditionalpreviews();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_includechildren;
        break;
      }

      // optional bool includechildren = 4;
      case 4: {
        if (tag == 32) {
         parse_includechildren:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includechildren_)));
          set_has_includechildren();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_includekvtags;
        break;
      }

      // optional bool includekvtags = 5;
      case 5: {
        if (tag == 40) {
         parse_includekvtags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includekvtags_)));
          set_has_includekvtags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_includevotes;
        break;
      }

      // optional bool includevotes = 6;
      case 6: {
        if (tag == 48) {
         parse_includevotes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includevotes_)));
          set_has_includevotes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_short_description;
        break;
      }

      // optional bool short_description = 8;
      case 8: {
        if (tag == 64) {
         parse_short_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &short_description_)));
          set_has_short_description();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_GetDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_GetDetails_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_GetDetails_Request)
  // repeated fixed64 publishedfileids = 1;
  for (int i = 0; i < this->publishedfileids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->publishedfileids(i), output);
  }

  // optional bool includetags = 2;
  if (has_includetags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->includetags(), output);
  }

  // optional bool includeadditionalpreviews = 3;
  if (has_includeadditionalpreviews()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->includeadditionalpreviews(), output);
  }

  // optional bool includechildren = 4;
  if (has_includechildren()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->includechildren(), output);
  }

  // optional bool includekvtags = 5;
  if (has_includekvtags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->includekvtags(), output);
  }

  // optional bool includevotes = 6;
  if (has_includevotes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->includevotes(), output);
  }

  // optional bool short_description = 8;
  if (has_short_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->short_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_GetDetails_Request)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Request)
  // repeated fixed64 publishedfileids = 1;
  for (int i = 0; i < this->publishedfileids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->publishedfileids(i), target);
  }

  // optional bool includetags = 2;
  if (has_includetags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->includetags(), target);
  }

  // optional bool includeadditionalpreviews = 3;
  if (has_includeadditionalpreviews()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->includeadditionalpreviews(), target);
  }

  // optional bool includechildren = 4;
  if (has_includechildren()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->includechildren(), target);
  }

  // optional bool includekvtags = 5;
  if (has_includekvtags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->includekvtags(), target);
  }

  // optional bool includevotes = 6;
  if (has_includevotes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->includevotes(), target);
  }

  // optional bool short_description = 8;
  if (has_short_description()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->short_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Request)
  return target;
}

int CPublishedFile_GetDetails_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool includetags = 2;
    if (has_includetags()) {
      total_size += 1 + 1;
    }

    // optional bool includeadditionalpreviews = 3;
    if (has_includeadditionalpreviews()) {
      total_size += 1 + 1;
    }

    // optional bool includechildren = 4;
    if (has_includechildren()) {
      total_size += 1 + 1;
    }

    // optional bool includekvtags = 5;
    if (has_includekvtags()) {
      total_size += 1 + 1;
    }

    // optional bool includevotes = 6;
    if (has_includevotes()) {
      total_size += 1 + 1;
    }

    // optional bool short_description = 8;
    if (has_short_description()) {
      total_size += 1 + 1;
    }

  }
  // repeated fixed64 publishedfileids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->publishedfileids_size();
    total_size += 1 * this->publishedfileids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_GetDetails_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Request::MergeFrom(const CPublishedFile_GetDetails_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_includetags()) {
      set_includetags(from.includetags());
    }
    if (from.has_includeadditionalpreviews()) {
      set_includeadditionalpreviews(from.includeadditionalpreviews());
    }
    if (from.has_includechildren()) {
      set_includechildren(from.includechildren());
    }
    if (from.has_includekvtags()) {
      set_includekvtags(from.includekvtags());
    }
    if (from.has_includevotes()) {
      set_includevotes(from.includevotes());
    }
    if (from.has_short_description()) {
      set_short_description(from.short_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_GetDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Request::CopyFrom(const CPublishedFile_GetDetails_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_GetDetails_Request::Swap(CPublishedFile_GetDetails_Request* other) {
  if (other != this) {
    publishedfileids_.Swap(&other->publishedfileids_);
    std::swap(includetags_, other->includetags_);
    std::swap(includeadditionalpreviews_, other->includeadditionalpreviews_);
    std::swap(includechildren_, other->includechildren_);
    std::swap(includekvtags_, other->includekvtags_);
    std::swap(includevotes_, other->includevotes_);
    std::swap(short_description_, other->short_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_GetDetails_Request_descriptor_;
  metadata.reflection = CPublishedFile_GetDetails_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishedFileDetails_Tag::kTagFieldNumber;
const int PublishedFileDetails_Tag::kAdminonlyFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails_Tag::PublishedFileDetails_Tag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails.Tag)
}

void PublishedFileDetails_Tag::InitAsDefaultInstance() {
}

PublishedFileDetails_Tag::PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Tag)
}

void PublishedFileDetails_Tag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adminonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails_Tag::~PublishedFileDetails_Tag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Tag)
  SharedDtor();
}

void PublishedFileDetails_Tag::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void PublishedFileDetails_Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_Tag_descriptor_;
}

const PublishedFileDetails_Tag& PublishedFileDetails_Tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails_Tag* PublishedFileDetails_Tag::default_instance_ = NULL;

PublishedFileDetails_Tag* PublishedFileDetails_Tag::New() const {
  return new PublishedFileDetails_Tag;
}

void PublishedFileDetails_Tag::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    adminonly_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adminonly;
        break;
      }

      // optional bool adminonly = 2;
      case 2: {
        if (tag == 16) {
         parse_adminonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adminonly_)));
          set_has_adminonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails.Tag)
  return false;
#undef DO_
}

void PublishedFileDetails_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails.Tag)
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional bool adminonly = 2;
  if (has_adminonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->adminonly(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails.Tag)
}

::google::protobuf::uint8* PublishedFileDetails_Tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Tag)
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional bool adminonly = 2;
  if (has_adminonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->adminonly(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Tag)
  return target;
}

int PublishedFileDetails_Tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bool adminonly = 2;
    if (has_adminonly()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails_Tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails_Tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Tag::MergeFrom(const PublishedFileDetails_Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_adminonly()) {
      set_adminonly(from.adminonly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails_Tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Tag::CopyFrom(const PublishedFileDetails_Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Tag::IsInitialized() const {

  return true;
}

void PublishedFileDetails_Tag::Swap(PublishedFileDetails_Tag* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(adminonly_, other->adminonly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails_Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_Tag_descriptor_;
  metadata.reflection = PublishedFileDetails_Tag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PublishedFileDetails_Preview::kPreviewidFieldNumber;
const int PublishedFileDetails_Preview::kSortorderFieldNumber;
const int PublishedFileDetails_Preview::kUrlFieldNumber;
const int PublishedFileDetails_Preview::kSizeFieldNumber;
const int PublishedFileDetails_Preview::kFilenameFieldNumber;
const int PublishedFileDetails_Preview::kYoutubevideoidFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails_Preview::PublishedFileDetails_Preview()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails.Preview)
}

void PublishedFileDetails_Preview::InitAsDefaultInstance() {
}

PublishedFileDetails_Preview::PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Preview)
}

void PublishedFileDetails_Preview::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  previewid_ = GOOGLE_ULONGLONG(0);
  sortorder_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails_Preview::~PublishedFileDetails_Preview() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Preview)
  SharedDtor();
}

void PublishedFileDetails_Preview::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtubevideoid_;
  }
  if (this != default_instance_) {
  }
}

void PublishedFileDetails_Preview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Preview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_Preview_descriptor_;
}

const PublishedFileDetails_Preview& PublishedFileDetails_Preview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails_Preview* PublishedFileDetails_Preview::default_instance_ = NULL;

PublishedFileDetails_Preview* PublishedFileDetails_Preview::New() const {
  return new PublishedFileDetails_Preview;
}

void PublishedFileDetails_Preview::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishedFileDetails_Preview*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sortorder_, size_);
    previewid_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_youtubevideoid()) {
      if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        youtubevideoid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails_Preview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails.Preview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 previewid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previewid_)));
          set_has_previewid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sortorder;
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (tag == 16) {
         parse_sortorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
          set_has_sortorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filename;
        break;
      }

      // optional string filename = 5;
      case 5: {
        if (tag == 42) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_youtubevideoid;
        break;
      }

      // optional string youtubevideoid = 6;
      case 6: {
        if (tag == 50) {
         parse_youtubevideoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), this->youtubevideoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "youtubevideoid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails.Preview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails.Preview)
  return false;
#undef DO_
}

void PublishedFileDetails_Preview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails.Preview)
  // optional uint64 previewid = 1;
  if (has_previewid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->previewid(), output);
  }

  // optional uint32 sortorder = 2;
  if (has_sortorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // optional string youtubevideoid = 6;
  if (has_youtubevideoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->youtubevideoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails.Preview)
}

::google::protobuf::uint8* PublishedFileDetails_Preview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Preview)
  // optional uint64 previewid = 1;
  if (has_previewid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->previewid(), target);
  }

  // optional uint32 sortorder = 2;
  if (has_sortorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // optional string youtubevideoid = 6;
  if (has_youtubevideoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->youtubevideoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Preview)
  return target;
}

int PublishedFileDetails_Preview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 previewid = 1;
    if (has_previewid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previewid());
    }

    // optional uint32 sortorder = 2;
    if (has_sortorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional string filename = 5;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string youtubevideoid = 6;
    if (has_youtubevideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Preview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails_Preview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails_Preview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Preview::MergeFrom(const PublishedFileDetails_Preview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_previewid()) {
      set_previewid(from.previewid());
    }
    if (from.has_sortorder()) {
      set_sortorder(from.sortorder());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_youtubevideoid()) {
      set_youtubevideoid(from.youtubevideoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails_Preview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Preview::CopyFrom(const PublishedFileDetails_Preview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Preview::IsInitialized() const {

  return true;
}

void PublishedFileDetails_Preview::Swap(PublishedFileDetails_Preview* other) {
  if (other != this) {
    std::swap(previewid_, other->previewid_);
    std::swap(sortorder_, other->sortorder_);
    std::swap(url_, other->url_);
    std::swap(size_, other->size_);
    std::swap(filename_, other->filename_);
    std::swap(youtubevideoid_, other->youtubevideoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails_Preview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_Preview_descriptor_;
  metadata.reflection = PublishedFileDetails_Preview_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PublishedFileDetails_Child::kPublishedfileidFieldNumber;
const int PublishedFileDetails_Child::kSortorderFieldNumber;
const int PublishedFileDetails_Child::kFileTypeFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails_Child::PublishedFileDetails_Child()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails.Child)
}

void PublishedFileDetails_Child::InitAsDefaultInstance() {
}

PublishedFileDetails_Child::PublishedFileDetails_Child(const PublishedFileDetails_Child& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Child)
}

void PublishedFileDetails_Child::SharedCtor() {
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  sortorder_ = 0u;
  file_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails_Child::~PublishedFileDetails_Child() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Child)
  SharedDtor();
}

void PublishedFileDetails_Child::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PublishedFileDetails_Child::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Child::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_Child_descriptor_;
}

const PublishedFileDetails_Child& PublishedFileDetails_Child::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails_Child* PublishedFileDetails_Child::default_instance_ = NULL;

PublishedFileDetails_Child* PublishedFileDetails_Child::New() const {
  return new PublishedFileDetails_Child;
}

void PublishedFileDetails_Child::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishedFileDetails_Child*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(publishedfileid_, file_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails_Child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails.Child)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sortorder;
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (tag == 16) {
         parse_sortorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
          set_has_sortorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_type;
        break;
      }

      // optional uint32 file_type = 3;
      case 3: {
        if (tag == 24) {
         parse_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
          set_has_file_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails.Child)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails.Child)
  return false;
#undef DO_
}

void PublishedFileDetails_Child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails.Child)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 sortorder = 2;
  if (has_sortorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional uint32 file_type = 3;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails.Child)
}

::google::protobuf::uint8* PublishedFileDetails_Child::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Child)
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 sortorder = 2;
  if (has_sortorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional uint32 file_type = 3;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Child)
  return target;
}

int PublishedFileDetails_Child::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 sortorder = 2;
    if (has_sortorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional uint32 file_type = 3;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Child::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails_Child* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails_Child*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Child::MergeFrom(const PublishedFileDetails_Child& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_sortorder()) {
      set_sortorder(from.sortorder());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails_Child::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Child::CopyFrom(const PublishedFileDetails_Child& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Child::IsInitialized() const {

  return true;
}

void PublishedFileDetails_Child::Swap(PublishedFileDetails_Child* other) {
  if (other != this) {
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(sortorder_, other->sortorder_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails_Child::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_Child_descriptor_;
  metadata.reflection = PublishedFileDetails_Child_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PublishedFileDetails_KVTag::kKeyFieldNumber;
const int PublishedFileDetails_KVTag::kValueFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails.KVTag)
}

void PublishedFileDetails_KVTag::InitAsDefaultInstance() {
}

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.KVTag)
}

void PublishedFileDetails_KVTag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails_KVTag::~PublishedFileDetails_KVTag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.KVTag)
  SharedDtor();
}

void PublishedFileDetails_KVTag::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PublishedFileDetails_KVTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_KVTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_KVTag_descriptor_;
}

const PublishedFileDetails_KVTag& PublishedFileDetails_KVTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails_KVTag* PublishedFileDetails_KVTag::default_instance_ = NULL;

PublishedFileDetails_KVTag* PublishedFileDetails_KVTag::New() const {
  return new PublishedFileDetails_KVTag;
}

void PublishedFileDetails_KVTag::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails_KVTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails.KVTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails.KVTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails.KVTag)
  return false;
#undef DO_
}

void PublishedFileDetails_KVTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails.KVTag)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails.KVTag)
}

::google::protobuf::uint8* PublishedFileDetails_KVTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.KVTag)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.KVTag)
  return target;
}

int PublishedFileDetails_KVTag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_KVTag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails_KVTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails_KVTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails_KVTag::MergeFrom(const PublishedFileDetails_KVTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails_KVTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_KVTag::CopyFrom(const PublishedFileDetails_KVTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_KVTag::IsInitialized() const {

  return true;
}

void PublishedFileDetails_KVTag::Swap(PublishedFileDetails_KVTag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails_KVTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_KVTag_descriptor_;
  metadata.reflection = PublishedFileDetails_KVTag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PublishedFileDetails_VoteData::kScoreFieldNumber;
const int PublishedFileDetails_VoteData::kVotesUpFieldNumber;
const int PublishedFileDetails_VoteData::kVotesDownFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails.VoteData)
}

void PublishedFileDetails_VoteData::InitAsDefaultInstance() {
}

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.VoteData)
}

void PublishedFileDetails_VoteData::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  votes_up_ = 0u;
  votes_down_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails_VoteData::~PublishedFileDetails_VoteData() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.VoteData)
  SharedDtor();
}

void PublishedFileDetails_VoteData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PublishedFileDetails_VoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_VoteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_VoteData_descriptor_;
}

const PublishedFileDetails_VoteData& PublishedFileDetails_VoteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails_VoteData* PublishedFileDetails_VoteData::default_instance_ = NULL;

PublishedFileDetails_VoteData* PublishedFileDetails_VoteData::New() const {
  return new PublishedFileDetails_VoteData;
}

void PublishedFileDetails_VoteData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishedFileDetails_VoteData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, votes_down_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails_VoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails.VoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_votes_up;
        break;
      }

      // optional uint32 votes_up = 2;
      case 2: {
        if (tag == 16) {
         parse_votes_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_up_)));
          set_has_votes_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_votes_down;
        break;
      }

      // optional uint32 votes_down = 3;
      case 3: {
        if (tag == 24) {
         parse_votes_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_down_)));
          set_has_votes_down();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails.VoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails.VoteData)
  return false;
#undef DO_
}

void PublishedFileDetails_VoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails.VoteData)
  // optional float score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // optional uint32 votes_up = 2;
  if (has_votes_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->votes_up(), output);
  }

  // optional uint32 votes_down = 3;
  if (has_votes_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->votes_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails.VoteData)
}

::google::protobuf::uint8* PublishedFileDetails_VoteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.VoteData)
  // optional float score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // optional uint32 votes_up = 2;
  if (has_votes_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->votes_up(), target);
  }

  // optional uint32 votes_down = 3;
  if (has_votes_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->votes_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.VoteData)
  return target;
}

int PublishedFileDetails_VoteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float score = 1;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 votes_up = 2;
    if (has_votes_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_up());
    }

    // optional uint32 votes_down = 3;
    if (has_votes_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_VoteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails_VoteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails_VoteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails_VoteData::MergeFrom(const PublishedFileDetails_VoteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_votes_up()) {
      set_votes_up(from.votes_up());
    }
    if (from.has_votes_down()) {
      set_votes_down(from.votes_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails_VoteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_VoteData::CopyFrom(const PublishedFileDetails_VoteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_VoteData::IsInitialized() const {

  return true;
}

void PublishedFileDetails_VoteData::Swap(PublishedFileDetails_VoteData* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(votes_up_, other->votes_up_);
    std::swap(votes_down_, other->votes_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails_VoteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_VoteData_descriptor_;
  metadata.reflection = PublishedFileDetails_VoteData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PublishedFileDetails::kResultFieldNumber;
const int PublishedFileDetails::kPublishedfileidFieldNumber;
const int PublishedFileDetails::kCreatorFieldNumber;
const int PublishedFileDetails::kCreatorAppidFieldNumber;
const int PublishedFileDetails::kConsumerAppidFieldNumber;
const int PublishedFileDetails::kConsumerShortcutidFieldNumber;
const int PublishedFileDetails::kFilenameFieldNumber;
const int PublishedFileDetails::kFileSizeFieldNumber;
const int PublishedFileDetails::kPreviewFileSizeFieldNumber;
const int PublishedFileDetails::kFileUrlFieldNumber;
const int PublishedFileDetails::kPreviewUrlFieldNumber;
const int PublishedFileDetails::kYoutubevideoidFieldNumber;
const int PublishedFileDetails::kUrlFieldNumber;
const int PublishedFileDetails::kHcontentFileFieldNumber;
const int PublishedFileDetails::kHcontentPreviewFieldNumber;
const int PublishedFileDetails::kTitleFieldNumber;
const int PublishedFileDetails::kFileDescriptionFieldNumber;
const int PublishedFileDetails::kShortDescriptionFieldNumber;
const int PublishedFileDetails::kTimeCreatedFieldNumber;
const int PublishedFileDetails::kTimeUpdatedFieldNumber;
const int PublishedFileDetails::kVisibilityFieldNumber;
const int PublishedFileDetails::kFlagsFieldNumber;
const int PublishedFileDetails::kWorkshopFileFieldNumber;
const int PublishedFileDetails::kWorkshopAcceptedFieldNumber;
const int PublishedFileDetails::kShowSubscribeAllFieldNumber;
const int PublishedFileDetails::kNumCommentsDeveloperFieldNumber;
const int PublishedFileDetails::kNumCommentsPublicFieldNumber;
const int PublishedFileDetails::kBannedFieldNumber;
const int PublishedFileDetails::kBanReasonFieldNumber;
const int PublishedFileDetails::kBannerFieldNumber;
const int PublishedFileDetails::kCanBeDeletedFieldNumber;
const int PublishedFileDetails::kIncompatibleFieldNumber;
const int PublishedFileDetails::kAppNameFieldNumber;
const int PublishedFileDetails::kFileTypeFieldNumber;
const int PublishedFileDetails::kCanSubscribeFieldNumber;
const int PublishedFileDetails::kSubscriptionsFieldNumber;
const int PublishedFileDetails::kFavoritedFieldNumber;
const int PublishedFileDetails::kFollowersFieldNumber;
const int PublishedFileDetails::kLifetimeSubscriptionsFieldNumber;
const int PublishedFileDetails::kLifetimeFavoritedFieldNumber;
const int PublishedFileDetails::kLifetimeFollowersFieldNumber;
const int PublishedFileDetails::kViewsFieldNumber;
const int PublishedFileDetails::kImageWidthFieldNumber;
const int PublishedFileDetails::kImageHeightFieldNumber;
const int PublishedFileDetails::kImageUrlFieldNumber;
const int PublishedFileDetails::kSpoilerTagFieldNumber;
const int PublishedFileDetails::kShortcutidFieldNumber;
const int PublishedFileDetails::kShortcutnameFieldNumber;
const int PublishedFileDetails::kNumChildrenFieldNumber;
const int PublishedFileDetails::kNumReportsFieldNumber;
const int PublishedFileDetails::kPreviewsFieldNumber;
const int PublishedFileDetails::kTagsFieldNumber;
const int PublishedFileDetails::kChildrenFieldNumber;
const int PublishedFileDetails::kKvtagsFieldNumber;
const int PublishedFileDetails::kVoteDataFieldNumber;
const int PublishedFileDetails::kTimeSubscribedFieldNumber;
#endif  // !_MSC_VER

PublishedFileDetails::PublishedFileDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublishedFileDetails)
}

void PublishedFileDetails::InitAsDefaultInstance() {
  vote_data_ = const_cast< ::PublishedFileDetails_VoteData*>(&::PublishedFileDetails_VoteData::default_instance());
}

PublishedFileDetails::PublishedFileDetails(const PublishedFileDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails)
}

void PublishedFileDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0u;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  creator_ = GOOGLE_ULONGLONG(0);
  creator_appid_ = 0u;
  consumer_appid_ = 0u;
  consumer_shortcutid_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_ULONGLONG(0);
  preview_file_size_ = GOOGLE_ULONGLONG(0);
  file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hcontent_file_ = GOOGLE_ULONGLONG(0);
  hcontent_preview_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_created_ = 0u;
  time_updated_ = 0u;
  visibility_ = 0u;
  flags_ = 0u;
  workshop_file_ = false;
  workshop_accepted_ = false;
  show_subscribe_all_ = false;
  num_comments_developer_ = 0;
  num_comments_public_ = 0;
  banned_ = false;
  ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = GOOGLE_ULONGLONG(0);
  can_be_deleted_ = false;
  incompatible_ = false;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_type_ = 0u;
  can_subscribe_ = false;
  subscriptions_ = 0u;
  favorited_ = 0u;
  followers_ = 0u;
  lifetime_subscriptions_ = 0u;
  lifetime_favorited_ = 0u;
  lifetime_followers_ = 0u;
  views_ = 0u;
  image_width_ = 0u;
  image_height_ = 0u;
  image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoiler_tag_ = false;
  shortcutid_ = 0u;
  shortcutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_children_ = 0u;
  num_reports_ = 0u;
  vote_data_ = NULL;
  time_subscribed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishedFileDetails::~PublishedFileDetails() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails)
  SharedDtor();
}

void PublishedFileDetails::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_url_;
  }
  if (preview_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_url_;
  }
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtubevideoid_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (short_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_description_;
  }
  if (ban_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ban_reason_;
  }
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_;
  }
  if (shortcutname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shortcutname_;
  }
  if (this != default_instance_) {
    delete vote_data_;
  }
}

void PublishedFileDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishedFileDetails_descriptor_;
}

const PublishedFileDetails& PublishedFileDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

PublishedFileDetails* PublishedFileDetails::default_instance_ = NULL;

PublishedFileDetails* PublishedFileDetails::New() const {
  return new PublishedFileDetails;
}

void PublishedFileDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PublishedFileDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(publishedfileid_, consumer_shortcutid_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hcontent_file_, hcontent_preview_);
    preview_file_size_ = GOOGLE_ULONGLONG(0);
    if (has_file_url()) {
      if (file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_url_->clear();
      }
    }
    if (has_preview_url()) {
      if (preview_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preview_url_->clear();
      }
    }
    if (has_youtubevideoid()) {
      if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        youtubevideoid_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(time_created_, workshop_accepted_);
    if (has_file_description()) {
      if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_description_->clear();
      }
    }
    if (has_short_description()) {
      if (short_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_description_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(show_subscribe_all_, num_comments_developer_);
    ZR_(banner_, num_comments_public_);
    ZR_(can_be_deleted_, incompatible_);
    if (has_ban_reason()) {
      if (ban_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ban_reason_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(favorited_, lifetime_favorited_);
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    file_type_ = 0u;
    can_subscribe_ = false;
    subscriptions_ = 0u;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(lifetime_followers_, image_height_);
    if (has_image_url()) {
      if (image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_url_->clear();
      }
    }
    spoiler_tag_ = false;
    shortcutid_ = 0u;
    if (has_shortcutname()) {
      if (shortcutname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shortcutname_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 12779520) {
    ZR_(num_reports_, time_subscribed_);
    num_children_ = 0u;
    if (has_vote_data()) {
      if (vote_data_ != NULL) vote_data_->::PublishedFileDetails_VoteData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  previews_.Clear();
  tags_.Clear();
  children_.Clear();
  kvtags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishedFileDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublishedFileDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_publishedfileid;
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (tag == 16) {
         parse_publishedfileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_creator;
        break;
      }

      // optional fixed64 creator = 3;
      case 3: {
        if (tag == 25) {
         parse_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_)));
          set_has_creator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creator_appid;
        break;
      }

      // optional uint32 creator_appid = 4;
      case 4: {
        if (tag == 32) {
         parse_creator_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_appid_)));
          set_has_creator_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_consumer_appid;
        break;
      }

      // optional uint32 consumer_appid = 5;
      case 5: {
        if (tag == 40) {
         parse_consumer_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
          set_has_consumer_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_consumer_shortcutid;
        break;
      }

      // optional uint32 consumer_shortcutid = 6;
      case 6: {
        if (tag == 48) {
         parse_consumer_shortcutid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_shortcutid_)));
          set_has_consumer_shortcutid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (tag == 58) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 8;
      case 8: {
        if (tag == 64) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_preview_file_size;
        break;
      }

      // optional uint64 preview_file_size = 9;
      case 9: {
        if (tag == 72) {
         parse_preview_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preview_file_size_)));
          set_has_preview_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_file_url;
        break;
      }

      // optional string file_url = 10;
      case 10: {
        if (tag == 82) {
         parse_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_url().data(), this->file_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_preview_url;
        break;
      }

      // optional string preview_url = 11;
      case 11: {
        if (tag == 90) {
         parse_preview_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_url().data(), this->preview_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preview_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_youtubevideoid;
        break;
      }

      // optional string youtubevideoid = 12;
      case 12: {
        if (tag == 98) {
         parse_youtubevideoid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), this->youtubevideoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "youtubevideoid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_url;
        break;
      }

      // optional string url = 13;
      case 13: {
        if (tag == 106) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_hcontent_file;
        break;
      }

      // optional fixed64 hcontent_file = 14;
      case 14: {
        if (tag == 113) {
         parse_hcontent_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_file_)));
          set_has_hcontent_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_hcontent_preview;
        break;
      }

      // optional fixed64 hcontent_preview = 15;
      case 15: {
        if (tag == 121) {
         parse_hcontent_preview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_preview_)));
          set_has_hcontent_preview();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_title;
        break;
      }

      // optional string title = 16;
      case 16: {
        if (tag == 130) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_file_description;
        break;
      }

      // optional string file_description = 17;
      case 17: {
        if (tag == 138) {
         parse_file_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_short_description;
        break;
      }

      // optional string short_description = 18;
      case 18: {
        if (tag == 146) {
         parse_short_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_description().data(), this->short_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 19;
      case 19: {
        if (tag == 152) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_time_updated;
        break;
      }

      // optional uint32 time_updated = 20;
      case 20: {
        if (tag == 160) {
         parse_time_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
          set_has_time_updated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_visibility;
        break;
      }

      // optional uint32 visibility = 21;
      case 21: {
        if (tag == 168) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 22;
      case 22: {
        if (tag == 176) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_workshop_file;
        break;
      }

      // optional bool workshop_file = 23;
      case 23: {
        if (tag == 184) {
         parse_workshop_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_file_)));
          set_has_workshop_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_workshop_accepted;
        break;
      }

      // optional bool workshop_accepted = 24;
      case 24: {
        if (tag == 192) {
         parse_workshop_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_accepted_)));
          set_has_workshop_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_show_subscribe_all;
        break;
      }

      // optional bool show_subscribe_all = 25;
      case 25: {
        if (tag == 200) {
         parse_show_subscribe_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_subscribe_all_)));
          set_has_show_subscribe_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_num_comments_developer;
        break;
      }

      // optional int32 num_comments_developer = 26;
      case 26: {
        if (tag == 208) {
         parse_num_comments_developer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_developer_)));
          set_has_num_comments_developer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_num_comments_public;
        break;
      }

      // optional int32 num_comments_public = 27;
      case 27: {
        if (tag == 216) {
         parse_num_comments_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_public_)));
          set_has_num_comments_public();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_banned;
        break;
      }

      // optional bool banned = 28;
      case 28: {
        if (tag == 224) {
         parse_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
          set_has_banned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ban_reason;
        break;
      }

      // optional string ban_reason = 29;
      case 29: {
        if (tag == 234) {
         parse_ban_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ban_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ban_reason().data(), this->ban_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ban_reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_banner;
        break;
      }

      // optional fixed64 banner = 30;
      case 30: {
        if (tag == 241) {
         parse_banner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &banner_)));
          set_has_banner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_can_be_deleted;
        break;
      }

      // optional bool can_be_deleted = 31;
      case 31: {
        if (tag == 248) {
         parse_can_be_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_be_deleted_)));
          set_has_can_be_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_incompatible;
        break;
      }

      // optional bool incompatible = 32;
      case 32: {
        if (tag == 256) {
         parse_incompatible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incompatible_)));
          set_has_incompatible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_app_name;
        break;
      }

      // optional string app_name = 33;
      case 33: {
        if (tag == 266) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_file_type;
        break;
      }

      // optional uint32 file_type = 34;
      case 34: {
        if (tag == 272) {
         parse_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
          set_has_file_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_can_subscribe;
        break;
      }

      // optional bool can_subscribe = 35;
      case 35: {
        if (tag == 280) {
         parse_can_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_subscribe_)));
          set_has_can_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_subscriptions;
        break;
      }

      // optional uint32 subscriptions = 36;
      case 36: {
        if (tag == 288) {
         parse_subscriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscriptions_)));
          set_has_subscriptions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_favorited;
        break;
      }

      // optional uint32 favorited = 37;
      case 37: {
        if (tag == 296) {
         parse_favorited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorited_)));
          set_has_favorited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_followers;
        break;
      }

      // optional uint32 followers = 38;
      case 38: {
        if (tag == 304) {
         parse_followers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followers_)));
          set_has_followers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_lifetime_subscriptions;
        break;
      }

      // optional uint32 lifetime_subscriptions = 39;
      case 39: {
        if (tag == 312) {
         parse_lifetime_subscriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_subscriptions_)));
          set_has_lifetime_subscriptions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_lifetime_favorited;
        break;
      }

      // optional uint32 lifetime_favorited = 40;
      case 40: {
        if (tag == 320) {
         parse_lifetime_favorited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_favorited_)));
          set_has_lifetime_favorited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_lifetime_followers;
        break;
      }

      // optional uint32 lifetime_followers = 41;
      case 41: {
        if (tag == 328) {
         parse_lifetime_followers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_followers_)));
          set_has_lifetime_followers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_views;
        break;
      }

      // optional uint32 views = 42;
      case 42: {
        if (tag == 336) {
         parse_views:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
          set_has_views();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_image_width;
        break;
      }

      // optional uint32 image_width = 43;
      case 43: {
        if (tag == 344) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_image_height;
        break;
      }

      // optional uint32 image_height = 44;
      case 44: {
        if (tag == 352) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_image_url;
        break;
      }

      // optional string image_url = 45;
      case 45: {
        if (tag == 362) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_spoiler_tag;
        break;
      }

      // optional bool spoiler_tag = 46;
      case 46: {
        if (tag == 368) {
         parse_spoiler_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spoiler_tag_)));
          set_has_spoiler_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_shortcutid;
        break;
      }

      // optional uint32 shortcutid = 47;
      case 47: {
        if (tag == 376) {
         parse_shortcutid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
          set_has_shortcutid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_shortcutname;
        break;
      }

      // optional string shortcutname = 48;
      case 48: {
        if (tag == 386) {
         parse_shortcutname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcutname().data(), this->shortcutname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shortcutname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_num_children;
        break;
      }

      // optional uint32 num_children = 49;
      case 49: {
        if (tag == 392) {
         parse_num_children:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_children_)));
          set_has_num_children();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_num_reports;
        break;
      }

      // optional uint32 num_reports = 50;
      case 50: {
        if (tag == 400) {
         parse_num_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_reports_)));
          set_has_num_reports();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_previews;
        break;
      }

      // repeated .PublishedFileDetails.Preview previews = 51;
      case 51: {
        if (tag == 410) {
         parse_previews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_previews;
        if (input->ExpectTag(418)) goto parse_tags;
        break;
      }

      // repeated .PublishedFileDetails.Tag tags = 52;
      case 52: {
        if (tag == 418) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_tags;
        if (input->ExpectTag(426)) goto parse_children;
        break;
      }

      // repeated .PublishedFileDetails.Child children = 53;
      case 53: {
        if (tag == 426) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_children;
        if (input->ExpectTag(434)) goto parse_kvtags;
        break;
      }

      // repeated .PublishedFileDetails.KVTag kvtags = 54;
      case 54: {
        if (tag == 434) {
         parse_kvtags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvtags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_kvtags;
        if (input->ExpectTag(442)) goto parse_vote_data;
        break;
      }

      // optional .PublishedFileDetails.VoteData vote_data = 55;
      case 55: {
        if (tag == 442) {
         parse_vote_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_time_subscribed;
        break;
      }

      // optional uint32 time_subscribed = 56;
      case 56: {
        if (tag == 448) {
         parse_time_subscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_subscribed_)));
          set_has_time_subscribed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublishedFileDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublishedFileDetails)
  return false;
#undef DO_
}

void PublishedFileDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublishedFileDetails)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional fixed64 creator = 3;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->creator(), output);
  }

  // optional uint32 creator_appid = 4;
  if (has_creator_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_appid(), output);
  }

  // optional uint32 consumer_appid = 5;
  if (has_consumer_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consumer_appid(), output);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (has_consumer_shortcutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consumer_shortcutid(), output);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional uint64 file_size = 8;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }

  // optional uint64 preview_file_size = 9;
  if (has_preview_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->preview_file_size(), output);
  }

  // optional string file_url = 10;
  if (has_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->file_url(), output);
  }

  // optional string preview_url = 11;
  if (has_preview_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->preview_url(), output);
  }

  // optional string youtubevideoid = 12;
  if (has_youtubevideoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->youtubevideoid(), output);
  }

  // optional string url = 13;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->url(), output);
  }

  // optional fixed64 hcontent_file = 14;
  if (has_hcontent_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->hcontent_file(), output);
  }

  // optional fixed64 hcontent_preview = 15;
  if (has_hcontent_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->hcontent_preview(), output);
  }

  // optional string title = 16;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->title(), output);
  }

  // optional string file_description = 17;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->file_description(), output);
  }

  // optional string short_description = 18;
  if (has_short_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), this->short_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->short_description(), output);
  }

  // optional uint32 time_created = 19;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_created(), output);
  }

  // optional uint32 time_updated = 20;
  if (has_time_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->time_updated(), output);
  }

  // optional uint32 visibility = 21;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->visibility(), output);
  }

  // optional uint32 flags = 22;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->flags(), output);
  }

  // optional bool workshop_file = 23;
  if (has_workshop_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->workshop_file(), output);
  }

  // optional bool workshop_accepted = 24;
  if (has_workshop_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->workshop_accepted(), output);
  }

  // optional bool show_subscribe_all = 25;
  if (has_show_subscribe_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->show_subscribe_all(), output);
  }

  // optional int32 num_comments_developer = 26;
  if (has_num_comments_developer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->num_comments_developer(), output);
  }

  // optional int32 num_comments_public = 27;
  if (has_num_comments_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->num_comments_public(), output);
  }

  // optional bool banned = 28;
  if (has_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->banned(), output);
  }

  // optional string ban_reason = 29;
  if (has_ban_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ban_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->ban_reason(), output);
  }

  // optional fixed64 banner = 30;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(30, this->banner(), output);
  }

  // optional bool can_be_deleted = 31;
  if (has_can_be_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->can_be_deleted(), output);
  }

  // optional bool incompatible = 32;
  if (has_incompatible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->incompatible(), output);
  }

  // optional string app_name = 33;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->app_name(), output);
  }

  // optional uint32 file_type = 34;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->file_type(), output);
  }

  // optional bool can_subscribe = 35;
  if (has_can_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->can_subscribe(), output);
  }

  // optional uint32 subscriptions = 36;
  if (has_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->subscriptions(), output);
  }

  // optional uint32 favorited = 37;
  if (has_favorited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->favorited(), output);
  }

  // optional uint32 followers = 38;
  if (has_followers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->followers(), output);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (has_lifetime_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->lifetime_subscriptions(), output);
  }

  // optional uint32 lifetime_favorited = 40;
  if (has_lifetime_favorited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->lifetime_favorited(), output);
  }

  // optional uint32 lifetime_followers = 41;
  if (has_lifetime_followers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->lifetime_followers(), output);
  }

  // optional uint32 views = 42;
  if (has_views()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->views(), output);
  }

  // optional uint32 image_width = 43;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->image_width(), output);
  }

  // optional uint32 image_height = 44;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->image_height(), output);
  }

  // optional string image_url = 45;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->image_url(), output);
  }

  // optional bool spoiler_tag = 46;
  if (has_spoiler_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->spoiler_tag(), output);
  }

  // optional uint32 shortcutid = 47;
  if (has_shortcutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shortcutid(), output);
  }

  // optional string shortcutname = 48;
  if (has_shortcutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), this->shortcutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shortcutname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->shortcutname(), output);
  }

  // optional uint32 num_children = 49;
  if (has_num_children()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->num_children(), output);
  }

  // optional uint32 num_reports = 50;
  if (has_num_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->num_reports(), output);
  }

  // repeated .PublishedFileDetails.Preview previews = 51;
  for (int i = 0; i < this->previews_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->previews(i), output);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tags(i), output);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->children(i), output);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  for (int i = 0; i < this->kvtags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->kvtags(i), output);
  }

  // optional .PublishedFileDetails.VoteData vote_data = 55;
  if (has_vote_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->vote_data(), output);
  }

  // optional uint32 time_subscribed = 56;
  if (has_time_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->time_subscribed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PublishedFileDetails)
}

::google::protobuf::uint8* PublishedFileDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional fixed64 creator = 3;
  if (has_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->creator(), target);
  }

  // optional uint32 creator_appid = 4;
  if (has_creator_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creator_appid(), target);
  }

  // optional uint32 consumer_appid = 5;
  if (has_consumer_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consumer_appid(), target);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (has_consumer_shortcutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consumer_shortcutid(), target);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional uint64 file_size = 8;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }

  // optional uint64 preview_file_size = 9;
  if (has_preview_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->preview_file_size(), target);
  }

  // optional string file_url = 10;
  if (has_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->file_url(), target);
  }

  // optional string preview_url = 11;
  if (has_preview_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->preview_url(), target);
  }

  // optional string youtubevideoid = 12;
  if (has_youtubevideoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->youtubevideoid(), target);
  }

  // optional string url = 13;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->url(), target);
  }

  // optional fixed64 hcontent_file = 14;
  if (has_hcontent_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->hcontent_file(), target);
  }

  // optional fixed64 hcontent_preview = 15;
  if (has_hcontent_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->hcontent_preview(), target);
  }

  // optional string title = 16;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->title(), target);
  }

  // optional string file_description = 17;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->file_description(), target);
  }

  // optional string short_description = 18;
  if (has_short_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), this->short_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->short_description(), target);
  }

  // optional uint32 time_created = 19;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_created(), target);
  }

  // optional uint32 time_updated = 20;
  if (has_time_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->time_updated(), target);
  }

  // optional uint32 visibility = 21;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->visibility(), target);
  }

  // optional uint32 flags = 22;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->flags(), target);
  }

  // optional bool workshop_file = 23;
  if (has_workshop_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->workshop_file(), target);
  }

  // optional bool workshop_accepted = 24;
  if (has_workshop_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->workshop_accepted(), target);
  }

  // optional bool show_subscribe_all = 25;
  if (has_show_subscribe_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->show_subscribe_all(), target);
  }

  // optional int32 num_comments_developer = 26;
  if (has_num_comments_developer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->num_comments_developer(), target);
  }

  // optional int32 num_comments_public = 27;
  if (has_num_comments_public()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->num_comments_public(), target);
  }

  // optional bool banned = 28;
  if (has_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->banned(), target);
  }

  // optional string ban_reason = 29;
  if (has_ban_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ban_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->ban_reason(), target);
  }

  // optional fixed64 banner = 30;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(30, this->banner(), target);
  }

  // optional bool can_be_deleted = 31;
  if (has_can_be_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->can_be_deleted(), target);
  }

  // optional bool incompatible = 32;
  if (has_incompatible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->incompatible(), target);
  }

  // optional string app_name = 33;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->app_name(), target);
  }

  // optional uint32 file_type = 34;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->file_type(), target);
  }

  // optional bool can_subscribe = 35;
  if (has_can_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->can_subscribe(), target);
  }

  // optional uint32 subscriptions = 36;
  if (has_subscriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->subscriptions(), target);
  }

  // optional uint32 favorited = 37;
  if (has_favorited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->favorited(), target);
  }

  // optional uint32 followers = 38;
  if (has_followers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->followers(), target);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (has_lifetime_subscriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->lifetime_subscriptions(), target);
  }

  // optional uint32 lifetime_favorited = 40;
  if (has_lifetime_favorited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->lifetime_favorited(), target);
  }

  // optional uint32 lifetime_followers = 41;
  if (has_lifetime_followers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->lifetime_followers(), target);
  }

  // optional uint32 views = 42;
  if (has_views()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->views(), target);
  }

  // optional uint32 image_width = 43;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->image_width(), target);
  }

  // optional uint32 image_height = 44;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->image_height(), target);
  }

  // optional string image_url = 45;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->image_url(), target);
  }

  // optional bool spoiler_tag = 46;
  if (has_spoiler_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->spoiler_tag(), target);
  }

  // optional uint32 shortcutid = 47;
  if (has_shortcutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shortcutid(), target);
  }

  // optional string shortcutname = 48;
  if (has_shortcutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), this->shortcutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shortcutname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->shortcutname(), target);
  }

  // optional uint32 num_children = 49;
  if (has_num_children()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->num_children(), target);
  }

  // optional uint32 num_reports = 50;
  if (has_num_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->num_reports(), target);
  }

  // repeated .PublishedFileDetails.Preview previews = 51;
  for (int i = 0; i < this->previews_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->previews(i), target);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->tags(i), target);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->children(i), target);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  for (int i = 0; i < this->kvtags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->kvtags(i), target);
  }

  // optional .PublishedFileDetails.VoteData vote_data = 55;
  if (has_vote_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->vote_data(), target);
  }

  // optional uint32 time_subscribed = 56;
  if (has_time_subscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->time_subscribed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails)
  return target;
}

int PublishedFileDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional fixed64 creator = 3;
    if (has_creator()) {
      total_size += 1 + 8;
    }

    // optional uint32 creator_appid = 4;
    if (has_creator_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_appid());
    }

    // optional uint32 consumer_appid = 5;
    if (has_consumer_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional uint32 consumer_shortcutid = 6;
    if (has_consumer_shortcutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_shortcutid());
    }

    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint64 file_size = 8;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 preview_file_size = 9;
    if (has_preview_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->preview_file_size());
    }

    // optional string file_url = 10;
    if (has_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_url());
    }

    // optional string preview_url = 11;
    if (has_preview_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_url());
    }

    // optional string youtubevideoid = 12;
    if (has_youtubevideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

    // optional string url = 13;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional fixed64 hcontent_file = 14;
    if (has_hcontent_file()) {
      total_size += 1 + 8;
    }

    // optional fixed64 hcontent_preview = 15;
    if (has_hcontent_preview()) {
      total_size += 1 + 8;
    }

    // optional string title = 16;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string file_description = 17;
    if (has_file_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string short_description = 18;
    if (has_short_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_description());
    }

    // optional uint32 time_created = 19;
    if (has_time_created()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 time_updated = 20;
    if (has_time_updated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

    // optional uint32 visibility = 21;
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional uint32 flags = 22;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bool workshop_file = 23;
    if (has_workshop_file()) {
      total_size += 2 + 1;
    }

    // optional bool workshop_accepted = 24;
    if (has_workshop_accepted()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool show_subscribe_all = 25;
    if (has_show_subscribe_all()) {
      total_size += 2 + 1;
    }

    // optional int32 num_comments_developer = 26;
    if (has_num_comments_developer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_developer());
    }

    // optional int32 num_comments_public = 27;
    if (has_num_comments_public()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_public());
    }

    // optional bool banned = 28;
    if (has_banned()) {
      total_size += 2 + 1;
    }

    // optional string ban_reason = 29;
    if (has_ban_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ban_reason());
    }

    // optional fixed64 banner = 30;
    if (has_banner()) {
      total_size += 2 + 8;
    }

    // optional bool can_be_deleted = 31;
    if (has_can_be_deleted()) {
      total_size += 2 + 1;
    }

    // optional bool incompatible = 32;
    if (has_incompatible()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string app_name = 33;
    if (has_app_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional uint32 file_type = 34;
    if (has_file_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional bool can_subscribe = 35;
    if (has_can_subscribe()) {
      total_size += 2 + 1;
    }

    // optional uint32 subscriptions = 36;
    if (has_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscriptions());
    }

    // optional uint32 favorited = 37;
    if (has_favorited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorited());
    }

    // optional uint32 followers = 38;
    if (has_followers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followers());
    }

    // optional uint32 lifetime_subscriptions = 39;
    if (has_lifetime_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_subscriptions());
    }

    // optional uint32 lifetime_favorited = 40;
    if (has_lifetime_favorited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_favorited());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 lifetime_followers = 41;
    if (has_lifetime_followers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_followers());
    }

    // optional uint32 views = 42;
    if (has_views()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 image_width = 43;
    if (has_image_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

    // optional uint32 image_height = 44;
    if (has_image_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_height());
    }

    // optional string image_url = 45;
    if (has_image_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }

    // optional bool spoiler_tag = 46;
    if (has_spoiler_tag()) {
      total_size += 2 + 1;
    }

    // optional uint32 shortcutid = 47;
    if (has_shortcutid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional string shortcutname = 48;
    if (has_shortcutname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcutname());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 num_children = 49;
    if (has_num_children()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_children());
    }

    // optional uint32 num_reports = 50;
    if (has_num_reports()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_reports());
    }

    // optional .PublishedFileDetails.VoteData vote_data = 55;
    if (has_vote_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_data());
    }

    // optional uint32 time_subscribed = 56;
    if (has_time_subscribed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_subscribed());
    }

  }
  // repeated .PublishedFileDetails.Preview previews = 51;
  total_size += 2 * this->previews_size();
  for (int i = 0; i < this->previews_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->previews(i));
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  total_size += 2 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  // repeated .PublishedFileDetails.Child children = 53;
  total_size += 2 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  total_size += 2 * this->kvtags_size();
  for (int i = 0; i < this->kvtags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvtags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishedFileDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishedFileDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishedFileDetails::MergeFrom(const PublishedFileDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  previews_.MergeFrom(from.previews_);
  tags_.MergeFrom(from.tags_);
  children_.MergeFrom(from.children_);
  kvtags_.MergeFrom(from.kvtags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_creator_appid()) {
      set_creator_appid(from.creator_appid());
    }
    if (from.has_consumer_appid()) {
      set_consumer_appid(from.consumer_appid());
    }
    if (from.has_consumer_shortcutid()) {
      set_consumer_shortcutid(from.consumer_shortcutid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preview_file_size()) {
      set_preview_file_size(from.preview_file_size());
    }
    if (from.has_file_url()) {
      set_file_url(from.file_url());
    }
    if (from.has_preview_url()) {
      set_preview_url(from.preview_url());
    }
    if (from.has_youtubevideoid()) {
      set_youtubevideoid(from.youtubevideoid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_hcontent_file()) {
      set_hcontent_file(from.hcontent_file());
    }
    if (from.has_hcontent_preview()) {
      set_hcontent_preview(from.hcontent_preview());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_file_description()) {
      set_file_description(from.file_description());
    }
    if (from.has_short_description()) {
      set_short_description(from.short_description());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_updated()) {
      set_time_updated(from.time_updated());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_workshop_file()) {
      set_workshop_file(from.workshop_file());
    }
    if (from.has_workshop_accepted()) {
      set_workshop_accepted(from.workshop_accepted());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_show_subscribe_all()) {
      set_show_subscribe_all(from.show_subscribe_all());
    }
    if (from.has_num_comments_developer()) {
      set_num_comments_developer(from.num_comments_developer());
    }
    if (from.has_num_comments_public()) {
      set_num_comments_public(from.num_comments_public());
    }
    if (from.has_banned()) {
      set_banned(from.banned());
    }
    if (from.has_ban_reason()) {
      set_ban_reason(from.ban_reason());
    }
    if (from.has_banner()) {
      set_banner(from.banner());
    }
    if (from.has_can_be_deleted()) {
      set_can_be_deleted(from.can_be_deleted());
    }
    if (from.has_incompatible()) {
      set_incompatible(from.incompatible());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_can_subscribe()) {
      set_can_subscribe(from.can_subscribe());
    }
    if (from.has_subscriptions()) {
      set_subscriptions(from.subscriptions());
    }
    if (from.has_favorited()) {
      set_favorited(from.favorited());
    }
    if (from.has_followers()) {
      set_followers(from.followers());
    }
    if (from.has_lifetime_subscriptions()) {
      set_lifetime_subscriptions(from.lifetime_subscriptions());
    }
    if (from.has_lifetime_favorited()) {
      set_lifetime_favorited(from.lifetime_favorited());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_lifetime_followers()) {
      set_lifetime_followers(from.lifetime_followers());
    }
    if (from.has_views()) {
      set_views(from.views());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_url()) {
      set_image_url(from.image_url());
    }
    if (from.has_spoiler_tag()) {
      set_spoiler_tag(from.spoiler_tag());
    }
    if (from.has_shortcutid()) {
      set_shortcutid(from.shortcutid());
    }
    if (from.has_shortcutname()) {
      set_shortcutname(from.shortcutname());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_num_children()) {
      set_num_children(from.num_children());
    }
    if (from.has_num_reports()) {
      set_num_reports(from.num_reports());
    }
    if (from.has_vote_data()) {
      mutable_vote_data()->::PublishedFileDetails_VoteData::MergeFrom(from.vote_data());
    }
    if (from.has_time_subscribed()) {
      set_time_subscribed(from.time_subscribed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishedFileDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails::CopyFrom(const PublishedFileDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails::IsInitialized() const {

  return true;
}

void PublishedFileDetails::Swap(PublishedFileDetails* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(creator_, other->creator_);
    std::swap(creator_appid_, other->creator_appid_);
    std::swap(consumer_appid_, other->consumer_appid_);
    std::swap(consumer_shortcutid_, other->consumer_shortcutid_);
    std::swap(filename_, other->filename_);
    std::swap(file_size_, other->file_size_);
    std::swap(preview_file_size_, other->preview_file_size_);
    std::swap(file_url_, other->file_url_);
    std::swap(preview_url_, other->preview_url_);
    std::swap(youtubevideoid_, other->youtubevideoid_);
    std::swap(url_, other->url_);
    std::swap(hcontent_file_, other->hcontent_file_);
    std::swap(hcontent_preview_, other->hcontent_preview_);
    std::swap(title_, other->title_);
    std::swap(file_description_, other->file_description_);
    std::swap(short_description_, other->short_description_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_updated_, other->time_updated_);
    std::swap(visibility_, other->visibility_);
    std::swap(flags_, other->flags_);
    std::swap(workshop_file_, other->workshop_file_);
    std::swap(workshop_accepted_, other->workshop_accepted_);
    std::swap(show_subscribe_all_, other->show_subscribe_all_);
    std::swap(num_comments_developer_, other->num_comments_developer_);
    std::swap(num_comments_public_, other->num_comments_public_);
    std::swap(banned_, other->banned_);
    std::swap(ban_reason_, other->ban_reason_);
    std::swap(banner_, other->banner_);
    std::swap(can_be_deleted_, other->can_be_deleted_);
    std::swap(incompatible_, other->incompatible_);
    std::swap(app_name_, other->app_name_);
    std::swap(file_type_, other->file_type_);
    std::swap(can_subscribe_, other->can_subscribe_);
    std::swap(subscriptions_, other->subscriptions_);
    std::swap(favorited_, other->favorited_);
    std::swap(followers_, other->followers_);
    std::swap(lifetime_subscriptions_, other->lifetime_subscriptions_);
    std::swap(lifetime_favorited_, other->lifetime_favorited_);
    std::swap(lifetime_followers_, other->lifetime_followers_);
    std::swap(views_, other->views_);
    std::swap(image_width_, other->image_width_);
    std::swap(image_height_, other->image_height_);
    std::swap(image_url_, other->image_url_);
    std::swap(spoiler_tag_, other->spoiler_tag_);
    std::swap(shortcutid_, other->shortcutid_);
    std::swap(shortcutname_, other->shortcutname_);
    std::swap(num_children_, other->num_children_);
    std::swap(num_reports_, other->num_reports_);
    previews_.Swap(&other->previews_);
    tags_.Swap(&other->tags_);
    children_.Swap(&other->children_);
    kvtags_.Swap(&other->kvtags_);
    std::swap(vote_data_, other->vote_data_);
    std::swap(time_subscribed_, other->time_subscribed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishedFileDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishedFileDetails_descriptor_;
  metadata.reflection = PublishedFileDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_GetDetails_Response::kPublishedfiledetailsFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_GetDetails_Response)
}

void CPublishedFile_GetDetails_Response::InitAsDefaultInstance() {
}

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Response)
}

void CPublishedFile_GetDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_GetDetails_Response::~CPublishedFile_GetDetails_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Response)
  SharedDtor();
}

void CPublishedFile_GetDetails_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_GetDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_GetDetails_Response_descriptor_;
}

const CPublishedFile_GetDetails_Response& CPublishedFile_GetDetails_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_GetDetails_Response* CPublishedFile_GetDetails_Response::default_instance_ = NULL;

CPublishedFile_GetDetails_Response* CPublishedFile_GetDetails_Response::New() const {
  return new CPublishedFile_GetDetails_Response;
}

void CPublishedFile_GetDetails_Response::Clear() {
  publishedfiledetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_GetDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_GetDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PublishedFileDetails publishedfiledetails = 1;
      case 1: {
        if (tag == 10) {
         parse_publishedfiledetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_publishedfiledetails;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_GetDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_GetDetails_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_GetDetails_Response)
  // repeated .PublishedFileDetails publishedfiledetails = 1;
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->publishedfiledetails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_GetDetails_Response)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Response)
  // repeated .PublishedFileDetails publishedfiledetails = 1;
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->publishedfiledetails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Response)
  return target;
}

int CPublishedFile_GetDetails_Response::ByteSize() const {
  int total_size = 0;

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  total_size += 1 * this->publishedfiledetails_size();
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publishedfiledetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_GetDetails_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Response::MergeFrom(const CPublishedFile_GetDetails_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_GetDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const CPublishedFile_GetDetails_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_GetDetails_Response::Swap(CPublishedFile_GetDetails_Response* other) {
  if (other != this) {
    publishedfiledetails_.Swap(&other->publishedfiledetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_GetDetails_Response_descriptor_;
  metadata.reflection = CPublishedFile_GetDetails_Response_reflection_;
  return metadata;
}


// ===================================================================

::std::string* CPublishedFile_GetUserFiles_Request::_default_sortmethod_ = NULL;
#ifndef _MSC_VER
const int CPublishedFile_GetUserFiles_Request::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kNumperpageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kSortmethodFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kTotalonlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPrivacyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kIdsOnlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kRequiredtagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kExcludedtagsFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_GetUserFiles_Request)
}

void CPublishedFile_GetUserFiles_Request::InitAsDefaultInstance() {
}

CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Request)
}

void CPublishedFile_GetUserFiles_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  page_ = 1u;
  numperpage_ = 1u;
  sortmethod_ = const_cast< ::std::string*>(_default_sortmethod_);
  totalonly_ = false;
  privacy_ = 0u;
  ids_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_GetUserFiles_Request::~CPublishedFile_GetUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Request)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Request::SharedDtor() {
  if (sortmethod_ != _default_sortmethod_) {
    delete sortmethod_;
  }
  if (this != default_instance_) {
  }
}

void CPublishedFile_GetUserFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_GetUserFiles_Request_descriptor_;
}

const CPublishedFile_GetUserFiles_Request& CPublishedFile_GetUserFiles_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_GetUserFiles_Request* CPublishedFile_GetUserFiles_Request::default_instance_ = NULL;

CPublishedFile_GetUserFiles_Request* CPublishedFile_GetUserFiles_Request::New() const {
  return new CPublishedFile_GetUserFiles_Request;
}

void CPublishedFile_GetUserFiles_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_GetUserFiles_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(totalonly_, ids_only_);
    appid_ = 0u;
    page_ = 1u;
    numperpage_ = 1u;
    if (has_sortmethod()) {
      if (sortmethod_ != _default_sortmethod_) {
        sortmethod_->assign(*_default_sortmethod_);
      }
    }
    privacy_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  requiredtags_.Clear();
  excludedtags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_GetUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_GetUserFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // optional uint32 page = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numperpage;
        break;
      }

      // optional uint32 numperpage = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_numperpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numperpage_)));
          set_has_numperpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sortmethod;
        break;
      }

      // optional string sortmethod = 6 [default = "lastupdated"];
      case 6: {
        if (tag == 50) {
         parse_sortmethod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortmethod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortmethod().data(), this->sortmethod().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortmethod");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalonly;
        break;
      }

      // optional bool totalonly = 7;
      case 7: {
        if (tag == 56) {
         parse_totalonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &totalonly_)));
          set_has_totalonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_privacy;
        break;
      }

      // optional uint32 privacy = 9;
      case 9: {
        if (tag == 72) {
         parse_privacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_)));
          set_has_privacy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ids_only;
        break;
      }

      // optional bool ids_only = 10;
      case 10: {
        if (tag == 80) {
         parse_ids_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ids_only_)));
          set_has_ids_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_requiredtags;
        break;
      }

      // repeated string requiredtags = 11;
      case 11: {
        if (tag == 90) {
         parse_requiredtags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredtags(this->requiredtags_size() - 1).data(),
            this->requiredtags(this->requiredtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requiredtags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_requiredtags;
        if (input->ExpectTag(98)) goto parse_excludedtags;
        break;
      }

      // repeated string excludedtags = 12;
      case 12: {
        if (tag == 98) {
         parse_excludedtags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excludedtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excludedtags(this->excludedtags_size() - 1).data(),
            this->excludedtags(this->excludedtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excludedtags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_excludedtags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_GetUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_GetUserFiles_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_GetUserFiles_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 page = 3 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page(), output);
  }

  // optional uint32 numperpage = 4 [default = 1];
  if (has_numperpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numperpage(), output);
  }

  // optional string sortmethod = 6 [default = "lastupdated"];
  if (has_sortmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), this->sortmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortmethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sortmethod(), output);
  }

  // optional bool totalonly = 7;
  if (has_totalonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->totalonly(), output);
  }

  // optional uint32 privacy = 9;
  if (has_privacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->privacy(), output);
  }

  // optional bool ids_only = 10;
  if (has_ids_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ids_only(), output);
  }

  // repeated string requiredtags = 11;
  for (int i = 0; i < this->requiredtags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->requiredtags(i).data(), this->requiredtags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "requiredtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->requiredtags(i), output);
  }

  // repeated string excludedtags = 12;
  for (int i = 0; i < this->excludedtags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->excludedtags(i).data(), this->excludedtags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "excludedtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->excludedtags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_GetUserFiles_Request)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 page = 3 [default = 1];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->page(), target);
  }

  // optional uint32 numperpage = 4 [default = 1];
  if (has_numperpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numperpage(), target);
  }

  // optional string sortmethod = 6 [default = "lastupdated"];
  if (has_sortmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), this->sortmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortmethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sortmethod(), target);
  }

  // optional bool totalonly = 7;
  if (has_totalonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->totalonly(), target);
  }

  // optional uint32 privacy = 9;
  if (has_privacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->privacy(), target);
  }

  // optional bool ids_only = 10;
  if (has_ids_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ids_only(), target);
  }

  // repeated string requiredtags = 11;
  for (int i = 0; i < this->requiredtags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requiredtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->requiredtags(i), target);
  }

  // repeated string excludedtags = 12;
  for (int i = 0; i < this->excludedtags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), this->excludedtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excludedtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->excludedtags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Request)
  return target;
}

int CPublishedFile_GetUserFiles_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 page = 3 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 numperpage = 4 [default = 1];
    if (has_numperpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numperpage());
    }

    // optional string sortmethod = 6 [default = "lastupdated"];
    if (has_sortmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortmethod());
    }

    // optional bool totalonly = 7;
    if (has_totalonly()) {
      total_size += 1 + 1;
    }

    // optional uint32 privacy = 9;
    if (has_privacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privacy());
    }

    // optional bool ids_only = 10;
    if (has_ids_only()) {
      total_size += 1 + 1;
    }

  }
  // repeated string requiredtags = 11;
  total_size += 1 * this->requiredtags_size();
  for (int i = 0; i < this->requiredtags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredtags(i));
  }

  // repeated string excludedtags = 12;
  total_size += 1 * this->excludedtags_size();
  for (int i = 0; i < this->excludedtags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excludedtags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_GetUserFiles_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const CPublishedFile_GetUserFiles_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_numperpage()) {
      set_numperpage(from.numperpage());
    }
    if (from.has_sortmethod()) {
      set_sortmethod(from.sortmethod());
    }
    if (from.has_totalonly()) {
      set_totalonly(from.totalonly());
    }
    if (from.has_privacy()) {
      set_privacy(from.privacy());
    }
    if (from.has_ids_only()) {
      set_ids_only(from.ids_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const CPublishedFile_GetUserFiles_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_GetUserFiles_Request::Swap(CPublishedFile_GetUserFiles_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(page_, other->page_);
    std::swap(numperpage_, other->numperpage_);
    std::swap(sortmethod_, other->sortmethod_);
    std::swap(totalonly_, other->totalonly_);
    std::swap(privacy_, other->privacy_);
    std::swap(ids_only_, other->ids_only_);
    requiredtags_.Swap(&other->requiredtags_);
    excludedtags_.Swap(&other->excludedtags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_GetUserFiles_Request_descriptor_;
  metadata.reflection = CPublishedFile_GetUserFiles_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_GetUserFiles_Response_App::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kNameFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kShortcutidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kPrivateFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_GetUserFiles_Response.App)
}

void CPublishedFile_GetUserFiles_Response_App::InitAsDefaultInstance() {
}

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response.App)
}

void CPublishedFile_GetUserFiles_Response_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcutid_ = 0u;
  private__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_GetUserFiles_Response_App::~CPublishedFile_GetUserFiles_Response_App() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response.App)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response_App::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CPublishedFile_GetUserFiles_Response_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_GetUserFiles_Response_App_descriptor_;
}

const CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response_App::default_instance_ = NULL;

CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response_App::New() const {
  return new CPublishedFile_GetUserFiles_Response_App;
}

void CPublishedFile_GetUserFiles_Response_App::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_GetUserFiles_Response_App*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(appid_, private__);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_GetUserFiles_Response_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_GetUserFiles_Response.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shortcutid;
        break;
      }

      // optional uint32 shortcutid = 3;
      case 3: {
        if (tag == 24) {
         parse_shortcutid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
          set_has_shortcutid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_private;
        break;
      }

      // optional bool private = 4;
      case 4: {
        if (tag == 32) {
         parse_private:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
          set_has_private_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_GetUserFiles_Response.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_GetUserFiles_Response.App)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Response_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_GetUserFiles_Response.App)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 shortcutid = 3;
  if (has_shortcutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shortcutid(), output);
  }

  // optional bool private = 4;
  if (has_private_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_GetUserFiles_Response.App)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response.App)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 shortcutid = 3;
  if (has_shortcutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shortcutid(), target);
  }

  // optional bool private = 4;
  if (has_private_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response.App)
  return target;
}

int CPublishedFile_GetUserFiles_Response_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 shortcutid = 3;
    if (has_shortcutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional bool private = 4;
    if (has_private_()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_GetUserFiles_Response_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_shortcutid()) {
      set_shortcutid(from.shortcutid());
    }
    if (from.has_private_()) {
      set_private_(from.private_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response_App::IsInitialized() const {

  return true;
}

void CPublishedFile_GetUserFiles_Response_App::Swap(CPublishedFile_GetUserFiles_Response_App* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(name_, other->name_);
    std::swap(shortcutid_, other->shortcutid_);
    std::swap(private__, other->private__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_GetUserFiles_Response_App_descriptor_;
  metadata.reflection = CPublishedFile_GetUserFiles_Response_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CPublishedFile_GetUserFiles_Response::kTotalFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kStartindexFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kPublishedfiledetailsFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kAppsFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_GetUserFiles_Response)
}

void CPublishedFile_GetUserFiles_Response::InitAsDefaultInstance() {
}

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response)
}

void CPublishedFile_GetUserFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
  startindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_GetUserFiles_Response::~CPublishedFile_GetUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_GetUserFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_GetUserFiles_Response_descriptor_;
}

const CPublishedFile_GetUserFiles_Response& CPublishedFile_GetUserFiles_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_GetUserFiles_Response* CPublishedFile_GetUserFiles_Response::default_instance_ = NULL;

CPublishedFile_GetUserFiles_Response* CPublishedFile_GetUserFiles_Response::New() const {
  return new CPublishedFile_GetUserFiles_Response;
}

void CPublishedFile_GetUserFiles_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_GetUserFiles_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_, startindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  publishedfiledetails_.Clear();
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_GetUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_GetUserFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startindex;
        break;
      }

      // optional uint32 startindex = 2;
      case 2: {
        if (tag == 16) {
         parse_startindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startindex_)));
          set_has_startindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publishedfiledetails;
        break;
      }

      // repeated .PublishedFileDetails publishedfiledetails = 3;
      case 3: {
        if (tag == 26) {
         parse_publishedfiledetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publishedfiledetails;
        if (input->ExpectTag(34)) goto parse_apps;
        break;
      }

      // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4: {
        if (tag == 34) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_apps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_GetUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_GetUserFiles_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_GetUserFiles_Response)
  // optional uint32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // optional uint32 startindex = 2;
  if (has_startindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startindex(), output);
  }

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->publishedfiledetails(i), output);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_GetUserFiles_Response)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response)
  // optional uint32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // optional uint32 startindex = 2;
  if (has_startindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startindex(), target);
  }

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->publishedfiledetails(i), target);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (int i = 0; i < this->apps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->apps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response)
  return target;
}

int CPublishedFile_GetUserFiles_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 startindex = 2;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startindex());
    }

  }
  // repeated .PublishedFileDetails publishedfiledetails = 3;
  total_size += 1 * this->publishedfiledetails_size();
  for (int i = 0; i < this->publishedfiledetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publishedfiledetails(i));
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_GetUserFiles_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const CPublishedFile_GetUserFiles_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_startindex()) {
      set_startindex(from.startindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const CPublishedFile_GetUserFiles_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_GetUserFiles_Response::Swap(CPublishedFile_GetUserFiles_Response* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(startindex_, other->startindex_);
    publishedfiledetails_.Swap(&other->publishedfiledetails_);
    apps_.Swap(&other->apps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_GetUserFiles_Response_descriptor_;
  metadata.reflection = CPublishedFile_GetUserFiles_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_Update_Request::kAppidFieldNumber;
const int CPublishedFile_Update_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Update_Request::kTitleFieldNumber;
const int CPublishedFile_Update_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Update_Request::kVisibilityFieldNumber;
const int CPublishedFile_Update_Request::kTagsFieldNumber;
const int CPublishedFile_Update_Request::kFilenameFieldNumber;
const int CPublishedFile_Update_Request::kPreviewFilenameFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_Update_Request::CPublishedFile_Update_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Update_Request)
}

void CPublishedFile_Update_Request::InitAsDefaultInstance() {
}

CPublishedFile_Update_Request::CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Request)
}

void CPublishedFile_Update_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visibility_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Update_Request::~CPublishedFile_Update_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Update_Request)
  SharedDtor();
}

void CPublishedFile_Update_Request::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (preview_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_filename_;
  }
  if (this != default_instance_) {
  }
}

void CPublishedFile_Update_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Update_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Update_Request_descriptor_;
}

const CPublishedFile_Update_Request& CPublishedFile_Update_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Update_Request* CPublishedFile_Update_Request::default_instance_ = NULL;

CPublishedFile_Update_Request* CPublishedFile_Update_Request::New() const {
  return new CPublishedFile_Update_Request;
}

void CPublishedFile_Update_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_Update_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(appid_, visibility_);
    publishedfileid_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_file_description()) {
      if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_description_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_preview_filename()) {
      if (preview_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preview_filename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Update_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Update_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_publishedfileid;
        break;
      }

      // optional fixed64 publishedfileid = 2;
      case 2: {
        if (tag == 17) {
         parse_publishedfileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publishedfileid_)));
          set_has_publishedfileid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_description;
        break;
      }

      // optional string file_description = 4;
      case 4: {
        if (tag == 34) {
         parse_file_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_visibility;
        break;
      }

      // optional uint32 visibility = 5;
      case 5: {
        if (tag == 40) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // repeated string tags = 6;
      case 6: {
        if (tag == 50) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (tag == 58) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preview_filename;
        break;
      }

      // optional string preview_filename = 8;
      case 8: {
        if (tag == 66) {
         parse_preview_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_filename().data(), this->preview_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preview_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Update_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Update_Request)
  return false;
#undef DO_
}

void CPublishedFile_Update_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Update_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 publishedfileid = 2;
  if (has_publishedfileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->publishedfileid(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string file_description = 4;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_description(), output);
  }

  // optional uint32 visibility = 5;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->visibility(), output);
  }

  // repeated string tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional string preview_filename = 8;
  if (has_preview_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), this->preview_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->preview_filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Update_Request)
}

::google::protobuf::uint8* CPublishedFile_Update_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Update_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 publishedfileid = 2;
  if (has_publishedfileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->publishedfileid(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string file_description = 4;
  if (has_file_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_description(), target);
  }

  // optional uint32 visibility = 5;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->visibility(), target);
  }

  // repeated string tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional string preview_filename = 8;
  if (has_preview_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), this->preview_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preview_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->preview_filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Update_Request)
  return target;
}

int CPublishedFile_Update_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 + 8;
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 4;
    if (has_file_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional uint32 visibility = 5;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string preview_filename = 8;
    if (has_preview_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_filename());
    }

  }
  // repeated string tags = 6;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Update_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Update_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Update_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Request::MergeFrom(const CPublishedFile_Update_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_publishedfileid()) {
      set_publishedfileid(from.publishedfileid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_file_description()) {
      set_file_description(from.file_description());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_preview_filename()) {
      set_preview_filename(from.preview_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Update_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Request::CopyFrom(const CPublishedFile_Update_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_Update_Request::Swap(CPublishedFile_Update_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(publishedfileid_, other->publishedfileid_);
    std::swap(title_, other->title_);
    std::swap(file_description_, other->file_description_);
    std::swap(visibility_, other->visibility_);
    tags_.Swap(&other->tags_);
    std::swap(filename_, other->filename_);
    std::swap(preview_filename_, other->preview_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Update_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Update_Request_descriptor_;
  metadata.reflection = CPublishedFile_Update_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CPublishedFile_Update_Response::CPublishedFile_Update_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_Update_Response)
}

void CPublishedFile_Update_Response::InitAsDefaultInstance() {
}

CPublishedFile_Update_Response::CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Response)
}

void CPublishedFile_Update_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_Update_Response::~CPublishedFile_Update_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Update_Response)
  SharedDtor();
}

void CPublishedFile_Update_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_Update_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Update_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_Update_Response_descriptor_;
}

const CPublishedFile_Update_Response& CPublishedFile_Update_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_Update_Response* CPublishedFile_Update_Response::default_instance_ = NULL;

CPublishedFile_Update_Response* CPublishedFile_Update_Response::New() const {
  return new CPublishedFile_Update_Response;
}

void CPublishedFile_Update_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_Update_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_Update_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_Update_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_Update_Response)
  return false;
#undef DO_
}

void CPublishedFile_Update_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_Update_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_Update_Response)
}

::google::protobuf::uint8* CPublishedFile_Update_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Update_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Update_Response)
  return target;
}

int CPublishedFile_Update_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Update_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_Update_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_Update_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Response::MergeFrom(const CPublishedFile_Update_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_Update_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Response::CopyFrom(const CPublishedFile_Update_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_Update_Response::Swap(CPublishedFile_Update_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_Update_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_Update_Response_descriptor_;
  metadata.reflection = CPublishedFile_Update_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPublishedFile_RefreshVotingQueue_Request::kAppidFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchingFileTypeFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchAllTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kExcludedTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kDesiredQueueSizeFieldNumber;
#endif  // !_MSC_VER

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_RefreshVotingQueue_Request)
}

void CPublishedFile_RefreshVotingQueue_Request::InitAsDefaultInstance() {
}

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Request)
}

void CPublishedFile_RefreshVotingQueue_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appid_ = 0u;
  matching_file_type_ = 0u;
  match_all_tags_ = true;
  desired_queue_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_RefreshVotingQueue_Request::~CPublishedFile_RefreshVotingQueue_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RefreshVotingQueue_Request)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_RefreshVotingQueue_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_RefreshVotingQueue_Request_descriptor_;
}

const CPublishedFile_RefreshVotingQueue_Request& CPublishedFile_RefreshVotingQueue_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_RefreshVotingQueue_Request* CPublishedFile_RefreshVotingQueue_Request::default_instance_ = NULL;

CPublishedFile_RefreshVotingQueue_Request* CPublishedFile_RefreshVotingQueue_Request::New() const {
  return new CPublishedFile_RefreshVotingQueue_Request;
}

void CPublishedFile_RefreshVotingQueue_Request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPublishedFile_RefreshVotingQueue_Request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 43) {
    ZR_(appid_, matching_file_type_);
    match_all_tags_ = true;
    desired_queue_size_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  excluded_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_RefreshVotingQueue_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_RefreshVotingQueue_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_matching_file_type;
        break;
      }

      // optional uint32 matching_file_type = 2;
      case 2: {
        if (tag == 16) {
         parse_matching_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_file_type_)));
          set_has_matching_file_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // repeated string tags = 3;
      case 3: {
        if (tag == 26) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        if (input->ExpectTag(32)) goto parse_match_all_tags;
        break;
      }

      // optional bool match_all_tags = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_match_all_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_all_tags_)));
          set_has_match_all_tags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_excluded_tags;
        break;
      }

      // repeated string excluded_tags = 5;
      case 5: {
        if (tag == 42) {
         parse_excluded_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_tags(this->excluded_tags_size() - 1).data(),
            this->excluded_tags(this->excluded_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "excluded_tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_excluded_tags;
        if (input->ExpectTag(48)) goto parse_desired_queue_size;
        break;
      }

      // optional uint32 desired_queue_size = 6;
      case 6: {
        if (tag == 48) {
         parse_desired_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desired_queue_size_)));
          set_has_desired_queue_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_RefreshVotingQueue_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_RefreshVotingQueue_Request)
  return false;
#undef DO_
}

void CPublishedFile_RefreshVotingQueue_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_RefreshVotingQueue_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 matching_file_type = 2;
  if (has_matching_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matching_file_type(), output);
  }

  // repeated string tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // optional bool match_all_tags = 4 [default = true];
  if (has_match_all_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->match_all_tags(), output);
  }

  // repeated string excluded_tags = 5;
  for (int i = 0; i < this->excluded_tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->excluded_tags(i).data(), this->excluded_tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "excluded_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->excluded_tags(i), output);
  }

  // optional uint32 desired_queue_size = 6;
  if (has_desired_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->desired_queue_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_RefreshVotingQueue_Request)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RefreshVotingQueue_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 matching_file_type = 2;
  if (has_matching_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matching_file_type(), target);
  }

  // repeated string tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // optional bool match_all_tags = 4 [default = true];
  if (has_match_all_tags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->match_all_tags(), target);
  }

  // repeated string excluded_tags = 5;
  for (int i = 0; i < this->excluded_tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_tags(i).data(), this->excluded_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "excluded_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->excluded_tags(i), target);
  }

  // optional uint32 desired_queue_size = 6;
  if (has_desired_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->desired_queue_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RefreshVotingQueue_Request)
  return target;
}

int CPublishedFile_RefreshVotingQueue_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 matching_file_type = 2;
    if (has_matching_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_file_type());
    }

    // optional bool match_all_tags = 4 [default = true];
    if (has_match_all_tags()) {
      total_size += 1 + 1;
    }

    // optional uint32 desired_queue_size = 6;
    if (has_desired_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desired_queue_size());
    }

  }
  // repeated string tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string excluded_tags = 5;
  total_size += 1 * this->excluded_tags_size();
  for (int i = 0; i < this->excluded_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_RefreshVotingQueue_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_matching_file_type()) {
      set_matching_file_type(from.matching_file_type());
    }
    if (from.has_match_all_tags()) {
      set_match_all_tags(from.match_all_tags());
    }
    if (from.has_desired_queue_size()) {
      set_desired_queue_size(from.desired_queue_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Request::IsInitialized() const {

  return true;
}

void CPublishedFile_RefreshVotingQueue_Request::Swap(CPublishedFile_RefreshVotingQueue_Request* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(matching_file_type_, other->matching_file_type_);
    tags_.Swap(&other->tags_);
    std::swap(match_all_tags_, other->match_all_tags_);
    excluded_tags_.Swap(&other->excluded_tags_);
    std::swap(desired_queue_size_, other->desired_queue_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_RefreshVotingQueue_Request_descriptor_;
  metadata.reflection = CPublishedFile_RefreshVotingQueue_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPublishedFile_RefreshVotingQueue_Response)
}

void CPublishedFile_RefreshVotingQueue_Response::InitAsDefaultInstance() {
}

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Response)
}

void CPublishedFile_RefreshVotingQueue_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPublishedFile_RefreshVotingQueue_Response::~CPublishedFile_RefreshVotingQueue_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RefreshVotingQueue_Response)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPublishedFile_RefreshVotingQueue_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPublishedFile_RefreshVotingQueue_Response_descriptor_;
}

const CPublishedFile_RefreshVotingQueue_Response& CPublishedFile_RefreshVotingQueue_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  return *default_instance_;
}

CPublishedFile_RefreshVotingQueue_Response* CPublishedFile_RefreshVotingQueue_Response::default_instance_ = NULL;

CPublishedFile_RefreshVotingQueue_Response* CPublishedFile_RefreshVotingQueue_Response::New() const {
  return new CPublishedFile_RefreshVotingQueue_Response;
}

void CPublishedFile_RefreshVotingQueue_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPublishedFile_RefreshVotingQueue_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPublishedFile_RefreshVotingQueue_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CPublishedFile_RefreshVotingQueue_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPublishedFile_RefreshVotingQueue_Response)
  return false;
#undef DO_
}

void CPublishedFile_RefreshVotingQueue_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPublishedFile_RefreshVotingQueue_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPublishedFile_RefreshVotingQueue_Response)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RefreshVotingQueue_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RefreshVotingQueue_Response)
  return target;
}

int CPublishedFile_RefreshVotingQueue_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPublishedFile_RefreshVotingQueue_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Response::IsInitialized() const {

  return true;
}

void CPublishedFile_RefreshVotingQueue_Response::Swap(CPublishedFile_RefreshVotingQueue_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPublishedFile_RefreshVotingQueue_Response_descriptor_;
  metadata.reflection = CPublishedFile_RefreshVotingQueue_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
