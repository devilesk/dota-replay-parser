// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamworkssdk.proto

#ifndef PROTOBUF_steammessages_5fpublishedfile_2esteamworkssdk_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fpublishedfile_2esteamworkssdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

class CPublishedFile_Subscribe_Request;
class CPublishedFile_Subscribe_Response;
class CPublishedFile_Unsubscribe_Request;
class CPublishedFile_Unsubscribe_Response;
class CPublishedFile_Publish_Request;
class CPublishedFile_Publish_Response;
class CPublishedFile_GetDetails_Request;
class PublishedFileDetails;
class PublishedFileDetails_Tag;
class PublishedFileDetails_Preview;
class PublishedFileDetails_Child;
class PublishedFileDetails_KVTag;
class PublishedFileDetails_VoteData;
class CPublishedFile_GetDetails_Response;
class CPublishedFile_GetUserFiles_Request;
class CPublishedFile_GetUserFiles_Response;
class CPublishedFile_GetUserFiles_Response_App;
class CPublishedFile_Update_Request;
class CPublishedFile_Update_Response;
class CPublishedFile_RefreshVotingQueue_Request;
class CPublishedFile_RefreshVotingQueue_Response;

// ===================================================================

class CPublishedFile_Subscribe_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_Subscribe_Request();
  virtual ~CPublishedFile_Subscribe_Request();

  CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from);

  inline CPublishedFile_Subscribe_Request& operator=(const CPublishedFile_Subscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Subscribe_Request& default_instance();

  void Swap(CPublishedFile_Subscribe_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Subscribe_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Subscribe_Request& from);
  void MergeFrom(const CPublishedFile_Subscribe_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 publishedfileid = 1;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 1;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional uint32 list_type = 2;
  inline bool has_list_type() const;
  inline void clear_list_type();
  static const int kListTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 list_type() const;
  inline void set_list_type(::google::protobuf::uint32 value);

  // optional int32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional bool notify_client = 4;
  inline bool has_notify_client() const;
  inline void clear_notify_client();
  static const int kNotifyClientFieldNumber = 4;
  inline bool notify_client() const;
  inline void set_notify_client(bool value);

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Request)
 private:
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_list_type();
  inline void clear_has_list_type();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_notify_client();
  inline void clear_has_notify_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  ::google::protobuf::uint32 list_type_;
  ::google::protobuf::int32 appid_;
  bool notify_client_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Subscribe_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Subscribe_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_Subscribe_Response();
  virtual ~CPublishedFile_Subscribe_Response();

  CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from);

  inline CPublishedFile_Subscribe_Response& operator=(const CPublishedFile_Subscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Subscribe_Response& default_instance();

  void Swap(CPublishedFile_Subscribe_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Subscribe_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Subscribe_Response& from);
  void MergeFrom(const CPublishedFile_Subscribe_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Subscribe_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_Unsubscribe_Request();
  virtual ~CPublishedFile_Unsubscribe_Request();

  CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from);

  inline CPublishedFile_Unsubscribe_Request& operator=(const CPublishedFile_Unsubscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Unsubscribe_Request& default_instance();

  void Swap(CPublishedFile_Unsubscribe_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Unsubscribe_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Unsubscribe_Request& from);
  void MergeFrom(const CPublishedFile_Unsubscribe_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 publishedfileid = 1;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 1;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional uint32 list_type = 2;
  inline bool has_list_type() const;
  inline void clear_list_type();
  static const int kListTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 list_type() const;
  inline void set_list_type(::google::protobuf::uint32 value);

  // optional int32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // optional bool notify_client = 4;
  inline bool has_notify_client() const;
  inline void clear_notify_client();
  static const int kNotifyClientFieldNumber = 4;
  inline bool notify_client() const;
  inline void set_notify_client(bool value);

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Request)
 private:
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_list_type();
  inline void clear_has_list_type();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_notify_client();
  inline void clear_has_notify_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  ::google::protobuf::uint32 list_type_;
  ::google::protobuf::int32 appid_;
  bool notify_client_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Unsubscribe_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_Unsubscribe_Response();
  virtual ~CPublishedFile_Unsubscribe_Response();

  CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from);

  inline CPublishedFile_Unsubscribe_Response& operator=(const CPublishedFile_Unsubscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Unsubscribe_Response& default_instance();

  void Swap(CPublishedFile_Unsubscribe_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Unsubscribe_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Unsubscribe_Response& from);
  void MergeFrom(const CPublishedFile_Unsubscribe_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Unsubscribe_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_Publish_Request();
  virtual ~CPublishedFile_Publish_Request();

  CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from);

  inline CPublishedFile_Publish_Request& operator=(const CPublishedFile_Publish_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Publish_Request& default_instance();

  void Swap(CPublishedFile_Publish_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Publish_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Publish_Request& from);
  void MergeFrom(const CPublishedFile_Publish_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional uint32 consumer_appid = 2;
  inline bool has_consumer_appid() const;
  inline void clear_consumer_appid();
  static const int kConsumerAppidFieldNumber = 2;
  inline ::google::protobuf::uint32 consumer_appid() const;
  inline void set_consumer_appid(::google::protobuf::uint32 value);

  // optional string cloudfilename = 3;
  inline bool has_cloudfilename() const;
  inline void clear_cloudfilename();
  static const int kCloudfilenameFieldNumber = 3;
  inline const ::std::string& cloudfilename() const;
  inline void set_cloudfilename(const ::std::string& value);
  inline void set_cloudfilename(const char* value);
  inline void set_cloudfilename(const char* value, size_t size);
  inline ::std::string* mutable_cloudfilename();
  inline ::std::string* release_cloudfilename();
  inline void set_allocated_cloudfilename(::std::string* cloudfilename);

  // optional string preview_cloudfilename = 4;
  inline bool has_preview_cloudfilename() const;
  inline void clear_preview_cloudfilename();
  static const int kPreviewCloudfilenameFieldNumber = 4;
  inline const ::std::string& preview_cloudfilename() const;
  inline void set_preview_cloudfilename(const ::std::string& value);
  inline void set_preview_cloudfilename(const char* value);
  inline void set_preview_cloudfilename(const char* value, size_t size);
  inline ::std::string* mutable_preview_cloudfilename();
  inline ::std::string* release_preview_cloudfilename();
  inline void set_allocated_preview_cloudfilename(::std::string* preview_cloudfilename);

  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string file_description = 6;
  inline bool has_file_description() const;
  inline void clear_file_description();
  static const int kFileDescriptionFieldNumber = 6;
  inline const ::std::string& file_description() const;
  inline void set_file_description(const ::std::string& value);
  inline void set_file_description(const char* value);
  inline void set_file_description(const char* value, size_t size);
  inline ::std::string* mutable_file_description();
  inline ::std::string* release_file_description();
  inline void set_allocated_file_description(::std::string* file_description);

  // optional uint32 file_type = 7;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 file_type() const;
  inline void set_file_type(::google::protobuf::uint32 value);

  // optional string consumer_shortcut_name = 8;
  inline bool has_consumer_shortcut_name() const;
  inline void clear_consumer_shortcut_name();
  static const int kConsumerShortcutNameFieldNumber = 8;
  inline const ::std::string& consumer_shortcut_name() const;
  inline void set_consumer_shortcut_name(const ::std::string& value);
  inline void set_consumer_shortcut_name(const char* value);
  inline void set_consumer_shortcut_name(const char* value, size_t size);
  inline ::std::string* mutable_consumer_shortcut_name();
  inline ::std::string* release_consumer_shortcut_name();
  inline void set_allocated_consumer_shortcut_name(::std::string* consumer_shortcut_name);

  // optional string youtube_username = 9;
  inline bool has_youtube_username() const;
  inline void clear_youtube_username();
  static const int kYoutubeUsernameFieldNumber = 9;
  inline const ::std::string& youtube_username() const;
  inline void set_youtube_username(const ::std::string& value);
  inline void set_youtube_username(const char* value);
  inline void set_youtube_username(const char* value, size_t size);
  inline ::std::string* mutable_youtube_username();
  inline ::std::string* release_youtube_username();
  inline void set_allocated_youtube_username(::std::string* youtube_username);

  // optional string youtube_videoid = 10;
  inline bool has_youtube_videoid() const;
  inline void clear_youtube_videoid();
  static const int kYoutubeVideoidFieldNumber = 10;
  inline const ::std::string& youtube_videoid() const;
  inline void set_youtube_videoid(const ::std::string& value);
  inline void set_youtube_videoid(const char* value);
  inline void set_youtube_videoid(const char* value, size_t size);
  inline ::std::string* mutable_youtube_videoid();
  inline ::std::string* release_youtube_videoid();
  inline void set_allocated_youtube_videoid(::std::string* youtube_videoid);

  // optional uint32 visibility = 11;
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 11;
  inline ::google::protobuf::uint32 visibility() const;
  inline void set_visibility(::google::protobuf::uint32 value);

  // optional string redirect_uri = 12;
  inline bool has_redirect_uri() const;
  inline void clear_redirect_uri();
  static const int kRedirectUriFieldNumber = 12;
  inline const ::std::string& redirect_uri() const;
  inline void set_redirect_uri(const ::std::string& value);
  inline void set_redirect_uri(const char* value);
  inline void set_redirect_uri(const char* value, size_t size);
  inline ::std::string* mutable_redirect_uri();
  inline ::std::string* release_redirect_uri();
  inline void set_allocated_redirect_uri(::std::string* redirect_uri);

  // repeated string tags = 13;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 13;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string collection_type = 14;
  inline bool has_collection_type() const;
  inline void clear_collection_type();
  static const int kCollectionTypeFieldNumber = 14;
  inline const ::std::string& collection_type() const;
  inline void set_collection_type(const ::std::string& value);
  inline void set_collection_type(const char* value);
  inline void set_collection_type(const char* value, size_t size);
  inline ::std::string* mutable_collection_type();
  inline ::std::string* release_collection_type();
  inline void set_allocated_collection_type(::std::string* collection_type);

  // optional string game_type = 15;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 15;
  inline const ::std::string& game_type() const;
  inline void set_game_type(const ::std::string& value);
  inline void set_game_type(const char* value);
  inline void set_game_type(const char* value, size_t size);
  inline ::std::string* mutable_game_type();
  inline ::std::string* release_game_type();
  inline void set_allocated_game_type(::std::string* game_type);

  // optional string url = 16;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 16;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Request)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_consumer_appid();
  inline void clear_has_consumer_appid();
  inline void set_has_cloudfilename();
  inline void clear_has_cloudfilename();
  inline void set_has_preview_cloudfilename();
  inline void clear_has_preview_cloudfilename();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_file_description();
  inline void clear_has_file_description();
  inline void set_has_file_type();
  inline void clear_has_file_type();
  inline void set_has_consumer_shortcut_name();
  inline void clear_has_consumer_shortcut_name();
  inline void set_has_youtube_username();
  inline void clear_has_youtube_username();
  inline void set_has_youtube_videoid();
  inline void clear_has_youtube_videoid();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_redirect_uri();
  inline void clear_has_redirect_uri();
  inline void set_has_collection_type();
  inline void clear_has_collection_type();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 consumer_appid_;
  ::std::string* cloudfilename_;
  ::std::string* preview_cloudfilename_;
  ::std::string* title_;
  ::std::string* file_description_;
  ::std::string* consumer_shortcut_name_;
  ::std::string* youtube_username_;
  ::google::protobuf::uint32 file_type_;
  ::google::protobuf::uint32 visibility_;
  ::std::string* youtube_videoid_;
  ::std::string* redirect_uri_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::std::string* collection_type_;
  ::std::string* game_type_;
  ::std::string* url_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Publish_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_Publish_Response();
  virtual ~CPublishedFile_Publish_Response();

  CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from);

  inline CPublishedFile_Publish_Response& operator=(const CPublishedFile_Publish_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Publish_Response& default_instance();

  void Swap(CPublishedFile_Publish_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Publish_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Publish_Response& from);
  void MergeFrom(const CPublishedFile_Publish_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 publishedfileid = 1;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 1;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional string redirect_uri = 2;
  inline bool has_redirect_uri() const;
  inline void clear_redirect_uri();
  static const int kRedirectUriFieldNumber = 2;
  inline const ::std::string& redirect_uri() const;
  inline void set_redirect_uri(const ::std::string& value);
  inline void set_redirect_uri(const char* value);
  inline void set_redirect_uri(const char* value, size_t size);
  inline ::std::string* mutable_redirect_uri();
  inline ::std::string* release_redirect_uri();
  inline void set_allocated_redirect_uri(::std::string* redirect_uri);

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Response)
 private:
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_redirect_uri();
  inline void clear_has_redirect_uri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  ::std::string* redirect_uri_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Publish_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_GetDetails_Request();
  virtual ~CPublishedFile_GetDetails_Request();

  CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from);

  inline CPublishedFile_GetDetails_Request& operator=(const CPublishedFile_GetDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_GetDetails_Request& default_instance();

  void Swap(CPublishedFile_GetDetails_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_GetDetails_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_GetDetails_Request& from);
  void MergeFrom(const CPublishedFile_GetDetails_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated fixed64 publishedfileids = 1;
  inline int publishedfileids_size() const;
  inline void clear_publishedfileids();
  static const int kPublishedfileidsFieldNumber = 1;
  inline ::google::protobuf::uint64 publishedfileids(int index) const;
  inline void set_publishedfileids(int index, ::google::protobuf::uint64 value);
  inline void add_publishedfileids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      publishedfileids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_publishedfileids();

  // optional bool includetags = 2;
  inline bool has_includetags() const;
  inline void clear_includetags();
  static const int kIncludetagsFieldNumber = 2;
  inline bool includetags() const;
  inline void set_includetags(bool value);

  // optional bool includeadditionalpreviews = 3;
  inline bool has_includeadditionalpreviews() const;
  inline void clear_includeadditionalpreviews();
  static const int kIncludeadditionalpreviewsFieldNumber = 3;
  inline bool includeadditionalpreviews() const;
  inline void set_includeadditionalpreviews(bool value);

  // optional bool includechildren = 4;
  inline bool has_includechildren() const;
  inline void clear_includechildren();
  static const int kIncludechildrenFieldNumber = 4;
  inline bool includechildren() const;
  inline void set_includechildren(bool value);

  // optional bool includekvtags = 5;
  inline bool has_includekvtags() const;
  inline void clear_includekvtags();
  static const int kIncludekvtagsFieldNumber = 5;
  inline bool includekvtags() const;
  inline void set_includekvtags(bool value);

  // optional bool includevotes = 6;
  inline bool has_includevotes() const;
  inline void clear_includevotes();
  static const int kIncludevotesFieldNumber = 6;
  inline bool includevotes() const;
  inline void set_includevotes(bool value);

  // optional bool short_description = 8;
  inline bool has_short_description() const;
  inline void clear_short_description();
  static const int kShortDescriptionFieldNumber = 8;
  inline bool short_description() const;
  inline void set_short_description(bool value);

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Request)
 private:
  inline void set_has_includetags();
  inline void clear_has_includetags();
  inline void set_has_includeadditionalpreviews();
  inline void clear_has_includeadditionalpreviews();
  inline void set_has_includechildren();
  inline void clear_has_includechildren();
  inline void set_has_includekvtags();
  inline void clear_has_includekvtags();
  inline void set_has_includevotes();
  inline void clear_has_includevotes();
  inline void set_has_short_description();
  inline void clear_has_short_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > publishedfileids_;
  bool includetags_;
  bool includeadditionalpreviews_;
  bool includechildren_;
  bool includekvtags_;
  bool includevotes_;
  bool short_description_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_GetDetails_Request* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Tag : public ::google::protobuf::Message {
 public:
  PublishedFileDetails_Tag();
  virtual ~PublishedFileDetails_Tag();

  PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from);

  inline PublishedFileDetails_Tag& operator=(const PublishedFileDetails_Tag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails_Tag& default_instance();

  void Swap(PublishedFileDetails_Tag* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails_Tag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails_Tag& from);
  void MergeFrom(const PublishedFileDetails_Tag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // optional bool adminonly = 2;
  inline bool has_adminonly() const;
  inline void clear_adminonly();
  static const int kAdminonlyFieldNumber = 2;
  inline bool adminonly() const;
  inline void set_adminonly(bool value);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Tag)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_adminonly();
  inline void clear_has_adminonly();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tag_;
  bool adminonly_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails_Tag* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Preview : public ::google::protobuf::Message {
 public:
  PublishedFileDetails_Preview();
  virtual ~PublishedFileDetails_Preview();

  PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from);

  inline PublishedFileDetails_Preview& operator=(const PublishedFileDetails_Preview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails_Preview& default_instance();

  void Swap(PublishedFileDetails_Preview* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails_Preview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails_Preview& from);
  void MergeFrom(const PublishedFileDetails_Preview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 previewid = 1;
  inline bool has_previewid() const;
  inline void clear_previewid();
  static const int kPreviewidFieldNumber = 1;
  inline ::google::protobuf::uint64 previewid() const;
  inline void set_previewid(::google::protobuf::uint64 value);

  // optional uint32 sortorder = 2;
  inline bool has_sortorder() const;
  inline void clear_sortorder();
  static const int kSortorderFieldNumber = 2;
  inline ::google::protobuf::uint32 sortorder() const;
  inline void set_sortorder(::google::protobuf::uint32 value);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional uint32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional string filename = 5;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 5;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string youtubevideoid = 6;
  inline bool has_youtubevideoid() const;
  inline void clear_youtubevideoid();
  static const int kYoutubevideoidFieldNumber = 6;
  inline const ::std::string& youtubevideoid() const;
  inline void set_youtubevideoid(const ::std::string& value);
  inline void set_youtubevideoid(const char* value);
  inline void set_youtubevideoid(const char* value, size_t size);
  inline ::std::string* mutable_youtubevideoid();
  inline ::std::string* release_youtubevideoid();
  inline void set_allocated_youtubevideoid(::std::string* youtubevideoid);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Preview)
 private:
  inline void set_has_previewid();
  inline void clear_has_previewid();
  inline void set_has_sortorder();
  inline void clear_has_sortorder();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_youtubevideoid();
  inline void clear_has_youtubevideoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 previewid_;
  ::std::string* url_;
  ::google::protobuf::uint32 sortorder_;
  ::google::protobuf::uint32 size_;
  ::std::string* filename_;
  ::std::string* youtubevideoid_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails_Preview* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Child : public ::google::protobuf::Message {
 public:
  PublishedFileDetails_Child();
  virtual ~PublishedFileDetails_Child();

  PublishedFileDetails_Child(const PublishedFileDetails_Child& from);

  inline PublishedFileDetails_Child& operator=(const PublishedFileDetails_Child& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails_Child& default_instance();

  void Swap(PublishedFileDetails_Child* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails_Child* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails_Child& from);
  void MergeFrom(const PublishedFileDetails_Child& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 publishedfileid = 1;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 1;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional uint32 sortorder = 2;
  inline bool has_sortorder() const;
  inline void clear_sortorder();
  static const int kSortorderFieldNumber = 2;
  inline ::google::protobuf::uint32 sortorder() const;
  inline void set_sortorder(::google::protobuf::uint32 value);

  // optional uint32 file_type = 3;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 file_type() const;
  inline void set_file_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Child)
 private:
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_sortorder();
  inline void clear_has_sortorder();
  inline void set_has_file_type();
  inline void clear_has_file_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  ::google::protobuf::uint32 sortorder_;
  ::google::protobuf::uint32 file_type_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails_Child* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails_KVTag : public ::google::protobuf::Message {
 public:
  PublishedFileDetails_KVTag();
  virtual ~PublishedFileDetails_KVTag();

  PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from);

  inline PublishedFileDetails_KVTag& operator=(const PublishedFileDetails_KVTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails_KVTag& default_instance();

  void Swap(PublishedFileDetails_KVTag* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails_KVTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails_KVTag& from);
  void MergeFrom(const PublishedFileDetails_KVTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.KVTag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails_KVTag* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails_VoteData : public ::google::protobuf::Message {
 public:
  PublishedFileDetails_VoteData();
  virtual ~PublishedFileDetails_VoteData();

  PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from);

  inline PublishedFileDetails_VoteData& operator=(const PublishedFileDetails_VoteData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails_VoteData& default_instance();

  void Swap(PublishedFileDetails_VoteData* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails_VoteData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails_VoteData& from);
  void MergeFrom(const PublishedFileDetails_VoteData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline float score() const;
  inline void set_score(float value);

  // optional uint32 votes_up = 2;
  inline bool has_votes_up() const;
  inline void clear_votes_up();
  static const int kVotesUpFieldNumber = 2;
  inline ::google::protobuf::uint32 votes_up() const;
  inline void set_votes_up(::google::protobuf::uint32 value);

  // optional uint32 votes_down = 3;
  inline bool has_votes_down() const;
  inline void clear_votes_down();
  static const int kVotesDownFieldNumber = 3;
  inline ::google::protobuf::uint32 votes_down() const;
  inline void set_votes_down(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.VoteData)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_votes_up();
  inline void clear_has_votes_up();
  inline void set_has_votes_down();
  inline void clear_has_votes_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float score_;
  ::google::protobuf::uint32 votes_up_;
  ::google::protobuf::uint32 votes_down_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails_VoteData* default_instance_;
};
// -------------------------------------------------------------------

class PublishedFileDetails : public ::google::protobuf::Message {
 public:
  PublishedFileDetails();
  virtual ~PublishedFileDetails();

  PublishedFileDetails(const PublishedFileDetails& from);

  inline PublishedFileDetails& operator=(const PublishedFileDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishedFileDetails& default_instance();

  void Swap(PublishedFileDetails* other);

  // implements Message ----------------------------------------------

  PublishedFileDetails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishedFileDetails& from);
  void MergeFrom(const PublishedFileDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PublishedFileDetails_Tag Tag;
  typedef PublishedFileDetails_Preview Preview;
  typedef PublishedFileDetails_Child Child;
  typedef PublishedFileDetails_KVTag KVTag;
  typedef PublishedFileDetails_VoteData VoteData;

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint64 publishedfileid = 2;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 2;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional fixed64 creator = 3;
  inline bool has_creator() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 3;
  inline ::google::protobuf::uint64 creator() const;
  inline void set_creator(::google::protobuf::uint64 value);

  // optional uint32 creator_appid = 4;
  inline bool has_creator_appid() const;
  inline void clear_creator_appid();
  static const int kCreatorAppidFieldNumber = 4;
  inline ::google::protobuf::uint32 creator_appid() const;
  inline void set_creator_appid(::google::protobuf::uint32 value);

  // optional uint32 consumer_appid = 5;
  inline bool has_consumer_appid() const;
  inline void clear_consumer_appid();
  static const int kConsumerAppidFieldNumber = 5;
  inline ::google::protobuf::uint32 consumer_appid() const;
  inline void set_consumer_appid(::google::protobuf::uint32 value);

  // optional uint32 consumer_shortcutid = 6;
  inline bool has_consumer_shortcutid() const;
  inline void clear_consumer_shortcutid();
  static const int kConsumerShortcutidFieldNumber = 6;
  inline ::google::protobuf::uint32 consumer_shortcutid() const;
  inline void set_consumer_shortcutid(::google::protobuf::uint32 value);

  // optional string filename = 7;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 7;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional uint64 file_size = 8;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // optional uint64 preview_file_size = 9;
  inline bool has_preview_file_size() const;
  inline void clear_preview_file_size();
  static const int kPreviewFileSizeFieldNumber = 9;
  inline ::google::protobuf::uint64 preview_file_size() const;
  inline void set_preview_file_size(::google::protobuf::uint64 value);

  // optional string file_url = 10;
  inline bool has_file_url() const;
  inline void clear_file_url();
  static const int kFileUrlFieldNumber = 10;
  inline const ::std::string& file_url() const;
  inline void set_file_url(const ::std::string& value);
  inline void set_file_url(const char* value);
  inline void set_file_url(const char* value, size_t size);
  inline ::std::string* mutable_file_url();
  inline ::std::string* release_file_url();
  inline void set_allocated_file_url(::std::string* file_url);

  // optional string preview_url = 11;
  inline bool has_preview_url() const;
  inline void clear_preview_url();
  static const int kPreviewUrlFieldNumber = 11;
  inline const ::std::string& preview_url() const;
  inline void set_preview_url(const ::std::string& value);
  inline void set_preview_url(const char* value);
  inline void set_preview_url(const char* value, size_t size);
  inline ::std::string* mutable_preview_url();
  inline ::std::string* release_preview_url();
  inline void set_allocated_preview_url(::std::string* preview_url);

  // optional string youtubevideoid = 12;
  inline bool has_youtubevideoid() const;
  inline void clear_youtubevideoid();
  static const int kYoutubevideoidFieldNumber = 12;
  inline const ::std::string& youtubevideoid() const;
  inline void set_youtubevideoid(const ::std::string& value);
  inline void set_youtubevideoid(const char* value);
  inline void set_youtubevideoid(const char* value, size_t size);
  inline ::std::string* mutable_youtubevideoid();
  inline ::std::string* release_youtubevideoid();
  inline void set_allocated_youtubevideoid(::std::string* youtubevideoid);

  // optional string url = 13;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 13;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional fixed64 hcontent_file = 14;
  inline bool has_hcontent_file() const;
  inline void clear_hcontent_file();
  static const int kHcontentFileFieldNumber = 14;
  inline ::google::protobuf::uint64 hcontent_file() const;
  inline void set_hcontent_file(::google::protobuf::uint64 value);

  // optional fixed64 hcontent_preview = 15;
  inline bool has_hcontent_preview() const;
  inline void clear_hcontent_preview();
  static const int kHcontentPreviewFieldNumber = 15;
  inline ::google::protobuf::uint64 hcontent_preview() const;
  inline void set_hcontent_preview(::google::protobuf::uint64 value);

  // optional string title = 16;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 16;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string file_description = 17;
  inline bool has_file_description() const;
  inline void clear_file_description();
  static const int kFileDescriptionFieldNumber = 17;
  inline const ::std::string& file_description() const;
  inline void set_file_description(const ::std::string& value);
  inline void set_file_description(const char* value);
  inline void set_file_description(const char* value, size_t size);
  inline ::std::string* mutable_file_description();
  inline ::std::string* release_file_description();
  inline void set_allocated_file_description(::std::string* file_description);

  // optional string short_description = 18;
  inline bool has_short_description() const;
  inline void clear_short_description();
  static const int kShortDescriptionFieldNumber = 18;
  inline const ::std::string& short_description() const;
  inline void set_short_description(const ::std::string& value);
  inline void set_short_description(const char* value);
  inline void set_short_description(const char* value, size_t size);
  inline ::std::string* mutable_short_description();
  inline ::std::string* release_short_description();
  inline void set_allocated_short_description(::std::string* short_description);

  // optional uint32 time_created = 19;
  inline bool has_time_created() const;
  inline void clear_time_created();
  static const int kTimeCreatedFieldNumber = 19;
  inline ::google::protobuf::uint32 time_created() const;
  inline void set_time_created(::google::protobuf::uint32 value);

  // optional uint32 time_updated = 20;
  inline bool has_time_updated() const;
  inline void clear_time_updated();
  static const int kTimeUpdatedFieldNumber = 20;
  inline ::google::protobuf::uint32 time_updated() const;
  inline void set_time_updated(::google::protobuf::uint32 value);

  // optional uint32 visibility = 21;
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 21;
  inline ::google::protobuf::uint32 visibility() const;
  inline void set_visibility(::google::protobuf::uint32 value);

  // optional uint32 flags = 22;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 22;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional bool workshop_file = 23;
  inline bool has_workshop_file() const;
  inline void clear_workshop_file();
  static const int kWorkshopFileFieldNumber = 23;
  inline bool workshop_file() const;
  inline void set_workshop_file(bool value);

  // optional bool workshop_accepted = 24;
  inline bool has_workshop_accepted() const;
  inline void clear_workshop_accepted();
  static const int kWorkshopAcceptedFieldNumber = 24;
  inline bool workshop_accepted() const;
  inline void set_workshop_accepted(bool value);

  // optional bool show_subscribe_all = 25;
  inline bool has_show_subscribe_all() const;
  inline void clear_show_subscribe_all();
  static const int kShowSubscribeAllFieldNumber = 25;
  inline bool show_subscribe_all() const;
  inline void set_show_subscribe_all(bool value);

  // optional int32 num_comments_developer = 26;
  inline bool has_num_comments_developer() const;
  inline void clear_num_comments_developer();
  static const int kNumCommentsDeveloperFieldNumber = 26;
  inline ::google::protobuf::int32 num_comments_developer() const;
  inline void set_num_comments_developer(::google::protobuf::int32 value);

  // optional int32 num_comments_public = 27;
  inline bool has_num_comments_public() const;
  inline void clear_num_comments_public();
  static const int kNumCommentsPublicFieldNumber = 27;
  inline ::google::protobuf::int32 num_comments_public() const;
  inline void set_num_comments_public(::google::protobuf::int32 value);

  // optional bool banned = 28;
  inline bool has_banned() const;
  inline void clear_banned();
  static const int kBannedFieldNumber = 28;
  inline bool banned() const;
  inline void set_banned(bool value);

  // optional string ban_reason = 29;
  inline bool has_ban_reason() const;
  inline void clear_ban_reason();
  static const int kBanReasonFieldNumber = 29;
  inline const ::std::string& ban_reason() const;
  inline void set_ban_reason(const ::std::string& value);
  inline void set_ban_reason(const char* value);
  inline void set_ban_reason(const char* value, size_t size);
  inline ::std::string* mutable_ban_reason();
  inline ::std::string* release_ban_reason();
  inline void set_allocated_ban_reason(::std::string* ban_reason);

  // optional fixed64 banner = 30;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 30;
  inline ::google::protobuf::uint64 banner() const;
  inline void set_banner(::google::protobuf::uint64 value);

  // optional bool can_be_deleted = 31;
  inline bool has_can_be_deleted() const;
  inline void clear_can_be_deleted();
  static const int kCanBeDeletedFieldNumber = 31;
  inline bool can_be_deleted() const;
  inline void set_can_be_deleted(bool value);

  // optional bool incompatible = 32;
  inline bool has_incompatible() const;
  inline void clear_incompatible();
  static const int kIncompatibleFieldNumber = 32;
  inline bool incompatible() const;
  inline void set_incompatible(bool value);

  // optional string app_name = 33;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 33;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // optional uint32 file_type = 34;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 34;
  inline ::google::protobuf::uint32 file_type() const;
  inline void set_file_type(::google::protobuf::uint32 value);

  // optional bool can_subscribe = 35;
  inline bool has_can_subscribe() const;
  inline void clear_can_subscribe();
  static const int kCanSubscribeFieldNumber = 35;
  inline bool can_subscribe() const;
  inline void set_can_subscribe(bool value);

  // optional uint32 subscriptions = 36;
  inline bool has_subscriptions() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 36;
  inline ::google::protobuf::uint32 subscriptions() const;
  inline void set_subscriptions(::google::protobuf::uint32 value);

  // optional uint32 favorited = 37;
  inline bool has_favorited() const;
  inline void clear_favorited();
  static const int kFavoritedFieldNumber = 37;
  inline ::google::protobuf::uint32 favorited() const;
  inline void set_favorited(::google::protobuf::uint32 value);

  // optional uint32 followers = 38;
  inline bool has_followers() const;
  inline void clear_followers();
  static const int kFollowersFieldNumber = 38;
  inline ::google::protobuf::uint32 followers() const;
  inline void set_followers(::google::protobuf::uint32 value);

  // optional uint32 lifetime_subscriptions = 39;
  inline bool has_lifetime_subscriptions() const;
  inline void clear_lifetime_subscriptions();
  static const int kLifetimeSubscriptionsFieldNumber = 39;
  inline ::google::protobuf::uint32 lifetime_subscriptions() const;
  inline void set_lifetime_subscriptions(::google::protobuf::uint32 value);

  // optional uint32 lifetime_favorited = 40;
  inline bool has_lifetime_favorited() const;
  inline void clear_lifetime_favorited();
  static const int kLifetimeFavoritedFieldNumber = 40;
  inline ::google::protobuf::uint32 lifetime_favorited() const;
  inline void set_lifetime_favorited(::google::protobuf::uint32 value);

  // optional uint32 lifetime_followers = 41;
  inline bool has_lifetime_followers() const;
  inline void clear_lifetime_followers();
  static const int kLifetimeFollowersFieldNumber = 41;
  inline ::google::protobuf::uint32 lifetime_followers() const;
  inline void set_lifetime_followers(::google::protobuf::uint32 value);

  // optional uint32 views = 42;
  inline bool has_views() const;
  inline void clear_views();
  static const int kViewsFieldNumber = 42;
  inline ::google::protobuf::uint32 views() const;
  inline void set_views(::google::protobuf::uint32 value);

  // optional uint32 image_width = 43;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 43;
  inline ::google::protobuf::uint32 image_width() const;
  inline void set_image_width(::google::protobuf::uint32 value);

  // optional uint32 image_height = 44;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 44;
  inline ::google::protobuf::uint32 image_height() const;
  inline void set_image_height(::google::protobuf::uint32 value);

  // optional string image_url = 45;
  inline bool has_image_url() const;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 45;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional bool spoiler_tag = 46;
  inline bool has_spoiler_tag() const;
  inline void clear_spoiler_tag();
  static const int kSpoilerTagFieldNumber = 46;
  inline bool spoiler_tag() const;
  inline void set_spoiler_tag(bool value);

  // optional uint32 shortcutid = 47;
  inline bool has_shortcutid() const;
  inline void clear_shortcutid();
  static const int kShortcutidFieldNumber = 47;
  inline ::google::protobuf::uint32 shortcutid() const;
  inline void set_shortcutid(::google::protobuf::uint32 value);

  // optional string shortcutname = 48;
  inline bool has_shortcutname() const;
  inline void clear_shortcutname();
  static const int kShortcutnameFieldNumber = 48;
  inline const ::std::string& shortcutname() const;
  inline void set_shortcutname(const ::std::string& value);
  inline void set_shortcutname(const char* value);
  inline void set_shortcutname(const char* value, size_t size);
  inline ::std::string* mutable_shortcutname();
  inline ::std::string* release_shortcutname();
  inline void set_allocated_shortcutname(::std::string* shortcutname);

  // optional uint32 num_children = 49;
  inline bool has_num_children() const;
  inline void clear_num_children();
  static const int kNumChildrenFieldNumber = 49;
  inline ::google::protobuf::uint32 num_children() const;
  inline void set_num_children(::google::protobuf::uint32 value);

  // optional uint32 num_reports = 50;
  inline bool has_num_reports() const;
  inline void clear_num_reports();
  static const int kNumReportsFieldNumber = 50;
  inline ::google::protobuf::uint32 num_reports() const;
  inline void set_num_reports(::google::protobuf::uint32 value);

  // repeated .PublishedFileDetails.Preview previews = 51;
  inline int previews_size() const;
  inline void clear_previews();
  static const int kPreviewsFieldNumber = 51;
  inline const ::PublishedFileDetails_Preview& previews(int index) const;
  inline ::PublishedFileDetails_Preview* mutable_previews(int index);
  inline ::PublishedFileDetails_Preview* add_previews();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Preview >&
      previews() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Preview >*
      mutable_previews();

  // repeated .PublishedFileDetails.Tag tags = 52;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 52;
  inline const ::PublishedFileDetails_Tag& tags(int index) const;
  inline ::PublishedFileDetails_Tag* mutable_tags(int index);
  inline ::PublishedFileDetails_Tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Tag >*
      mutable_tags();

  // repeated .PublishedFileDetails.Child children = 53;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 53;
  inline const ::PublishedFileDetails_Child& children(int index) const;
  inline ::PublishedFileDetails_Child* mutable_children(int index);
  inline ::PublishedFileDetails_Child* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Child >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Child >*
      mutable_children();

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  inline int kvtags_size() const;
  inline void clear_kvtags();
  static const int kKvtagsFieldNumber = 54;
  inline const ::PublishedFileDetails_KVTag& kvtags(int index) const;
  inline ::PublishedFileDetails_KVTag* mutable_kvtags(int index);
  inline ::PublishedFileDetails_KVTag* add_kvtags();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
      kvtags() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
      mutable_kvtags();

  // optional .PublishedFileDetails.VoteData vote_data = 55;
  inline bool has_vote_data() const;
  inline void clear_vote_data();
  static const int kVoteDataFieldNumber = 55;
  inline const ::PublishedFileDetails_VoteData& vote_data() const;
  inline ::PublishedFileDetails_VoteData* mutable_vote_data();
  inline ::PublishedFileDetails_VoteData* release_vote_data();
  inline void set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data);

  // optional uint32 time_subscribed = 56;
  inline bool has_time_subscribed() const;
  inline void clear_time_subscribed();
  static const int kTimeSubscribedFieldNumber = 56;
  inline ::google::protobuf::uint32 time_subscribed() const;
  inline void set_time_subscribed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PublishedFileDetails)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_creator();
  inline void clear_has_creator();
  inline void set_has_creator_appid();
  inline void clear_has_creator_appid();
  inline void set_has_consumer_appid();
  inline void clear_has_consumer_appid();
  inline void set_has_consumer_shortcutid();
  inline void clear_has_consumer_shortcutid();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_preview_file_size();
  inline void clear_has_preview_file_size();
  inline void set_has_file_url();
  inline void clear_has_file_url();
  inline void set_has_preview_url();
  inline void clear_has_preview_url();
  inline void set_has_youtubevideoid();
  inline void clear_has_youtubevideoid();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_hcontent_file();
  inline void clear_has_hcontent_file();
  inline void set_has_hcontent_preview();
  inline void clear_has_hcontent_preview();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_file_description();
  inline void clear_has_file_description();
  inline void set_has_short_description();
  inline void clear_has_short_description();
  inline void set_has_time_created();
  inline void clear_has_time_created();
  inline void set_has_time_updated();
  inline void clear_has_time_updated();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_workshop_file();
  inline void clear_has_workshop_file();
  inline void set_has_workshop_accepted();
  inline void clear_has_workshop_accepted();
  inline void set_has_show_subscribe_all();
  inline void clear_has_show_subscribe_all();
  inline void set_has_num_comments_developer();
  inline void clear_has_num_comments_developer();
  inline void set_has_num_comments_public();
  inline void clear_has_num_comments_public();
  inline void set_has_banned();
  inline void clear_has_banned();
  inline void set_has_ban_reason();
  inline void clear_has_ban_reason();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_can_be_deleted();
  inline void clear_has_can_be_deleted();
  inline void set_has_incompatible();
  inline void clear_has_incompatible();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_file_type();
  inline void clear_has_file_type();
  inline void set_has_can_subscribe();
  inline void clear_has_can_subscribe();
  inline void set_has_subscriptions();
  inline void clear_has_subscriptions();
  inline void set_has_favorited();
  inline void clear_has_favorited();
  inline void set_has_followers();
  inline void clear_has_followers();
  inline void set_has_lifetime_subscriptions();
  inline void clear_has_lifetime_subscriptions();
  inline void set_has_lifetime_favorited();
  inline void clear_has_lifetime_favorited();
  inline void set_has_lifetime_followers();
  inline void clear_has_lifetime_followers();
  inline void set_has_views();
  inline void clear_has_views();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_image_url();
  inline void clear_has_image_url();
  inline void set_has_spoiler_tag();
  inline void clear_has_spoiler_tag();
  inline void set_has_shortcutid();
  inline void clear_has_shortcutid();
  inline void set_has_shortcutname();
  inline void clear_has_shortcutname();
  inline void set_has_num_children();
  inline void clear_has_num_children();
  inline void set_has_num_reports();
  inline void clear_has_num_reports();
  inline void set_has_vote_data();
  inline void clear_has_vote_data();
  inline void set_has_time_subscribed();
  inline void clear_has_time_subscribed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 publishedfileid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 creator_appid_;
  ::google::protobuf::uint64 creator_;
  ::google::protobuf::uint32 consumer_appid_;
  ::google::protobuf::uint32 consumer_shortcutid_;
  ::std::string* filename_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::uint64 preview_file_size_;
  ::std::string* file_url_;
  ::std::string* preview_url_;
  ::std::string* youtubevideoid_;
  ::std::string* url_;
  ::google::protobuf::uint64 hcontent_file_;
  ::google::protobuf::uint64 hcontent_preview_;
  ::std::string* title_;
  ::std::string* file_description_;
  ::std::string* short_description_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint32 time_updated_;
  ::google::protobuf::uint32 visibility_;
  ::google::protobuf::uint32 flags_;
  bool workshop_file_;
  bool workshop_accepted_;
  bool show_subscribe_all_;
  bool banned_;
  ::google::protobuf::int32 num_comments_developer_;
  ::std::string* ban_reason_;
  ::google::protobuf::uint64 banner_;
  ::google::protobuf::int32 num_comments_public_;
  ::google::protobuf::uint32 file_type_;
  ::std::string* app_name_;
  ::google::protobuf::uint32 subscriptions_;
  bool can_be_deleted_;
  bool incompatible_;
  bool can_subscribe_;
  bool spoiler_tag_;
  ::google::protobuf::uint32 favorited_;
  ::google::protobuf::uint32 followers_;
  ::google::protobuf::uint32 lifetime_subscriptions_;
  ::google::protobuf::uint32 lifetime_favorited_;
  ::google::protobuf::uint32 lifetime_followers_;
  ::google::protobuf::uint32 views_;
  ::google::protobuf::uint32 image_width_;
  ::google::protobuf::uint32 image_height_;
  ::std::string* image_url_;
  ::std::string* shortcutname_;
  ::google::protobuf::uint32 shortcutid_;
  ::google::protobuf::uint32 num_children_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Preview > previews_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Tag > tags_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Child > children_;
  ::google::protobuf::uint32 num_reports_;
  ::google::protobuf::uint32 time_subscribed_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_KVTag > kvtags_;
  ::PublishedFileDetails_VoteData* vote_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static PublishedFileDetails* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_GetDetails_Response();
  virtual ~CPublishedFile_GetDetails_Response();

  CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from);

  inline CPublishedFile_GetDetails_Response& operator=(const CPublishedFile_GetDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_GetDetails_Response& default_instance();

  void Swap(CPublishedFile_GetDetails_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_GetDetails_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_GetDetails_Response& from);
  void MergeFrom(const CPublishedFile_GetDetails_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  inline int publishedfiledetails_size() const;
  inline void clear_publishedfiledetails();
  static const int kPublishedfiledetailsFieldNumber = 1;
  inline const ::PublishedFileDetails& publishedfiledetails(int index) const;
  inline ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  inline ::PublishedFileDetails* add_publishedfiledetails();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_GetDetails_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_GetUserFiles_Request();
  virtual ~CPublishedFile_GetUserFiles_Request();

  CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from);

  inline CPublishedFile_GetUserFiles_Request& operator=(const CPublishedFile_GetUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_GetUserFiles_Request& default_instance();

  void Swap(CPublishedFile_GetUserFiles_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_GetUserFiles_Request& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional uint32 page = 3 [default = 1];
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // optional uint32 numperpage = 4 [default = 1];
  inline bool has_numperpage() const;
  inline void clear_numperpage();
  static const int kNumperpageFieldNumber = 4;
  inline ::google::protobuf::uint32 numperpage() const;
  inline void set_numperpage(::google::protobuf::uint32 value);

  // optional string sortmethod = 6 [default = "lastupdated"];
  inline bool has_sortmethod() const;
  inline void clear_sortmethod();
  static const int kSortmethodFieldNumber = 6;
  inline const ::std::string& sortmethod() const;
  inline void set_sortmethod(const ::std::string& value);
  inline void set_sortmethod(const char* value);
  inline void set_sortmethod(const char* value, size_t size);
  inline ::std::string* mutable_sortmethod();
  inline ::std::string* release_sortmethod();
  inline void set_allocated_sortmethod(::std::string* sortmethod);

  // optional bool totalonly = 7;
  inline bool has_totalonly() const;
  inline void clear_totalonly();
  static const int kTotalonlyFieldNumber = 7;
  inline bool totalonly() const;
  inline void set_totalonly(bool value);

  // optional uint32 privacy = 9;
  inline bool has_privacy() const;
  inline void clear_privacy();
  static const int kPrivacyFieldNumber = 9;
  inline ::google::protobuf::uint32 privacy() const;
  inline void set_privacy(::google::protobuf::uint32 value);

  // optional bool ids_only = 10;
  inline bool has_ids_only() const;
  inline void clear_ids_only();
  static const int kIdsOnlyFieldNumber = 10;
  inline bool ids_only() const;
  inline void set_ids_only(bool value);

  // repeated string requiredtags = 11;
  inline int requiredtags_size() const;
  inline void clear_requiredtags();
  static const int kRequiredtagsFieldNumber = 11;
  inline const ::std::string& requiredtags(int index) const;
  inline ::std::string* mutable_requiredtags(int index);
  inline void set_requiredtags(int index, const ::std::string& value);
  inline void set_requiredtags(int index, const char* value);
  inline void set_requiredtags(int index, const char* value, size_t size);
  inline ::std::string* add_requiredtags();
  inline void add_requiredtags(const ::std::string& value);
  inline void add_requiredtags(const char* value);
  inline void add_requiredtags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& requiredtags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requiredtags();

  // repeated string excludedtags = 12;
  inline int excludedtags_size() const;
  inline void clear_excludedtags();
  static const int kExcludedtagsFieldNumber = 12;
  inline const ::std::string& excludedtags(int index) const;
  inline ::std::string* mutable_excludedtags(int index);
  inline void set_excludedtags(int index, const ::std::string& value);
  inline void set_excludedtags(int index, const char* value);
  inline void set_excludedtags(int index, const char* value, size_t size);
  inline ::std::string* add_excludedtags();
  inline void add_excludedtags(const ::std::string& value);
  inline void add_excludedtags(const char* value);
  inline void add_excludedtags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& excludedtags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_excludedtags();

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Request)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_numperpage();
  inline void clear_has_numperpage();
  inline void set_has_sortmethod();
  inline void clear_has_sortmethod();
  inline void set_has_totalonly();
  inline void clear_has_totalonly();
  inline void set_has_privacy();
  inline void clear_has_privacy();
  inline void set_has_ids_only();
  inline void clear_has_ids_only();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 page_;
  static ::std::string* _default_sortmethod_;
  ::std::string* sortmethod_;
  ::google::protobuf::uint32 numperpage_;
  ::google::protobuf::uint32 privacy_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requiredtags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> excludedtags_;
  bool totalonly_;
  bool ids_only_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_GetUserFiles_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response_App : public ::google::protobuf::Message {
 public:
  CPublishedFile_GetUserFiles_Response_App();
  virtual ~CPublishedFile_GetUserFiles_Response_App();

  CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from);

  inline CPublishedFile_GetUserFiles_Response_App& operator=(const CPublishedFile_GetUserFiles_Response_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_GetUserFiles_Response_App& default_instance();

  void Swap(CPublishedFile_GetUserFiles_Response_App* other);

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Response_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 shortcutid = 3;
  inline bool has_shortcutid() const;
  inline void clear_shortcutid();
  static const int kShortcutidFieldNumber = 3;
  inline ::google::protobuf::uint32 shortcutid() const;
  inline void set_shortcutid(::google::protobuf::uint32 value);

  // optional bool private = 4;
  inline bool has_private_() const;
  inline void clear_private_();
  static const int kPrivateFieldNumber = 4;
  inline bool private_() const;
  inline void set_private_(bool value);

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response.App)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_shortcutid();
  inline void clear_has_shortcutid();
  inline void set_has_private_();
  inline void clear_has_private_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 shortcutid_;
  bool private__;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_GetUserFiles_Response_App* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_GetUserFiles_Response();
  virtual ~CPublishedFile_GetUserFiles_Response();

  CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from);

  inline CPublishedFile_GetUserFiles_Response& operator=(const CPublishedFile_GetUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_GetUserFiles_Response& default_instance();

  void Swap(CPublishedFile_GetUserFiles_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_GetUserFiles_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_GetUserFiles_Response& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetUserFiles_Response_App App;

  // accessors -------------------------------------------------------

  // optional uint32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // optional uint32 startindex = 2;
  inline bool has_startindex() const;
  inline void clear_startindex();
  static const int kStartindexFieldNumber = 2;
  inline ::google::protobuf::uint32 startindex() const;
  inline void set_startindex(::google::protobuf::uint32 value);

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  inline int publishedfiledetails_size() const;
  inline void clear_publishedfiledetails();
  static const int kPublishedfiledetailsFieldNumber = 3;
  inline const ::PublishedFileDetails& publishedfiledetails(int index) const;
  inline ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  inline ::PublishedFileDetails* add_publishedfiledetails();
  inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;
  inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  inline int apps_size() const;
  inline void clear_apps();
  static const int kAppsFieldNumber = 4;
  inline const ::CPublishedFile_GetUserFiles_Response_App& apps(int index) const;
  inline ::CPublishedFile_GetUserFiles_Response_App* mutable_apps(int index);
  inline ::CPublishedFile_GetUserFiles_Response_App* add_apps();
  inline const ::google::protobuf::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
      apps() const;
  inline ::google::protobuf::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
      mutable_apps();

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_startindex();
  inline void clear_has_startindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 startindex_;
  ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  ::google::protobuf::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App > apps_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_GetUserFiles_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_Update_Request();
  virtual ~CPublishedFile_Update_Request();

  CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from);

  inline CPublishedFile_Update_Request& operator=(const CPublishedFile_Update_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Update_Request& default_instance();

  void Swap(CPublishedFile_Update_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Update_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Update_Request& from);
  void MergeFrom(const CPublishedFile_Update_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional fixed64 publishedfileid = 2;
  inline bool has_publishedfileid() const;
  inline void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 2;
  inline ::google::protobuf::uint64 publishedfileid() const;
  inline void set_publishedfileid(::google::protobuf::uint64 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string file_description = 4;
  inline bool has_file_description() const;
  inline void clear_file_description();
  static const int kFileDescriptionFieldNumber = 4;
  inline const ::std::string& file_description() const;
  inline void set_file_description(const ::std::string& value);
  inline void set_file_description(const char* value);
  inline void set_file_description(const char* value, size_t size);
  inline ::std::string* mutable_file_description();
  inline ::std::string* release_file_description();
  inline void set_allocated_file_description(::std::string* file_description);

  // optional uint32 visibility = 5;
  inline bool has_visibility() const;
  inline void clear_visibility();
  static const int kVisibilityFieldNumber = 5;
  inline ::google::protobuf::uint32 visibility() const;
  inline void set_visibility(::google::protobuf::uint32 value);

  // repeated string tags = 6;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 6;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string filename = 7;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 7;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string preview_filename = 8;
  inline bool has_preview_filename() const;
  inline void clear_preview_filename();
  static const int kPreviewFilenameFieldNumber = 8;
  inline const ::std::string& preview_filename() const;
  inline void set_preview_filename(const ::std::string& value);
  inline void set_preview_filename(const char* value);
  inline void set_preview_filename(const char* value, size_t size);
  inline ::std::string* mutable_preview_filename();
  inline ::std::string* release_preview_filename();
  inline void set_allocated_preview_filename(::std::string* preview_filename);

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Request)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_publishedfileid();
  inline void clear_has_publishedfileid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_file_description();
  inline void clear_has_file_description();
  inline void set_has_visibility();
  inline void clear_has_visibility();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_preview_filename();
  inline void clear_has_preview_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  ::std::string* title_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 visibility_;
  ::std::string* file_description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::std::string* filename_;
  ::std::string* preview_filename_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Update_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_Update_Response();
  virtual ~CPublishedFile_Update_Response();

  CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from);

  inline CPublishedFile_Update_Response& operator=(const CPublishedFile_Update_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_Update_Response& default_instance();

  void Swap(CPublishedFile_Update_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_Update_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_Update_Response& from);
  void MergeFrom(const CPublishedFile_Update_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_Update_Response* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Request : public ::google::protobuf::Message {
 public:
  CPublishedFile_RefreshVotingQueue_Request();
  virtual ~CPublishedFile_RefreshVotingQueue_Request();

  CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from);

  inline CPublishedFile_RefreshVotingQueue_Request& operator=(const CPublishedFile_RefreshVotingQueue_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_RefreshVotingQueue_Request& default_instance();

  void Swap(CPublishedFile_RefreshVotingQueue_Request* other);

  // implements Message ----------------------------------------------

  CPublishedFile_RefreshVotingQueue_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional uint32 matching_file_type = 2;
  inline bool has_matching_file_type() const;
  inline void clear_matching_file_type();
  static const int kMatchingFileTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 matching_file_type() const;
  inline void set_matching_file_type(::google::protobuf::uint32 value);

  // repeated string tags = 3;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 3;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional bool match_all_tags = 4 [default = true];
  inline bool has_match_all_tags() const;
  inline void clear_match_all_tags();
  static const int kMatchAllTagsFieldNumber = 4;
  inline bool match_all_tags() const;
  inline void set_match_all_tags(bool value);

  // repeated string excluded_tags = 5;
  inline int excluded_tags_size() const;
  inline void clear_excluded_tags();
  static const int kExcludedTagsFieldNumber = 5;
  inline const ::std::string& excluded_tags(int index) const;
  inline ::std::string* mutable_excluded_tags(int index);
  inline void set_excluded_tags(int index, const ::std::string& value);
  inline void set_excluded_tags(int index, const char* value);
  inline void set_excluded_tags(int index, const char* value, size_t size);
  inline ::std::string* add_excluded_tags();
  inline void add_excluded_tags(const ::std::string& value);
  inline void add_excluded_tags(const char* value);
  inline void add_excluded_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& excluded_tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_excluded_tags();

  // optional uint32 desired_queue_size = 6;
  inline bool has_desired_queue_size() const;
  inline void clear_desired_queue_size();
  static const int kDesiredQueueSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 desired_queue_size() const;
  inline void set_desired_queue_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Request)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_matching_file_type();
  inline void clear_has_matching_file_type();
  inline void set_has_match_all_tags();
  inline void clear_has_match_all_tags();
  inline void set_has_desired_queue_size();
  inline void clear_has_desired_queue_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 matching_file_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> excluded_tags_;
  bool match_all_tags_;
  ::google::protobuf::uint32 desired_queue_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_RefreshVotingQueue_Request* default_instance_;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Response : public ::google::protobuf::Message {
 public:
  CPublishedFile_RefreshVotingQueue_Response();
  virtual ~CPublishedFile_RefreshVotingQueue_Response();

  CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from);

  inline CPublishedFile_RefreshVotingQueue_Response& operator=(const CPublishedFile_RefreshVotingQueue_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPublishedFile_RefreshVotingQueue_Response& default_instance();

  void Swap(CPublishedFile_RefreshVotingQueue_Response* other);

  // implements Message ----------------------------------------------

  CPublishedFile_RefreshVotingQueue_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from);
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fpublishedfile_2esteamworkssdk_2eproto();

  void InitAsDefaultInstance();
  static CPublishedFile_RefreshVotingQueue_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// CPublishedFile_Subscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Subscribe_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_Subscribe_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_Subscribe_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_Subscribe_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPublishedFile_Subscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.publishedfileid)
  return publishedfileid_;
}
inline void CPublishedFile_Subscribe_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Subscribe_Request::has_list_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_Subscribe_Request::set_has_list_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_Subscribe_Request::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_Subscribe_Request::clear_list_type() {
  list_type_ = 0u;
  clear_has_list_type();
}
inline ::google::protobuf::uint32 CPublishedFile_Subscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.list_type)
  return list_type_;
}
inline void CPublishedFile_Subscribe_Request::set_list_type(::google::protobuf::uint32 value) {
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Subscribe_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_Subscribe_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_Subscribe_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_Subscribe_Request::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 CPublishedFile_Subscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.appid)
  return appid_;
}
inline void CPublishedFile_Subscribe_Request::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Subscribe_Request::has_notify_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_Subscribe_Request::set_has_notify_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_Subscribe_Request::clear_has_notify_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_Subscribe_Request::clear_notify_client() {
  notify_client_ = false;
  clear_has_notify_client();
}
inline bool CPublishedFile_Subscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.notify_client)
  return notify_client_;
}
inline void CPublishedFile_Subscribe_Request::set_notify_client(bool value) {
  set_has_notify_client();
  notify_client_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Subscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Unsubscribe_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_Unsubscribe_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPublishedFile_Unsubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.publishedfileid)
  return publishedfileid_;
}
inline void CPublishedFile_Unsubscribe_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Unsubscribe_Request::has_list_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_Unsubscribe_Request::set_has_list_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_list_type() {
  list_type_ = 0u;
  clear_has_list_type();
}
inline ::google::protobuf::uint32 CPublishedFile_Unsubscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.list_type)
  return list_type_;
}
inline void CPublishedFile_Unsubscribe_Request::set_list_type(::google::protobuf::uint32 value) {
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Unsubscribe_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_Unsubscribe_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 CPublishedFile_Unsubscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.appid)
  return appid_;
}
inline void CPublishedFile_Unsubscribe_Request::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Unsubscribe_Request::has_notify_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_Unsubscribe_Request::set_has_notify_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_has_notify_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_Unsubscribe_Request::clear_notify_client() {
  notify_client_ = false;
  clear_has_notify_client();
}
inline bool CPublishedFile_Unsubscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.notify_client)
  return notify_client_;
}
inline void CPublishedFile_Unsubscribe_Request::set_notify_client(bool value) {
  set_has_notify_client();
  notify_client_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_Publish_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_Publish_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_Publish_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_Publish_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_Publish_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.appid)
  return appid_;
}
inline void CPublishedFile_Publish_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.appid)
}

// optional uint32 consumer_appid = 2;
inline bool CPublishedFile_Publish_Request::has_consumer_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_consumer_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_Publish_Request::clear_has_consumer_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_Publish_Request::clear_consumer_appid() {
  consumer_appid_ = 0u;
  clear_has_consumer_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_Publish_Request::consumer_appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_appid)
  return consumer_appid_;
}
inline void CPublishedFile_Publish_Request::set_consumer_appid(::google::protobuf::uint32 value) {
  set_has_consumer_appid();
  consumer_appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_appid)
}

// optional string cloudfilename = 3;
inline bool CPublishedFile_Publish_Request::has_cloudfilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_cloudfilename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_Publish_Request::clear_has_cloudfilename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_Publish_Request::clear_cloudfilename() {
  if (cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloudfilename_->clear();
  }
  clear_has_cloudfilename();
}
inline const ::std::string& CPublishedFile_Publish_Request::cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.cloudfilename)
  return *cloudfilename_;
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const ::std::string& value) {
  set_has_cloudfilename();
  if (cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloudfilename_ = new ::std::string;
  }
  cloudfilename_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const char* value) {
  set_has_cloudfilename();
  if (cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloudfilename_ = new ::std::string;
  }
  cloudfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const char* value, size_t size) {
  set_has_cloudfilename();
  if (cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloudfilename_ = new ::std::string;
  }
  cloudfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.cloudfilename)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_cloudfilename() {
  set_has_cloudfilename();
  if (cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloudfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.cloudfilename)
  return cloudfilename_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_cloudfilename() {
  clear_has_cloudfilename();
  if (cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cloudfilename_;
    cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_cloudfilename(::std::string* cloudfilename) {
  if (cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cloudfilename_;
  }
  if (cloudfilename) {
    set_has_cloudfilename();
    cloudfilename_ = cloudfilename;
  } else {
    clear_has_cloudfilename();
    cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.cloudfilename)
}

// optional string preview_cloudfilename = 4;
inline bool CPublishedFile_Publish_Request::has_preview_cloudfilename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_preview_cloudfilename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_Publish_Request::clear_has_preview_cloudfilename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_Publish_Request::clear_preview_cloudfilename() {
  if (preview_cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_cloudfilename_->clear();
  }
  clear_has_preview_cloudfilename();
}
inline const ::std::string& CPublishedFile_Publish_Request::preview_cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.preview_cloudfilename)
  return *preview_cloudfilename_;
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const ::std::string& value) {
  set_has_preview_cloudfilename();
  if (preview_cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_cloudfilename_ = new ::std::string;
  }
  preview_cloudfilename_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value) {
  set_has_preview_cloudfilename();
  if (preview_cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_cloudfilename_ = new ::std::string;
  }
  preview_cloudfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value, size_t size) {
  set_has_preview_cloudfilename();
  if (preview_cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_cloudfilename_ = new ::std::string;
  }
  preview_cloudfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_preview_cloudfilename() {
  set_has_preview_cloudfilename();
  if (preview_cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_cloudfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.preview_cloudfilename)
  return preview_cloudfilename_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_preview_cloudfilename() {
  clear_has_preview_cloudfilename();
  if (preview_cloudfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preview_cloudfilename_;
    preview_cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_preview_cloudfilename(::std::string* preview_cloudfilename) {
  if (preview_cloudfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_cloudfilename_;
  }
  if (preview_cloudfilename) {
    set_has_preview_cloudfilename();
    preview_cloudfilename_ = preview_cloudfilename;
  } else {
    clear_has_preview_cloudfilename();
    preview_cloudfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.preview_cloudfilename)
}

// optional string title = 5;
inline bool CPublishedFile_Publish_Request::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPublishedFile_Publish_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPublishedFile_Publish_Request::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CPublishedFile_Publish_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.title)
  return *title_;
}
inline void CPublishedFile_Publish_Request::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.title)
}
inline void CPublishedFile_Publish_Request::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.title)
}
inline void CPublishedFile_Publish_Request::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.title)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.title)
  return title_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.title)
}

// optional string file_description = 6;
inline bool CPublishedFile_Publish_Request::has_file_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_file_description() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPublishedFile_Publish_Request::clear_has_file_description() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPublishedFile_Publish_Request::clear_file_description() {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_->clear();
  }
  clear_has_file_description();
}
inline const ::std::string& CPublishedFile_Publish_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_description)
  return *file_description_;
}
inline void CPublishedFile_Publish_Request::set_file_description(const ::std::string& value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_description)
}
inline void CPublishedFile_Publish_Request::set_file_description(const char* value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.file_description)
}
inline void CPublishedFile_Publish_Request::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.file_description)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_file_description() {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.file_description)
  return file_description_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_file_description() {
  clear_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_description_;
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_file_description(::std::string* file_description) {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (file_description) {
    set_has_file_description();
    file_description_ = file_description;
  } else {
    clear_has_file_description();
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.file_description)
}

// optional uint32 file_type = 7;
inline bool CPublishedFile_Publish_Request::has_file_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_file_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPublishedFile_Publish_Request::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPublishedFile_Publish_Request::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
inline ::google::protobuf::uint32 CPublishedFile_Publish_Request::file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_type)
  return file_type_;
}
inline void CPublishedFile_Publish_Request::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_type)
}

// optional string consumer_shortcut_name = 8;
inline bool CPublishedFile_Publish_Request::has_consumer_shortcut_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_consumer_shortcut_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CPublishedFile_Publish_Request::clear_has_consumer_shortcut_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CPublishedFile_Publish_Request::clear_consumer_shortcut_name() {
  if (consumer_shortcut_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_shortcut_name_->clear();
  }
  clear_has_consumer_shortcut_name();
}
inline const ::std::string& CPublishedFile_Publish_Request::consumer_shortcut_name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return *consumer_shortcut_name_;
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const ::std::string& value) {
  set_has_consumer_shortcut_name();
  if (consumer_shortcut_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_shortcut_name_ = new ::std::string;
  }
  consumer_shortcut_name_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value) {
  set_has_consumer_shortcut_name();
  if (consumer_shortcut_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_shortcut_name_ = new ::std::string;
  }
  consumer_shortcut_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value, size_t size) {
  set_has_consumer_shortcut_name();
  if (consumer_shortcut_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_shortcut_name_ = new ::std::string;
  }
  consumer_shortcut_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_consumer_shortcut_name() {
  set_has_consumer_shortcut_name();
  if (consumer_shortcut_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    consumer_shortcut_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return consumer_shortcut_name_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_consumer_shortcut_name() {
  clear_has_consumer_shortcut_name();
  if (consumer_shortcut_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = consumer_shortcut_name_;
    consumer_shortcut_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_consumer_shortcut_name(::std::string* consumer_shortcut_name) {
  if (consumer_shortcut_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete consumer_shortcut_name_;
  }
  if (consumer_shortcut_name) {
    set_has_consumer_shortcut_name();
    consumer_shortcut_name_ = consumer_shortcut_name;
  } else {
    clear_has_consumer_shortcut_name();
    consumer_shortcut_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.consumer_shortcut_name)
}

// optional string youtube_username = 9;
inline bool CPublishedFile_Publish_Request::has_youtube_username() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_youtube_username() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CPublishedFile_Publish_Request::clear_has_youtube_username() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CPublishedFile_Publish_Request::clear_youtube_username() {
  if (youtube_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_username_->clear();
  }
  clear_has_youtube_username();
}
inline const ::std::string& CPublishedFile_Publish_Request::youtube_username() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_username)
  return *youtube_username_;
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const ::std::string& value) {
  set_has_youtube_username();
  if (youtube_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_username_ = new ::std::string;
  }
  youtube_username_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_username)
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const char* value) {
  set_has_youtube_username();
  if (youtube_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_username_ = new ::std::string;
  }
  youtube_username_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.youtube_username)
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const char* value, size_t size) {
  set_has_youtube_username();
  if (youtube_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_username_ = new ::std::string;
  }
  youtube_username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.youtube_username)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_youtube_username() {
  set_has_youtube_username();
  if (youtube_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_username)
  return youtube_username_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_youtube_username() {
  clear_has_youtube_username();
  if (youtube_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = youtube_username_;
    youtube_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_username(::std::string* youtube_username) {
  if (youtube_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtube_username_;
  }
  if (youtube_username) {
    set_has_youtube_username();
    youtube_username_ = youtube_username;
  } else {
    clear_has_youtube_username();
    youtube_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_username)
}

// optional string youtube_videoid = 10;
inline bool CPublishedFile_Publish_Request::has_youtube_videoid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_youtube_videoid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CPublishedFile_Publish_Request::clear_has_youtube_videoid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CPublishedFile_Publish_Request::clear_youtube_videoid() {
  if (youtube_videoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_videoid_->clear();
  }
  clear_has_youtube_videoid();
}
inline const ::std::string& CPublishedFile_Publish_Request::youtube_videoid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_videoid)
  return *youtube_videoid_;
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const ::std::string& value) {
  set_has_youtube_videoid();
  if (youtube_videoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_videoid_ = new ::std::string;
  }
  youtube_videoid_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_videoid)
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value) {
  set_has_youtube_videoid();
  if (youtube_videoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_videoid_ = new ::std::string;
  }
  youtube_videoid_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.youtube_videoid)
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value, size_t size) {
  set_has_youtube_videoid();
  if (youtube_videoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_videoid_ = new ::std::string;
  }
  youtube_videoid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.youtube_videoid)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_youtube_videoid() {
  set_has_youtube_videoid();
  if (youtube_videoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtube_videoid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_videoid)
  return youtube_videoid_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_youtube_videoid() {
  clear_has_youtube_videoid();
  if (youtube_videoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = youtube_videoid_;
    youtube_videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_videoid(::std::string* youtube_videoid) {
  if (youtube_videoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtube_videoid_;
  }
  if (youtube_videoid) {
    set_has_youtube_videoid();
    youtube_videoid_ = youtube_videoid;
  } else {
    clear_has_youtube_videoid();
    youtube_videoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_videoid)
}

// optional uint32 visibility = 11;
inline bool CPublishedFile_Publish_Request::has_visibility() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_visibility() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CPublishedFile_Publish_Request::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CPublishedFile_Publish_Request::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
inline ::google::protobuf::uint32 CPublishedFile_Publish_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.visibility)
  return visibility_;
}
inline void CPublishedFile_Publish_Request::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.visibility)
}

// optional string redirect_uri = 12;
inline bool CPublishedFile_Publish_Request::has_redirect_uri() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_redirect_uri() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CPublishedFile_Publish_Request::clear_has_redirect_uri() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CPublishedFile_Publish_Request::clear_redirect_uri() {
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_->clear();
  }
  clear_has_redirect_uri();
}
inline const ::std::string& CPublishedFile_Publish_Request::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.redirect_uri)
  return *redirect_uri_;
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const ::std::string& value) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.redirect_uri)
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const char* value) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.redirect_uri)
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const char* value, size_t size) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.redirect_uri)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_redirect_uri() {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.redirect_uri)
  return redirect_uri_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_redirect_uri() {
  clear_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = redirect_uri_;
    redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_uri_;
  }
  if (redirect_uri) {
    set_has_redirect_uri();
    redirect_uri_ = redirect_uri;
  } else {
    clear_has_redirect_uri();
    redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.redirect_uri)
}

// repeated string tags = 13;
inline int CPublishedFile_Publish_Request::tags_size() const {
  return tags_.size();
}
inline void CPublishedFile_Publish_Request::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CPublishedFile_Publish_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.tags)
  return tags_.Get(index);
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.tags)
}
inline ::std::string* CPublishedFile_Publish_Request::add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Publish_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Publish_Request.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_Publish_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Publish_Request.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_Publish_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Publish_Request.tags)
  return &tags_;
}

// optional string collection_type = 14;
inline bool CPublishedFile_Publish_Request::has_collection_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_collection_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CPublishedFile_Publish_Request::clear_has_collection_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CPublishedFile_Publish_Request::clear_collection_type() {
  if (collection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collection_type_->clear();
  }
  clear_has_collection_type();
}
inline const ::std::string& CPublishedFile_Publish_Request::collection_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.collection_type)
  return *collection_type_;
}
inline void CPublishedFile_Publish_Request::set_collection_type(const ::std::string& value) {
  set_has_collection_type();
  if (collection_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collection_type_ = new ::std::string;
  }
  collection_type_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.collection_type)
}
inline void CPublishedFile_Publish_Request::set_collection_type(const char* value) {
  set_has_collection_type();
  if (collection_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collection_type_ = new ::std::string;
  }
  collection_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.collection_type)
}
inline void CPublishedFile_Publish_Request::set_collection_type(const char* value, size_t size) {
  set_has_collection_type();
  if (collection_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collection_type_ = new ::std::string;
  }
  collection_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.collection_type)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_collection_type() {
  set_has_collection_type();
  if (collection_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    collection_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.collection_type)
  return collection_type_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_collection_type() {
  clear_has_collection_type();
  if (collection_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = collection_type_;
    collection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_collection_type(::std::string* collection_type) {
  if (collection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete collection_type_;
  }
  if (collection_type) {
    set_has_collection_type();
    collection_type_ = collection_type;
  } else {
    clear_has_collection_type();
    collection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.collection_type)
}

// optional string game_type = 15;
inline bool CPublishedFile_Publish_Request::has_game_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_game_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CPublishedFile_Publish_Request::clear_has_game_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CPublishedFile_Publish_Request::clear_game_type() {
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_type_->clear();
  }
  clear_has_game_type();
}
inline const ::std::string& CPublishedFile_Publish_Request::game_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.game_type)
  return *game_type_;
}
inline void CPublishedFile_Publish_Request::set_game_type(const ::std::string& value) {
  set_has_game_type();
  if (game_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_type_ = new ::std::string;
  }
  game_type_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.game_type)
}
inline void CPublishedFile_Publish_Request::set_game_type(const char* value) {
  set_has_game_type();
  if (game_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_type_ = new ::std::string;
  }
  game_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.game_type)
}
inline void CPublishedFile_Publish_Request::set_game_type(const char* value, size_t size) {
  set_has_game_type();
  if (game_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_type_ = new ::std::string;
  }
  game_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.game_type)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_game_type() {
  set_has_game_type();
  if (game_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.game_type)
  return game_type_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_game_type() {
  clear_has_game_type();
  if (game_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_type_;
    game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_game_type(::std::string* game_type) {
  if (game_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_type_;
  }
  if (game_type) {
    set_has_game_type();
    game_type_ = game_type;
  } else {
    clear_has_game_type();
    game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.game_type)
}

// optional string url = 16;
inline bool CPublishedFile_Publish_Request::has_url() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CPublishedFile_Publish_Request::set_has_url() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CPublishedFile_Publish_Request::clear_has_url() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CPublishedFile_Publish_Request::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CPublishedFile_Publish_Request::url() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.url)
  return *url_;
}
inline void CPublishedFile_Publish_Request::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.url)
}
inline void CPublishedFile_Publish_Request::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.url)
}
inline void CPublishedFile_Publish_Request::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.url)
}
inline ::std::string* CPublishedFile_Publish_Request::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.url)
  return url_;
}
inline ::std::string* CPublishedFile_Publish_Request::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Request::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.url)
}

// -------------------------------------------------------------------

// CPublishedFile_Publish_Response

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Publish_Response::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_Publish_Response::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_Publish_Response::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_Publish_Response::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPublishedFile_Publish_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.publishedfileid)
  return publishedfileid_;
}
inline void CPublishedFile_Publish_Response::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.publishedfileid)
}

// optional string redirect_uri = 2;
inline bool CPublishedFile_Publish_Response::has_redirect_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_Publish_Response::set_has_redirect_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_Publish_Response::clear_has_redirect_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_Publish_Response::clear_redirect_uri() {
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_->clear();
  }
  clear_has_redirect_uri();
}
inline const ::std::string& CPublishedFile_Publish_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.redirect_uri)
  return *redirect_uri_;
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const ::std::string& value) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.redirect_uri)
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const char* value) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Response.redirect_uri)
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const char* value, size_t size) {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  redirect_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Response.redirect_uri)
}
inline ::std::string* CPublishedFile_Publish_Response::mutable_redirect_uri() {
  set_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    redirect_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Response.redirect_uri)
  return redirect_uri_;
}
inline ::std::string* CPublishedFile_Publish_Response::release_redirect_uri() {
  clear_has_redirect_uri();
  if (redirect_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = redirect_uri_;
    redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Publish_Response::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redirect_uri_;
  }
  if (redirect_uri) {
    set_has_redirect_uri();
    redirect_uri_ = redirect_uri;
  } else {
    clear_has_redirect_uri();
    redirect_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Response.redirect_uri)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Request

// repeated fixed64 publishedfileids = 1;
inline int CPublishedFile_GetDetails_Request::publishedfileids_size() const {
  return publishedfileids_.size();
}
inline void CPublishedFile_GetDetails_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline ::google::protobuf::uint64 CPublishedFile_GetDetails_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.publishedfileids)
  return publishedfileids_.Get(index);
}
inline void CPublishedFile_GetDetails_Request::set_publishedfileids(int index, ::google::protobuf::uint64 value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline void CPublishedFile_GetDetails_Request::add_publishedfileids(::google::protobuf::uint64 value) {
  publishedfileids_.Add(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CPublishedFile_GetDetails_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return publishedfileids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CPublishedFile_GetDetails_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return &publishedfileids_;
}

// optional bool includetags = 2;
inline bool CPublishedFile_GetDetails_Request::has_includetags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_includetags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_includetags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_GetDetails_Request::clear_includetags() {
  includetags_ = false;
  clear_has_includetags();
}
inline bool CPublishedFile_GetDetails_Request::includetags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includetags)
  return includetags_;
}
inline void CPublishedFile_GetDetails_Request::set_includetags(bool value) {
  set_has_includetags();
  includetags_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includetags)
}

// optional bool includeadditionalpreviews = 3;
inline bool CPublishedFile_GetDetails_Request::has_includeadditionalpreviews() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_includeadditionalpreviews() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_includeadditionalpreviews() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_GetDetails_Request::clear_includeadditionalpreviews() {
  includeadditionalpreviews_ = false;
  clear_has_includeadditionalpreviews();
}
inline bool CPublishedFile_GetDetails_Request::includeadditionalpreviews() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
  return includeadditionalpreviews_;
}
inline void CPublishedFile_GetDetails_Request::set_includeadditionalpreviews(bool value) {
  set_has_includeadditionalpreviews();
  includeadditionalpreviews_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
}

// optional bool includechildren = 4;
inline bool CPublishedFile_GetDetails_Request::has_includechildren() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_includechildren() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_includechildren() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_GetDetails_Request::clear_includechildren() {
  includechildren_ = false;
  clear_has_includechildren();
}
inline bool CPublishedFile_GetDetails_Request::includechildren() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includechildren)
  return includechildren_;
}
inline void CPublishedFile_GetDetails_Request::set_includechildren(bool value) {
  set_has_includechildren();
  includechildren_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includechildren)
}

// optional bool includekvtags = 5;
inline bool CPublishedFile_GetDetails_Request::has_includekvtags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_includekvtags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_includekvtags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPublishedFile_GetDetails_Request::clear_includekvtags() {
  includekvtags_ = false;
  clear_has_includekvtags();
}
inline bool CPublishedFile_GetDetails_Request::includekvtags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includekvtags)
  return includekvtags_;
}
inline void CPublishedFile_GetDetails_Request::set_includekvtags(bool value) {
  set_has_includekvtags();
  includekvtags_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includekvtags)
}

// optional bool includevotes = 6;
inline bool CPublishedFile_GetDetails_Request::has_includevotes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_includevotes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_includevotes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPublishedFile_GetDetails_Request::clear_includevotes() {
  includevotes_ = false;
  clear_has_includevotes();
}
inline bool CPublishedFile_GetDetails_Request::includevotes() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includevotes)
  return includevotes_;
}
inline void CPublishedFile_GetDetails_Request::set_includevotes(bool value) {
  set_has_includevotes();
  includevotes_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includevotes)
}

// optional bool short_description = 8;
inline bool CPublishedFile_GetDetails_Request::has_short_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPublishedFile_GetDetails_Request::set_has_short_description() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPublishedFile_GetDetails_Request::clear_has_short_description() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPublishedFile_GetDetails_Request::clear_short_description() {
  short_description_ = false;
  clear_has_short_description();
}
inline bool CPublishedFile_GetDetails_Request::short_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.short_description)
  return short_description_;
}
inline void CPublishedFile_GetDetails_Request::set_short_description(bool value) {
  set_has_short_description();
  short_description_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.short_description)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Tag

// optional string tag = 1;
inline bool PublishedFileDetails_Tag::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails_Tag::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails_Tag::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails_Tag::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& PublishedFileDetails_Tag::tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.tag)
  return *tag_;
}
inline void PublishedFileDetails_Tag::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.tag)
}
inline void PublishedFileDetails_Tag::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Tag.tag)
}
inline void PublishedFileDetails_Tag::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Tag.tag)
}
inline ::std::string* PublishedFileDetails_Tag::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Tag.tag)
  return tag_;
}
inline ::std::string* PublishedFileDetails_Tag::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_Tag::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Tag.tag)
}

// optional bool adminonly = 2;
inline bool PublishedFileDetails_Tag::has_adminonly() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails_Tag::set_has_adminonly() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails_Tag::clear_has_adminonly() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails_Tag::clear_adminonly() {
  adminonly_ = false;
  clear_has_adminonly();
}
inline bool PublishedFileDetails_Tag::adminonly() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.adminonly)
  return adminonly_;
}
inline void PublishedFileDetails_Tag::set_adminonly(bool value) {
  set_has_adminonly();
  adminonly_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.adminonly)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Preview

// optional uint64 previewid = 1;
inline bool PublishedFileDetails_Preview::has_previewid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_previewid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails_Preview::clear_has_previewid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails_Preview::clear_previewid() {
  previewid_ = GOOGLE_ULONGLONG(0);
  clear_has_previewid();
}
inline ::google::protobuf::uint64 PublishedFileDetails_Preview::previewid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.previewid)
  return previewid_;
}
inline void PublishedFileDetails_Preview::set_previewid(::google::protobuf::uint64 value) {
  set_has_previewid();
  previewid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.previewid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Preview::has_sortorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_sortorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails_Preview::clear_has_sortorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails_Preview::clear_sortorder() {
  sortorder_ = 0u;
  clear_has_sortorder();
}
inline ::google::protobuf::uint32 PublishedFileDetails_Preview::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.sortorder)
  return sortorder_;
}
inline void PublishedFileDetails_Preview::set_sortorder(::google::protobuf::uint32 value) {
  set_has_sortorder();
  sortorder_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.sortorder)
}

// optional string url = 3;
inline bool PublishedFileDetails_Preview::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishedFileDetails_Preview::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishedFileDetails_Preview::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& PublishedFileDetails_Preview::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.url)
  return *url_;
}
inline void PublishedFileDetails_Preview::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.url)
}
inline void PublishedFileDetails_Preview::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.url)
}
inline void PublishedFileDetails_Preview::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.url)
}
inline ::std::string* PublishedFileDetails_Preview::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.url)
  return url_;
}
inline ::std::string* PublishedFileDetails_Preview::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_Preview::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.url)
}

// optional uint32 size = 4;
inline bool PublishedFileDetails_Preview::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishedFileDetails_Preview::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishedFileDetails_Preview::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 PublishedFileDetails_Preview::size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.size)
  return size_;
}
inline void PublishedFileDetails_Preview::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.size)
}

// optional string filename = 5;
inline bool PublishedFileDetails_Preview::has_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_filename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublishedFileDetails_Preview::clear_has_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublishedFileDetails_Preview::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& PublishedFileDetails_Preview::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.filename)
  return *filename_;
}
inline void PublishedFileDetails_Preview::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.filename)
}
inline void PublishedFileDetails_Preview::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.filename)
}
inline void PublishedFileDetails_Preview::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.filename)
}
inline ::std::string* PublishedFileDetails_Preview::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.filename)
  return filename_;
}
inline ::std::string* PublishedFileDetails_Preview::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_Preview::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.filename)
}

// optional string youtubevideoid = 6;
inline bool PublishedFileDetails_Preview::has_youtubevideoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PublishedFileDetails_Preview::set_has_youtubevideoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PublishedFileDetails_Preview::clear_has_youtubevideoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PublishedFileDetails_Preview::clear_youtubevideoid() {
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_->clear();
  }
  clear_has_youtubevideoid();
}
inline const ::std::string& PublishedFileDetails_Preview::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.youtubevideoid)
  return *youtubevideoid_;
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const ::std::string& value) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.youtubevideoid)
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const char* value) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.youtubevideoid)
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const char* value, size_t size) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.youtubevideoid)
}
inline ::std::string* PublishedFileDetails_Preview::mutable_youtubevideoid() {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.youtubevideoid)
  return youtubevideoid_;
}
inline ::std::string* PublishedFileDetails_Preview::release_youtubevideoid() {
  clear_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = youtubevideoid_;
    youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_Preview::set_allocated_youtubevideoid(::std::string* youtubevideoid) {
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtubevideoid_;
  }
  if (youtubevideoid) {
    set_has_youtubevideoid();
    youtubevideoid_ = youtubevideoid;
  } else {
    clear_has_youtubevideoid();
    youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.youtubevideoid)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Child

// optional uint64 publishedfileid = 1;
inline bool PublishedFileDetails_Child::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails_Child::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails_Child::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails_Child::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 PublishedFileDetails_Child::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.publishedfileid)
  return publishedfileid_;
}
inline void PublishedFileDetails_Child::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.publishedfileid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Child::has_sortorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails_Child::set_has_sortorder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails_Child::clear_has_sortorder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails_Child::clear_sortorder() {
  sortorder_ = 0u;
  clear_has_sortorder();
}
inline ::google::protobuf::uint32 PublishedFileDetails_Child::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.sortorder)
  return sortorder_;
}
inline void PublishedFileDetails_Child::set_sortorder(::google::protobuf::uint32 value) {
  set_has_sortorder();
  sortorder_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.sortorder)
}

// optional uint32 file_type = 3;
inline bool PublishedFileDetails_Child::has_file_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishedFileDetails_Child::set_has_file_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishedFileDetails_Child::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishedFileDetails_Child::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
inline ::google::protobuf::uint32 PublishedFileDetails_Child::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.file_type)
  return file_type_;
}
inline void PublishedFileDetails_Child::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.file_type)
}

// -------------------------------------------------------------------

// PublishedFileDetails_KVTag

// optional string key = 1;
inline bool PublishedFileDetails_KVTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails_KVTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails_KVTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails_KVTag::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PublishedFileDetails_KVTag::key() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.key)
  return *key_;
}
inline void PublishedFileDetails_KVTag::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.key)
}
inline void PublishedFileDetails_KVTag::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.KVTag.key)
}
inline void PublishedFileDetails_KVTag::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.KVTag.key)
}
inline ::std::string* PublishedFileDetails_KVTag::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.key)
  return key_;
}
inline ::std::string* PublishedFileDetails_KVTag::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_KVTag::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.key)
}

// optional string value = 2;
inline bool PublishedFileDetails_KVTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails_KVTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails_KVTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails_KVTag::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PublishedFileDetails_KVTag::value() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.value)
  return *value_;
}
inline void PublishedFileDetails_KVTag::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.value)
}
inline void PublishedFileDetails_KVTag::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.KVTag.value)
}
inline void PublishedFileDetails_KVTag::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.KVTag.value)
}
inline ::std::string* PublishedFileDetails_KVTag::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.value)
  return value_;
}
inline ::std::string* PublishedFileDetails_KVTag::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails_KVTag::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.value)
}

// -------------------------------------------------------------------

// PublishedFileDetails_VoteData

// optional float score = 1;
inline bool PublishedFileDetails_VoteData::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails_VoteData::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails_VoteData::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails_VoteData::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float PublishedFileDetails_VoteData::score() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.score)
  return score_;
}
inline void PublishedFileDetails_VoteData::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.score)
}

// optional uint32 votes_up = 2;
inline bool PublishedFileDetails_VoteData::has_votes_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails_VoteData::set_has_votes_up() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails_VoteData::clear_has_votes_up() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails_VoteData::clear_votes_up() {
  votes_up_ = 0u;
  clear_has_votes_up();
}
inline ::google::protobuf::uint32 PublishedFileDetails_VoteData::votes_up() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_up)
  return votes_up_;
}
inline void PublishedFileDetails_VoteData::set_votes_up(::google::protobuf::uint32 value) {
  set_has_votes_up();
  votes_up_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_up)
}

// optional uint32 votes_down = 3;
inline bool PublishedFileDetails_VoteData::has_votes_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishedFileDetails_VoteData::set_has_votes_down() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishedFileDetails_VoteData::clear_has_votes_down() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishedFileDetails_VoteData::clear_votes_down() {
  votes_down_ = 0u;
  clear_has_votes_down();
}
inline ::google::protobuf::uint32 PublishedFileDetails_VoteData::votes_down() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_down)
  return votes_down_;
}
inline void PublishedFileDetails_VoteData::set_votes_down(::google::protobuf::uint32 value) {
  set_has_votes_down();
  votes_down_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_down)
}

// -------------------------------------------------------------------

// PublishedFileDetails

// optional uint32 result = 1;
inline bool PublishedFileDetails::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishedFileDetails::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishedFileDetails::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishedFileDetails::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 PublishedFileDetails::result() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.result)
  return result_;
}
inline void PublishedFileDetails::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.result)
}

// optional uint64 publishedfileid = 2;
inline bool PublishedFileDetails::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishedFileDetails::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishedFileDetails::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishedFileDetails::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 PublishedFileDetails::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.publishedfileid)
  return publishedfileid_;
}
inline void PublishedFileDetails::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.publishedfileid)
}

// optional fixed64 creator = 3;
inline bool PublishedFileDetails::has_creator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishedFileDetails::set_has_creator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishedFileDetails::clear_has_creator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishedFileDetails::clear_creator() {
  creator_ = GOOGLE_ULONGLONG(0);
  clear_has_creator();
}
inline ::google::protobuf::uint64 PublishedFileDetails::creator() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator)
  return creator_;
}
inline void PublishedFileDetails::set_creator(::google::protobuf::uint64 value) {
  set_has_creator();
  creator_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator)
}

// optional uint32 creator_appid = 4;
inline bool PublishedFileDetails::has_creator_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishedFileDetails::set_has_creator_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishedFileDetails::clear_has_creator_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishedFileDetails::clear_creator_appid() {
  creator_appid_ = 0u;
  clear_has_creator_appid();
}
inline ::google::protobuf::uint32 PublishedFileDetails::creator_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator_appid)
  return creator_appid_;
}
inline void PublishedFileDetails::set_creator_appid(::google::protobuf::uint32 value) {
  set_has_creator_appid();
  creator_appid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator_appid)
}

// optional uint32 consumer_appid = 5;
inline bool PublishedFileDetails::has_consumer_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublishedFileDetails::set_has_consumer_appid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublishedFileDetails::clear_has_consumer_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublishedFileDetails::clear_consumer_appid() {
  consumer_appid_ = 0u;
  clear_has_consumer_appid();
}
inline ::google::protobuf::uint32 PublishedFileDetails::consumer_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_appid)
  return consumer_appid_;
}
inline void PublishedFileDetails::set_consumer_appid(::google::protobuf::uint32 value) {
  set_has_consumer_appid();
  consumer_appid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_appid)
}

// optional uint32 consumer_shortcutid = 6;
inline bool PublishedFileDetails::has_consumer_shortcutid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PublishedFileDetails::set_has_consumer_shortcutid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PublishedFileDetails::clear_has_consumer_shortcutid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PublishedFileDetails::clear_consumer_shortcutid() {
  consumer_shortcutid_ = 0u;
  clear_has_consumer_shortcutid();
}
inline ::google::protobuf::uint32 PublishedFileDetails::consumer_shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_shortcutid)
  return consumer_shortcutid_;
}
inline void PublishedFileDetails::set_consumer_shortcutid(::google::protobuf::uint32 value) {
  set_has_consumer_shortcutid();
  consumer_shortcutid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_shortcutid)
}

// optional string filename = 7;
inline bool PublishedFileDetails::has_filename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PublishedFileDetails::set_has_filename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PublishedFileDetails::clear_has_filename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PublishedFileDetails::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& PublishedFileDetails::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.filename)
  return *filename_;
}
inline void PublishedFileDetails::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.filename)
}
inline void PublishedFileDetails::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.filename)
}
inline void PublishedFileDetails::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.filename)
}
inline ::std::string* PublishedFileDetails::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.filename)
  return filename_;
}
inline ::std::string* PublishedFileDetails::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.filename)
}

// optional uint64 file_size = 8;
inline bool PublishedFileDetails::has_file_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PublishedFileDetails::set_has_file_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PublishedFileDetails::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PublishedFileDetails::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 PublishedFileDetails::file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_size)
  return file_size_;
}
inline void PublishedFileDetails::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_size)
}

// optional uint64 preview_file_size = 9;
inline bool PublishedFileDetails::has_preview_file_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PublishedFileDetails::set_has_preview_file_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PublishedFileDetails::clear_has_preview_file_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PublishedFileDetails::clear_preview_file_size() {
  preview_file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_preview_file_size();
}
inline ::google::protobuf::uint64 PublishedFileDetails::preview_file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_file_size)
  return preview_file_size_;
}
inline void PublishedFileDetails::set_preview_file_size(::google::protobuf::uint64 value) {
  set_has_preview_file_size();
  preview_file_size_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_file_size)
}

// optional string file_url = 10;
inline bool PublishedFileDetails::has_file_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PublishedFileDetails::set_has_file_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PublishedFileDetails::clear_has_file_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PublishedFileDetails::clear_file_url() {
  if (file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_url_->clear();
  }
  clear_has_file_url();
}
inline const ::std::string& PublishedFileDetails::file_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_url)
  return *file_url_;
}
inline void PublishedFileDetails::set_file_url(const ::std::string& value) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_url)
}
inline void PublishedFileDetails::set_file_url(const char* value) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.file_url)
}
inline void PublishedFileDetails::set_file_url(const char* value, size_t size) {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_url_ = new ::std::string;
  }
  file_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.file_url)
}
inline ::std::string* PublishedFileDetails::mutable_file_url() {
  set_has_file_url();
  if (file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_url)
  return file_url_;
}
inline ::std::string* PublishedFileDetails::release_file_url() {
  clear_has_file_url();
  if (file_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_url_;
    file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_file_url(::std::string* file_url) {
  if (file_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_url_;
  }
  if (file_url) {
    set_has_file_url();
    file_url_ = file_url;
  } else {
    clear_has_file_url();
    file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_url)
}

// optional string preview_url = 11;
inline bool PublishedFileDetails::has_preview_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PublishedFileDetails::set_has_preview_url() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PublishedFileDetails::clear_has_preview_url() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PublishedFileDetails::clear_preview_url() {
  if (preview_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_url_->clear();
  }
  clear_has_preview_url();
}
inline const ::std::string& PublishedFileDetails::preview_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_url)
  return *preview_url_;
}
inline void PublishedFileDetails::set_preview_url(const ::std::string& value) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_url)
}
inline void PublishedFileDetails::set_preview_url(const char* value) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.preview_url)
}
inline void PublishedFileDetails::set_preview_url(const char* value, size_t size) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.preview_url)
}
inline ::std::string* PublishedFileDetails::mutable_preview_url() {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.preview_url)
  return preview_url_;
}
inline ::std::string* PublishedFileDetails::release_preview_url() {
  clear_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preview_url_;
    preview_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_preview_url(::std::string* preview_url) {
  if (preview_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_url_;
  }
  if (preview_url) {
    set_has_preview_url();
    preview_url_ = preview_url;
  } else {
    clear_has_preview_url();
    preview_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.preview_url)
}

// optional string youtubevideoid = 12;
inline bool PublishedFileDetails::has_youtubevideoid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PublishedFileDetails::set_has_youtubevideoid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PublishedFileDetails::clear_has_youtubevideoid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PublishedFileDetails::clear_youtubevideoid() {
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_->clear();
  }
  clear_has_youtubevideoid();
}
inline const ::std::string& PublishedFileDetails::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.youtubevideoid)
  return *youtubevideoid_;
}
inline void PublishedFileDetails::set_youtubevideoid(const ::std::string& value) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.youtubevideoid)
}
inline void PublishedFileDetails::set_youtubevideoid(const char* value) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.youtubevideoid)
}
inline void PublishedFileDetails::set_youtubevideoid(const char* value, size_t size) {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  youtubevideoid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.youtubevideoid)
}
inline ::std::string* PublishedFileDetails::mutable_youtubevideoid() {
  set_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    youtubevideoid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.youtubevideoid)
  return youtubevideoid_;
}
inline ::std::string* PublishedFileDetails::release_youtubevideoid() {
  clear_has_youtubevideoid();
  if (youtubevideoid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = youtubevideoid_;
    youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_youtubevideoid(::std::string* youtubevideoid) {
  if (youtubevideoid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete youtubevideoid_;
  }
  if (youtubevideoid) {
    set_has_youtubevideoid();
    youtubevideoid_ = youtubevideoid;
  } else {
    clear_has_youtubevideoid();
    youtubevideoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.youtubevideoid)
}

// optional string url = 13;
inline bool PublishedFileDetails::has_url() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PublishedFileDetails::set_has_url() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PublishedFileDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PublishedFileDetails::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& PublishedFileDetails::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.url)
  return *url_;
}
inline void PublishedFileDetails::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.url)
}
inline void PublishedFileDetails::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.url)
}
inline void PublishedFileDetails::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.url)
}
inline ::std::string* PublishedFileDetails::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.url)
  return url_;
}
inline ::std::string* PublishedFileDetails::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.url)
}

// optional fixed64 hcontent_file = 14;
inline bool PublishedFileDetails::has_hcontent_file() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PublishedFileDetails::set_has_hcontent_file() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PublishedFileDetails::clear_has_hcontent_file() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PublishedFileDetails::clear_hcontent_file() {
  hcontent_file_ = GOOGLE_ULONGLONG(0);
  clear_has_hcontent_file();
}
inline ::google::protobuf::uint64 PublishedFileDetails::hcontent_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_file)
  return hcontent_file_;
}
inline void PublishedFileDetails::set_hcontent_file(::google::protobuf::uint64 value) {
  set_has_hcontent_file();
  hcontent_file_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_file)
}

// optional fixed64 hcontent_preview = 15;
inline bool PublishedFileDetails::has_hcontent_preview() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PublishedFileDetails::set_has_hcontent_preview() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PublishedFileDetails::clear_has_hcontent_preview() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PublishedFileDetails::clear_hcontent_preview() {
  hcontent_preview_ = GOOGLE_ULONGLONG(0);
  clear_has_hcontent_preview();
}
inline ::google::protobuf::uint64 PublishedFileDetails::hcontent_preview() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_preview)
  return hcontent_preview_;
}
inline void PublishedFileDetails::set_hcontent_preview(::google::protobuf::uint64 value) {
  set_has_hcontent_preview();
  hcontent_preview_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_preview)
}

// optional string title = 16;
inline bool PublishedFileDetails::has_title() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PublishedFileDetails::set_has_title() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PublishedFileDetails::clear_has_title() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PublishedFileDetails::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& PublishedFileDetails::title() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.title)
  return *title_;
}
inline void PublishedFileDetails::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.title)
}
inline void PublishedFileDetails::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.title)
}
inline void PublishedFileDetails::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.title)
}
inline ::std::string* PublishedFileDetails::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.title)
  return title_;
}
inline ::std::string* PublishedFileDetails::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.title)
}

// optional string file_description = 17;
inline bool PublishedFileDetails::has_file_description() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PublishedFileDetails::set_has_file_description() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PublishedFileDetails::clear_has_file_description() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PublishedFileDetails::clear_file_description() {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_->clear();
  }
  clear_has_file_description();
}
inline const ::std::string& PublishedFileDetails::file_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_description)
  return *file_description_;
}
inline void PublishedFileDetails::set_file_description(const ::std::string& value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_description)
}
inline void PublishedFileDetails::set_file_description(const char* value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.file_description)
}
inline void PublishedFileDetails::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.file_description)
}
inline ::std::string* PublishedFileDetails::mutable_file_description() {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_description)
  return file_description_;
}
inline ::std::string* PublishedFileDetails::release_file_description() {
  clear_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_description_;
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_file_description(::std::string* file_description) {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (file_description) {
    set_has_file_description();
    file_description_ = file_description;
  } else {
    clear_has_file_description();
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_description)
}

// optional string short_description = 18;
inline bool PublishedFileDetails::has_short_description() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PublishedFileDetails::set_has_short_description() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PublishedFileDetails::clear_has_short_description() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PublishedFileDetails::clear_short_description() {
  if (short_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_description_->clear();
  }
  clear_has_short_description();
}
inline const ::std::string& PublishedFileDetails::short_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.short_description)
  return *short_description_;
}
inline void PublishedFileDetails::set_short_description(const ::std::string& value) {
  set_has_short_description();
  if (short_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_description_ = new ::std::string;
  }
  short_description_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.short_description)
}
inline void PublishedFileDetails::set_short_description(const char* value) {
  set_has_short_description();
  if (short_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_description_ = new ::std::string;
  }
  short_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.short_description)
}
inline void PublishedFileDetails::set_short_description(const char* value, size_t size) {
  set_has_short_description();
  if (short_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_description_ = new ::std::string;
  }
  short_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.short_description)
}
inline ::std::string* PublishedFileDetails::mutable_short_description() {
  set_has_short_description();
  if (short_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.short_description)
  return short_description_;
}
inline ::std::string* PublishedFileDetails::release_short_description() {
  clear_has_short_description();
  if (short_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = short_description_;
    short_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_short_description(::std::string* short_description) {
  if (short_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_description_;
  }
  if (short_description) {
    set_has_short_description();
    short_description_ = short_description;
  } else {
    clear_has_short_description();
    short_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.short_description)
}

// optional uint32 time_created = 19;
inline bool PublishedFileDetails::has_time_created() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PublishedFileDetails::set_has_time_created() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PublishedFileDetails::clear_has_time_created() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PublishedFileDetails::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 PublishedFileDetails::time_created() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_created)
  return time_created_;
}
inline void PublishedFileDetails::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_created)
}

// optional uint32 time_updated = 20;
inline bool PublishedFileDetails::has_time_updated() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PublishedFileDetails::set_has_time_updated() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PublishedFileDetails::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PublishedFileDetails::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
inline ::google::protobuf::uint32 PublishedFileDetails::time_updated() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_updated)
  return time_updated_;
}
inline void PublishedFileDetails::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_updated)
}

// optional uint32 visibility = 21;
inline bool PublishedFileDetails::has_visibility() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PublishedFileDetails::set_has_visibility() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PublishedFileDetails::clear_has_visibility() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PublishedFileDetails::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
inline ::google::protobuf::uint32 PublishedFileDetails::visibility() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.visibility)
  return visibility_;
}
inline void PublishedFileDetails::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.visibility)
}

// optional uint32 flags = 22;
inline bool PublishedFileDetails::has_flags() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PublishedFileDetails::set_has_flags() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PublishedFileDetails::clear_has_flags() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PublishedFileDetails::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 PublishedFileDetails::flags() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.flags)
  return flags_;
}
inline void PublishedFileDetails::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.flags)
}

// optional bool workshop_file = 23;
inline bool PublishedFileDetails::has_workshop_file() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PublishedFileDetails::set_has_workshop_file() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PublishedFileDetails::clear_has_workshop_file() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PublishedFileDetails::clear_workshop_file() {
  workshop_file_ = false;
  clear_has_workshop_file();
}
inline bool PublishedFileDetails::workshop_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_file)
  return workshop_file_;
}
inline void PublishedFileDetails::set_workshop_file(bool value) {
  set_has_workshop_file();
  workshop_file_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_file)
}

// optional bool workshop_accepted = 24;
inline bool PublishedFileDetails::has_workshop_accepted() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PublishedFileDetails::set_has_workshop_accepted() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PublishedFileDetails::clear_has_workshop_accepted() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PublishedFileDetails::clear_workshop_accepted() {
  workshop_accepted_ = false;
  clear_has_workshop_accepted();
}
inline bool PublishedFileDetails::workshop_accepted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_accepted)
  return workshop_accepted_;
}
inline void PublishedFileDetails::set_workshop_accepted(bool value) {
  set_has_workshop_accepted();
  workshop_accepted_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_accepted)
}

// optional bool show_subscribe_all = 25;
inline bool PublishedFileDetails::has_show_subscribe_all() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PublishedFileDetails::set_has_show_subscribe_all() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PublishedFileDetails::clear_has_show_subscribe_all() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PublishedFileDetails::clear_show_subscribe_all() {
  show_subscribe_all_ = false;
  clear_has_show_subscribe_all();
}
inline bool PublishedFileDetails::show_subscribe_all() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.show_subscribe_all)
  return show_subscribe_all_;
}
inline void PublishedFileDetails::set_show_subscribe_all(bool value) {
  set_has_show_subscribe_all();
  show_subscribe_all_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.show_subscribe_all)
}

// optional int32 num_comments_developer = 26;
inline bool PublishedFileDetails::has_num_comments_developer() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PublishedFileDetails::set_has_num_comments_developer() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PublishedFileDetails::clear_has_num_comments_developer() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PublishedFileDetails::clear_num_comments_developer() {
  num_comments_developer_ = 0;
  clear_has_num_comments_developer();
}
inline ::google::protobuf::int32 PublishedFileDetails::num_comments_developer() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_developer)
  return num_comments_developer_;
}
inline void PublishedFileDetails::set_num_comments_developer(::google::protobuf::int32 value) {
  set_has_num_comments_developer();
  num_comments_developer_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_developer)
}

// optional int32 num_comments_public = 27;
inline bool PublishedFileDetails::has_num_comments_public() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PublishedFileDetails::set_has_num_comments_public() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PublishedFileDetails::clear_has_num_comments_public() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PublishedFileDetails::clear_num_comments_public() {
  num_comments_public_ = 0;
  clear_has_num_comments_public();
}
inline ::google::protobuf::int32 PublishedFileDetails::num_comments_public() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_public)
  return num_comments_public_;
}
inline void PublishedFileDetails::set_num_comments_public(::google::protobuf::int32 value) {
  set_has_num_comments_public();
  num_comments_public_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_public)
}

// optional bool banned = 28;
inline bool PublishedFileDetails::has_banned() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PublishedFileDetails::set_has_banned() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PublishedFileDetails::clear_has_banned() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PublishedFileDetails::clear_banned() {
  banned_ = false;
  clear_has_banned();
}
inline bool PublishedFileDetails::banned() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banned)
  return banned_;
}
inline void PublishedFileDetails::set_banned(bool value) {
  set_has_banned();
  banned_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banned)
}

// optional string ban_reason = 29;
inline bool PublishedFileDetails::has_ban_reason() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PublishedFileDetails::set_has_ban_reason() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PublishedFileDetails::clear_has_ban_reason() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PublishedFileDetails::clear_ban_reason() {
  if (ban_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ban_reason_->clear();
  }
  clear_has_ban_reason();
}
inline const ::std::string& PublishedFileDetails::ban_reason() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ban_reason)
  return *ban_reason_;
}
inline void PublishedFileDetails::set_ban_reason(const ::std::string& value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ban_reason)
}
inline void PublishedFileDetails::set_ban_reason(const char* value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.ban_reason)
}
inline void PublishedFileDetails::set_ban_reason(const char* value, size_t size) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.ban_reason)
}
inline ::std::string* PublishedFileDetails::mutable_ban_reason() {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ban_reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.ban_reason)
  return ban_reason_;
}
inline ::std::string* PublishedFileDetails::release_ban_reason() {
  clear_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ban_reason_;
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_ban_reason(::std::string* ban_reason) {
  if (ban_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ban_reason_;
  }
  if (ban_reason) {
    set_has_ban_reason();
    ban_reason_ = ban_reason;
  } else {
    clear_has_ban_reason();
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.ban_reason)
}

// optional fixed64 banner = 30;
inline bool PublishedFileDetails::has_banner() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PublishedFileDetails::set_has_banner() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PublishedFileDetails::clear_has_banner() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PublishedFileDetails::clear_banner() {
  banner_ = GOOGLE_ULONGLONG(0);
  clear_has_banner();
}
inline ::google::protobuf::uint64 PublishedFileDetails::banner() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banner)
  return banner_;
}
inline void PublishedFileDetails::set_banner(::google::protobuf::uint64 value) {
  set_has_banner();
  banner_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banner)
}

// optional bool can_be_deleted = 31;
inline bool PublishedFileDetails::has_can_be_deleted() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PublishedFileDetails::set_has_can_be_deleted() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PublishedFileDetails::clear_has_can_be_deleted() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PublishedFileDetails::clear_can_be_deleted() {
  can_be_deleted_ = false;
  clear_has_can_be_deleted();
}
inline bool PublishedFileDetails::can_be_deleted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_be_deleted)
  return can_be_deleted_;
}
inline void PublishedFileDetails::set_can_be_deleted(bool value) {
  set_has_can_be_deleted();
  can_be_deleted_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_be_deleted)
}

// optional bool incompatible = 32;
inline bool PublishedFileDetails::has_incompatible() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PublishedFileDetails::set_has_incompatible() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PublishedFileDetails::clear_has_incompatible() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PublishedFileDetails::clear_incompatible() {
  incompatible_ = false;
  clear_has_incompatible();
}
inline bool PublishedFileDetails::incompatible() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.incompatible)
  return incompatible_;
}
inline void PublishedFileDetails::set_incompatible(bool value) {
  set_has_incompatible();
  incompatible_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.incompatible)
}

// optional string app_name = 33;
inline bool PublishedFileDetails::has_app_name() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PublishedFileDetails::set_has_app_name() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PublishedFileDetails::clear_has_app_name() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PublishedFileDetails::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& PublishedFileDetails::app_name() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.app_name)
  return *app_name_;
}
inline void PublishedFileDetails::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.app_name)
}
inline void PublishedFileDetails::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.app_name)
}
inline void PublishedFileDetails::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.app_name)
}
inline ::std::string* PublishedFileDetails::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.app_name)
  return app_name_;
}
inline ::std::string* PublishedFileDetails::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.app_name)
}

// optional uint32 file_type = 34;
inline bool PublishedFileDetails::has_file_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PublishedFileDetails::set_has_file_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PublishedFileDetails::clear_has_file_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PublishedFileDetails::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
inline ::google::protobuf::uint32 PublishedFileDetails::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_type)
  return file_type_;
}
inline void PublishedFileDetails::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_type)
}

// optional bool can_subscribe = 35;
inline bool PublishedFileDetails::has_can_subscribe() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PublishedFileDetails::set_has_can_subscribe() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PublishedFileDetails::clear_has_can_subscribe() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PublishedFileDetails::clear_can_subscribe() {
  can_subscribe_ = false;
  clear_has_can_subscribe();
}
inline bool PublishedFileDetails::can_subscribe() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_subscribe)
  return can_subscribe_;
}
inline void PublishedFileDetails::set_can_subscribe(bool value) {
  set_has_can_subscribe();
  can_subscribe_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_subscribe)
}

// optional uint32 subscriptions = 36;
inline bool PublishedFileDetails::has_subscriptions() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PublishedFileDetails::set_has_subscriptions() {
  _has_bits_[1] |= 0x00000008u;
}
inline void PublishedFileDetails::clear_has_subscriptions() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void PublishedFileDetails::clear_subscriptions() {
  subscriptions_ = 0u;
  clear_has_subscriptions();
}
inline ::google::protobuf::uint32 PublishedFileDetails::subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.subscriptions)
  return subscriptions_;
}
inline void PublishedFileDetails::set_subscriptions(::google::protobuf::uint32 value) {
  set_has_subscriptions();
  subscriptions_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.subscriptions)
}

// optional uint32 favorited = 37;
inline bool PublishedFileDetails::has_favorited() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PublishedFileDetails::set_has_favorited() {
  _has_bits_[1] |= 0x00000010u;
}
inline void PublishedFileDetails::clear_has_favorited() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void PublishedFileDetails::clear_favorited() {
  favorited_ = 0u;
  clear_has_favorited();
}
inline ::google::protobuf::uint32 PublishedFileDetails::favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.favorited)
  return favorited_;
}
inline void PublishedFileDetails::set_favorited(::google::protobuf::uint32 value) {
  set_has_favorited();
  favorited_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.favorited)
}

// optional uint32 followers = 38;
inline bool PublishedFileDetails::has_followers() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PublishedFileDetails::set_has_followers() {
  _has_bits_[1] |= 0x00000020u;
}
inline void PublishedFileDetails::clear_has_followers() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void PublishedFileDetails::clear_followers() {
  followers_ = 0u;
  clear_has_followers();
}
inline ::google::protobuf::uint32 PublishedFileDetails::followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.followers)
  return followers_;
}
inline void PublishedFileDetails::set_followers(::google::protobuf::uint32 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.followers)
}

// optional uint32 lifetime_subscriptions = 39;
inline bool PublishedFileDetails::has_lifetime_subscriptions() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PublishedFileDetails::set_has_lifetime_subscriptions() {
  _has_bits_[1] |= 0x00000040u;
}
inline void PublishedFileDetails::clear_has_lifetime_subscriptions() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void PublishedFileDetails::clear_lifetime_subscriptions() {
  lifetime_subscriptions_ = 0u;
  clear_has_lifetime_subscriptions();
}
inline ::google::protobuf::uint32 PublishedFileDetails::lifetime_subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_subscriptions)
  return lifetime_subscriptions_;
}
inline void PublishedFileDetails::set_lifetime_subscriptions(::google::protobuf::uint32 value) {
  set_has_lifetime_subscriptions();
  lifetime_subscriptions_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_subscriptions)
}

// optional uint32 lifetime_favorited = 40;
inline bool PublishedFileDetails::has_lifetime_favorited() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void PublishedFileDetails::set_has_lifetime_favorited() {
  _has_bits_[1] |= 0x00000080u;
}
inline void PublishedFileDetails::clear_has_lifetime_favorited() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void PublishedFileDetails::clear_lifetime_favorited() {
  lifetime_favorited_ = 0u;
  clear_has_lifetime_favorited();
}
inline ::google::protobuf::uint32 PublishedFileDetails::lifetime_favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_favorited)
  return lifetime_favorited_;
}
inline void PublishedFileDetails::set_lifetime_favorited(::google::protobuf::uint32 value) {
  set_has_lifetime_favorited();
  lifetime_favorited_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_favorited)
}

// optional uint32 lifetime_followers = 41;
inline bool PublishedFileDetails::has_lifetime_followers() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void PublishedFileDetails::set_has_lifetime_followers() {
  _has_bits_[1] |= 0x00000100u;
}
inline void PublishedFileDetails::clear_has_lifetime_followers() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void PublishedFileDetails::clear_lifetime_followers() {
  lifetime_followers_ = 0u;
  clear_has_lifetime_followers();
}
inline ::google::protobuf::uint32 PublishedFileDetails::lifetime_followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_followers)
  return lifetime_followers_;
}
inline void PublishedFileDetails::set_lifetime_followers(::google::protobuf::uint32 value) {
  set_has_lifetime_followers();
  lifetime_followers_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_followers)
}

// optional uint32 views = 42;
inline bool PublishedFileDetails::has_views() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void PublishedFileDetails::set_has_views() {
  _has_bits_[1] |= 0x00000200u;
}
inline void PublishedFileDetails::clear_has_views() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void PublishedFileDetails::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 PublishedFileDetails::views() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.views)
  return views_;
}
inline void PublishedFileDetails::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.views)
}

// optional uint32 image_width = 43;
inline bool PublishedFileDetails::has_image_width() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void PublishedFileDetails::set_has_image_width() {
  _has_bits_[1] |= 0x00000400u;
}
inline void PublishedFileDetails::clear_has_image_width() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void PublishedFileDetails::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
inline ::google::protobuf::uint32 PublishedFileDetails::image_width() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_width)
  return image_width_;
}
inline void PublishedFileDetails::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_width)
}

// optional uint32 image_height = 44;
inline bool PublishedFileDetails::has_image_height() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void PublishedFileDetails::set_has_image_height() {
  _has_bits_[1] |= 0x00000800u;
}
inline void PublishedFileDetails::clear_has_image_height() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void PublishedFileDetails::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
inline ::google::protobuf::uint32 PublishedFileDetails::image_height() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_height)
  return image_height_;
}
inline void PublishedFileDetails::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_height)
}

// optional string image_url = 45;
inline bool PublishedFileDetails::has_image_url() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void PublishedFileDetails::set_has_image_url() {
  _has_bits_[1] |= 0x00001000u;
}
inline void PublishedFileDetails::clear_has_image_url() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void PublishedFileDetails::clear_image_url() {
  if (image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_->clear();
  }
  clear_has_image_url();
}
inline const ::std::string& PublishedFileDetails::image_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_url)
  return *image_url_;
}
inline void PublishedFileDetails::set_image_url(const ::std::string& value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_url)
}
inline void PublishedFileDetails::set_image_url(const char* value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.image_url)
}
inline void PublishedFileDetails::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.image_url)
}
inline ::std::string* PublishedFileDetails::mutable_image_url() {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.image_url)
  return image_url_;
}
inline ::std::string* PublishedFileDetails::release_image_url() {
  clear_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_url_;
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_image_url(::std::string* image_url) {
  if (image_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_url_;
  }
  if (image_url) {
    set_has_image_url();
    image_url_ = image_url;
  } else {
    clear_has_image_url();
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.image_url)
}

// optional bool spoiler_tag = 46;
inline bool PublishedFileDetails::has_spoiler_tag() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void PublishedFileDetails::set_has_spoiler_tag() {
  _has_bits_[1] |= 0x00002000u;
}
inline void PublishedFileDetails::clear_has_spoiler_tag() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void PublishedFileDetails::clear_spoiler_tag() {
  spoiler_tag_ = false;
  clear_has_spoiler_tag();
}
inline bool PublishedFileDetails::spoiler_tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.spoiler_tag)
  return spoiler_tag_;
}
inline void PublishedFileDetails::set_spoiler_tag(bool value) {
  set_has_spoiler_tag();
  spoiler_tag_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.spoiler_tag)
}

// optional uint32 shortcutid = 47;
inline bool PublishedFileDetails::has_shortcutid() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void PublishedFileDetails::set_has_shortcutid() {
  _has_bits_[1] |= 0x00004000u;
}
inline void PublishedFileDetails::clear_has_shortcutid() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void PublishedFileDetails::clear_shortcutid() {
  shortcutid_ = 0u;
  clear_has_shortcutid();
}
inline ::google::protobuf::uint32 PublishedFileDetails::shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutid)
  return shortcutid_;
}
inline void PublishedFileDetails::set_shortcutid(::google::protobuf::uint32 value) {
  set_has_shortcutid();
  shortcutid_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutid)
}

// optional string shortcutname = 48;
inline bool PublishedFileDetails::has_shortcutname() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void PublishedFileDetails::set_has_shortcutname() {
  _has_bits_[1] |= 0x00008000u;
}
inline void PublishedFileDetails::clear_has_shortcutname() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void PublishedFileDetails::clear_shortcutname() {
  if (shortcutname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortcutname_->clear();
  }
  clear_has_shortcutname();
}
inline const ::std::string& PublishedFileDetails::shortcutname() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutname)
  return *shortcutname_;
}
inline void PublishedFileDetails::set_shortcutname(const ::std::string& value) {
  set_has_shortcutname();
  if (shortcutname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortcutname_ = new ::std::string;
  }
  shortcutname_->assign(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutname)
}
inline void PublishedFileDetails::set_shortcutname(const char* value) {
  set_has_shortcutname();
  if (shortcutname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortcutname_ = new ::std::string;
  }
  shortcutname_->assign(value);
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.shortcutname)
}
inline void PublishedFileDetails::set_shortcutname(const char* value, size_t size) {
  set_has_shortcutname();
  if (shortcutname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortcutname_ = new ::std::string;
  }
  shortcutname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.shortcutname)
}
inline ::std::string* PublishedFileDetails::mutable_shortcutname() {
  set_has_shortcutname();
  if (shortcutname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shortcutname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.shortcutname)
  return shortcutname_;
}
inline ::std::string* PublishedFileDetails::release_shortcutname() {
  clear_has_shortcutname();
  if (shortcutname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shortcutname_;
    shortcutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PublishedFileDetails::set_allocated_shortcutname(::std::string* shortcutname) {
  if (shortcutname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shortcutname_;
  }
  if (shortcutname) {
    set_has_shortcutname();
    shortcutname_ = shortcutname;
  } else {
    clear_has_shortcutname();
    shortcutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.shortcutname)
}

// optional uint32 num_children = 49;
inline bool PublishedFileDetails::has_num_children() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void PublishedFileDetails::set_has_num_children() {
  _has_bits_[1] |= 0x00010000u;
}
inline void PublishedFileDetails::clear_has_num_children() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void PublishedFileDetails::clear_num_children() {
  num_children_ = 0u;
  clear_has_num_children();
}
inline ::google::protobuf::uint32 PublishedFileDetails::num_children() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_children)
  return num_children_;
}
inline void PublishedFileDetails::set_num_children(::google::protobuf::uint32 value) {
  set_has_num_children();
  num_children_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_children)
}

// optional uint32 num_reports = 50;
inline bool PublishedFileDetails::has_num_reports() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void PublishedFileDetails::set_has_num_reports() {
  _has_bits_[1] |= 0x00020000u;
}
inline void PublishedFileDetails::clear_has_num_reports() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void PublishedFileDetails::clear_num_reports() {
  num_reports_ = 0u;
  clear_has_num_reports();
}
inline ::google::protobuf::uint32 PublishedFileDetails::num_reports() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_reports)
  return num_reports_;
}
inline void PublishedFileDetails::set_num_reports(::google::protobuf::uint32 value) {
  set_has_num_reports();
  num_reports_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_reports)
}

// repeated .PublishedFileDetails.Preview previews = 51;
inline int PublishedFileDetails::previews_size() const {
  return previews_.size();
}
inline void PublishedFileDetails::clear_previews() {
  previews_.Clear();
}
inline const ::PublishedFileDetails_Preview& PublishedFileDetails::previews(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.previews)
  return previews_.Get(index);
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.previews)
  return previews_.Mutable(index);
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::add_previews() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.previews)
  return previews_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Preview >&
PublishedFileDetails::previews() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.previews)
  return previews_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Preview >*
PublishedFileDetails::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.previews)
  return &previews_;
}

// repeated .PublishedFileDetails.Tag tags = 52;
inline int PublishedFileDetails::tags_size() const {
  return tags_.size();
}
inline void PublishedFileDetails::clear_tags() {
  tags_.Clear();
}
inline const ::PublishedFileDetails_Tag& PublishedFileDetails::tags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.tags)
  return tags_.Get(index);
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.tags)
  return tags_.Mutable(index);
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::add_tags() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Tag >&
PublishedFileDetails::tags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Tag >*
PublishedFileDetails::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.tags)
  return &tags_;
}

// repeated .PublishedFileDetails.Child children = 53;
inline int PublishedFileDetails::children_size() const {
  return children_.size();
}
inline void PublishedFileDetails::clear_children() {
  children_.Clear();
}
inline const ::PublishedFileDetails_Child& PublishedFileDetails::children(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.children)
  return children_.Get(index);
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.children)
  return children_.Mutable(index);
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::add_children() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Child >&
PublishedFileDetails::children() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.children)
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_Child >*
PublishedFileDetails::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.children)
  return &children_;
}

// repeated .PublishedFileDetails.KVTag kvtags = 54;
inline int PublishedFileDetails::kvtags_size() const {
  return kvtags_.size();
}
inline void PublishedFileDetails::clear_kvtags() {
  kvtags_.Clear();
}
inline const ::PublishedFileDetails_KVTag& PublishedFileDetails::kvtags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.kvtags)
  return kvtags_.Get(index);
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::mutable_kvtags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.kvtags)
  return kvtags_.Mutable(index);
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::add_kvtags() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.kvtags)
  return kvtags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
PublishedFileDetails::kvtags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.kvtags)
  return kvtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
PublishedFileDetails::mutable_kvtags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.kvtags)
  return &kvtags_;
}

// optional .PublishedFileDetails.VoteData vote_data = 55;
inline bool PublishedFileDetails::has_vote_data() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void PublishedFileDetails::set_has_vote_data() {
  _has_bits_[1] |= 0x00400000u;
}
inline void PublishedFileDetails::clear_has_vote_data() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void PublishedFileDetails::clear_vote_data() {
  if (vote_data_ != NULL) vote_data_->::PublishedFileDetails_VoteData::Clear();
  clear_has_vote_data();
}
inline const ::PublishedFileDetails_VoteData& PublishedFileDetails::vote_data() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.vote_data)
  return vote_data_ != NULL ? *vote_data_ : *default_instance_->vote_data_;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::mutable_vote_data() {
  set_has_vote_data();
  if (vote_data_ == NULL) vote_data_ = new ::PublishedFileDetails_VoteData;
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.vote_data)
  return vote_data_;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::release_vote_data() {
  clear_has_vote_data();
  ::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = NULL;
  return temp;
}
inline void PublishedFileDetails::set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data) {
  delete vote_data_;
  vote_data_ = vote_data;
  if (vote_data) {
    set_has_vote_data();
  } else {
    clear_has_vote_data();
  }
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.vote_data)
}

// optional uint32 time_subscribed = 56;
inline bool PublishedFileDetails::has_time_subscribed() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void PublishedFileDetails::set_has_time_subscribed() {
  _has_bits_[1] |= 0x00800000u;
}
inline void PublishedFileDetails::clear_has_time_subscribed() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void PublishedFileDetails::clear_time_subscribed() {
  time_subscribed_ = 0u;
  clear_has_time_subscribed();
}
inline ::google::protobuf::uint32 PublishedFileDetails::time_subscribed() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_subscribed)
  return time_subscribed_;
}
inline void PublishedFileDetails::set_time_subscribed(::google::protobuf::uint32 value) {
  set_has_time_subscribed();
  time_subscribed_ = value;
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_subscribed)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Response

// repeated .PublishedFileDetails publishedfiledetails = 1;
inline int CPublishedFile_GetDetails_Response::publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline void CPublishedFile_GetDetails_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline const ::PublishedFileDetails& CPublishedFile_GetDetails_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Get(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetDetails_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetDetails_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return &publishedfiledetails_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_GetUserFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.appid)
  return appid_;
}
inline void CPublishedFile_GetUserFiles_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.appid)
}

// optional uint32 page = 3 [default = 1];
inline bool CPublishedFile_GetUserFiles_Request::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_page() {
  page_ = 1u;
  clear_has_page();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.page)
  return page_;
}
inline void CPublishedFile_GetUserFiles_Request::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.page)
}

// optional uint32 numperpage = 4 [default = 1];
inline bool CPublishedFile_GetUserFiles_Request::has_numperpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_numperpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_numperpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  clear_has_numperpage();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.numperpage)
  return numperpage_;
}
inline void CPublishedFile_GetUserFiles_Request::set_numperpage(::google::protobuf::uint32 value) {
  set_has_numperpage();
  numperpage_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.numperpage)
}

// optional string sortmethod = 6 [default = "lastupdated"];
inline bool CPublishedFile_GetUserFiles_Request::has_sortmethod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_sortmethod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_sortmethod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_sortmethod() {
  if (sortmethod_ != _default_sortmethod_) {
    sortmethod_->assign(*_default_sortmethod_);
  }
  clear_has_sortmethod();
}
inline const ::std::string& CPublishedFile_GetUserFiles_Request::sortmethod() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.sortmethod)
  return *sortmethod_;
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const ::std::string& value) {
  set_has_sortmethod();
  if (sortmethod_ == _default_sortmethod_) {
    sortmethod_ = new ::std::string;
  }
  sortmethod_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value) {
  set_has_sortmethod();
  if (sortmethod_ == _default_sortmethod_) {
    sortmethod_ = new ::std::string;
  }
  sortmethod_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value, size_t size) {
  set_has_sortmethod();
  if (sortmethod_ == _default_sortmethod_) {
    sortmethod_ = new ::std::string;
  }
  sortmethod_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::mutable_sortmethod() {
  set_has_sortmethod();
  if (sortmethod_ == _default_sortmethod_) {
    sortmethod_ = new ::std::string(*_default_sortmethod_);
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.sortmethod)
  return sortmethod_;
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::release_sortmethod() {
  clear_has_sortmethod();
  if (sortmethod_ == _default_sortmethod_) {
    return NULL;
  } else {
    ::std::string* temp = sortmethod_;
    sortmethod_ = const_cast< ::std::string*>(_default_sortmethod_);
    return temp;
  }
}
inline void CPublishedFile_GetUserFiles_Request::set_allocated_sortmethod(::std::string* sortmethod) {
  if (sortmethod_ != _default_sortmethod_) {
    delete sortmethod_;
  }
  if (sortmethod) {
    set_has_sortmethod();
    sortmethod_ = sortmethod;
  } else {
    clear_has_sortmethod();
    sortmethod_ = const_cast< ::std::string*>(_default_sortmethod_);
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.sortmethod)
}

// optional bool totalonly = 7;
inline bool CPublishedFile_GetUserFiles_Request::has_totalonly() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_totalonly() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_totalonly() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_totalonly() {
  totalonly_ = false;
  clear_has_totalonly();
}
inline bool CPublishedFile_GetUserFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.totalonly)
  return totalonly_;
}
inline void CPublishedFile_GetUserFiles_Request::set_totalonly(bool value) {
  set_has_totalonly();
  totalonly_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.totalonly)
}

// optional uint32 privacy = 9;
inline bool CPublishedFile_GetUserFiles_Request::has_privacy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_privacy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_privacy() {
  privacy_ = 0u;
  clear_has_privacy();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::privacy() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.privacy)
  return privacy_;
}
inline void CPublishedFile_GetUserFiles_Request::set_privacy(::google::protobuf::uint32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.privacy)
}

// optional bool ids_only = 10;
inline bool CPublishedFile_GetUserFiles_Request::has_ids_only() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPublishedFile_GetUserFiles_Request::set_has_ids_only() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_has_ids_only() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPublishedFile_GetUserFiles_Request::clear_ids_only() {
  ids_only_ = false;
  clear_has_ids_only();
}
inline bool CPublishedFile_GetUserFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.ids_only)
  return ids_only_;
}
inline void CPublishedFile_GetUserFiles_Request::set_ids_only(bool value) {
  set_has_ids_only();
  ids_only_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.ids_only)
}

// repeated string requiredtags = 11;
inline int CPublishedFile_GetUserFiles_Request::requiredtags_size() const {
  return requiredtags_.size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
inline const ::std::string& CPublishedFile_GetUserFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Get(index);
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value) {
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::add_requiredtags() {
  return requiredtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const ::std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_GetUserFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_GetUserFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 12;
inline int CPublishedFile_GetUserFiles_Request::excludedtags_size() const {
  return excludedtags_.size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
inline const ::std::string& CPublishedFile_GetUserFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Get(index);
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value) {
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline ::std::string* CPublishedFile_GetUserFiles_Request::add_excludedtags() {
  return excludedtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const ::std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_GetUserFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_GetUserFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return &excludedtags_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response_App

// optional uint32 appid = 1;
inline bool CPublishedFile_GetUserFiles_Response_App::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response_App::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.appid)
  return appid_;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.appid)
}

// optional string name = 2;
inline bool CPublishedFile_GetUserFiles_Response_App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CPublishedFile_GetUserFiles_Response_App::name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.name)
  return *name_;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.name)
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Response.App.name)
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Response.App.name)
}
inline ::std::string* CPublishedFile_GetUserFiles_Response_App::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.App.name)
  return name_;
}
inline ::std::string* CPublishedFile_GetUserFiles_Response_App::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_GetUserFiles_Response_App::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Response.App.name)
}

// optional uint32 shortcutid = 3;
inline bool CPublishedFile_GetUserFiles_Response_App::has_shortcutid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_has_shortcutid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_has_shortcutid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_shortcutid() {
  shortcutid_ = 0u;
  clear_has_shortcutid();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response_App::shortcutid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.shortcutid)
  return shortcutid_;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_shortcutid(::google::protobuf::uint32 value) {
  set_has_shortcutid();
  shortcutid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.shortcutid)
}

// optional bool private = 4;
inline bool CPublishedFile_GetUserFiles_Response_App::has_private_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_has_private_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_has_private_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_private_() {
  private__ = false;
  clear_has_private_();
}
inline bool CPublishedFile_GetUserFiles_Response_App::private_() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.private)
  return private__;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.private)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response

// optional uint32 total = 1;
inline bool CPublishedFile_GetUserFiles_Response::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_GetUserFiles_Response::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.total)
  return total_;
}
inline void CPublishedFile_GetUserFiles_Response::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.total)
}

// optional uint32 startindex = 2;
inline bool CPublishedFile_GetUserFiles_Response::has_startindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_GetUserFiles_Response::set_has_startindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Response::clear_has_startindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_GetUserFiles_Response::clear_startindex() {
  startindex_ = 0u;
  clear_has_startindex();
}
inline ::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response::startindex() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.startindex)
  return startindex_;
}
inline void CPublishedFile_GetUserFiles_Response::set_startindex(::google::protobuf::uint32 value) {
  set_has_startindex();
  startindex_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.startindex)
}

// repeated .PublishedFileDetails publishedfiledetails = 3;
inline int CPublishedFile_GetUserFiles_Response::publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline const ::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Get(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetUserFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}
inline ::google::protobuf::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}

// repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
inline int CPublishedFile_GetUserFiles_Response::apps_size() const {
  return apps_.size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_apps() {
  apps_.Clear();
}
inline const ::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Get(index);
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Mutable(index);
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::add_apps() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
CPublishedFile_GetUserFiles_Response::apps() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.apps)
  return apps_;
}
inline ::google::protobuf::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
CPublishedFile_GetUserFiles_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.apps)
  return &apps_;
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_Update_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_Update_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_Update_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_Update_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.appid)
  return appid_;
}
inline void CPublishedFile_Update_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.appid)
}

// optional fixed64 publishedfileid = 2;
inline bool CPublishedFile_Update_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_Update_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_Update_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPublishedFile_Update_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.publishedfileid)
  return publishedfileid_;
}
inline void CPublishedFile_Update_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.publishedfileid)
}

// optional string title = 3;
inline bool CPublishedFile_Update_Request::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPublishedFile_Update_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPublishedFile_Update_Request::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CPublishedFile_Update_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.title)
  return *title_;
}
inline void CPublishedFile_Update_Request::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.title)
}
inline void CPublishedFile_Update_Request::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.title)
}
inline void CPublishedFile_Update_Request::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.title)
}
inline ::std::string* CPublishedFile_Update_Request::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.title)
  return title_;
}
inline ::std::string* CPublishedFile_Update_Request::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Update_Request::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.title)
}

// optional string file_description = 4;
inline bool CPublishedFile_Update_Request::has_file_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_file_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_Update_Request::clear_has_file_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_Update_Request::clear_file_description() {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_->clear();
  }
  clear_has_file_description();
}
inline const ::std::string& CPublishedFile_Update_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.file_description)
  return *file_description_;
}
inline void CPublishedFile_Update_Request::set_file_description(const ::std::string& value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.file_description)
}
inline void CPublishedFile_Update_Request::set_file_description(const char* value) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.file_description)
}
inline void CPublishedFile_Update_Request::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  file_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.file_description)
}
inline ::std::string* CPublishedFile_Update_Request::mutable_file_description() {
  set_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.file_description)
  return file_description_;
}
inline ::std::string* CPublishedFile_Update_Request::release_file_description() {
  clear_has_file_description();
  if (file_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_description_;
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Update_Request::set_allocated_file_description(::std::string* file_description) {
  if (file_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_description_;
  }
  if (file_description) {
    set_has_file_description();
    file_description_ = file_description;
  } else {
    clear_has_file_description();
    file_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.file_description)
}

// optional uint32 visibility = 5;
inline bool CPublishedFile_Update_Request::has_visibility() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_visibility() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPublishedFile_Update_Request::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPublishedFile_Update_Request::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
inline ::google::protobuf::uint32 CPublishedFile_Update_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.visibility)
  return visibility_;
}
inline void CPublishedFile_Update_Request::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.visibility)
}

// repeated string tags = 6;
inline int CPublishedFile_Update_Request::tags_size() const {
  return tags_.size();
}
inline void CPublishedFile_Update_Request::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CPublishedFile_Update_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.tags)
  return tags_.Get(index);
}
inline ::std::string* CPublishedFile_Update_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Update_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.tags)
}
inline ::std::string* CPublishedFile_Update_Request::add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Update_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Update_Request.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_Update_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Update_Request.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_Update_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Update_Request.tags)
  return &tags_;
}

// optional string filename = 7;
inline bool CPublishedFile_Update_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPublishedFile_Update_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPublishedFile_Update_Request::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& CPublishedFile_Update_Request::filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.filename)
  return *filename_;
}
inline void CPublishedFile_Update_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.filename)
}
inline void CPublishedFile_Update_Request::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.filename)
}
inline void CPublishedFile_Update_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.filename)
}
inline ::std::string* CPublishedFile_Update_Request::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.filename)
  return filename_;
}
inline ::std::string* CPublishedFile_Update_Request::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Update_Request::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.filename)
}

// optional string preview_filename = 8;
inline bool CPublishedFile_Update_Request::has_preview_filename() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CPublishedFile_Update_Request::set_has_preview_filename() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CPublishedFile_Update_Request::clear_has_preview_filename() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CPublishedFile_Update_Request::clear_preview_filename() {
  if (preview_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_filename_->clear();
  }
  clear_has_preview_filename();
}
inline const ::std::string& CPublishedFile_Update_Request::preview_filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.preview_filename)
  return *preview_filename_;
}
inline void CPublishedFile_Update_Request::set_preview_filename(const ::std::string& value) {
  set_has_preview_filename();
  if (preview_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_filename_ = new ::std::string;
  }
  preview_filename_->assign(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.preview_filename)
}
inline void CPublishedFile_Update_Request::set_preview_filename(const char* value) {
  set_has_preview_filename();
  if (preview_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_filename_ = new ::std::string;
  }
  preview_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.preview_filename)
}
inline void CPublishedFile_Update_Request::set_preview_filename(const char* value, size_t size) {
  set_has_preview_filename();
  if (preview_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_filename_ = new ::std::string;
  }
  preview_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.preview_filename)
}
inline ::std::string* CPublishedFile_Update_Request::mutable_preview_filename() {
  set_has_preview_filename();
  if (preview_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preview_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.preview_filename)
  return preview_filename_;
}
inline ::std::string* CPublishedFile_Update_Request::release_preview_filename() {
  clear_has_preview_filename();
  if (preview_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preview_filename_;
    preview_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CPublishedFile_Update_Request::set_allocated_preview_filename(::std::string* preview_filename) {
  if (preview_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preview_filename_;
  }
  if (preview_filename) {
    set_has_preview_filename();
    preview_filename_ = preview_filename;
  } else {
    clear_has_preview_filename();
    preview_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.preview_filename)
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Response

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_RefreshVotingQueue_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.appid)
  return appid_;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.appid)
}

// optional uint32 matching_file_type = 2;
inline bool CPublishedFile_RefreshVotingQueue_Request::has_matching_file_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_has_matching_file_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_has_matching_file_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_matching_file_type() {
  matching_file_type_ = 0u;
  clear_has_matching_file_type();
}
inline ::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::matching_file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
  return matching_file_type_;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_matching_file_type(::google::protobuf::uint32 value) {
  set_has_matching_file_type();
  matching_file_type_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
}

// repeated string tags = 3;
inline int CPublishedFile_RefreshVotingQueue_Request::tags_size() const {
  return tags_.size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CPublishedFile_RefreshVotingQueue_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Get(index);
}
inline ::std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline ::std::string* CPublishedFile_RefreshVotingQueue_Request::add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_RefreshVotingQueue_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return &tags_;
}

// optional bool match_all_tags = 4 [default = true];
inline bool CPublishedFile_RefreshVotingQueue_Request::has_match_all_tags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_has_match_all_tags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_has_match_all_tags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  clear_has_match_all_tags();
}
inline bool CPublishedFile_RefreshVotingQueue_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
  return match_all_tags_;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_match_all_tags(bool value) {
  set_has_match_all_tags();
  match_all_tags_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
}

// repeated string excluded_tags = 5;
inline int CPublishedFile_RefreshVotingQueue_Request::excluded_tags_size() const {
  return excluded_tags_.size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_excluded_tags() {
  excluded_tags_.Clear();
}
inline const ::std::string& CPublishedFile_RefreshVotingQueue_Request::excluded_tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Get(index);
}
inline ::std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  excluded_tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value) {
  excluded_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value, size_t size) {
  excluded_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline ::std::string* CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags() {
  return excluded_tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const ::std::string& value) {
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value) {
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value, size_t size) {
  excluded_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_RefreshVotingQueue_Request::excluded_tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return &excluded_tags_;
}

// optional uint32 desired_queue_size = 6;
inline bool CPublishedFile_RefreshVotingQueue_Request::has_desired_queue_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_has_desired_queue_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_has_desired_queue_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_desired_queue_size() {
  desired_queue_size_ = 0u;
  clear_has_desired_queue_size();
}
inline ::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::desired_queue_size() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
  return desired_queue_size_;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_desired_queue_size(::google::protobuf::uint32 value) {
  set_has_desired_queue_size();
  desired_queue_size_ = value;
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
}

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Response


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fpublishedfile_2esteamworkssdk_2eproto__INCLUDED
