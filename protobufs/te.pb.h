// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: te.proto

#ifndef PROTOBUF_te_2eproto__INCLUDED
#define PROTOBUF_te_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_te_2eproto();
void protobuf_AssignDesc_te_2eproto();
void protobuf_ShutdownFile_te_2eproto();

class CMsgEffectData;
class CMsgTEArmorRicochet;
class CMsgTEBSPDecal;
class CMsgTEBaseBeam;
class CMsgTEBeamEntPoint;
class CMsgTEBeamEnts;
class CMsgTEBeamPoints;
class CMsgTEBeamRing;
class CMsgTEBloodStream;
class CMsgTEBreakModel;
class CMsgTEBubbleTrail;
class CMsgTEBubbles;
class CMsgTEDecal;
class CMsgTEDust;
class CMsgTEEffectDispatch;
class CMsgTEEnergySplash;
class CMsgTEExplosion;
class CMsgTEFizz;
class CMsgTEGlowSprite;
class CMsgTEImpact;
class CMsgTELargeFunnel;
class CMsgTEMuzzleFlash;
class CMsgTEPhysicsProp;
class CMsgTEPlayerDecal;
class CMsgTEProjectedDecal;
class CMsgTEShatterSurface;
class CMsgTESmoke;
class CMsgTESparks;
class CMsgTEWorldDecal;

enum ETEProtobufIds {
  TE_EffectDispatchId = 400,
  TE_ArmorRicochetId = 401,
  TE_BeamEntPointId = 402,
  TE_BeamEntsId = 403,
  TE_BeamPointsId = 404,
  TE_BeamRingId = 405,
  TE_BreakModelId = 406,
  TE_BSPDecalId = 407,
  TE_BubblesId = 408,
  TE_BubbleTrailId = 409,
  TE_DecalId = 410,
  TE_WorldDecalId = 411,
  TE_EnergySplashId = 412,
  TE_FizzId = 413,
  TE_ShatterSurfaceId = 414,
  TE_GlowSpriteId = 415,
  TE_ImpactId = 416,
  TE_MuzzleFlashId = 417,
  TE_BloodStreamId = 418,
  TE_ExplosionId = 419,
  TE_DustId = 420,
  TE_LargeFunnelId = 421,
  TE_SparksId = 422,
  TE_PhysicsPropId = 423,
  TE_PlayerDecalId = 424,
  TE_ProjectedDecalId = 425,
  TE_SmokeId = 426
};
bool ETEProtobufIds_IsValid(int value);
const ETEProtobufIds ETEProtobufIds_MIN = TE_EffectDispatchId;
const ETEProtobufIds ETEProtobufIds_MAX = TE_SmokeId;
const int ETEProtobufIds_ARRAYSIZE = ETEProtobufIds_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETEProtobufIds_descriptor();
inline const ::std::string& ETEProtobufIds_Name(ETEProtobufIds value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETEProtobufIds_descriptor(), value);
}
inline bool ETEProtobufIds_Parse(
    const ::std::string& name, ETEProtobufIds* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETEProtobufIds>(
    ETEProtobufIds_descriptor(), name, value);
}
// ===================================================================

class CMsgTEArmorRicochet : public ::google::protobuf::Message {
 public:
  CMsgTEArmorRicochet();
  virtual ~CMsgTEArmorRicochet();

  CMsgTEArmorRicochet(const CMsgTEArmorRicochet& from);

  inline CMsgTEArmorRicochet& operator=(const CMsgTEArmorRicochet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEArmorRicochet& default_instance();

  void Swap(CMsgTEArmorRicochet* other);

  // implements Message ----------------------------------------------

  inline CMsgTEArmorRicochet* New() const { return New(NULL); }

  CMsgTEArmorRicochet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEArmorRicochet& from);
  void MergeFrom(const CMsgTEArmorRicochet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEArmorRicochet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::CMsgVector& pos() const;
  ::CMsgVector* mutable_pos();
  ::CMsgVector* release_pos();
  void set_allocated_pos(::CMsgVector* pos);

  // optional .CMsgVector dir = 2;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 2;
  const ::CMsgVector& dir() const;
  ::CMsgVector* mutable_dir();
  ::CMsgVector* release_dir();
  void set_allocated_dir(::CMsgVector* dir);

  // @@protoc_insertion_point(class_scope:CMsgTEArmorRicochet)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* pos_;
  ::CMsgVector* dir_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEArmorRicochet* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBaseBeam : public ::google::protobuf::Message {
 public:
  CMsgTEBaseBeam();
  virtual ~CMsgTEBaseBeam();

  CMsgTEBaseBeam(const CMsgTEBaseBeam& from);

  inline CMsgTEBaseBeam& operator=(const CMsgTEBaseBeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBaseBeam& default_instance();

  void Swap(CMsgTEBaseBeam* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBaseBeam* New() const { return New(NULL); }

  CMsgTEBaseBeam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBaseBeam& from);
  void MergeFrom(const CMsgTEBaseBeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBaseBeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 modelindex = 1;
  bool has_modelindex() const;
  void clear_modelindex();
  static const int kModelindexFieldNumber = 1;
  ::google::protobuf::uint64 modelindex() const;
  void set_modelindex(::google::protobuf::uint64 value);

  // optional fixed64 haloindex = 2;
  bool has_haloindex() const;
  void clear_haloindex();
  static const int kHaloindexFieldNumber = 2;
  ::google::protobuf::uint64 haloindex() const;
  void set_haloindex(::google::protobuf::uint64 value);

  // optional uint32 startframe = 3;
  bool has_startframe() const;
  void clear_startframe();
  static const int kStartframeFieldNumber = 3;
  ::google::protobuf::uint32 startframe() const;
  void set_startframe(::google::protobuf::uint32 value);

  // optional uint32 framerate = 4;
  bool has_framerate() const;
  void clear_framerate();
  static const int kFramerateFieldNumber = 4;
  ::google::protobuf::uint32 framerate() const;
  void set_framerate(::google::protobuf::uint32 value);

  // optional float life = 5;
  bool has_life() const;
  void clear_life();
  static const int kLifeFieldNumber = 5;
  float life() const;
  void set_life(float value);

  // optional float width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  float width() const;
  void set_width(float value);

  // optional float endwidth = 7;
  bool has_endwidth() const;
  void clear_endwidth();
  static const int kEndwidthFieldNumber = 7;
  float endwidth() const;
  void set_endwidth(float value);

  // optional uint32 fadelength = 8;
  bool has_fadelength() const;
  void clear_fadelength();
  static const int kFadelengthFieldNumber = 8;
  ::google::protobuf::uint32 fadelength() const;
  void set_fadelength(::google::protobuf::uint32 value);

  // optional float amplitude = 9;
  bool has_amplitude() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 9;
  float amplitude() const;
  void set_amplitude(float value);

  // optional fixed32 color = 10;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 10;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // optional uint32 speed = 11;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 11;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // optional uint32 flags = 12;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 12;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBaseBeam)
 private:
  inline void set_has_modelindex();
  inline void clear_has_modelindex();
  inline void set_has_haloindex();
  inline void clear_has_haloindex();
  inline void set_has_startframe();
  inline void clear_has_startframe();
  inline void set_has_framerate();
  inline void clear_has_framerate();
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_endwidth();
  inline void clear_has_endwidth();
  inline void set_has_fadelength();
  inline void clear_has_fadelength();
  inline void set_has_amplitude();
  inline void clear_has_amplitude();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 modelindex_;
  ::google::protobuf::uint64 haloindex_;
  ::google::protobuf::uint32 startframe_;
  ::google::protobuf::uint32 framerate_;
  float life_;
  float width_;
  float endwidth_;
  ::google::protobuf::uint32 fadelength_;
  float amplitude_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBaseBeam* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBeamEntPoint : public ::google::protobuf::Message {
 public:
  CMsgTEBeamEntPoint();
  virtual ~CMsgTEBeamEntPoint();

  CMsgTEBeamEntPoint(const CMsgTEBeamEntPoint& from);

  inline CMsgTEBeamEntPoint& operator=(const CMsgTEBeamEntPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBeamEntPoint& default_instance();

  void Swap(CMsgTEBeamEntPoint* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBeamEntPoint* New() const { return New(NULL); }

  CMsgTEBeamEntPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBeamEntPoint& from);
  void MergeFrom(const CMsgTEBeamEntPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBeamEntPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgTEBaseBeam base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::CMsgTEBaseBeam& base() const;
  ::CMsgTEBaseBeam* mutable_base();
  ::CMsgTEBaseBeam* release_base();
  void set_allocated_base(::CMsgTEBaseBeam* base);

  // optional uint32 startentity = 2;
  bool has_startentity() const;
  void clear_startentity();
  static const int kStartentityFieldNumber = 2;
  ::google::protobuf::uint32 startentity() const;
  void set_startentity(::google::protobuf::uint32 value);

  // optional uint32 endentity = 3;
  bool has_endentity() const;
  void clear_endentity();
  static const int kEndentityFieldNumber = 3;
  ::google::protobuf::uint32 endentity() const;
  void set_endentity(::google::protobuf::uint32 value);

  // optional .CMsgVector start = 4;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 4;
  const ::CMsgVector& start() const;
  ::CMsgVector* mutable_start();
  ::CMsgVector* release_start();
  void set_allocated_start(::CMsgVector* start);

  // optional .CMsgVector end = 5;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 5;
  const ::CMsgVector& end() const;
  ::CMsgVector* mutable_end();
  ::CMsgVector* release_end();
  void set_allocated_end(::CMsgVector* end);

  // @@protoc_insertion_point(class_scope:CMsgTEBeamEntPoint)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_startentity();
  inline void clear_has_startentity();
  inline void set_has_endentity();
  inline void clear_has_endentity();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgTEBaseBeam* base_;
  ::google::protobuf::uint32 startentity_;
  ::google::protobuf::uint32 endentity_;
  ::CMsgVector* start_;
  ::CMsgVector* end_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBeamEntPoint* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBeamEnts : public ::google::protobuf::Message {
 public:
  CMsgTEBeamEnts();
  virtual ~CMsgTEBeamEnts();

  CMsgTEBeamEnts(const CMsgTEBeamEnts& from);

  inline CMsgTEBeamEnts& operator=(const CMsgTEBeamEnts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBeamEnts& default_instance();

  void Swap(CMsgTEBeamEnts* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBeamEnts* New() const { return New(NULL); }

  CMsgTEBeamEnts* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBeamEnts& from);
  void MergeFrom(const CMsgTEBeamEnts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBeamEnts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgTEBaseBeam base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::CMsgTEBaseBeam& base() const;
  ::CMsgTEBaseBeam* mutable_base();
  ::CMsgTEBaseBeam* release_base();
  void set_allocated_base(::CMsgTEBaseBeam* base);

  // optional uint32 startentity = 2;
  bool has_startentity() const;
  void clear_startentity();
  static const int kStartentityFieldNumber = 2;
  ::google::protobuf::uint32 startentity() const;
  void set_startentity(::google::protobuf::uint32 value);

  // optional uint32 endentity = 3;
  bool has_endentity() const;
  void clear_endentity();
  static const int kEndentityFieldNumber = 3;
  ::google::protobuf::uint32 endentity() const;
  void set_endentity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBeamEnts)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_startentity();
  inline void clear_has_startentity();
  inline void set_has_endentity();
  inline void clear_has_endentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgTEBaseBeam* base_;
  ::google::protobuf::uint32 startentity_;
  ::google::protobuf::uint32 endentity_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBeamEnts* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBeamPoints : public ::google::protobuf::Message {
 public:
  CMsgTEBeamPoints();
  virtual ~CMsgTEBeamPoints();

  CMsgTEBeamPoints(const CMsgTEBeamPoints& from);

  inline CMsgTEBeamPoints& operator=(const CMsgTEBeamPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBeamPoints& default_instance();

  void Swap(CMsgTEBeamPoints* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBeamPoints* New() const { return New(NULL); }

  CMsgTEBeamPoints* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBeamPoints& from);
  void MergeFrom(const CMsgTEBeamPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBeamPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgTEBaseBeam base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::CMsgTEBaseBeam& base() const;
  ::CMsgTEBaseBeam* mutable_base();
  ::CMsgTEBaseBeam* release_base();
  void set_allocated_base(::CMsgTEBaseBeam* base);

  // optional .CMsgVector start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::CMsgVector& start() const;
  ::CMsgVector* mutable_start();
  ::CMsgVector* release_start();
  void set_allocated_start(::CMsgVector* start);

  // optional .CMsgVector end = 3;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 3;
  const ::CMsgVector& end() const;
  ::CMsgVector* mutable_end();
  ::CMsgVector* release_end();
  void set_allocated_end(::CMsgVector* end);

  // @@protoc_insertion_point(class_scope:CMsgTEBeamPoints)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgTEBaseBeam* base_;
  ::CMsgVector* start_;
  ::CMsgVector* end_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBeamPoints* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBeamRing : public ::google::protobuf::Message {
 public:
  CMsgTEBeamRing();
  virtual ~CMsgTEBeamRing();

  CMsgTEBeamRing(const CMsgTEBeamRing& from);

  inline CMsgTEBeamRing& operator=(const CMsgTEBeamRing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBeamRing& default_instance();

  void Swap(CMsgTEBeamRing* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBeamRing* New() const { return New(NULL); }

  CMsgTEBeamRing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBeamRing& from);
  void MergeFrom(const CMsgTEBeamRing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBeamRing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgTEBaseBeam base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::CMsgTEBaseBeam& base() const;
  ::CMsgTEBaseBeam* mutable_base();
  ::CMsgTEBaseBeam* release_base();
  void set_allocated_base(::CMsgTEBaseBeam* base);

  // optional uint32 startentity = 2;
  bool has_startentity() const;
  void clear_startentity();
  static const int kStartentityFieldNumber = 2;
  ::google::protobuf::uint32 startentity() const;
  void set_startentity(::google::protobuf::uint32 value);

  // optional uint32 endentity = 3;
  bool has_endentity() const;
  void clear_endentity();
  static const int kEndentityFieldNumber = 3;
  ::google::protobuf::uint32 endentity() const;
  void set_endentity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBeamRing)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_startentity();
  inline void clear_has_startentity();
  inline void set_has_endentity();
  inline void clear_has_endentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgTEBaseBeam* base_;
  ::google::protobuf::uint32 startentity_;
  ::google::protobuf::uint32 endentity_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBeamRing* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBreakModel : public ::google::protobuf::Message {
 public:
  CMsgTEBreakModel();
  virtual ~CMsgTEBreakModel();

  CMsgTEBreakModel(const CMsgTEBreakModel& from);

  inline CMsgTEBreakModel& operator=(const CMsgTEBreakModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBreakModel& default_instance();

  void Swap(CMsgTEBreakModel* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBreakModel* New() const { return New(NULL); }

  CMsgTEBreakModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBreakModel& from);
  void MergeFrom(const CMsgTEBreakModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBreakModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgQAngle angles = 2;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 2;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional .CMsgVector size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::CMsgVector& size() const;
  ::CMsgVector* mutable_size();
  ::CMsgVector* release_size();
  void set_allocated_size(::CMsgVector* size);

  // optional .CMsgVector velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::CMsgVector& velocity() const;
  ::CMsgVector* mutable_velocity();
  ::CMsgVector* release_velocity();
  void set_allocated_velocity(::CMsgVector* velocity);

  // optional uint32 randomization = 5;
  bool has_randomization() const;
  void clear_randomization();
  static const int kRandomizationFieldNumber = 5;
  ::google::protobuf::uint32 randomization() const;
  void set_randomization(::google::protobuf::uint32 value);

  // optional fixed64 modelindex = 6;
  bool has_modelindex() const;
  void clear_modelindex();
  static const int kModelindexFieldNumber = 6;
  ::google::protobuf::uint64 modelindex() const;
  void set_modelindex(::google::protobuf::uint64 value);

  // optional uint32 count = 7;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 7;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional float time = 8;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  float time() const;
  void set_time(float value);

  // optional uint32 flags = 9;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBreakModel)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_randomization();
  inline void clear_has_randomization();
  inline void set_has_modelindex();
  inline void clear_has_modelindex();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgQAngle* angles_;
  ::CMsgVector* size_;
  ::CMsgVector* velocity_;
  ::google::protobuf::uint64 modelindex_;
  ::google::protobuf::uint32 randomization_;
  ::google::protobuf::uint32 count_;
  float time_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBreakModel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBSPDecal : public ::google::protobuf::Message {
 public:
  CMsgTEBSPDecal();
  virtual ~CMsgTEBSPDecal();

  CMsgTEBSPDecal(const CMsgTEBSPDecal& from);

  inline CMsgTEBSPDecal& operator=(const CMsgTEBSPDecal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBSPDecal& default_instance();

  void Swap(CMsgTEBSPDecal* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBSPDecal* New() const { return New(NULL); }

  CMsgTEBSPDecal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBSPDecal& from);
  void MergeFrom(const CMsgTEBSPDecal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBSPDecal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional .CMsgVector saxis = 3;
  bool has_saxis() const;
  void clear_saxis();
  static const int kSaxisFieldNumber = 3;
  const ::CMsgVector& saxis() const;
  ::CMsgVector* mutable_saxis();
  ::CMsgVector* release_saxis();
  void set_allocated_saxis(::CMsgVector* saxis);

  // optional uint32 entity = 4;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 4;
  ::google::protobuf::uint32 entity() const;
  void set_entity(::google::protobuf::uint32 value);

  // optional uint32 index = 5;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBSPDecal)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_saxis();
  inline void clear_has_saxis();
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* normal_;
  ::CMsgVector* saxis_;
  ::google::protobuf::uint32 entity_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBSPDecal* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBubbles : public ::google::protobuf::Message {
 public:
  CMsgTEBubbles();
  virtual ~CMsgTEBubbles();

  CMsgTEBubbles(const CMsgTEBubbles& from);

  inline CMsgTEBubbles& operator=(const CMsgTEBubbles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBubbles& default_instance();

  void Swap(CMsgTEBubbles* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBubbles* New() const { return New(NULL); }

  CMsgTEBubbles* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBubbles& from);
  void MergeFrom(const CMsgTEBubbles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBubbles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector mins = 1;
  bool has_mins() const;
  void clear_mins();
  static const int kMinsFieldNumber = 1;
  const ::CMsgVector& mins() const;
  ::CMsgVector* mutable_mins();
  ::CMsgVector* release_mins();
  void set_allocated_mins(::CMsgVector* mins);

  // optional .CMsgVector maxs = 2;
  bool has_maxs() const;
  void clear_maxs();
  static const int kMaxsFieldNumber = 2;
  const ::CMsgVector& maxs() const;
  ::CMsgVector* mutable_maxs();
  ::CMsgVector* release_maxs();
  void set_allocated_maxs(::CMsgVector* maxs);

  // optional float height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional float speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:CMsgTEBubbles)
 private:
  inline void set_has_mins();
  inline void clear_has_mins();
  inline void set_has_maxs();
  inline void clear_has_maxs();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* mins_;
  ::CMsgVector* maxs_;
  float height_;
  ::google::protobuf::uint32 count_;
  float speed_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBubbles* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBubbleTrail : public ::google::protobuf::Message {
 public:
  CMsgTEBubbleTrail();
  virtual ~CMsgTEBubbleTrail();

  CMsgTEBubbleTrail(const CMsgTEBubbleTrail& from);

  inline CMsgTEBubbleTrail& operator=(const CMsgTEBubbleTrail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBubbleTrail& default_instance();

  void Swap(CMsgTEBubbleTrail* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBubbleTrail* New() const { return New(NULL); }

  CMsgTEBubbleTrail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBubbleTrail& from);
  void MergeFrom(const CMsgTEBubbleTrail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBubbleTrail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector mins = 1;
  bool has_mins() const;
  void clear_mins();
  static const int kMinsFieldNumber = 1;
  const ::CMsgVector& mins() const;
  ::CMsgVector* mutable_mins();
  ::CMsgVector* release_mins();
  void set_allocated_mins(::CMsgVector* mins);

  // optional .CMsgVector maxs = 2;
  bool has_maxs() const;
  void clear_maxs();
  static const int kMaxsFieldNumber = 2;
  const ::CMsgVector& maxs() const;
  ::CMsgVector* mutable_maxs();
  ::CMsgVector* release_maxs();
  void set_allocated_maxs(::CMsgVector* maxs);

  // optional float waterz = 3;
  bool has_waterz() const;
  void clear_waterz();
  static const int kWaterzFieldNumber = 3;
  float waterz() const;
  void set_waterz(float value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional float speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:CMsgTEBubbleTrail)
 private:
  inline void set_has_mins();
  inline void clear_has_mins();
  inline void set_has_maxs();
  inline void clear_has_maxs();
  inline void set_has_waterz();
  inline void clear_has_waterz();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* mins_;
  ::CMsgVector* maxs_;
  float waterz_;
  ::google::protobuf::uint32 count_;
  float speed_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBubbleTrail* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEDecal : public ::google::protobuf::Message {
 public:
  CMsgTEDecal();
  virtual ~CMsgTEDecal();

  CMsgTEDecal(const CMsgTEDecal& from);

  inline CMsgTEDecal& operator=(const CMsgTEDecal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEDecal& default_instance();

  void Swap(CMsgTEDecal* other);

  // implements Message ----------------------------------------------

  inline CMsgTEDecal* New() const { return New(NULL); }

  CMsgTEDecal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEDecal& from);
  void MergeFrom(const CMsgTEDecal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEDecal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::CMsgVector& start() const;
  ::CMsgVector* mutable_start();
  ::CMsgVector* release_start();
  void set_allocated_start(::CMsgVector* start);

  // optional uint32 entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  ::google::protobuf::uint32 entity() const;
  void set_entity(::google::protobuf::uint32 value);

  // optional uint32 hitbox = 4;
  bool has_hitbox() const;
  void clear_hitbox();
  static const int kHitboxFieldNumber = 4;
  ::google::protobuf::uint32 hitbox() const;
  void set_hitbox(::google::protobuf::uint32 value);

  // optional uint32 index = 5;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEDecal)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_hitbox();
  inline void clear_has_hitbox();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* start_;
  ::google::protobuf::uint32 entity_;
  ::google::protobuf::uint32 hitbox_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEDecal* default_instance_;
};
// -------------------------------------------------------------------

class CMsgEffectData : public ::google::protobuf::Message {
 public:
  CMsgEffectData();
  virtual ~CMsgEffectData();

  CMsgEffectData(const CMsgEffectData& from);

  inline CMsgEffectData& operator=(const CMsgEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgEffectData& default_instance();

  void Swap(CMsgEffectData* other);

  // implements Message ----------------------------------------------

  inline CMsgEffectData* New() const { return New(NULL); }

  CMsgEffectData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgEffectData& from);
  void MergeFrom(const CMsgEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgEffectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::CMsgVector& start() const;
  ::CMsgVector* mutable_start();
  ::CMsgVector* release_start();
  void set_allocated_start(::CMsgVector* start);

  // optional .CMsgVector normal = 3;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 3;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional .CMsgQAngle angles = 4;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 4;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional fixed32 entity = 5;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 5;
  ::google::protobuf::uint32 entity() const;
  void set_entity(::google::protobuf::uint32 value);

  // optional fixed32 otherentity = 6;
  bool has_otherentity() const;
  void clear_otherentity();
  static const int kOtherentityFieldNumber = 6;
  ::google::protobuf::uint32 otherentity() const;
  void set_otherentity(::google::protobuf::uint32 value);

  // optional float scale = 7;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 7;
  float scale() const;
  void set_scale(float value);

  // optional float magnitude = 8;
  bool has_magnitude() const;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 8;
  float magnitude() const;
  void set_magnitude(float value);

  // optional float radius = 9;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 9;
  float radius() const;
  void set_radius(float value);

  // optional fixed32 surfaceprop = 10;
  bool has_surfaceprop() const;
  void clear_surfaceprop();
  static const int kSurfacepropFieldNumber = 10;
  ::google::protobuf::uint32 surfaceprop() const;
  void set_surfaceprop(::google::protobuf::uint32 value);

  // optional fixed64 effectindex = 11;
  bool has_effectindex() const;
  void clear_effectindex();
  static const int kEffectindexFieldNumber = 11;
  ::google::protobuf::uint64 effectindex() const;
  void set_effectindex(::google::protobuf::uint64 value);

  // optional uint32 damagetype = 12;
  bool has_damagetype() const;
  void clear_damagetype();
  static const int kDamagetypeFieldNumber = 12;
  ::google::protobuf::uint32 damagetype() const;
  void set_damagetype(::google::protobuf::uint32 value);

  // optional uint32 material = 13;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 13;
  ::google::protobuf::uint32 material() const;
  void set_material(::google::protobuf::uint32 value);

  // optional uint32 hitbox = 14;
  bool has_hitbox() const;
  void clear_hitbox();
  static const int kHitboxFieldNumber = 14;
  ::google::protobuf::uint32 hitbox() const;
  void set_hitbox(::google::protobuf::uint32 value);

  // optional uint32 color = 15;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 15;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // optional uint32 flags = 16;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 16;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional int32 attachmentindex = 17;
  bool has_attachmentindex() const;
  void clear_attachmentindex();
  static const int kAttachmentindexFieldNumber = 17;
  ::google::protobuf::int32 attachmentindex() const;
  void set_attachmentindex(::google::protobuf::int32 value);

  // optional uint32 effectname = 18;
  bool has_effectname() const;
  void clear_effectname();
  static const int kEffectnameFieldNumber = 18;
  ::google::protobuf::uint32 effectname() const;
  void set_effectname(::google::protobuf::uint32 value);

  // optional uint32 attachmentname = 19;
  bool has_attachmentname() const;
  void clear_attachmentname();
  static const int kAttachmentnameFieldNumber = 19;
  ::google::protobuf::uint32 attachmentname() const;
  void set_attachmentname(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgEffectData)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_otherentity();
  inline void clear_has_otherentity();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_magnitude();
  inline void clear_has_magnitude();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_surfaceprop();
  inline void clear_has_surfaceprop();
  inline void set_has_effectindex();
  inline void clear_has_effectindex();
  inline void set_has_damagetype();
  inline void clear_has_damagetype();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_hitbox();
  inline void clear_has_hitbox();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_attachmentindex();
  inline void clear_has_attachmentindex();
  inline void set_has_effectname();
  inline void clear_has_effectname();
  inline void set_has_attachmentname();
  inline void clear_has_attachmentname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* start_;
  ::CMsgVector* normal_;
  ::CMsgQAngle* angles_;
  ::google::protobuf::uint32 entity_;
  ::google::protobuf::uint32 otherentity_;
  float scale_;
  float magnitude_;
  float radius_;
  ::google::protobuf::uint32 surfaceprop_;
  ::google::protobuf::uint64 effectindex_;
  ::google::protobuf::uint32 damagetype_;
  ::google::protobuf::uint32 material_;
  ::google::protobuf::uint32 hitbox_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 attachmentindex_;
  ::google::protobuf::uint32 effectname_;
  ::google::protobuf::uint32 attachmentname_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgEffectData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEEffectDispatch : public ::google::protobuf::Message {
 public:
  CMsgTEEffectDispatch();
  virtual ~CMsgTEEffectDispatch();

  CMsgTEEffectDispatch(const CMsgTEEffectDispatch& from);

  inline CMsgTEEffectDispatch& operator=(const CMsgTEEffectDispatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEEffectDispatch& default_instance();

  void Swap(CMsgTEEffectDispatch* other);

  // implements Message ----------------------------------------------

  inline CMsgTEEffectDispatch* New() const { return New(NULL); }

  CMsgTEEffectDispatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEEffectDispatch& from);
  void MergeFrom(const CMsgTEEffectDispatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEEffectDispatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgEffectData effectdata = 1;
  bool has_effectdata() const;
  void clear_effectdata();
  static const int kEffectdataFieldNumber = 1;
  const ::CMsgEffectData& effectdata() const;
  ::CMsgEffectData* mutable_effectdata();
  ::CMsgEffectData* release_effectdata();
  void set_allocated_effectdata(::CMsgEffectData* effectdata);

  // @@protoc_insertion_point(class_scope:CMsgTEEffectDispatch)
 private:
  inline void set_has_effectdata();
  inline void clear_has_effectdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgEffectData* effectdata_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEEffectDispatch* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEEnergySplash : public ::google::protobuf::Message {
 public:
  CMsgTEEnergySplash();
  virtual ~CMsgTEEnergySplash();

  CMsgTEEnergySplash(const CMsgTEEnergySplash& from);

  inline CMsgTEEnergySplash& operator=(const CMsgTEEnergySplash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEEnergySplash& default_instance();

  void Swap(CMsgTEEnergySplash* other);

  // implements Message ----------------------------------------------

  inline CMsgTEEnergySplash* New() const { return New(NULL); }

  CMsgTEEnergySplash* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEEnergySplash& from);
  void MergeFrom(const CMsgTEEnergySplash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEEnergySplash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::CMsgVector& pos() const;
  ::CMsgVector* mutable_pos();
  ::CMsgVector* release_pos();
  void set_allocated_pos(::CMsgVector* pos);

  // optional .CMsgVector dir = 2;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 2;
  const ::CMsgVector& dir() const;
  ::CMsgVector* mutable_dir();
  ::CMsgVector* release_dir();
  void set_allocated_dir(::CMsgVector* dir);

  // optional bool explosive = 3;
  bool has_explosive() const;
  void clear_explosive();
  static const int kExplosiveFieldNumber = 3;
  bool explosive() const;
  void set_explosive(bool value);

  // @@protoc_insertion_point(class_scope:CMsgTEEnergySplash)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_explosive();
  inline void clear_has_explosive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* pos_;
  ::CMsgVector* dir_;
  bool explosive_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEEnergySplash* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEFizz : public ::google::protobuf::Message {
 public:
  CMsgTEFizz();
  virtual ~CMsgTEFizz();

  CMsgTEFizz(const CMsgTEFizz& from);

  inline CMsgTEFizz& operator=(const CMsgTEFizz& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEFizz& default_instance();

  void Swap(CMsgTEFizz* other);

  // implements Message ----------------------------------------------

  inline CMsgTEFizz* New() const { return New(NULL); }

  CMsgTEFizz* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEFizz& from);
  void MergeFrom(const CMsgTEFizz& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEFizz* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  ::google::protobuf::uint32 entity() const;
  void set_entity(::google::protobuf::uint32 value);

  // optional uint32 density = 2;
  bool has_density() const;
  void clear_density();
  static const int kDensityFieldNumber = 2;
  ::google::protobuf::uint32 density() const;
  void set_density(::google::protobuf::uint32 value);

  // optional int32 current = 3;
  bool has_current() const;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  ::google::protobuf::int32 current() const;
  void set_current(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEFizz)
 private:
  inline void set_has_entity();
  inline void clear_has_entity();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_current();
  inline void clear_has_current();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 entity_;
  ::google::protobuf::uint32 density_;
  ::google::protobuf::int32 current_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEFizz* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEShatterSurface : public ::google::protobuf::Message {
 public:
  CMsgTEShatterSurface();
  virtual ~CMsgTEShatterSurface();

  CMsgTEShatterSurface(const CMsgTEShatterSurface& from);

  inline CMsgTEShatterSurface& operator=(const CMsgTEShatterSurface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEShatterSurface& default_instance();

  void Swap(CMsgTEShatterSurface* other);

  // implements Message ----------------------------------------------

  inline CMsgTEShatterSurface* New() const { return New(NULL); }

  CMsgTEShatterSurface* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEShatterSurface& from);
  void MergeFrom(const CMsgTEShatterSurface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEShatterSurface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgQAngle angles = 2;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 2;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional .CMsgVector force = 3;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 3;
  const ::CMsgVector& force() const;
  ::CMsgVector* mutable_force();
  ::CMsgVector* release_force();
  void set_allocated_force(::CMsgVector* force);

  // optional .CMsgVector forcepos = 4;
  bool has_forcepos() const;
  void clear_forcepos();
  static const int kForceposFieldNumber = 4;
  const ::CMsgVector& forcepos() const;
  ::CMsgVector* mutable_forcepos();
  ::CMsgVector* release_forcepos();
  void set_allocated_forcepos(::CMsgVector* forcepos);

  // optional float width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  float width() const;
  void set_width(float value);

  // optional float height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  float height() const;
  void set_height(float value);

  // optional float shardsize = 7;
  bool has_shardsize() const;
  void clear_shardsize();
  static const int kShardsizeFieldNumber = 7;
  float shardsize() const;
  void set_shardsize(float value);

  // optional uint32 surfacetype = 8;
  bool has_surfacetype() const;
  void clear_surfacetype();
  static const int kSurfacetypeFieldNumber = 8;
  ::google::protobuf::uint32 surfacetype() const;
  void set_surfacetype(::google::protobuf::uint32 value);

  // optional fixed32 frontcolor = 9;
  bool has_frontcolor() const;
  void clear_frontcolor();
  static const int kFrontcolorFieldNumber = 9;
  ::google::protobuf::uint32 frontcolor() const;
  void set_frontcolor(::google::protobuf::uint32 value);

  // optional fixed32 backcolor = 10;
  bool has_backcolor() const;
  void clear_backcolor();
  static const int kBackcolorFieldNumber = 10;
  ::google::protobuf::uint32 backcolor() const;
  void set_backcolor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEShatterSurface)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_forcepos();
  inline void clear_has_forcepos();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_shardsize();
  inline void clear_has_shardsize();
  inline void set_has_surfacetype();
  inline void clear_has_surfacetype();
  inline void set_has_frontcolor();
  inline void clear_has_frontcolor();
  inline void set_has_backcolor();
  inline void clear_has_backcolor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgQAngle* angles_;
  ::CMsgVector* force_;
  ::CMsgVector* forcepos_;
  float width_;
  float height_;
  float shardsize_;
  ::google::protobuf::uint32 surfacetype_;
  ::google::protobuf::uint32 frontcolor_;
  ::google::protobuf::uint32 backcolor_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEShatterSurface* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEGlowSprite : public ::google::protobuf::Message {
 public:
  CMsgTEGlowSprite();
  virtual ~CMsgTEGlowSprite();

  CMsgTEGlowSprite(const CMsgTEGlowSprite& from);

  inline CMsgTEGlowSprite& operator=(const CMsgTEGlowSprite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEGlowSprite& default_instance();

  void Swap(CMsgTEGlowSprite* other);

  // implements Message ----------------------------------------------

  inline CMsgTEGlowSprite* New() const { return New(NULL); }

  CMsgTEGlowSprite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEGlowSprite& from);
  void MergeFrom(const CMsgTEGlowSprite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEGlowSprite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional float scale = 2;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float life = 3;
  bool has_life() const;
  void clear_life();
  static const int kLifeFieldNumber = 3;
  float life() const;
  void set_life(float value);

  // optional uint32 brightness = 4;
  bool has_brightness() const;
  void clear_brightness();
  static const int kBrightnessFieldNumber = 4;
  ::google::protobuf::uint32 brightness() const;
  void set_brightness(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEGlowSprite)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_brightness();
  inline void clear_has_brightness();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  float scale_;
  float life_;
  ::google::protobuf::uint32 brightness_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEGlowSprite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEImpact : public ::google::protobuf::Message {
 public:
  CMsgTEImpact();
  virtual ~CMsgTEImpact();

  CMsgTEImpact(const CMsgTEImpact& from);

  inline CMsgTEImpact& operator=(const CMsgTEImpact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEImpact& default_instance();

  void Swap(CMsgTEImpact* other);

  // implements Message ----------------------------------------------

  inline CMsgTEImpact* New() const { return New(NULL); }

  CMsgTEImpact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEImpact& from);
  void MergeFrom(const CMsgTEImpact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEImpact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional uint32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEImpact)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* normal_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEImpact* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEMuzzleFlash : public ::google::protobuf::Message {
 public:
  CMsgTEMuzzleFlash();
  virtual ~CMsgTEMuzzleFlash();

  CMsgTEMuzzleFlash(const CMsgTEMuzzleFlash& from);

  inline CMsgTEMuzzleFlash& operator=(const CMsgTEMuzzleFlash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEMuzzleFlash& default_instance();

  void Swap(CMsgTEMuzzleFlash* other);

  // implements Message ----------------------------------------------

  inline CMsgTEMuzzleFlash* New() const { return New(NULL); }

  CMsgTEMuzzleFlash* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEMuzzleFlash& from);
  void MergeFrom(const CMsgTEMuzzleFlash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEMuzzleFlash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgQAngle angles = 2;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 2;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional float scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  float scale() const;
  void set_scale(float value);

  // optional uint32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEMuzzleFlash)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgQAngle* angles_;
  float scale_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEMuzzleFlash* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEBloodStream : public ::google::protobuf::Message {
 public:
  CMsgTEBloodStream();
  virtual ~CMsgTEBloodStream();

  CMsgTEBloodStream(const CMsgTEBloodStream& from);

  inline CMsgTEBloodStream& operator=(const CMsgTEBloodStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEBloodStream& default_instance();

  void Swap(CMsgTEBloodStream* other);

  // implements Message ----------------------------------------------

  inline CMsgTEBloodStream* New() const { return New(NULL); }

  CMsgTEBloodStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEBloodStream& from);
  void MergeFrom(const CMsgTEBloodStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEBloodStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  const ::CMsgVector& direction() const;
  ::CMsgVector* mutable_direction();
  ::CMsgVector* release_direction();
  void set_allocated_direction(::CMsgVector* direction);

  // optional fixed32 color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // optional uint32 amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEBloodStream)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* direction_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 amount_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEBloodStream* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEExplosion : public ::google::protobuf::Message {
 public:
  CMsgTEExplosion();
  virtual ~CMsgTEExplosion();

  CMsgTEExplosion(const CMsgTEExplosion& from);

  inline CMsgTEExplosion& operator=(const CMsgTEExplosion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEExplosion& default_instance();

  void Swap(CMsgTEExplosion* other);

  // implements Message ----------------------------------------------

  inline CMsgTEExplosion* New() const { return New(NULL); }

  CMsgTEExplosion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEExplosion& from);
  void MergeFrom(const CMsgTEExplosion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEExplosion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional uint32 framerate = 2;
  bool has_framerate() const;
  void clear_framerate();
  static const int kFramerateFieldNumber = 2;
  ::google::protobuf::uint32 framerate() const;
  void set_framerate(::google::protobuf::uint32 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional .CMsgVector normal = 4;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 4;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional uint32 materialtype = 5;
  bool has_materialtype() const;
  void clear_materialtype();
  static const int kMaterialtypeFieldNumber = 5;
  ::google::protobuf::uint32 materialtype() const;
  void set_materialtype(::google::protobuf::uint32 value);

  // optional uint32 radius = 6;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  ::google::protobuf::uint32 radius() const;
  void set_radius(::google::protobuf::uint32 value);

  // optional uint32 magnitude = 7;
  bool has_magnitude() const;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 7;
  ::google::protobuf::uint32 magnitude() const;
  void set_magnitude(::google::protobuf::uint32 value);

  // optional float scale = 8;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 8;
  float scale() const;
  void set_scale(float value);

  // optional bool affect_ragdolls = 9;
  bool has_affect_ragdolls() const;
  void clear_affect_ragdolls();
  static const int kAffectRagdollsFieldNumber = 9;
  bool affect_ragdolls() const;
  void set_affect_ragdolls(bool value);

  // @@protoc_insertion_point(class_scope:CMsgTEExplosion)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_framerate();
  inline void clear_has_framerate();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_materialtype();
  inline void clear_has_materialtype();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_magnitude();
  inline void clear_has_magnitude();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_affect_ragdolls();
  inline void clear_has_affect_ragdolls();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::google::protobuf::uint32 framerate_;
  ::google::protobuf::uint32 flags_;
  ::CMsgVector* normal_;
  ::google::protobuf::uint32 materialtype_;
  ::google::protobuf::uint32 radius_;
  ::google::protobuf::uint32 magnitude_;
  float scale_;
  bool affect_ragdolls_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEExplosion* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEDust : public ::google::protobuf::Message {
 public:
  CMsgTEDust();
  virtual ~CMsgTEDust();

  CMsgTEDust(const CMsgTEDust& from);

  inline CMsgTEDust& operator=(const CMsgTEDust& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEDust& default_instance();

  void Swap(CMsgTEDust* other);

  // implements Message ----------------------------------------------

  inline CMsgTEDust* New() const { return New(NULL); }

  CMsgTEDust* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEDust& from);
  void MergeFrom(const CMsgTEDust& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEDust* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional float size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  float size() const;
  void set_size(float value);

  // optional float speed = 3;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  float speed() const;
  void set_speed(float value);

  // optional .CMsgVector direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::CMsgVector& direction() const;
  ::CMsgVector* mutable_direction();
  ::CMsgVector* release_direction();
  void set_allocated_direction(::CMsgVector* direction);

  // @@protoc_insertion_point(class_scope:CMsgTEDust)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  float size_;
  float speed_;
  ::CMsgVector* direction_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEDust* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTELargeFunnel : public ::google::protobuf::Message {
 public:
  CMsgTELargeFunnel();
  virtual ~CMsgTELargeFunnel();

  CMsgTELargeFunnel(const CMsgTELargeFunnel& from);

  inline CMsgTELargeFunnel& operator=(const CMsgTELargeFunnel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTELargeFunnel& default_instance();

  void Swap(CMsgTELargeFunnel* other);

  // implements Message ----------------------------------------------

  inline CMsgTELargeFunnel* New() const { return New(NULL); }

  CMsgTELargeFunnel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTELargeFunnel& from);
  void MergeFrom(const CMsgTELargeFunnel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTELargeFunnel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional uint32 reversed = 2;
  bool has_reversed() const;
  void clear_reversed();
  static const int kReversedFieldNumber = 2;
  ::google::protobuf::uint32 reversed() const;
  void set_reversed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTELargeFunnel)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::google::protobuf::uint32 reversed_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTELargeFunnel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTESparks : public ::google::protobuf::Message {
 public:
  CMsgTESparks();
  virtual ~CMsgTESparks();

  CMsgTESparks(const CMsgTESparks& from);

  inline CMsgTESparks& operator=(const CMsgTESparks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTESparks& default_instance();

  void Swap(CMsgTESparks* other);

  // implements Message ----------------------------------------------

  inline CMsgTESparks* New() const { return New(NULL); }

  CMsgTESparks* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTESparks& from);
  void MergeFrom(const CMsgTESparks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTESparks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional uint32 magnitude = 2;
  bool has_magnitude() const;
  void clear_magnitude();
  static const int kMagnitudeFieldNumber = 2;
  ::google::protobuf::uint32 magnitude() const;
  void set_magnitude(::google::protobuf::uint32 value);

  // optional uint32 length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // optional .CMsgVector direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::CMsgVector& direction() const;
  ::CMsgVector* mutable_direction();
  ::CMsgVector* release_direction();
  void set_allocated_direction(::CMsgVector* direction);

  // @@protoc_insertion_point(class_scope:CMsgTESparks)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_magnitude();
  inline void clear_has_magnitude();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::google::protobuf::uint32 magnitude_;
  ::google::protobuf::uint32 length_;
  ::CMsgVector* direction_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTESparks* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEPhysicsProp : public ::google::protobuf::Message {
 public:
  CMsgTEPhysicsProp();
  virtual ~CMsgTEPhysicsProp();

  CMsgTEPhysicsProp(const CMsgTEPhysicsProp& from);

  inline CMsgTEPhysicsProp& operator=(const CMsgTEPhysicsProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEPhysicsProp& default_instance();

  void Swap(CMsgTEPhysicsProp* other);

  // implements Message ----------------------------------------------

  inline CMsgTEPhysicsProp* New() const { return New(NULL); }

  CMsgTEPhysicsProp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEPhysicsProp& from);
  void MergeFrom(const CMsgTEPhysicsProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEPhysicsProp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  const ::CMsgVector& velocity() const;
  ::CMsgVector* mutable_velocity();
  ::CMsgVector* release_velocity();
  void set_allocated_velocity(::CMsgVector* velocity);

  // optional .CMsgQAngle angles = 3;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 3;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional fixed32 skin = 4;
  bool has_skin() const;
  void clear_skin();
  static const int kSkinFieldNumber = 4;
  ::google::protobuf::uint32 skin() const;
  void set_skin(::google::protobuf::uint32 value);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 effects = 6;
  bool has_effects() const;
  void clear_effects();
  static const int kEffectsFieldNumber = 6;
  ::google::protobuf::uint32 effects() const;
  void set_effects(::google::protobuf::uint32 value);

  // optional fixed32 color = 7;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 7;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // optional fixed64 modelindex = 8;
  bool has_modelindex() const;
  void clear_modelindex();
  static const int kModelindexFieldNumber = 8;
  ::google::protobuf::uint64 modelindex() const;
  void set_modelindex(::google::protobuf::uint64 value);

  // optional uint32 breakmodelsnottomake = 9;
  bool has_breakmodelsnottomake() const;
  void clear_breakmodelsnottomake();
  static const int kBreakmodelsnottomakeFieldNumber = 9;
  ::google::protobuf::uint32 breakmodelsnottomake() const;
  void set_breakmodelsnottomake(::google::protobuf::uint32 value);

  // optional float scale = 10;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 10;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:CMsgTEPhysicsProp)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_skin();
  inline void clear_has_skin();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_effects();
  inline void clear_has_effects();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_modelindex();
  inline void clear_has_modelindex();
  inline void set_has_breakmodelsnottomake();
  inline void clear_has_breakmodelsnottomake();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* velocity_;
  ::CMsgQAngle* angles_;
  ::google::protobuf::uint32 skin_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 effects_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint64 modelindex_;
  ::google::protobuf::uint32 breakmodelsnottomake_;
  float scale_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEPhysicsProp* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEPlayerDecal : public ::google::protobuf::Message {
 public:
  CMsgTEPlayerDecal();
  virtual ~CMsgTEPlayerDecal();

  CMsgTEPlayerDecal(const CMsgTEPlayerDecal& from);

  inline CMsgTEPlayerDecal& operator=(const CMsgTEPlayerDecal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEPlayerDecal& default_instance();

  void Swap(CMsgTEPlayerDecal* other);

  // implements Message ----------------------------------------------

  inline CMsgTEPlayerDecal* New() const { return New(NULL); }

  CMsgTEPlayerDecal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEPlayerDecal& from);
  void MergeFrom(const CMsgTEPlayerDecal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEPlayerDecal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional uint32 player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  ::google::protobuf::uint32 player() const;
  void set_player(::google::protobuf::uint32 value);

  // optional uint32 entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  ::google::protobuf::uint32 entity() const;
  void set_entity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEPlayerDecal)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_entity();
  inline void clear_has_entity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::google::protobuf::uint32 player_;
  ::google::protobuf::uint32 entity_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEPlayerDecal* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEProjectedDecal : public ::google::protobuf::Message {
 public:
  CMsgTEProjectedDecal();
  virtual ~CMsgTEProjectedDecal();

  CMsgTEProjectedDecal(const CMsgTEProjectedDecal& from);

  inline CMsgTEProjectedDecal& operator=(const CMsgTEProjectedDecal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEProjectedDecal& default_instance();

  void Swap(CMsgTEProjectedDecal* other);

  // implements Message ----------------------------------------------

  inline CMsgTEProjectedDecal* New() const { return New(NULL); }

  CMsgTEProjectedDecal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEProjectedDecal& from);
  void MergeFrom(const CMsgTEProjectedDecal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEProjectedDecal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgQAngle angles = 2;
  bool has_angles() const;
  void clear_angles();
  static const int kAnglesFieldNumber = 2;
  const ::CMsgQAngle& angles() const;
  ::CMsgQAngle* mutable_angles();
  ::CMsgQAngle* release_angles();
  void set_allocated_angles(::CMsgQAngle* angles);

  // optional uint32 index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:CMsgTEProjectedDecal)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_distance();
  inline void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgQAngle* angles_;
  ::google::protobuf::uint32 index_;
  float distance_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEProjectedDecal* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTESmoke : public ::google::protobuf::Message {
 public:
  CMsgTESmoke();
  virtual ~CMsgTESmoke();

  CMsgTESmoke(const CMsgTESmoke& from);

  inline CMsgTESmoke& operator=(const CMsgTESmoke& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTESmoke& default_instance();

  void Swap(CMsgTESmoke* other);

  // implements Message ----------------------------------------------

  inline CMsgTESmoke* New() const { return New(NULL); }

  CMsgTESmoke* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTESmoke& from);
  void MergeFrom(const CMsgTESmoke& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTESmoke* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional float scale = 2;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:CMsgTESmoke)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  float scale_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTESmoke* default_instance_;
};
// -------------------------------------------------------------------

class CMsgTEWorldDecal : public ::google::protobuf::Message {
 public:
  CMsgTEWorldDecal();
  virtual ~CMsgTEWorldDecal();

  CMsgTEWorldDecal(const CMsgTEWorldDecal& from);

  inline CMsgTEWorldDecal& operator=(const CMsgTEWorldDecal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgTEWorldDecal& default_instance();

  void Swap(CMsgTEWorldDecal* other);

  // implements Message ----------------------------------------------

  inline CMsgTEWorldDecal* New() const { return New(NULL); }

  CMsgTEWorldDecal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgTEWorldDecal& from);
  void MergeFrom(const CMsgTEWorldDecal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMsgTEWorldDecal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional uint32 index = 3;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgTEWorldDecal)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* origin_;
  ::CMsgVector* normal_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_te_2eproto();
  friend void protobuf_AssignDesc_te_2eproto();
  friend void protobuf_ShutdownFile_te_2eproto();

  void InitAsDefaultInstance();
  static CMsgTEWorldDecal* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTEArmorRicochet

// optional .CMsgVector pos = 1;
inline bool CMsgTEArmorRicochet::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEArmorRicochet::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEArmorRicochet::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEArmorRicochet::clear_pos() {
  if (pos_ != NULL) pos_->::CMsgVector::Clear();
  clear_has_pos();
}
inline const ::CMsgVector& CMsgTEArmorRicochet::pos() const {
  // @@protoc_insertion_point(field_get:CMsgTEArmorRicochet.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CMsgVector* CMsgTEArmorRicochet::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEArmorRicochet.pos)
  return pos_;
}
inline ::CMsgVector* CMsgTEArmorRicochet::release_pos() {
  clear_has_pos();
  ::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CMsgTEArmorRicochet::set_allocated_pos(::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEArmorRicochet.pos)
}

// optional .CMsgVector dir = 2;
inline bool CMsgTEArmorRicochet::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEArmorRicochet::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEArmorRicochet::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEArmorRicochet::clear_dir() {
  if (dir_ != NULL) dir_->::CMsgVector::Clear();
  clear_has_dir();
}
inline const ::CMsgVector& CMsgTEArmorRicochet::dir() const {
  // @@protoc_insertion_point(field_get:CMsgTEArmorRicochet.dir)
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
inline ::CMsgVector* CMsgTEArmorRicochet::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEArmorRicochet.dir)
  return dir_;
}
inline ::CMsgVector* CMsgTEArmorRicochet::release_dir() {
  clear_has_dir();
  ::CMsgVector* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline void CMsgTEArmorRicochet::set_allocated_dir(::CMsgVector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEArmorRicochet.dir)
}

// -------------------------------------------------------------------

// CMsgTEBaseBeam

// optional fixed64 modelindex = 1;
inline bool CMsgTEBaseBeam::has_modelindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBaseBeam::set_has_modelindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBaseBeam::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBaseBeam::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
inline ::google::protobuf::uint64 CMsgTEBaseBeam::modelindex() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.modelindex)
  return modelindex_;
}
inline void CMsgTEBaseBeam::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.modelindex)
}

// optional fixed64 haloindex = 2;
inline bool CMsgTEBaseBeam::has_haloindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBaseBeam::set_has_haloindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBaseBeam::clear_has_haloindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBaseBeam::clear_haloindex() {
  haloindex_ = GOOGLE_ULONGLONG(0);
  clear_has_haloindex();
}
inline ::google::protobuf::uint64 CMsgTEBaseBeam::haloindex() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.haloindex)
  return haloindex_;
}
inline void CMsgTEBaseBeam::set_haloindex(::google::protobuf::uint64 value) {
  set_has_haloindex();
  haloindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.haloindex)
}

// optional uint32 startframe = 3;
inline bool CMsgTEBaseBeam::has_startframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBaseBeam::set_has_startframe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBaseBeam::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBaseBeam::clear_startframe() {
  startframe_ = 0u;
  clear_has_startframe();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::startframe() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.startframe)
  return startframe_;
}
inline void CMsgTEBaseBeam::set_startframe(::google::protobuf::uint32 value) {
  set_has_startframe();
  startframe_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.startframe)
}

// optional uint32 framerate = 4;
inline bool CMsgTEBaseBeam::has_framerate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBaseBeam::set_has_framerate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBaseBeam::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBaseBeam::clear_framerate() {
  framerate_ = 0u;
  clear_has_framerate();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::framerate() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.framerate)
  return framerate_;
}
inline void CMsgTEBaseBeam::set_framerate(::google::protobuf::uint32 value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.framerate)
}

// optional float life = 5;
inline bool CMsgTEBaseBeam::has_life() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBaseBeam::set_has_life() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBaseBeam::clear_has_life() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBaseBeam::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline float CMsgTEBaseBeam::life() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.life)
  return life_;
}
inline void CMsgTEBaseBeam::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.life)
}

// optional float width = 6;
inline bool CMsgTEBaseBeam::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTEBaseBeam::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTEBaseBeam::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTEBaseBeam::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float CMsgTEBaseBeam::width() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.width)
  return width_;
}
inline void CMsgTEBaseBeam::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.width)
}

// optional float endwidth = 7;
inline bool CMsgTEBaseBeam::has_endwidth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTEBaseBeam::set_has_endwidth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTEBaseBeam::clear_has_endwidth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTEBaseBeam::clear_endwidth() {
  endwidth_ = 0;
  clear_has_endwidth();
}
inline float CMsgTEBaseBeam::endwidth() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.endwidth)
  return endwidth_;
}
inline void CMsgTEBaseBeam::set_endwidth(float value) {
  set_has_endwidth();
  endwidth_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.endwidth)
}

// optional uint32 fadelength = 8;
inline bool CMsgTEBaseBeam::has_fadelength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTEBaseBeam::set_has_fadelength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTEBaseBeam::clear_has_fadelength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTEBaseBeam::clear_fadelength() {
  fadelength_ = 0u;
  clear_has_fadelength();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::fadelength() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.fadelength)
  return fadelength_;
}
inline void CMsgTEBaseBeam::set_fadelength(::google::protobuf::uint32 value) {
  set_has_fadelength();
  fadelength_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.fadelength)
}

// optional float amplitude = 9;
inline bool CMsgTEBaseBeam::has_amplitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTEBaseBeam::set_has_amplitude() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTEBaseBeam::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTEBaseBeam::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline float CMsgTEBaseBeam::amplitude() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.amplitude)
  return amplitude_;
}
inline void CMsgTEBaseBeam::set_amplitude(float value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.amplitude)
}

// optional fixed32 color = 10;
inline bool CMsgTEBaseBeam::has_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgTEBaseBeam::set_has_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgTEBaseBeam::clear_has_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgTEBaseBeam::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::color() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.color)
  return color_;
}
inline void CMsgTEBaseBeam::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.color)
}

// optional uint32 speed = 11;
inline bool CMsgTEBaseBeam::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgTEBaseBeam::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgTEBaseBeam::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgTEBaseBeam::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::speed() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.speed)
  return speed_;
}
inline void CMsgTEBaseBeam::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.speed)
}

// optional uint32 flags = 12;
inline bool CMsgTEBaseBeam::has_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgTEBaseBeam::set_has_flags() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgTEBaseBeam::clear_has_flags() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgTEBaseBeam::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgTEBaseBeam::flags() const {
  // @@protoc_insertion_point(field_get:CMsgTEBaseBeam.flags)
  return flags_;
}
inline void CMsgTEBaseBeam::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBaseBeam.flags)
}

// -------------------------------------------------------------------

// CMsgTEBeamEntPoint

// optional .CMsgTEBaseBeam base = 1;
inline bool CMsgTEBeamEntPoint::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBeamEntPoint::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBeamEntPoint::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBeamEntPoint::clear_base() {
  if (base_ != NULL) base_->::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
inline const ::CMsgTEBaseBeam& CMsgTEBeamEntPoint::base() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEntPoint.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamEntPoint::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamEntPoint.base)
  return base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamEntPoint::release_base() {
  clear_has_base();
  ::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CMsgTEBeamEntPoint::set_allocated_base(::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamEntPoint.base)
}

// optional uint32 startentity = 2;
inline bool CMsgTEBeamEntPoint::has_startentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBeamEntPoint::set_has_startentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBeamEntPoint::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBeamEntPoint::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamEntPoint::startentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEntPoint.startentity)
  return startentity_;
}
inline void CMsgTEBeamEntPoint::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamEntPoint.startentity)
}

// optional uint32 endentity = 3;
inline bool CMsgTEBeamEntPoint::has_endentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBeamEntPoint::set_has_endentity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBeamEntPoint::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBeamEntPoint::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamEntPoint::endentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEntPoint.endentity)
  return endentity_;
}
inline void CMsgTEBeamEntPoint::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamEntPoint.endentity)
}

// optional .CMsgVector start = 4;
inline bool CMsgTEBeamEntPoint::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBeamEntPoint::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBeamEntPoint::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBeamEntPoint::clear_start() {
  if (start_ != NULL) start_->::CMsgVector::Clear();
  clear_has_start();
}
inline const ::CMsgVector& CMsgTEBeamEntPoint::start() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEntPoint.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CMsgVector* CMsgTEBeamEntPoint::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamEntPoint.start)
  return start_;
}
inline ::CMsgVector* CMsgTEBeamEntPoint::release_start() {
  clear_has_start();
  ::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void CMsgTEBeamEntPoint::set_allocated_start(::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamEntPoint.start)
}

// optional .CMsgVector end = 5;
inline bool CMsgTEBeamEntPoint::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBeamEntPoint::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBeamEntPoint::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBeamEntPoint::clear_end() {
  if (end_ != NULL) end_->::CMsgVector::Clear();
  clear_has_end();
}
inline const ::CMsgVector& CMsgTEBeamEntPoint::end() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEntPoint.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::CMsgVector* CMsgTEBeamEntPoint::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamEntPoint.end)
  return end_;
}
inline ::CMsgVector* CMsgTEBeamEntPoint::release_end() {
  clear_has_end();
  ::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
inline void CMsgTEBeamEntPoint::set_allocated_end(::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamEntPoint.end)
}

// -------------------------------------------------------------------

// CMsgTEBeamEnts

// optional .CMsgTEBaseBeam base = 1;
inline bool CMsgTEBeamEnts::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBeamEnts::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBeamEnts::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBeamEnts::clear_base() {
  if (base_ != NULL) base_->::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
inline const ::CMsgTEBaseBeam& CMsgTEBeamEnts::base() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEnts.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamEnts::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamEnts.base)
  return base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamEnts::release_base() {
  clear_has_base();
  ::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CMsgTEBeamEnts::set_allocated_base(::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamEnts.base)
}

// optional uint32 startentity = 2;
inline bool CMsgTEBeamEnts::has_startentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBeamEnts::set_has_startentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBeamEnts::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBeamEnts::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamEnts::startentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEnts.startentity)
  return startentity_;
}
inline void CMsgTEBeamEnts::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamEnts.startentity)
}

// optional uint32 endentity = 3;
inline bool CMsgTEBeamEnts::has_endentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBeamEnts::set_has_endentity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBeamEnts::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBeamEnts::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamEnts::endentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamEnts.endentity)
  return endentity_;
}
inline void CMsgTEBeamEnts::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamEnts.endentity)
}

// -------------------------------------------------------------------

// CMsgTEBeamPoints

// optional .CMsgTEBaseBeam base = 1;
inline bool CMsgTEBeamPoints::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBeamPoints::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBeamPoints::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBeamPoints::clear_base() {
  if (base_ != NULL) base_->::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
inline const ::CMsgTEBaseBeam& CMsgTEBeamPoints::base() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamPoints.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamPoints::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamPoints.base)
  return base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamPoints::release_base() {
  clear_has_base();
  ::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CMsgTEBeamPoints::set_allocated_base(::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamPoints.base)
}

// optional .CMsgVector start = 2;
inline bool CMsgTEBeamPoints::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBeamPoints::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBeamPoints::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBeamPoints::clear_start() {
  if (start_ != NULL) start_->::CMsgVector::Clear();
  clear_has_start();
}
inline const ::CMsgVector& CMsgTEBeamPoints::start() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamPoints.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CMsgVector* CMsgTEBeamPoints::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamPoints.start)
  return start_;
}
inline ::CMsgVector* CMsgTEBeamPoints::release_start() {
  clear_has_start();
  ::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void CMsgTEBeamPoints::set_allocated_start(::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamPoints.start)
}

// optional .CMsgVector end = 3;
inline bool CMsgTEBeamPoints::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBeamPoints::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBeamPoints::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBeamPoints::clear_end() {
  if (end_ != NULL) end_->::CMsgVector::Clear();
  clear_has_end();
}
inline const ::CMsgVector& CMsgTEBeamPoints::end() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamPoints.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::CMsgVector* CMsgTEBeamPoints::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamPoints.end)
  return end_;
}
inline ::CMsgVector* CMsgTEBeamPoints::release_end() {
  clear_has_end();
  ::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
inline void CMsgTEBeamPoints::set_allocated_end(::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamPoints.end)
}

// -------------------------------------------------------------------

// CMsgTEBeamRing

// optional .CMsgTEBaseBeam base = 1;
inline bool CMsgTEBeamRing::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBeamRing::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBeamRing::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBeamRing::clear_base() {
  if (base_ != NULL) base_->::CMsgTEBaseBeam::Clear();
  clear_has_base();
}
inline const ::CMsgTEBaseBeam& CMsgTEBeamRing::base() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamRing.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamRing::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::CMsgTEBaseBeam;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBeamRing.base)
  return base_;
}
inline ::CMsgTEBaseBeam* CMsgTEBeamRing::release_base() {
  clear_has_base();
  ::CMsgTEBaseBeam* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CMsgTEBeamRing::set_allocated_base(::CMsgTEBaseBeam* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBeamRing.base)
}

// optional uint32 startentity = 2;
inline bool CMsgTEBeamRing::has_startentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBeamRing::set_has_startentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBeamRing::clear_has_startentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBeamRing::clear_startentity() {
  startentity_ = 0u;
  clear_has_startentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamRing::startentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamRing.startentity)
  return startentity_;
}
inline void CMsgTEBeamRing::set_startentity(::google::protobuf::uint32 value) {
  set_has_startentity();
  startentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamRing.startentity)
}

// optional uint32 endentity = 3;
inline bool CMsgTEBeamRing::has_endentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBeamRing::set_has_endentity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBeamRing::clear_has_endentity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBeamRing::clear_endentity() {
  endentity_ = 0u;
  clear_has_endentity();
}
inline ::google::protobuf::uint32 CMsgTEBeamRing::endentity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBeamRing.endentity)
  return endentity_;
}
inline void CMsgTEBeamRing::set_endentity(::google::protobuf::uint32 value) {
  set_has_endentity();
  endentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBeamRing.endentity)
}

// -------------------------------------------------------------------

// CMsgTEBreakModel

// optional .CMsgVector origin = 1;
inline bool CMsgTEBreakModel::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBreakModel::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBreakModel::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBreakModel::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEBreakModel::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEBreakModel::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBreakModel.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEBreakModel::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEBreakModel::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBreakModel.origin)
}

// optional .CMsgQAngle angles = 2;
inline bool CMsgTEBreakModel::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBreakModel::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBreakModel::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBreakModel::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgTEBreakModel::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgTEBreakModel::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBreakModel.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgTEBreakModel::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgTEBreakModel::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBreakModel.angles)
}

// optional .CMsgVector size = 3;
inline bool CMsgTEBreakModel::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBreakModel::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBreakModel::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBreakModel::clear_size() {
  if (size_ != NULL) size_->::CMsgVector::Clear();
  clear_has_size();
}
inline const ::CMsgVector& CMsgTEBreakModel::size() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::CMsgVector* CMsgTEBreakModel::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBreakModel.size)
  return size_;
}
inline ::CMsgVector* CMsgTEBreakModel::release_size() {
  clear_has_size();
  ::CMsgVector* temp = size_;
  size_ = NULL;
  return temp;
}
inline void CMsgTEBreakModel::set_allocated_size(::CMsgVector* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBreakModel.size)
}

// optional .CMsgVector velocity = 4;
inline bool CMsgTEBreakModel::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBreakModel::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBreakModel::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBreakModel::clear_velocity() {
  if (velocity_ != NULL) velocity_->::CMsgVector::Clear();
  clear_has_velocity();
}
inline const ::CMsgVector& CMsgTEBreakModel::velocity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::CMsgVector* CMsgTEBreakModel::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBreakModel.velocity)
  return velocity_;
}
inline ::CMsgVector* CMsgTEBreakModel::release_velocity() {
  clear_has_velocity();
  ::CMsgVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CMsgTEBreakModel::set_allocated_velocity(::CMsgVector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBreakModel.velocity)
}

// optional uint32 randomization = 5;
inline bool CMsgTEBreakModel::has_randomization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBreakModel::set_has_randomization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBreakModel::clear_has_randomization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBreakModel::clear_randomization() {
  randomization_ = 0u;
  clear_has_randomization();
}
inline ::google::protobuf::uint32 CMsgTEBreakModel::randomization() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.randomization)
  return randomization_;
}
inline void CMsgTEBreakModel::set_randomization(::google::protobuf::uint32 value) {
  set_has_randomization();
  randomization_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBreakModel.randomization)
}

// optional fixed64 modelindex = 6;
inline bool CMsgTEBreakModel::has_modelindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTEBreakModel::set_has_modelindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTEBreakModel::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTEBreakModel::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
inline ::google::protobuf::uint64 CMsgTEBreakModel::modelindex() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.modelindex)
  return modelindex_;
}
inline void CMsgTEBreakModel::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBreakModel.modelindex)
}

// optional uint32 count = 7;
inline bool CMsgTEBreakModel::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTEBreakModel::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTEBreakModel::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTEBreakModel::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CMsgTEBreakModel::count() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.count)
  return count_;
}
inline void CMsgTEBreakModel::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBreakModel.count)
}

// optional float time = 8;
inline bool CMsgTEBreakModel::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTEBreakModel::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTEBreakModel::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTEBreakModel::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float CMsgTEBreakModel::time() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.time)
  return time_;
}
inline void CMsgTEBreakModel::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBreakModel.time)
}

// optional uint32 flags = 9;
inline bool CMsgTEBreakModel::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTEBreakModel::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTEBreakModel::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTEBreakModel::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgTEBreakModel::flags() const {
  // @@protoc_insertion_point(field_get:CMsgTEBreakModel.flags)
  return flags_;
}
inline void CMsgTEBreakModel::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBreakModel.flags)
}

// -------------------------------------------------------------------

// CMsgTEBSPDecal

// optional .CMsgVector origin = 1;
inline bool CMsgTEBSPDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBSPDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBSPDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBSPDecal::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEBSPDecal::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEBSPDecal.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEBSPDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBSPDecal.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEBSPDecal::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEBSPDecal::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBSPDecal.origin)
}

// optional .CMsgVector normal = 2;
inline bool CMsgTEBSPDecal::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBSPDecal::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBSPDecal::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBSPDecal::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& CMsgTEBSPDecal::normal() const {
  // @@protoc_insertion_point(field_get:CMsgTEBSPDecal.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* CMsgTEBSPDecal::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBSPDecal.normal)
  return normal_;
}
inline ::CMsgVector* CMsgTEBSPDecal::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void CMsgTEBSPDecal::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBSPDecal.normal)
}

// optional .CMsgVector saxis = 3;
inline bool CMsgTEBSPDecal::has_saxis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBSPDecal::set_has_saxis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBSPDecal::clear_has_saxis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBSPDecal::clear_saxis() {
  if (saxis_ != NULL) saxis_->::CMsgVector::Clear();
  clear_has_saxis();
}
inline const ::CMsgVector& CMsgTEBSPDecal::saxis() const {
  // @@protoc_insertion_point(field_get:CMsgTEBSPDecal.saxis)
  return saxis_ != NULL ? *saxis_ : *default_instance_->saxis_;
}
inline ::CMsgVector* CMsgTEBSPDecal::mutable_saxis() {
  set_has_saxis();
  if (saxis_ == NULL) {
    saxis_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBSPDecal.saxis)
  return saxis_;
}
inline ::CMsgVector* CMsgTEBSPDecal::release_saxis() {
  clear_has_saxis();
  ::CMsgVector* temp = saxis_;
  saxis_ = NULL;
  return temp;
}
inline void CMsgTEBSPDecal::set_allocated_saxis(::CMsgVector* saxis) {
  delete saxis_;
  saxis_ = saxis;
  if (saxis) {
    set_has_saxis();
  } else {
    clear_has_saxis();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBSPDecal.saxis)
}

// optional uint32 entity = 4;
inline bool CMsgTEBSPDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBSPDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBSPDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBSPDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
inline ::google::protobuf::uint32 CMsgTEBSPDecal::entity() const {
  // @@protoc_insertion_point(field_get:CMsgTEBSPDecal.entity)
  return entity_;
}
inline void CMsgTEBSPDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBSPDecal.entity)
}

// optional uint32 index = 5;
inline bool CMsgTEBSPDecal::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBSPDecal::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBSPDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBSPDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CMsgTEBSPDecal::index() const {
  // @@protoc_insertion_point(field_get:CMsgTEBSPDecal.index)
  return index_;
}
inline void CMsgTEBSPDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBSPDecal.index)
}

// -------------------------------------------------------------------

// CMsgTEBubbles

// optional .CMsgVector mins = 1;
inline bool CMsgTEBubbles::has_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBubbles::set_has_mins() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBubbles::clear_has_mins() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBubbles::clear_mins() {
  if (mins_ != NULL) mins_->::CMsgVector::Clear();
  clear_has_mins();
}
inline const ::CMsgVector& CMsgTEBubbles::mins() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbles.mins)
  return mins_ != NULL ? *mins_ : *default_instance_->mins_;
}
inline ::CMsgVector* CMsgTEBubbles::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBubbles.mins)
  return mins_;
}
inline ::CMsgVector* CMsgTEBubbles::release_mins() {
  clear_has_mins();
  ::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
inline void CMsgTEBubbles::set_allocated_mins(::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBubbles.mins)
}

// optional .CMsgVector maxs = 2;
inline bool CMsgTEBubbles::has_maxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBubbles::set_has_maxs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBubbles::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBubbles::clear_maxs() {
  if (maxs_ != NULL) maxs_->::CMsgVector::Clear();
  clear_has_maxs();
}
inline const ::CMsgVector& CMsgTEBubbles::maxs() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbles.maxs)
  return maxs_ != NULL ? *maxs_ : *default_instance_->maxs_;
}
inline ::CMsgVector* CMsgTEBubbles::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBubbles.maxs)
  return maxs_;
}
inline ::CMsgVector* CMsgTEBubbles::release_maxs() {
  clear_has_maxs();
  ::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
inline void CMsgTEBubbles::set_allocated_maxs(::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBubbles.maxs)
}

// optional float height = 3;
inline bool CMsgTEBubbles::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBubbles::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBubbles::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBubbles::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float CMsgTEBubbles::height() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbles.height)
  return height_;
}
inline void CMsgTEBubbles::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbles.height)
}

// optional uint32 count = 4;
inline bool CMsgTEBubbles::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBubbles::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBubbles::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBubbles::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CMsgTEBubbles::count() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbles.count)
  return count_;
}
inline void CMsgTEBubbles::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbles.count)
}

// optional float speed = 5;
inline bool CMsgTEBubbles::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBubbles::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBubbles::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBubbles::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float CMsgTEBubbles::speed() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbles.speed)
  return speed_;
}
inline void CMsgTEBubbles::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbles.speed)
}

// -------------------------------------------------------------------

// CMsgTEBubbleTrail

// optional .CMsgVector mins = 1;
inline bool CMsgTEBubbleTrail::has_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBubbleTrail::set_has_mins() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBubbleTrail::clear_has_mins() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBubbleTrail::clear_mins() {
  if (mins_ != NULL) mins_->::CMsgVector::Clear();
  clear_has_mins();
}
inline const ::CMsgVector& CMsgTEBubbleTrail::mins() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbleTrail.mins)
  return mins_ != NULL ? *mins_ : *default_instance_->mins_;
}
inline ::CMsgVector* CMsgTEBubbleTrail::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBubbleTrail.mins)
  return mins_;
}
inline ::CMsgVector* CMsgTEBubbleTrail::release_mins() {
  clear_has_mins();
  ::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
inline void CMsgTEBubbleTrail::set_allocated_mins(::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBubbleTrail.mins)
}

// optional .CMsgVector maxs = 2;
inline bool CMsgTEBubbleTrail::has_maxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBubbleTrail::set_has_maxs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBubbleTrail::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBubbleTrail::clear_maxs() {
  if (maxs_ != NULL) maxs_->::CMsgVector::Clear();
  clear_has_maxs();
}
inline const ::CMsgVector& CMsgTEBubbleTrail::maxs() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbleTrail.maxs)
  return maxs_ != NULL ? *maxs_ : *default_instance_->maxs_;
}
inline ::CMsgVector* CMsgTEBubbleTrail::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBubbleTrail.maxs)
  return maxs_;
}
inline ::CMsgVector* CMsgTEBubbleTrail::release_maxs() {
  clear_has_maxs();
  ::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
inline void CMsgTEBubbleTrail::set_allocated_maxs(::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBubbleTrail.maxs)
}

// optional float waterz = 3;
inline bool CMsgTEBubbleTrail::has_waterz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBubbleTrail::set_has_waterz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBubbleTrail::clear_has_waterz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBubbleTrail::clear_waterz() {
  waterz_ = 0;
  clear_has_waterz();
}
inline float CMsgTEBubbleTrail::waterz() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbleTrail.waterz)
  return waterz_;
}
inline void CMsgTEBubbleTrail::set_waterz(float value) {
  set_has_waterz();
  waterz_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbleTrail.waterz)
}

// optional uint32 count = 4;
inline bool CMsgTEBubbleTrail::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBubbleTrail::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBubbleTrail::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBubbleTrail::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CMsgTEBubbleTrail::count() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbleTrail.count)
  return count_;
}
inline void CMsgTEBubbleTrail::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbleTrail.count)
}

// optional float speed = 5;
inline bool CMsgTEBubbleTrail::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEBubbleTrail::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEBubbleTrail::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEBubbleTrail::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float CMsgTEBubbleTrail::speed() const {
  // @@protoc_insertion_point(field_get:CMsgTEBubbleTrail.speed)
  return speed_;
}
inline void CMsgTEBubbleTrail::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBubbleTrail.speed)
}

// -------------------------------------------------------------------

// CMsgTEDecal

// optional .CMsgVector origin = 1;
inline bool CMsgTEDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEDecal::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEDecal::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEDecal.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEDecal.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEDecal::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEDecal::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEDecal.origin)
}

// optional .CMsgVector start = 2;
inline bool CMsgTEDecal::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEDecal::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEDecal::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEDecal::clear_start() {
  if (start_ != NULL) start_->::CMsgVector::Clear();
  clear_has_start();
}
inline const ::CMsgVector& CMsgTEDecal::start() const {
  // @@protoc_insertion_point(field_get:CMsgTEDecal.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CMsgVector* CMsgTEDecal::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEDecal.start)
  return start_;
}
inline ::CMsgVector* CMsgTEDecal::release_start() {
  clear_has_start();
  ::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void CMsgTEDecal::set_allocated_start(::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEDecal.start)
}

// optional uint32 entity = 3;
inline bool CMsgTEDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
inline ::google::protobuf::uint32 CMsgTEDecal::entity() const {
  // @@protoc_insertion_point(field_get:CMsgTEDecal.entity)
  return entity_;
}
inline void CMsgTEDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEDecal.entity)
}

// optional uint32 hitbox = 4;
inline bool CMsgTEDecal::has_hitbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEDecal::set_has_hitbox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEDecal::clear_has_hitbox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEDecal::clear_hitbox() {
  hitbox_ = 0u;
  clear_has_hitbox();
}
inline ::google::protobuf::uint32 CMsgTEDecal::hitbox() const {
  // @@protoc_insertion_point(field_get:CMsgTEDecal.hitbox)
  return hitbox_;
}
inline void CMsgTEDecal::set_hitbox(::google::protobuf::uint32 value) {
  set_has_hitbox();
  hitbox_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEDecal.hitbox)
}

// optional uint32 index = 5;
inline bool CMsgTEDecal::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEDecal::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CMsgTEDecal::index() const {
  // @@protoc_insertion_point(field_get:CMsgTEDecal.index)
  return index_;
}
inline void CMsgTEDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEDecal.index)
}

// -------------------------------------------------------------------

// CMsgEffectData

// optional .CMsgVector origin = 1;
inline bool CMsgEffectData::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgEffectData::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgEffectData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgEffectData::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgEffectData::origin() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgEffectData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEffectData.origin)
  return origin_;
}
inline ::CMsgVector* CMsgEffectData::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgEffectData::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEffectData.origin)
}

// optional .CMsgVector start = 2;
inline bool CMsgEffectData::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgEffectData::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgEffectData::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgEffectData::clear_start() {
  if (start_ != NULL) start_->::CMsgVector::Clear();
  clear_has_start();
}
inline const ::CMsgVector& CMsgEffectData::start() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CMsgVector* CMsgEffectData::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEffectData.start)
  return start_;
}
inline ::CMsgVector* CMsgEffectData::release_start() {
  clear_has_start();
  ::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void CMsgEffectData::set_allocated_start(::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEffectData.start)
}

// optional .CMsgVector normal = 3;
inline bool CMsgEffectData::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgEffectData::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgEffectData::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgEffectData::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& CMsgEffectData::normal() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* CMsgEffectData::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEffectData.normal)
  return normal_;
}
inline ::CMsgVector* CMsgEffectData::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void CMsgEffectData::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEffectData.normal)
}

// optional .CMsgQAngle angles = 4;
inline bool CMsgEffectData::has_angles() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgEffectData::set_has_angles() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgEffectData::clear_has_angles() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgEffectData::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgEffectData::angles() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgEffectData::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgEffectData.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgEffectData::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgEffectData::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgEffectData.angles)
}

// optional fixed32 entity = 5;
inline bool CMsgEffectData::has_entity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgEffectData::set_has_entity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgEffectData::clear_has_entity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgEffectData::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
inline ::google::protobuf::uint32 CMsgEffectData::entity() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.entity)
  return entity_;
}
inline void CMsgEffectData::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.entity)
}

// optional fixed32 otherentity = 6;
inline bool CMsgEffectData::has_otherentity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgEffectData::set_has_otherentity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgEffectData::clear_has_otherentity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgEffectData::clear_otherentity() {
  otherentity_ = 0u;
  clear_has_otherentity();
}
inline ::google::protobuf::uint32 CMsgEffectData::otherentity() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.otherentity)
  return otherentity_;
}
inline void CMsgEffectData::set_otherentity(::google::protobuf::uint32 value) {
  set_has_otherentity();
  otherentity_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.otherentity)
}

// optional float scale = 7;
inline bool CMsgEffectData::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgEffectData::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgEffectData::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgEffectData::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgEffectData::scale() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.scale)
  return scale_;
}
inline void CMsgEffectData::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.scale)
}

// optional float magnitude = 8;
inline bool CMsgEffectData::has_magnitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgEffectData::set_has_magnitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgEffectData::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgEffectData::clear_magnitude() {
  magnitude_ = 0;
  clear_has_magnitude();
}
inline float CMsgEffectData::magnitude() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.magnitude)
  return magnitude_;
}
inline void CMsgEffectData::set_magnitude(float value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.magnitude)
}

// optional float radius = 9;
inline bool CMsgEffectData::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgEffectData::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgEffectData::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgEffectData::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float CMsgEffectData::radius() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.radius)
  return radius_;
}
inline void CMsgEffectData::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.radius)
}

// optional fixed32 surfaceprop = 10;
inline bool CMsgEffectData::has_surfaceprop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgEffectData::set_has_surfaceprop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgEffectData::clear_has_surfaceprop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgEffectData::clear_surfaceprop() {
  surfaceprop_ = 0u;
  clear_has_surfaceprop();
}
inline ::google::protobuf::uint32 CMsgEffectData::surfaceprop() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.surfaceprop)
  return surfaceprop_;
}
inline void CMsgEffectData::set_surfaceprop(::google::protobuf::uint32 value) {
  set_has_surfaceprop();
  surfaceprop_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.surfaceprop)
}

// optional fixed64 effectindex = 11;
inline bool CMsgEffectData::has_effectindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgEffectData::set_has_effectindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgEffectData::clear_has_effectindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgEffectData::clear_effectindex() {
  effectindex_ = GOOGLE_ULONGLONG(0);
  clear_has_effectindex();
}
inline ::google::protobuf::uint64 CMsgEffectData::effectindex() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.effectindex)
  return effectindex_;
}
inline void CMsgEffectData::set_effectindex(::google::protobuf::uint64 value) {
  set_has_effectindex();
  effectindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.effectindex)
}

// optional uint32 damagetype = 12;
inline bool CMsgEffectData::has_damagetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgEffectData::set_has_damagetype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgEffectData::clear_has_damagetype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgEffectData::clear_damagetype() {
  damagetype_ = 0u;
  clear_has_damagetype();
}
inline ::google::protobuf::uint32 CMsgEffectData::damagetype() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.damagetype)
  return damagetype_;
}
inline void CMsgEffectData::set_damagetype(::google::protobuf::uint32 value) {
  set_has_damagetype();
  damagetype_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.damagetype)
}

// optional uint32 material = 13;
inline bool CMsgEffectData::has_material() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgEffectData::set_has_material() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgEffectData::clear_has_material() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgEffectData::clear_material() {
  material_ = 0u;
  clear_has_material();
}
inline ::google::protobuf::uint32 CMsgEffectData::material() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.material)
  return material_;
}
inline void CMsgEffectData::set_material(::google::protobuf::uint32 value) {
  set_has_material();
  material_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.material)
}

// optional uint32 hitbox = 14;
inline bool CMsgEffectData::has_hitbox() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgEffectData::set_has_hitbox() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgEffectData::clear_has_hitbox() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgEffectData::clear_hitbox() {
  hitbox_ = 0u;
  clear_has_hitbox();
}
inline ::google::protobuf::uint32 CMsgEffectData::hitbox() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.hitbox)
  return hitbox_;
}
inline void CMsgEffectData::set_hitbox(::google::protobuf::uint32 value) {
  set_has_hitbox();
  hitbox_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.hitbox)
}

// optional uint32 color = 15;
inline bool CMsgEffectData::has_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgEffectData::set_has_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgEffectData::clear_has_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgEffectData::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CMsgEffectData::color() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.color)
  return color_;
}
inline void CMsgEffectData::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.color)
}

// optional uint32 flags = 16;
inline bool CMsgEffectData::has_flags() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgEffectData::set_has_flags() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgEffectData::clear_has_flags() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgEffectData::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgEffectData::flags() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.flags)
  return flags_;
}
inline void CMsgEffectData::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.flags)
}

// optional int32 attachmentindex = 17;
inline bool CMsgEffectData::has_attachmentindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgEffectData::set_has_attachmentindex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgEffectData::clear_has_attachmentindex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgEffectData::clear_attachmentindex() {
  attachmentindex_ = 0;
  clear_has_attachmentindex();
}
inline ::google::protobuf::int32 CMsgEffectData::attachmentindex() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.attachmentindex)
  return attachmentindex_;
}
inline void CMsgEffectData::set_attachmentindex(::google::protobuf::int32 value) {
  set_has_attachmentindex();
  attachmentindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.attachmentindex)
}

// optional uint32 effectname = 18;
inline bool CMsgEffectData::has_effectname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgEffectData::set_has_effectname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgEffectData::clear_has_effectname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgEffectData::clear_effectname() {
  effectname_ = 0u;
  clear_has_effectname();
}
inline ::google::protobuf::uint32 CMsgEffectData::effectname() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.effectname)
  return effectname_;
}
inline void CMsgEffectData::set_effectname(::google::protobuf::uint32 value) {
  set_has_effectname();
  effectname_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.effectname)
}

// optional uint32 attachmentname = 19;
inline bool CMsgEffectData::has_attachmentname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgEffectData::set_has_attachmentname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgEffectData::clear_has_attachmentname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgEffectData::clear_attachmentname() {
  attachmentname_ = 0u;
  clear_has_attachmentname();
}
inline ::google::protobuf::uint32 CMsgEffectData::attachmentname() const {
  // @@protoc_insertion_point(field_get:CMsgEffectData.attachmentname)
  return attachmentname_;
}
inline void CMsgEffectData::set_attachmentname(::google::protobuf::uint32 value) {
  set_has_attachmentname();
  attachmentname_ = value;
  // @@protoc_insertion_point(field_set:CMsgEffectData.attachmentname)
}

// -------------------------------------------------------------------

// CMsgTEEffectDispatch

// optional .CMsgEffectData effectdata = 1;
inline bool CMsgTEEffectDispatch::has_effectdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEEffectDispatch::set_has_effectdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEEffectDispatch::clear_has_effectdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEEffectDispatch::clear_effectdata() {
  if (effectdata_ != NULL) effectdata_->::CMsgEffectData::Clear();
  clear_has_effectdata();
}
inline const ::CMsgEffectData& CMsgTEEffectDispatch::effectdata() const {
  // @@protoc_insertion_point(field_get:CMsgTEEffectDispatch.effectdata)
  return effectdata_ != NULL ? *effectdata_ : *default_instance_->effectdata_;
}
inline ::CMsgEffectData* CMsgTEEffectDispatch::mutable_effectdata() {
  set_has_effectdata();
  if (effectdata_ == NULL) {
    effectdata_ = new ::CMsgEffectData;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEEffectDispatch.effectdata)
  return effectdata_;
}
inline ::CMsgEffectData* CMsgTEEffectDispatch::release_effectdata() {
  clear_has_effectdata();
  ::CMsgEffectData* temp = effectdata_;
  effectdata_ = NULL;
  return temp;
}
inline void CMsgTEEffectDispatch::set_allocated_effectdata(::CMsgEffectData* effectdata) {
  delete effectdata_;
  effectdata_ = effectdata;
  if (effectdata) {
    set_has_effectdata();
  } else {
    clear_has_effectdata();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEEffectDispatch.effectdata)
}

// -------------------------------------------------------------------

// CMsgTEEnergySplash

// optional .CMsgVector pos = 1;
inline bool CMsgTEEnergySplash::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEEnergySplash::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEEnergySplash::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEEnergySplash::clear_pos() {
  if (pos_ != NULL) pos_->::CMsgVector::Clear();
  clear_has_pos();
}
inline const ::CMsgVector& CMsgTEEnergySplash::pos() const {
  // @@protoc_insertion_point(field_get:CMsgTEEnergySplash.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::CMsgVector* CMsgTEEnergySplash::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEEnergySplash.pos)
  return pos_;
}
inline ::CMsgVector* CMsgTEEnergySplash::release_pos() {
  clear_has_pos();
  ::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CMsgTEEnergySplash::set_allocated_pos(::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEEnergySplash.pos)
}

// optional .CMsgVector dir = 2;
inline bool CMsgTEEnergySplash::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEEnergySplash::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEEnergySplash::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEEnergySplash::clear_dir() {
  if (dir_ != NULL) dir_->::CMsgVector::Clear();
  clear_has_dir();
}
inline const ::CMsgVector& CMsgTEEnergySplash::dir() const {
  // @@protoc_insertion_point(field_get:CMsgTEEnergySplash.dir)
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
inline ::CMsgVector* CMsgTEEnergySplash::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEEnergySplash.dir)
  return dir_;
}
inline ::CMsgVector* CMsgTEEnergySplash::release_dir() {
  clear_has_dir();
  ::CMsgVector* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline void CMsgTEEnergySplash::set_allocated_dir(::CMsgVector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEEnergySplash.dir)
}

// optional bool explosive = 3;
inline bool CMsgTEEnergySplash::has_explosive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEEnergySplash::set_has_explosive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEEnergySplash::clear_has_explosive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEEnergySplash::clear_explosive() {
  explosive_ = false;
  clear_has_explosive();
}
inline bool CMsgTEEnergySplash::explosive() const {
  // @@protoc_insertion_point(field_get:CMsgTEEnergySplash.explosive)
  return explosive_;
}
inline void CMsgTEEnergySplash::set_explosive(bool value) {
  set_has_explosive();
  explosive_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEEnergySplash.explosive)
}

// -------------------------------------------------------------------

// CMsgTEFizz

// optional uint32 entity = 1;
inline bool CMsgTEFizz::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEFizz::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEFizz::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEFizz::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
inline ::google::protobuf::uint32 CMsgTEFizz::entity() const {
  // @@protoc_insertion_point(field_get:CMsgTEFizz.entity)
  return entity_;
}
inline void CMsgTEFizz::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEFizz.entity)
}

// optional uint32 density = 2;
inline bool CMsgTEFizz::has_density() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEFizz::set_has_density() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEFizz::clear_has_density() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEFizz::clear_density() {
  density_ = 0u;
  clear_has_density();
}
inline ::google::protobuf::uint32 CMsgTEFizz::density() const {
  // @@protoc_insertion_point(field_get:CMsgTEFizz.density)
  return density_;
}
inline void CMsgTEFizz::set_density(::google::protobuf::uint32 value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEFizz.density)
}

// optional int32 current = 3;
inline bool CMsgTEFizz::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEFizz::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEFizz::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEFizz::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 CMsgTEFizz::current() const {
  // @@protoc_insertion_point(field_get:CMsgTEFizz.current)
  return current_;
}
inline void CMsgTEFizz::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEFizz.current)
}

// -------------------------------------------------------------------

// CMsgTEShatterSurface

// optional .CMsgVector origin = 1;
inline bool CMsgTEShatterSurface::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEShatterSurface::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEShatterSurface::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEShatterSurface::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEShatterSurface::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEShatterSurface::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEShatterSurface.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEShatterSurface::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEShatterSurface::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEShatterSurface.origin)
}

// optional .CMsgQAngle angles = 2;
inline bool CMsgTEShatterSurface::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEShatterSurface::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEShatterSurface::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEShatterSurface::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgTEShatterSurface::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgTEShatterSurface::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEShatterSurface.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgTEShatterSurface::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgTEShatterSurface::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEShatterSurface.angles)
}

// optional .CMsgVector force = 3;
inline bool CMsgTEShatterSurface::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEShatterSurface::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEShatterSurface::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEShatterSurface::clear_force() {
  if (force_ != NULL) force_->::CMsgVector::Clear();
  clear_has_force();
}
inline const ::CMsgVector& CMsgTEShatterSurface::force() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.force)
  return force_ != NULL ? *force_ : *default_instance_->force_;
}
inline ::CMsgVector* CMsgTEShatterSurface::mutable_force() {
  set_has_force();
  if (force_ == NULL) {
    force_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEShatterSurface.force)
  return force_;
}
inline ::CMsgVector* CMsgTEShatterSurface::release_force() {
  clear_has_force();
  ::CMsgVector* temp = force_;
  force_ = NULL;
  return temp;
}
inline void CMsgTEShatterSurface::set_allocated_force(::CMsgVector* force) {
  delete force_;
  force_ = force;
  if (force) {
    set_has_force();
  } else {
    clear_has_force();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEShatterSurface.force)
}

// optional .CMsgVector forcepos = 4;
inline bool CMsgTEShatterSurface::has_forcepos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEShatterSurface::set_has_forcepos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEShatterSurface::clear_has_forcepos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEShatterSurface::clear_forcepos() {
  if (forcepos_ != NULL) forcepos_->::CMsgVector::Clear();
  clear_has_forcepos();
}
inline const ::CMsgVector& CMsgTEShatterSurface::forcepos() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.forcepos)
  return forcepos_ != NULL ? *forcepos_ : *default_instance_->forcepos_;
}
inline ::CMsgVector* CMsgTEShatterSurface::mutable_forcepos() {
  set_has_forcepos();
  if (forcepos_ == NULL) {
    forcepos_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEShatterSurface.forcepos)
  return forcepos_;
}
inline ::CMsgVector* CMsgTEShatterSurface::release_forcepos() {
  clear_has_forcepos();
  ::CMsgVector* temp = forcepos_;
  forcepos_ = NULL;
  return temp;
}
inline void CMsgTEShatterSurface::set_allocated_forcepos(::CMsgVector* forcepos) {
  delete forcepos_;
  forcepos_ = forcepos;
  if (forcepos) {
    set_has_forcepos();
  } else {
    clear_has_forcepos();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEShatterSurface.forcepos)
}

// optional float width = 5;
inline bool CMsgTEShatterSurface::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEShatterSurface::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEShatterSurface::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEShatterSurface::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float CMsgTEShatterSurface::width() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.width)
  return width_;
}
inline void CMsgTEShatterSurface::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.width)
}

// optional float height = 6;
inline bool CMsgTEShatterSurface::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTEShatterSurface::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTEShatterSurface::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTEShatterSurface::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float CMsgTEShatterSurface::height() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.height)
  return height_;
}
inline void CMsgTEShatterSurface::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.height)
}

// optional float shardsize = 7;
inline bool CMsgTEShatterSurface::has_shardsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTEShatterSurface::set_has_shardsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTEShatterSurface::clear_has_shardsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTEShatterSurface::clear_shardsize() {
  shardsize_ = 0;
  clear_has_shardsize();
}
inline float CMsgTEShatterSurface::shardsize() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.shardsize)
  return shardsize_;
}
inline void CMsgTEShatterSurface::set_shardsize(float value) {
  set_has_shardsize();
  shardsize_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.shardsize)
}

// optional uint32 surfacetype = 8;
inline bool CMsgTEShatterSurface::has_surfacetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTEShatterSurface::set_has_surfacetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTEShatterSurface::clear_has_surfacetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTEShatterSurface::clear_surfacetype() {
  surfacetype_ = 0u;
  clear_has_surfacetype();
}
inline ::google::protobuf::uint32 CMsgTEShatterSurface::surfacetype() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.surfacetype)
  return surfacetype_;
}
inline void CMsgTEShatterSurface::set_surfacetype(::google::protobuf::uint32 value) {
  set_has_surfacetype();
  surfacetype_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.surfacetype)
}

// optional fixed32 frontcolor = 9;
inline bool CMsgTEShatterSurface::has_frontcolor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTEShatterSurface::set_has_frontcolor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTEShatterSurface::clear_has_frontcolor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTEShatterSurface::clear_frontcolor() {
  frontcolor_ = 0u;
  clear_has_frontcolor();
}
inline ::google::protobuf::uint32 CMsgTEShatterSurface::frontcolor() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.frontcolor)
  return frontcolor_;
}
inline void CMsgTEShatterSurface::set_frontcolor(::google::protobuf::uint32 value) {
  set_has_frontcolor();
  frontcolor_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.frontcolor)
}

// optional fixed32 backcolor = 10;
inline bool CMsgTEShatterSurface::has_backcolor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgTEShatterSurface::set_has_backcolor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgTEShatterSurface::clear_has_backcolor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgTEShatterSurface::clear_backcolor() {
  backcolor_ = 0u;
  clear_has_backcolor();
}
inline ::google::protobuf::uint32 CMsgTEShatterSurface::backcolor() const {
  // @@protoc_insertion_point(field_get:CMsgTEShatterSurface.backcolor)
  return backcolor_;
}
inline void CMsgTEShatterSurface::set_backcolor(::google::protobuf::uint32 value) {
  set_has_backcolor();
  backcolor_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEShatterSurface.backcolor)
}

// -------------------------------------------------------------------

// CMsgTEGlowSprite

// optional .CMsgVector origin = 1;
inline bool CMsgTEGlowSprite::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEGlowSprite::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEGlowSprite::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEGlowSprite::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEGlowSprite::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEGlowSprite.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEGlowSprite::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEGlowSprite.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEGlowSprite::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEGlowSprite::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEGlowSprite.origin)
}

// optional float scale = 2;
inline bool CMsgTEGlowSprite::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEGlowSprite::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEGlowSprite::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEGlowSprite::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgTEGlowSprite::scale() const {
  // @@protoc_insertion_point(field_get:CMsgTEGlowSprite.scale)
  return scale_;
}
inline void CMsgTEGlowSprite::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEGlowSprite.scale)
}

// optional float life = 3;
inline bool CMsgTEGlowSprite::has_life() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEGlowSprite::set_has_life() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEGlowSprite::clear_has_life() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEGlowSprite::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline float CMsgTEGlowSprite::life() const {
  // @@protoc_insertion_point(field_get:CMsgTEGlowSprite.life)
  return life_;
}
inline void CMsgTEGlowSprite::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEGlowSprite.life)
}

// optional uint32 brightness = 4;
inline bool CMsgTEGlowSprite::has_brightness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEGlowSprite::set_has_brightness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEGlowSprite::clear_has_brightness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEGlowSprite::clear_brightness() {
  brightness_ = 0u;
  clear_has_brightness();
}
inline ::google::protobuf::uint32 CMsgTEGlowSprite::brightness() const {
  // @@protoc_insertion_point(field_get:CMsgTEGlowSprite.brightness)
  return brightness_;
}
inline void CMsgTEGlowSprite::set_brightness(::google::protobuf::uint32 value) {
  set_has_brightness();
  brightness_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEGlowSprite.brightness)
}

// -------------------------------------------------------------------

// CMsgTEImpact

// optional .CMsgVector origin = 1;
inline bool CMsgTEImpact::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEImpact::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEImpact::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEImpact::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEImpact::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEImpact.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEImpact::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEImpact.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEImpact::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEImpact::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEImpact.origin)
}

// optional .CMsgVector normal = 2;
inline bool CMsgTEImpact::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEImpact::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEImpact::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEImpact::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& CMsgTEImpact::normal() const {
  // @@protoc_insertion_point(field_get:CMsgTEImpact.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* CMsgTEImpact::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEImpact.normal)
  return normal_;
}
inline ::CMsgVector* CMsgTEImpact::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void CMsgTEImpact::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEImpact.normal)
}

// optional uint32 type = 3;
inline bool CMsgTEImpact::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEImpact::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEImpact::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEImpact::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgTEImpact::type() const {
  // @@protoc_insertion_point(field_get:CMsgTEImpact.type)
  return type_;
}
inline void CMsgTEImpact::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEImpact.type)
}

// -------------------------------------------------------------------

// CMsgTEMuzzleFlash

// optional .CMsgVector origin = 1;
inline bool CMsgTEMuzzleFlash::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEMuzzleFlash::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEMuzzleFlash::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEMuzzleFlash::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEMuzzleFlash::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEMuzzleFlash.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEMuzzleFlash::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEMuzzleFlash.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEMuzzleFlash::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEMuzzleFlash::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEMuzzleFlash.origin)
}

// optional .CMsgQAngle angles = 2;
inline bool CMsgTEMuzzleFlash::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEMuzzleFlash::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEMuzzleFlash::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEMuzzleFlash::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgTEMuzzleFlash::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEMuzzleFlash.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgTEMuzzleFlash::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEMuzzleFlash.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgTEMuzzleFlash::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgTEMuzzleFlash::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEMuzzleFlash.angles)
}

// optional float scale = 3;
inline bool CMsgTEMuzzleFlash::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEMuzzleFlash::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEMuzzleFlash::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEMuzzleFlash::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgTEMuzzleFlash::scale() const {
  // @@protoc_insertion_point(field_get:CMsgTEMuzzleFlash.scale)
  return scale_;
}
inline void CMsgTEMuzzleFlash::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEMuzzleFlash.scale)
}

// optional uint32 type = 4;
inline bool CMsgTEMuzzleFlash::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEMuzzleFlash::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEMuzzleFlash::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEMuzzleFlash::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMsgTEMuzzleFlash::type() const {
  // @@protoc_insertion_point(field_get:CMsgTEMuzzleFlash.type)
  return type_;
}
inline void CMsgTEMuzzleFlash::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEMuzzleFlash.type)
}

// -------------------------------------------------------------------

// CMsgTEBloodStream

// optional .CMsgVector origin = 1;
inline bool CMsgTEBloodStream::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEBloodStream::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEBloodStream::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEBloodStream::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEBloodStream::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEBloodStream.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEBloodStream::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBloodStream.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEBloodStream::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEBloodStream::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBloodStream.origin)
}

// optional .CMsgVector direction = 2;
inline bool CMsgTEBloodStream::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEBloodStream::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEBloodStream::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEBloodStream::clear_direction() {
  if (direction_ != NULL) direction_->::CMsgVector::Clear();
  clear_has_direction();
}
inline const ::CMsgVector& CMsgTEBloodStream::direction() const {
  // @@protoc_insertion_point(field_get:CMsgTEBloodStream.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::CMsgVector* CMsgTEBloodStream::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEBloodStream.direction)
  return direction_;
}
inline ::CMsgVector* CMsgTEBloodStream::release_direction() {
  clear_has_direction();
  ::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void CMsgTEBloodStream::set_allocated_direction(::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEBloodStream.direction)
}

// optional fixed32 color = 3;
inline bool CMsgTEBloodStream::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEBloodStream::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEBloodStream::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEBloodStream::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CMsgTEBloodStream::color() const {
  // @@protoc_insertion_point(field_get:CMsgTEBloodStream.color)
  return color_;
}
inline void CMsgTEBloodStream::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBloodStream.color)
}

// optional uint32 amount = 4;
inline bool CMsgTEBloodStream::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEBloodStream::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEBloodStream::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEBloodStream::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 CMsgTEBloodStream::amount() const {
  // @@protoc_insertion_point(field_get:CMsgTEBloodStream.amount)
  return amount_;
}
inline void CMsgTEBloodStream::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEBloodStream.amount)
}

// -------------------------------------------------------------------

// CMsgTEExplosion

// optional .CMsgVector origin = 1;
inline bool CMsgTEExplosion::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEExplosion::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEExplosion::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEExplosion::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEExplosion::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEExplosion::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEExplosion.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEExplosion::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEExplosion::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEExplosion.origin)
}

// optional uint32 framerate = 2;
inline bool CMsgTEExplosion::has_framerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEExplosion::set_has_framerate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEExplosion::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEExplosion::clear_framerate() {
  framerate_ = 0u;
  clear_has_framerate();
}
inline ::google::protobuf::uint32 CMsgTEExplosion::framerate() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.framerate)
  return framerate_;
}
inline void CMsgTEExplosion::set_framerate(::google::protobuf::uint32 value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.framerate)
}

// optional uint32 flags = 3;
inline bool CMsgTEExplosion::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEExplosion::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEExplosion::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEExplosion::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgTEExplosion::flags() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.flags)
  return flags_;
}
inline void CMsgTEExplosion::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.flags)
}

// optional .CMsgVector normal = 4;
inline bool CMsgTEExplosion::has_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEExplosion::set_has_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEExplosion::clear_has_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEExplosion::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& CMsgTEExplosion::normal() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* CMsgTEExplosion::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEExplosion.normal)
  return normal_;
}
inline ::CMsgVector* CMsgTEExplosion::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void CMsgTEExplosion::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEExplosion.normal)
}

// optional uint32 materialtype = 5;
inline bool CMsgTEExplosion::has_materialtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEExplosion::set_has_materialtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEExplosion::clear_has_materialtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEExplosion::clear_materialtype() {
  materialtype_ = 0u;
  clear_has_materialtype();
}
inline ::google::protobuf::uint32 CMsgTEExplosion::materialtype() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.materialtype)
  return materialtype_;
}
inline void CMsgTEExplosion::set_materialtype(::google::protobuf::uint32 value) {
  set_has_materialtype();
  materialtype_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.materialtype)
}

// optional uint32 radius = 6;
inline bool CMsgTEExplosion::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTEExplosion::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTEExplosion::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTEExplosion::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
inline ::google::protobuf::uint32 CMsgTEExplosion::radius() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.radius)
  return radius_;
}
inline void CMsgTEExplosion::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.radius)
}

// optional uint32 magnitude = 7;
inline bool CMsgTEExplosion::has_magnitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTEExplosion::set_has_magnitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTEExplosion::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTEExplosion::clear_magnitude() {
  magnitude_ = 0u;
  clear_has_magnitude();
}
inline ::google::protobuf::uint32 CMsgTEExplosion::magnitude() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.magnitude)
  return magnitude_;
}
inline void CMsgTEExplosion::set_magnitude(::google::protobuf::uint32 value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.magnitude)
}

// optional float scale = 8;
inline bool CMsgTEExplosion::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTEExplosion::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTEExplosion::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTEExplosion::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgTEExplosion::scale() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.scale)
  return scale_;
}
inline void CMsgTEExplosion::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.scale)
}

// optional bool affect_ragdolls = 9;
inline bool CMsgTEExplosion::has_affect_ragdolls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTEExplosion::set_has_affect_ragdolls() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTEExplosion::clear_has_affect_ragdolls() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTEExplosion::clear_affect_ragdolls() {
  affect_ragdolls_ = false;
  clear_has_affect_ragdolls();
}
inline bool CMsgTEExplosion::affect_ragdolls() const {
  // @@protoc_insertion_point(field_get:CMsgTEExplosion.affect_ragdolls)
  return affect_ragdolls_;
}
inline void CMsgTEExplosion::set_affect_ragdolls(bool value) {
  set_has_affect_ragdolls();
  affect_ragdolls_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEExplosion.affect_ragdolls)
}

// -------------------------------------------------------------------

// CMsgTEDust

// optional .CMsgVector origin = 1;
inline bool CMsgTEDust::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEDust::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEDust::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEDust::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEDust::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEDust.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEDust::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEDust.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEDust::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEDust::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEDust.origin)
}

// optional float size = 2;
inline bool CMsgTEDust::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEDust::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEDust::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEDust::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline float CMsgTEDust::size() const {
  // @@protoc_insertion_point(field_get:CMsgTEDust.size)
  return size_;
}
inline void CMsgTEDust::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEDust.size)
}

// optional float speed = 3;
inline bool CMsgTEDust::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEDust::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEDust::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEDust::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float CMsgTEDust::speed() const {
  // @@protoc_insertion_point(field_get:CMsgTEDust.speed)
  return speed_;
}
inline void CMsgTEDust::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEDust.speed)
}

// optional .CMsgVector direction = 4;
inline bool CMsgTEDust::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEDust::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEDust::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEDust::clear_direction() {
  if (direction_ != NULL) direction_->::CMsgVector::Clear();
  clear_has_direction();
}
inline const ::CMsgVector& CMsgTEDust::direction() const {
  // @@protoc_insertion_point(field_get:CMsgTEDust.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::CMsgVector* CMsgTEDust::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEDust.direction)
  return direction_;
}
inline ::CMsgVector* CMsgTEDust::release_direction() {
  clear_has_direction();
  ::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void CMsgTEDust::set_allocated_direction(::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEDust.direction)
}

// -------------------------------------------------------------------

// CMsgTELargeFunnel

// optional .CMsgVector origin = 1;
inline bool CMsgTELargeFunnel::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTELargeFunnel::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTELargeFunnel::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTELargeFunnel::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTELargeFunnel::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTELargeFunnel.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTELargeFunnel::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTELargeFunnel.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTELargeFunnel::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTELargeFunnel::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTELargeFunnel.origin)
}

// optional uint32 reversed = 2;
inline bool CMsgTELargeFunnel::has_reversed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTELargeFunnel::set_has_reversed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTELargeFunnel::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTELargeFunnel::clear_reversed() {
  reversed_ = 0u;
  clear_has_reversed();
}
inline ::google::protobuf::uint32 CMsgTELargeFunnel::reversed() const {
  // @@protoc_insertion_point(field_get:CMsgTELargeFunnel.reversed)
  return reversed_;
}
inline void CMsgTELargeFunnel::set_reversed(::google::protobuf::uint32 value) {
  set_has_reversed();
  reversed_ = value;
  // @@protoc_insertion_point(field_set:CMsgTELargeFunnel.reversed)
}

// -------------------------------------------------------------------

// CMsgTESparks

// optional .CMsgVector origin = 1;
inline bool CMsgTESparks::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTESparks::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTESparks::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTESparks::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTESparks::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTESparks.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTESparks::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTESparks.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTESparks::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTESparks::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTESparks.origin)
}

// optional uint32 magnitude = 2;
inline bool CMsgTESparks::has_magnitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTESparks::set_has_magnitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTESparks::clear_has_magnitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTESparks::clear_magnitude() {
  magnitude_ = 0u;
  clear_has_magnitude();
}
inline ::google::protobuf::uint32 CMsgTESparks::magnitude() const {
  // @@protoc_insertion_point(field_get:CMsgTESparks.magnitude)
  return magnitude_;
}
inline void CMsgTESparks::set_magnitude(::google::protobuf::uint32 value) {
  set_has_magnitude();
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:CMsgTESparks.magnitude)
}

// optional uint32 length = 3;
inline bool CMsgTESparks::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTESparks::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTESparks::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTESparks::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CMsgTESparks::length() const {
  // @@protoc_insertion_point(field_get:CMsgTESparks.length)
  return length_;
}
inline void CMsgTESparks::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:CMsgTESparks.length)
}

// optional .CMsgVector direction = 4;
inline bool CMsgTESparks::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTESparks::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTESparks::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTESparks::clear_direction() {
  if (direction_ != NULL) direction_->::CMsgVector::Clear();
  clear_has_direction();
}
inline const ::CMsgVector& CMsgTESparks::direction() const {
  // @@protoc_insertion_point(field_get:CMsgTESparks.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::CMsgVector* CMsgTESparks::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTESparks.direction)
  return direction_;
}
inline ::CMsgVector* CMsgTESparks::release_direction() {
  clear_has_direction();
  ::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void CMsgTESparks::set_allocated_direction(::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTESparks.direction)
}

// -------------------------------------------------------------------

// CMsgTEPhysicsProp

// optional .CMsgVector origin = 1;
inline bool CMsgTEPhysicsProp::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEPhysicsProp::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEPhysicsProp::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEPhysicsProp::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEPhysicsProp::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEPhysicsProp.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEPhysicsProp::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEPhysicsProp::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEPhysicsProp.origin)
}

// optional .CMsgVector velocity = 2;
inline bool CMsgTEPhysicsProp::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEPhysicsProp::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEPhysicsProp::clear_velocity() {
  if (velocity_ != NULL) velocity_->::CMsgVector::Clear();
  clear_has_velocity();
}
inline const ::CMsgVector& CMsgTEPhysicsProp::velocity() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::CMsgVector* CMsgTEPhysicsProp::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEPhysicsProp.velocity)
  return velocity_;
}
inline ::CMsgVector* CMsgTEPhysicsProp::release_velocity() {
  clear_has_velocity();
  ::CMsgVector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CMsgTEPhysicsProp::set_allocated_velocity(::CMsgVector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEPhysicsProp.velocity)
}

// optional .CMsgQAngle angles = 3;
inline bool CMsgTEPhysicsProp::has_angles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_angles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEPhysicsProp::clear_has_angles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEPhysicsProp::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgTEPhysicsProp::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgTEPhysicsProp::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEPhysicsProp.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgTEPhysicsProp::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgTEPhysicsProp::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEPhysicsProp.angles)
}

// optional fixed32 skin = 4;
inline bool CMsgTEPhysicsProp::has_skin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_skin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEPhysicsProp::clear_has_skin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEPhysicsProp::clear_skin() {
  skin_ = 0u;
  clear_has_skin();
}
inline ::google::protobuf::uint32 CMsgTEPhysicsProp::skin() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.skin)
  return skin_;
}
inline void CMsgTEPhysicsProp::set_skin(::google::protobuf::uint32 value) {
  set_has_skin();
  skin_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.skin)
}

// optional uint32 flags = 5;
inline bool CMsgTEPhysicsProp::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgTEPhysicsProp::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgTEPhysicsProp::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgTEPhysicsProp::flags() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.flags)
  return flags_;
}
inline void CMsgTEPhysicsProp::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.flags)
}

// optional uint32 effects = 6;
inline bool CMsgTEPhysicsProp::has_effects() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_effects() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgTEPhysicsProp::clear_has_effects() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgTEPhysicsProp::clear_effects() {
  effects_ = 0u;
  clear_has_effects();
}
inline ::google::protobuf::uint32 CMsgTEPhysicsProp::effects() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.effects)
  return effects_;
}
inline void CMsgTEPhysicsProp::set_effects(::google::protobuf::uint32 value) {
  set_has_effects();
  effects_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.effects)
}

// optional fixed32 color = 7;
inline bool CMsgTEPhysicsProp::has_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgTEPhysicsProp::clear_has_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgTEPhysicsProp::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 CMsgTEPhysicsProp::color() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.color)
  return color_;
}
inline void CMsgTEPhysicsProp::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.color)
}

// optional fixed64 modelindex = 8;
inline bool CMsgTEPhysicsProp::has_modelindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_modelindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgTEPhysicsProp::clear_has_modelindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgTEPhysicsProp::clear_modelindex() {
  modelindex_ = GOOGLE_ULONGLONG(0);
  clear_has_modelindex();
}
inline ::google::protobuf::uint64 CMsgTEPhysicsProp::modelindex() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.modelindex)
  return modelindex_;
}
inline void CMsgTEPhysicsProp::set_modelindex(::google::protobuf::uint64 value) {
  set_has_modelindex();
  modelindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.modelindex)
}

// optional uint32 breakmodelsnottomake = 9;
inline bool CMsgTEPhysicsProp::has_breakmodelsnottomake() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_breakmodelsnottomake() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgTEPhysicsProp::clear_has_breakmodelsnottomake() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgTEPhysicsProp::clear_breakmodelsnottomake() {
  breakmodelsnottomake_ = 0u;
  clear_has_breakmodelsnottomake();
}
inline ::google::protobuf::uint32 CMsgTEPhysicsProp::breakmodelsnottomake() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.breakmodelsnottomake)
  return breakmodelsnottomake_;
}
inline void CMsgTEPhysicsProp::set_breakmodelsnottomake(::google::protobuf::uint32 value) {
  set_has_breakmodelsnottomake();
  breakmodelsnottomake_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.breakmodelsnottomake)
}

// optional float scale = 10;
inline bool CMsgTEPhysicsProp::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgTEPhysicsProp::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgTEPhysicsProp::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgTEPhysicsProp::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgTEPhysicsProp::scale() const {
  // @@protoc_insertion_point(field_get:CMsgTEPhysicsProp.scale)
  return scale_;
}
inline void CMsgTEPhysicsProp::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPhysicsProp.scale)
}

// -------------------------------------------------------------------

// CMsgTEPlayerDecal

// optional .CMsgVector origin = 1;
inline bool CMsgTEPlayerDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEPlayerDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEPlayerDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEPlayerDecal::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEPlayerDecal::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerDecal.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEPlayerDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEPlayerDecal.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEPlayerDecal::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEPlayerDecal::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEPlayerDecal.origin)
}

// optional uint32 player = 2;
inline bool CMsgTEPlayerDecal::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEPlayerDecal::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEPlayerDecal::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEPlayerDecal::clear_player() {
  player_ = 0u;
  clear_has_player();
}
inline ::google::protobuf::uint32 CMsgTEPlayerDecal::player() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerDecal.player)
  return player_;
}
inline void CMsgTEPlayerDecal::set_player(::google::protobuf::uint32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPlayerDecal.player)
}

// optional uint32 entity = 3;
inline bool CMsgTEPlayerDecal::has_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEPlayerDecal::set_has_entity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEPlayerDecal::clear_has_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEPlayerDecal::clear_entity() {
  entity_ = 0u;
  clear_has_entity();
}
inline ::google::protobuf::uint32 CMsgTEPlayerDecal::entity() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerDecal.entity)
  return entity_;
}
inline void CMsgTEPlayerDecal::set_entity(::google::protobuf::uint32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEPlayerDecal.entity)
}

// -------------------------------------------------------------------

// CMsgTEProjectedDecal

// optional .CMsgVector origin = 1;
inline bool CMsgTEProjectedDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEProjectedDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEProjectedDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEProjectedDecal::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEProjectedDecal::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEProjectedDecal.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEProjectedDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEProjectedDecal.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEProjectedDecal::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEProjectedDecal::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEProjectedDecal.origin)
}

// optional .CMsgQAngle angles = 2;
inline bool CMsgTEProjectedDecal::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEProjectedDecal::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEProjectedDecal::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEProjectedDecal::clear_angles() {
  if (angles_ != NULL) angles_->::CMsgQAngle::Clear();
  clear_has_angles();
}
inline const ::CMsgQAngle& CMsgTEProjectedDecal::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEProjectedDecal.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::CMsgQAngle* CMsgTEProjectedDecal::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEProjectedDecal.angles)
  return angles_;
}
inline ::CMsgQAngle* CMsgTEProjectedDecal::release_angles() {
  clear_has_angles();
  ::CMsgQAngle* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CMsgTEProjectedDecal::set_allocated_angles(::CMsgQAngle* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEProjectedDecal.angles)
}

// optional uint32 index = 3;
inline bool CMsgTEProjectedDecal::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEProjectedDecal::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEProjectedDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEProjectedDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CMsgTEProjectedDecal::index() const {
  // @@protoc_insertion_point(field_get:CMsgTEProjectedDecal.index)
  return index_;
}
inline void CMsgTEProjectedDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEProjectedDecal.index)
}

// optional float distance = 4;
inline bool CMsgTEProjectedDecal::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgTEProjectedDecal::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgTEProjectedDecal::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgTEProjectedDecal::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float CMsgTEProjectedDecal::distance() const {
  // @@protoc_insertion_point(field_get:CMsgTEProjectedDecal.distance)
  return distance_;
}
inline void CMsgTEProjectedDecal::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEProjectedDecal.distance)
}

// -------------------------------------------------------------------

// CMsgTESmoke

// optional .CMsgVector origin = 1;
inline bool CMsgTESmoke::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTESmoke::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTESmoke::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTESmoke::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTESmoke::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTESmoke.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTESmoke::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTESmoke.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTESmoke::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTESmoke::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTESmoke.origin)
}

// optional float scale = 2;
inline bool CMsgTESmoke::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTESmoke::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTESmoke::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTESmoke::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CMsgTESmoke::scale() const {
  // @@protoc_insertion_point(field_get:CMsgTESmoke.scale)
  return scale_;
}
inline void CMsgTESmoke::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgTESmoke.scale)
}

// -------------------------------------------------------------------

// CMsgTEWorldDecal

// optional .CMsgVector origin = 1;
inline bool CMsgTEWorldDecal::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgTEWorldDecal::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgTEWorldDecal::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgTEWorldDecal::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& CMsgTEWorldDecal::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEWorldDecal.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* CMsgTEWorldDecal::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEWorldDecal.origin)
  return origin_;
}
inline ::CMsgVector* CMsgTEWorldDecal::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CMsgTEWorldDecal::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEWorldDecal.origin)
}

// optional .CMsgVector normal = 2;
inline bool CMsgTEWorldDecal::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgTEWorldDecal::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgTEWorldDecal::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgTEWorldDecal::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& CMsgTEWorldDecal::normal() const {
  // @@protoc_insertion_point(field_get:CMsgTEWorldDecal.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* CMsgTEWorldDecal::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CMsgTEWorldDecal.normal)
  return normal_;
}
inline ::CMsgVector* CMsgTEWorldDecal::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void CMsgTEWorldDecal::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgTEWorldDecal.normal)
}

// optional uint32 index = 3;
inline bool CMsgTEWorldDecal::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgTEWorldDecal::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgTEWorldDecal::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgTEWorldDecal::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 CMsgTEWorldDecal::index() const {
  // @@protoc_insertion_point(field_get:CMsgTEWorldDecal.index)
  return index_;
}
inline void CMsgTEWorldDecal::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CMsgTEWorldDecal.index)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ETEProtobufIds> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETEProtobufIds>() {
  return ::ETEProtobufIds_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_te_2eproto__INCLUDED
