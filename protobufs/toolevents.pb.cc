// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toolevents.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "toolevents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChangeMapToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeMapToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceRayServerToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceRayServerToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolTraceRayResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolTraceRayResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpawnEntityToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpawnEntityToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpawnEntityToolEventResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpawnEntityToolEventResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyEntityToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyEntityToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyAllEntitiesToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyAllEntitiesToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestartMapToolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestartMapToolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_GetEntityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_GetEntityInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_GetEntityInputs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_GetEntityInputsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_FireEntityInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_FireEntityInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_SFMRecordingStateChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_SFMRecordingStateChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToolEvent_SFMToolActiveStateChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolEvent_SFMToolActiveStateChanged_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_toolevents_2eproto() {
  protobuf_AddDesc_toolevents_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "toolevents.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeMapToolEvent_descriptor_ = file->message_type(0);
  static const int ChangeMapToolEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, mapname_),
  };
  ChangeMapToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeMapToolEvent_descriptor_,
      ChangeMapToolEvent::default_instance_,
      ChangeMapToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeMapToolEvent));
  TraceRayServerToolEvent_descriptor_ = file->message_type(1);
  static const int TraceRayServerToolEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, end_),
  };
  TraceRayServerToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraceRayServerToolEvent_descriptor_,
      TraceRayServerToolEvent::default_instance_,
      TraceRayServerToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraceRayServerToolEvent));
  ToolTraceRayResult_descriptor_ = file->message_type(2);
  static const int ToolTraceRayResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, ehandle_),
  };
  ToolTraceRayResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolTraceRayResult_descriptor_,
      ToolTraceRayResult::default_instance_,
      ToolTraceRayResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolTraceRayResult));
  SpawnEntityToolEvent_descriptor_ = file->message_type(3);
  static const int SpawnEntityToolEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, entity_keyvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, clientsideentity_),
  };
  SpawnEntityToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpawnEntityToolEvent_descriptor_,
      SpawnEntityToolEvent::default_instance_,
      SpawnEntityToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpawnEntityToolEvent));
  SpawnEntityToolEventResult_descriptor_ = file->message_type(4);
  static const int SpawnEntityToolEventResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, ehandle_),
  };
  SpawnEntityToolEventResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpawnEntityToolEventResult_descriptor_,
      SpawnEntityToolEventResult::default_instance_,
      SpawnEntityToolEventResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpawnEntityToolEventResult));
  DestroyEntityToolEvent_descriptor_ = file->message_type(5);
  static const int DestroyEntityToolEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, ehandle_),
  };
  DestroyEntityToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyEntityToolEvent_descriptor_,
      DestroyEntityToolEvent::default_instance_,
      DestroyEntityToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyEntityToolEvent));
  DestroyAllEntitiesToolEvent_descriptor_ = file->message_type(6);
  static const int DestroyAllEntitiesToolEvent_offsets_[1] = {
  };
  DestroyAllEntitiesToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyAllEntitiesToolEvent_descriptor_,
      DestroyAllEntitiesToolEvent::default_instance_,
      DestroyAllEntitiesToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyAllEntitiesToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyAllEntitiesToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyAllEntitiesToolEvent));
  RestartMapToolEvent_descriptor_ = file->message_type(7);
  static const int RestartMapToolEvent_offsets_[1] = {
  };
  RestartMapToolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestartMapToolEvent_descriptor_,
      RestartMapToolEvent::default_instance_,
      RestartMapToolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartMapToolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartMapToolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestartMapToolEvent));
  ToolEvent_GetEntityInfo_descriptor_ = file->message_type(8);
  static const int ToolEvent_GetEntityInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, ehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, clientsideentity_),
  };
  ToolEvent_GetEntityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_GetEntityInfo_descriptor_,
      ToolEvent_GetEntityInfo::default_instance_,
      ToolEvent_GetEntityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_GetEntityInfo));
  ToolEvent_GetEntityInfoResult_descriptor_ = file->message_type(9);
  static const int ToolEvent_GetEntityInfoResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, cppclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, classname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, mins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, maxs_),
  };
  ToolEvent_GetEntityInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_GetEntityInfoResult_descriptor_,
      ToolEvent_GetEntityInfoResult::default_instance_,
      ToolEvent_GetEntityInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_GetEntityInfoResult));
  ToolEvent_GetEntityInputs_descriptor_ = file->message_type(10);
  static const int ToolEvent_GetEntityInputs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, ehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, clientsideentity_),
  };
  ToolEvent_GetEntityInputs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_GetEntityInputs_descriptor_,
      ToolEvent_GetEntityInputs::default_instance_,
      ToolEvent_GetEntityInputs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_GetEntityInputs));
  ToolEvent_GetEntityInputsResult_descriptor_ = file->message_type(11);
  static const int ToolEvent_GetEntityInputsResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, input_list_),
  };
  ToolEvent_GetEntityInputsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_GetEntityInputsResult_descriptor_,
      ToolEvent_GetEntityInputsResult::default_instance_,
      ToolEvent_GetEntityInputsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_GetEntityInputsResult));
  ToolEvent_FireEntityInput_descriptor_ = file->message_type(12);
  static const int ToolEvent_FireEntityInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, ehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, clientsideentity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, input_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, input_param_),
  };
  ToolEvent_FireEntityInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_FireEntityInput_descriptor_,
      ToolEvent_FireEntityInput::default_instance_,
      ToolEvent_FireEntityInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_FireEntityInput));
  ToolEvent_SFMRecordingStateChanged_descriptor_ = file->message_type(13);
  static const int ToolEvent_SFMRecordingStateChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, isrecording_),
  };
  ToolEvent_SFMRecordingStateChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_SFMRecordingStateChanged_descriptor_,
      ToolEvent_SFMRecordingStateChanged::default_instance_,
      ToolEvent_SFMRecordingStateChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_SFMRecordingStateChanged));
  ToolEvent_SFMToolActiveStateChanged_descriptor_ = file->message_type(14);
  static const int ToolEvent_SFMToolActiveStateChanged_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, isactive_),
  };
  ToolEvent_SFMToolActiveStateChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolEvent_SFMToolActiveStateChanged_descriptor_,
      ToolEvent_SFMToolActiveStateChanged::default_instance_,
      ToolEvent_SFMToolActiveStateChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolEvent_SFMToolActiveStateChanged));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_toolevents_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeMapToolEvent_descriptor_, &ChangeMapToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraceRayServerToolEvent_descriptor_, &TraceRayServerToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolTraceRayResult_descriptor_, &ToolTraceRayResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpawnEntityToolEvent_descriptor_, &SpawnEntityToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpawnEntityToolEventResult_descriptor_, &SpawnEntityToolEventResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyEntityToolEvent_descriptor_, &DestroyEntityToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyAllEntitiesToolEvent_descriptor_, &DestroyAllEntitiesToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestartMapToolEvent_descriptor_, &RestartMapToolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_GetEntityInfo_descriptor_, &ToolEvent_GetEntityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_GetEntityInfoResult_descriptor_, &ToolEvent_GetEntityInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_GetEntityInputs_descriptor_, &ToolEvent_GetEntityInputs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_GetEntityInputsResult_descriptor_, &ToolEvent_GetEntityInputsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_FireEntityInput_descriptor_, &ToolEvent_FireEntityInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_SFMRecordingStateChanged_descriptor_, &ToolEvent_SFMRecordingStateChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolEvent_SFMToolActiveStateChanged_descriptor_, &ToolEvent_SFMToolActiveStateChanged::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_toolevents_2eproto() {
  delete ChangeMapToolEvent::default_instance_;
  delete ChangeMapToolEvent_reflection_;
  delete TraceRayServerToolEvent::default_instance_;
  delete TraceRayServerToolEvent_reflection_;
  delete ToolTraceRayResult::default_instance_;
  delete ToolTraceRayResult_reflection_;
  delete SpawnEntityToolEvent::default_instance_;
  delete SpawnEntityToolEvent_reflection_;
  delete SpawnEntityToolEventResult::default_instance_;
  delete SpawnEntityToolEventResult_reflection_;
  delete DestroyEntityToolEvent::default_instance_;
  delete DestroyEntityToolEvent_reflection_;
  delete DestroyAllEntitiesToolEvent::default_instance_;
  delete DestroyAllEntitiesToolEvent_reflection_;
  delete RestartMapToolEvent::default_instance_;
  delete RestartMapToolEvent_reflection_;
  delete ToolEvent_GetEntityInfo::default_instance_;
  delete ToolEvent_GetEntityInfo_reflection_;
  delete ToolEvent_GetEntityInfoResult::default_instance_;
  delete ToolEvent_GetEntityInfoResult_reflection_;
  delete ToolEvent_GetEntityInfoResult::_default_cppclass_;
  delete ToolEvent_GetEntityInputs::default_instance_;
  delete ToolEvent_GetEntityInputs_reflection_;
  delete ToolEvent_GetEntityInputsResult::default_instance_;
  delete ToolEvent_GetEntityInputsResult_reflection_;
  delete ToolEvent_FireEntityInput::default_instance_;
  delete ToolEvent_FireEntityInput_reflection_;
  delete ToolEvent_SFMRecordingStateChanged::default_instance_;
  delete ToolEvent_SFMRecordingStateChanged_reflection_;
  delete ToolEvent_SFMToolActiveStateChanged::default_instance_;
  delete ToolEvent_SFMToolActiveStateChanged_reflection_;
}

void protobuf_AddDesc_toolevents_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_networkbasetypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020toolevents.proto\032\026networkbasetypes.pro"
    "to\"%\n\022ChangeMapToolEvent\022\017\n\007mapname\030\001 \001("
    "\t\"O\n\027TraceRayServerToolEvent\022\032\n\005start\030\001 "
    "\001(\0132\013.CMsgVector\022\030\n\003end\030\002 \001(\0132\013.CMsgVect"
    "or\"\220\001\n\022ToolTraceRayResult\022\013\n\003hit\030\001 \001(\010\022\033"
    "\n\006impact\030\002 \001(\0132\013.CMsgVector\022\033\n\006normal\030\003 "
    "\001(\0132\013.CMsgVector\022\020\n\010distance\030\004 \001(\002\022\020\n\010fr"
    "action\030\005 \001(\002\022\017\n\007ehandle\030\006 \001(\005\"J\n\024SpawnEn"
    "tityToolEvent\022\030\n\020entity_keyvalues\030\001 \001(\014\022"
    "\030\n\020clientsideentity\030\002 \001(\010\"-\n\032SpawnEntity"
    "ToolEventResult\022\017\n\007ehandle\030\001 \001(\005\")\n\026Dest"
    "royEntityToolEvent\022\017\n\007ehandle\030\001 \001(\005\"\035\n\033D"
    "estroyAllEntitiesToolEvent\"\025\n\023RestartMap"
    "ToolEvent\"D\n\027ToolEvent_GetEntityInfo\022\017\n\007"
    "ehandle\030\001 \001(\005\022\030\n\020clientsideentity\030\002 \001(\010\""
    "\257\001\n\035ToolEvent_GetEntityInfoResult\022\032\n\010cpp"
    "class\030\001 \001(\t:\010shithead\022\021\n\tclassname\030\002 \001(\t"
    "\022\014\n\004name\030\003 \001(\t\022\033\n\006origin\030\004 \001(\0132\013.CMsgVec"
    "tor\022\031\n\004mins\030\005 \001(\0132\013.CMsgVector\022\031\n\004maxs\030\006"
    " \001(\0132\013.CMsgVector\"F\n\031ToolEvent_GetEntity"
    "Inputs\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020clientsideent"
    "ity\030\002 \001(\010\"5\n\037ToolEvent_GetEntityInputsRe"
    "sult\022\022\n\ninput_list\030\001 \003(\t\"o\n\031ToolEvent_Fi"
    "reEntityInput\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020client"
    "sideentity\030\002 \001(\010\022\022\n\ninput_name\030\003 \001(\t\022\023\n\013"
    "input_param\030\004 \001(\t\"9\n\"ToolEvent_SFMRecord"
    "ingStateChanged\022\023\n\013isrecording\030\001 \001(\010\"7\n#"
    "ToolEvent_SFMToolActiveStateChanged\022\020\n\010i"
    "sactive\030\001 \001(\010B\003\200\001\000", 1138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "toolevents.proto", &protobuf_RegisterTypes);
  ChangeMapToolEvent::default_instance_ = new ChangeMapToolEvent();
  TraceRayServerToolEvent::default_instance_ = new TraceRayServerToolEvent();
  ToolTraceRayResult::default_instance_ = new ToolTraceRayResult();
  SpawnEntityToolEvent::default_instance_ = new SpawnEntityToolEvent();
  SpawnEntityToolEventResult::default_instance_ = new SpawnEntityToolEventResult();
  DestroyEntityToolEvent::default_instance_ = new DestroyEntityToolEvent();
  DestroyAllEntitiesToolEvent::default_instance_ = new DestroyAllEntitiesToolEvent();
  RestartMapToolEvent::default_instance_ = new RestartMapToolEvent();
  ToolEvent_GetEntityInfo::default_instance_ = new ToolEvent_GetEntityInfo();
  ToolEvent_GetEntityInfoResult::_default_cppclass_ =
      new ::std::string("shithead", 8);
  ToolEvent_GetEntityInfoResult::default_instance_ = new ToolEvent_GetEntityInfoResult();
  ToolEvent_GetEntityInputs::default_instance_ = new ToolEvent_GetEntityInputs();
  ToolEvent_GetEntityInputsResult::default_instance_ = new ToolEvent_GetEntityInputsResult();
  ToolEvent_FireEntityInput::default_instance_ = new ToolEvent_FireEntityInput();
  ToolEvent_SFMRecordingStateChanged::default_instance_ = new ToolEvent_SFMRecordingStateChanged();
  ToolEvent_SFMToolActiveStateChanged::default_instance_ = new ToolEvent_SFMToolActiveStateChanged();
  ChangeMapToolEvent::default_instance_->InitAsDefaultInstance();
  TraceRayServerToolEvent::default_instance_->InitAsDefaultInstance();
  ToolTraceRayResult::default_instance_->InitAsDefaultInstance();
  SpawnEntityToolEvent::default_instance_->InitAsDefaultInstance();
  SpawnEntityToolEventResult::default_instance_->InitAsDefaultInstance();
  DestroyEntityToolEvent::default_instance_->InitAsDefaultInstance();
  DestroyAllEntitiesToolEvent::default_instance_->InitAsDefaultInstance();
  RestartMapToolEvent::default_instance_->InitAsDefaultInstance();
  ToolEvent_GetEntityInfo::default_instance_->InitAsDefaultInstance();
  ToolEvent_GetEntityInfoResult::default_instance_->InitAsDefaultInstance();
  ToolEvent_GetEntityInputs::default_instance_->InitAsDefaultInstance();
  ToolEvent_GetEntityInputsResult::default_instance_->InitAsDefaultInstance();
  ToolEvent_FireEntityInput::default_instance_->InitAsDefaultInstance();
  ToolEvent_SFMRecordingStateChanged::default_instance_->InitAsDefaultInstance();
  ToolEvent_SFMToolActiveStateChanged::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_toolevents_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_toolevents_2eproto {
  StaticDescriptorInitializer_toolevents_2eproto() {
    protobuf_AddDesc_toolevents_2eproto();
  }
} static_descriptor_initializer_toolevents_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChangeMapToolEvent::kMapnameFieldNumber;
#endif  // !_MSC_VER

ChangeMapToolEvent::ChangeMapToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeMapToolEvent)
}

void ChangeMapToolEvent::InitAsDefaultInstance() {
}

ChangeMapToolEvent::ChangeMapToolEvent(const ChangeMapToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeMapToolEvent)
}

void ChangeMapToolEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeMapToolEvent::~ChangeMapToolEvent() {
  // @@protoc_insertion_point(destructor:ChangeMapToolEvent)
  SharedDtor();
}

void ChangeMapToolEvent::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void ChangeMapToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMapToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeMapToolEvent_descriptor_;
}

const ChangeMapToolEvent& ChangeMapToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ChangeMapToolEvent* ChangeMapToolEvent::default_instance_ = NULL;

ChangeMapToolEvent* ChangeMapToolEvent::New() const {
  return new ChangeMapToolEvent;
}

void ChangeMapToolEvent::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeMapToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mapname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeMapToolEvent)
  return false;
#undef DO_
}

void ChangeMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeMapToolEvent)
  // optional string mapname = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeMapToolEvent)
}

::google::protobuf::uint8* ChangeMapToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeMapToolEvent)
  // optional string mapname = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeMapToolEvent)
  return target;
}

int ChangeMapToolEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mapname = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeMapToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeMapToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeMapToolEvent::MergeFrom(const ChangeMapToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapToolEvent::CopyFrom(const ChangeMapToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapToolEvent::IsInitialized() const {

  return true;
}

void ChangeMapToolEvent::Swap(ChangeMapToolEvent* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeMapToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeMapToolEvent_descriptor_;
  metadata.reflection = ChangeMapToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TraceRayServerToolEvent::kStartFieldNumber;
const int TraceRayServerToolEvent::kEndFieldNumber;
#endif  // !_MSC_VER

TraceRayServerToolEvent::TraceRayServerToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TraceRayServerToolEvent)
}

void TraceRayServerToolEvent::InitAsDefaultInstance() {
  start_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  end_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

TraceRayServerToolEvent::TraceRayServerToolEvent(const TraceRayServerToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TraceRayServerToolEvent)
}

void TraceRayServerToolEvent::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraceRayServerToolEvent::~TraceRayServerToolEvent() {
  // @@protoc_insertion_point(destructor:TraceRayServerToolEvent)
  SharedDtor();
}

void TraceRayServerToolEvent::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void TraceRayServerToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceRayServerToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceRayServerToolEvent_descriptor_;
}

const TraceRayServerToolEvent& TraceRayServerToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

TraceRayServerToolEvent* TraceRayServerToolEvent::default_instance_ = NULL;

TraceRayServerToolEvent* TraceRayServerToolEvent::New() const {
  return new TraceRayServerToolEvent;
}

void TraceRayServerToolEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_start()) {
      if (start_ != NULL) start_->::CMsgVector::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraceRayServerToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TraceRayServerToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .CMsgVector end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TraceRayServerToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TraceRayServerToolEvent)
  return false;
#undef DO_
}

void TraceRayServerToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TraceRayServerToolEvent)
  // optional .CMsgVector start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // optional .CMsgVector end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TraceRayServerToolEvent)
}

::google::protobuf::uint8* TraceRayServerToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TraceRayServerToolEvent)
  // optional .CMsgVector start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // optional .CMsgVector end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraceRayServerToolEvent)
  return target;
}

int TraceRayServerToolEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .CMsgVector end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceRayServerToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraceRayServerToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraceRayServerToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraceRayServerToolEvent::MergeFrom(const TraceRayServerToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::CMsgVector::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::CMsgVector::MergeFrom(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraceRayServerToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceRayServerToolEvent::CopyFrom(const TraceRayServerToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRayServerToolEvent::IsInitialized() const {

  return true;
}

void TraceRayServerToolEvent::Swap(TraceRayServerToolEvent* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraceRayServerToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceRayServerToolEvent_descriptor_;
  metadata.reflection = TraceRayServerToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolTraceRayResult::kHitFieldNumber;
const int ToolTraceRayResult::kImpactFieldNumber;
const int ToolTraceRayResult::kNormalFieldNumber;
const int ToolTraceRayResult::kDistanceFieldNumber;
const int ToolTraceRayResult::kFractionFieldNumber;
const int ToolTraceRayResult::kEhandleFieldNumber;
#endif  // !_MSC_VER

ToolTraceRayResult::ToolTraceRayResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolTraceRayResult)
}

void ToolTraceRayResult::InitAsDefaultInstance() {
  impact_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  normal_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

ToolTraceRayResult::ToolTraceRayResult(const ToolTraceRayResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolTraceRayResult)
}

void ToolTraceRayResult::SharedCtor() {
  _cached_size_ = 0;
  hit_ = false;
  impact_ = NULL;
  normal_ = NULL;
  distance_ = 0;
  fraction_ = 0;
  ehandle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolTraceRayResult::~ToolTraceRayResult() {
  // @@protoc_insertion_point(destructor:ToolTraceRayResult)
  SharedDtor();
}

void ToolTraceRayResult::SharedDtor() {
  if (this != default_instance_) {
    delete impact_;
    delete normal_;
  }
}

void ToolTraceRayResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolTraceRayResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolTraceRayResult_descriptor_;
}

const ToolTraceRayResult& ToolTraceRayResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolTraceRayResult* ToolTraceRayResult::default_instance_ = NULL;

ToolTraceRayResult* ToolTraceRayResult::New() const {
  return new ToolTraceRayResult;
}

void ToolTraceRayResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ToolTraceRayResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hit_, distance_);
    ZR_(fraction_, ehandle_);
    if (has_impact()) {
      if (impact_ != NULL) impact_->::CMsgVector::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::CMsgVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolTraceRayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolTraceRayResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impact;
        break;
      }

      // optional .CMsgVector impact = 2;
      case 2: {
        if (tag == 18) {
         parse_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normal;
        break;
      }

      // optional .CMsgVector normal = 3;
      case 3: {
        if (tag == 26) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_distance;
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (tag == 37) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_fraction;
        break;
      }

      // optional float fraction = 5;
      case 5: {
        if (tag == 45) {
         parse_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_)));
          set_has_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ehandle;
        break;
      }

      // optional int32 ehandle = 6;
      case 6: {
        if (tag == 48) {
         parse_ehandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolTraceRayResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolTraceRayResult)
  return false;
#undef DO_
}

void ToolTraceRayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolTraceRayResult)
  // optional bool hit = 1;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hit(), output);
  }

  // optional .CMsgVector impact = 2;
  if (has_impact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->impact(), output);
  }

  // optional .CMsgVector normal = 3;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->normal(), output);
  }

  // optional float distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  // optional float fraction = 5;
  if (has_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fraction(), output);
  }

  // optional int32 ehandle = 6;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ehandle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolTraceRayResult)
}

::google::protobuf::uint8* ToolTraceRayResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolTraceRayResult)
  // optional bool hit = 1;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hit(), target);
  }

  // optional .CMsgVector impact = 2;
  if (has_impact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->impact(), target);
  }

  // optional .CMsgVector normal = 3;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->normal(), target);
  }

  // optional float distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  // optional float fraction = 5;
  if (has_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fraction(), target);
  }

  // optional int32 ehandle = 6;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ehandle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolTraceRayResult)
  return target;
}

int ToolTraceRayResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hit = 1;
    if (has_hit()) {
      total_size += 1 + 1;
    }

    // optional .CMsgVector impact = 2;
    if (has_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impact());
    }

    // optional .CMsgVector normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional float fraction = 5;
    if (has_fraction()) {
      total_size += 1 + 4;
    }

    // optional int32 ehandle = 6;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolTraceRayResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolTraceRayResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolTraceRayResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolTraceRayResult::MergeFrom(const ToolTraceRayResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_impact()) {
      mutable_impact()->::CMsgVector::MergeFrom(from.impact());
    }
    if (from.has_normal()) {
      mutable_normal()->::CMsgVector::MergeFrom(from.normal());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_fraction()) {
      set_fraction(from.fraction());
    }
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolTraceRayResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolTraceRayResult::CopyFrom(const ToolTraceRayResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolTraceRayResult::IsInitialized() const {

  return true;
}

void ToolTraceRayResult::Swap(ToolTraceRayResult* other) {
  if (other != this) {
    std::swap(hit_, other->hit_);
    std::swap(impact_, other->impact_);
    std::swap(normal_, other->normal_);
    std::swap(distance_, other->distance_);
    std::swap(fraction_, other->fraction_);
    std::swap(ehandle_, other->ehandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolTraceRayResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolTraceRayResult_descriptor_;
  metadata.reflection = ToolTraceRayResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpawnEntityToolEvent::kEntityKeyvaluesFieldNumber;
const int SpawnEntityToolEvent::kClientsideentityFieldNumber;
#endif  // !_MSC_VER

SpawnEntityToolEvent::SpawnEntityToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpawnEntityToolEvent)
}

void SpawnEntityToolEvent::InitAsDefaultInstance() {
}

SpawnEntityToolEvent::SpawnEntityToolEvent(const SpawnEntityToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEvent)
}

void SpawnEntityToolEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_keyvalues_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsideentity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpawnEntityToolEvent::~SpawnEntityToolEvent() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEvent)
  SharedDtor();
}

void SpawnEntityToolEvent::SharedDtor() {
  if (entity_keyvalues_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entity_keyvalues_;
  }
  if (this != default_instance_) {
  }
}

void SpawnEntityToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnEntityToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpawnEntityToolEvent_descriptor_;
}

const SpawnEntityToolEvent& SpawnEntityToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

SpawnEntityToolEvent* SpawnEntityToolEvent::default_instance_ = NULL;

SpawnEntityToolEvent* SpawnEntityToolEvent::New() const {
  return new SpawnEntityToolEvent;
}

void SpawnEntityToolEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_entity_keyvalues()) {
      if (entity_keyvalues_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entity_keyvalues_->clear();
      }
    }
    clientsideentity_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpawnEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpawnEntityToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes entity_keyvalues = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_keyvalues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsideentity;
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsideentity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
          set_has_clientsideentity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpawnEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpawnEntityToolEvent)
  return false;
#undef DO_
}

void SpawnEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpawnEntityToolEvent)
  // optional bytes entity_keyvalues = 1;
  if (has_entity_keyvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entity_keyvalues(), output);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpawnEntityToolEvent)
}

::google::protobuf::uint8* SpawnEntityToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEvent)
  // optional bytes entity_keyvalues = 1;
  if (has_entity_keyvalues()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entity_keyvalues(), target);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEvent)
  return target;
}

int SpawnEntityToolEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes entity_keyvalues = 1;
    if (has_entity_keyvalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_keyvalues());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpawnEntityToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpawnEntityToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpawnEntityToolEvent::MergeFrom(const SpawnEntityToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_keyvalues()) {
      set_entity_keyvalues(from.entity_keyvalues());
    }
    if (from.has_clientsideentity()) {
      set_clientsideentity(from.clientsideentity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpawnEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEvent::CopyFrom(const SpawnEntityToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEvent::IsInitialized() const {

  return true;
}

void SpawnEntityToolEvent::Swap(SpawnEntityToolEvent* other) {
  if (other != this) {
    std::swap(entity_keyvalues_, other->entity_keyvalues_);
    std::swap(clientsideentity_, other->clientsideentity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpawnEntityToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpawnEntityToolEvent_descriptor_;
  metadata.reflection = SpawnEntityToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpawnEntityToolEventResult::kEhandleFieldNumber;
#endif  // !_MSC_VER

SpawnEntityToolEventResult::SpawnEntityToolEventResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpawnEntityToolEventResult)
}

void SpawnEntityToolEventResult::InitAsDefaultInstance() {
}

SpawnEntityToolEventResult::SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEventResult)
}

void SpawnEntityToolEventResult::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpawnEntityToolEventResult::~SpawnEntityToolEventResult() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEventResult)
  SharedDtor();
}

void SpawnEntityToolEventResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpawnEntityToolEventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnEntityToolEventResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpawnEntityToolEventResult_descriptor_;
}

const SpawnEntityToolEventResult& SpawnEntityToolEventResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

SpawnEntityToolEventResult* SpawnEntityToolEventResult::default_instance_ = NULL;

SpawnEntityToolEventResult* SpawnEntityToolEventResult::New() const {
  return new SpawnEntityToolEventResult;
}

void SpawnEntityToolEventResult::Clear() {
  ehandle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpawnEntityToolEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpawnEntityToolEventResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpawnEntityToolEventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpawnEntityToolEventResult)
  return false;
#undef DO_
}

void SpawnEntityToolEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpawnEntityToolEventResult)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpawnEntityToolEventResult)
}

::google::protobuf::uint8* SpawnEntityToolEventResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEventResult)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEventResult)
  return target;
}

int SpawnEntityToolEventResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnEntityToolEventResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpawnEntityToolEventResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpawnEntityToolEventResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpawnEntityToolEventResult::MergeFrom(const SpawnEntityToolEventResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpawnEntityToolEventResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEventResult::CopyFrom(const SpawnEntityToolEventResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEventResult::IsInitialized() const {

  return true;
}

void SpawnEntityToolEventResult::Swap(SpawnEntityToolEventResult* other) {
  if (other != this) {
    std::swap(ehandle_, other->ehandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpawnEntityToolEventResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpawnEntityToolEventResult_descriptor_;
  metadata.reflection = SpawnEntityToolEventResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestroyEntityToolEvent::kEhandleFieldNumber;
#endif  // !_MSC_VER

DestroyEntityToolEvent::DestroyEntityToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DestroyEntityToolEvent)
}

void DestroyEntityToolEvent::InitAsDefaultInstance() {
}

DestroyEntityToolEvent::DestroyEntityToolEvent(const DestroyEntityToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DestroyEntityToolEvent)
}

void DestroyEntityToolEvent::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyEntityToolEvent::~DestroyEntityToolEvent() {
  // @@protoc_insertion_point(destructor:DestroyEntityToolEvent)
  SharedDtor();
}

void DestroyEntityToolEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyEntityToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyEntityToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyEntityToolEvent_descriptor_;
}

const DestroyEntityToolEvent& DestroyEntityToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

DestroyEntityToolEvent* DestroyEntityToolEvent::default_instance_ = NULL;

DestroyEntityToolEvent* DestroyEntityToolEvent::New() const {
  return new DestroyEntityToolEvent;
}

void DestroyEntityToolEvent::Clear() {
  ehandle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DestroyEntityToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DestroyEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DestroyEntityToolEvent)
  return false;
#undef DO_
}

void DestroyEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DestroyEntityToolEvent)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DestroyEntityToolEvent)
}

::google::protobuf::uint8* DestroyEntityToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DestroyEntityToolEvent)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DestroyEntityToolEvent)
  return target;
}

int DestroyEntityToolEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyEntityToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyEntityToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyEntityToolEvent::MergeFrom(const DestroyEntityToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyEntityToolEvent::CopyFrom(const DestroyEntityToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEntityToolEvent::IsInitialized() const {

  return true;
}

void DestroyEntityToolEvent::Swap(DestroyEntityToolEvent* other) {
  if (other != this) {
    std::swap(ehandle_, other->ehandle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyEntityToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyEntityToolEvent_descriptor_;
  metadata.reflection = DestroyEntityToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DestroyAllEntitiesToolEvent)
}

void DestroyAllEntitiesToolEvent::InitAsDefaultInstance() {
}

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DestroyAllEntitiesToolEvent)
}

void DestroyAllEntitiesToolEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyAllEntitiesToolEvent::~DestroyAllEntitiesToolEvent() {
  // @@protoc_insertion_point(destructor:DestroyAllEntitiesToolEvent)
  SharedDtor();
}

void DestroyAllEntitiesToolEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyAllEntitiesToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyAllEntitiesToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyAllEntitiesToolEvent_descriptor_;
}

const DestroyAllEntitiesToolEvent& DestroyAllEntitiesToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

DestroyAllEntitiesToolEvent* DestroyAllEntitiesToolEvent::default_instance_ = NULL;

DestroyAllEntitiesToolEvent* DestroyAllEntitiesToolEvent::New() const {
  return new DestroyAllEntitiesToolEvent;
}

void DestroyAllEntitiesToolEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyAllEntitiesToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DestroyAllEntitiesToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DestroyAllEntitiesToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DestroyAllEntitiesToolEvent)
  return false;
#undef DO_
}

void DestroyAllEntitiesToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DestroyAllEntitiesToolEvent)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DestroyAllEntitiesToolEvent)
}

::google::protobuf::uint8* DestroyAllEntitiesToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DestroyAllEntitiesToolEvent)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DestroyAllEntitiesToolEvent)
  return target;
}

int DestroyAllEntitiesToolEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyAllEntitiesToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyAllEntitiesToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyAllEntitiesToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyAllEntitiesToolEvent::MergeFrom(const DestroyAllEntitiesToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyAllEntitiesToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyAllEntitiesToolEvent::CopyFrom(const DestroyAllEntitiesToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyAllEntitiesToolEvent::IsInitialized() const {

  return true;
}

void DestroyAllEntitiesToolEvent::Swap(DestroyAllEntitiesToolEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyAllEntitiesToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyAllEntitiesToolEvent_descriptor_;
  metadata.reflection = DestroyAllEntitiesToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RestartMapToolEvent::RestartMapToolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RestartMapToolEvent)
}

void RestartMapToolEvent::InitAsDefaultInstance() {
}

RestartMapToolEvent::RestartMapToolEvent(const RestartMapToolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RestartMapToolEvent)
}

void RestartMapToolEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestartMapToolEvent::~RestartMapToolEvent() {
  // @@protoc_insertion_point(destructor:RestartMapToolEvent)
  SharedDtor();
}

void RestartMapToolEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RestartMapToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartMapToolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestartMapToolEvent_descriptor_;
}

const RestartMapToolEvent& RestartMapToolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

RestartMapToolEvent* RestartMapToolEvent::default_instance_ = NULL;

RestartMapToolEvent* RestartMapToolEvent::New() const {
  return new RestartMapToolEvent;
}

void RestartMapToolEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestartMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RestartMapToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RestartMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RestartMapToolEvent)
  return false;
#undef DO_
}

void RestartMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RestartMapToolEvent)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RestartMapToolEvent)
}

::google::protobuf::uint8* RestartMapToolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RestartMapToolEvent)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RestartMapToolEvent)
  return target;
}

int RestartMapToolEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestartMapToolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestartMapToolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestartMapToolEvent::MergeFrom(const RestartMapToolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestartMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMapToolEvent::CopyFrom(const RestartMapToolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMapToolEvent::IsInitialized() const {

  return true;
}

void RestartMapToolEvent::Swap(RestartMapToolEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestartMapToolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestartMapToolEvent_descriptor_;
  metadata.reflection = RestartMapToolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_GetEntityInfo::kEhandleFieldNumber;
const int ToolEvent_GetEntityInfo::kClientsideentityFieldNumber;
#endif  // !_MSC_VER

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_GetEntityInfo)
}

void ToolEvent_GetEntityInfo::InitAsDefaultInstance() {
}

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfo)
}

void ToolEvent_GetEntityInfo::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
  clientsideentity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_GetEntityInfo::~ToolEvent_GetEntityInfo() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfo)
  SharedDtor();
}

void ToolEvent_GetEntityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolEvent_GetEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_GetEntityInfo_descriptor_;
}

const ToolEvent_GetEntityInfo& ToolEvent_GetEntityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_GetEntityInfo* ToolEvent_GetEntityInfo::default_instance_ = NULL;

ToolEvent_GetEntityInfo* ToolEvent_GetEntityInfo::New() const {
  return new ToolEvent_GetEntityInfo;
}

void ToolEvent_GetEntityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ToolEvent_GetEntityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ehandle_, clientsideentity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_GetEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_GetEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsideentity;
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsideentity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
          set_has_clientsideentity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_GetEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_GetEntityInfo)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_GetEntityInfo)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_GetEntityInfo)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfo)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfo)
  return target;
}

int ToolEvent_GetEntityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_GetEntityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_GetEntityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfo::MergeFrom(const ToolEvent_GetEntityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
    if (from.has_clientsideentity()) {
      set_clientsideentity(from.clientsideentity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_GetEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfo::CopyFrom(const ToolEvent_GetEntityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfo::IsInitialized() const {

  return true;
}

void ToolEvent_GetEntityInfo::Swap(ToolEvent_GetEntityInfo* other) {
  if (other != this) {
    std::swap(ehandle_, other->ehandle_);
    std::swap(clientsideentity_, other->clientsideentity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_GetEntityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_GetEntityInfo_descriptor_;
  metadata.reflection = ToolEvent_GetEntityInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ToolEvent_GetEntityInfoResult::_default_cppclass_ = NULL;
#ifndef _MSC_VER
const int ToolEvent_GetEntityInfoResult::kCppclassFieldNumber;
const int ToolEvent_GetEntityInfoResult::kClassnameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kNameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kOriginFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMinsFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMaxsFieldNumber;
#endif  // !_MSC_VER

ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_GetEntityInfoResult)
}

void ToolEvent_GetEntityInfoResult::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  mins_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  maxs_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfoResult)
}

void ToolEvent_GetEntityInfoResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cppclass_ = const_cast< ::std::string*>(_default_cppclass_);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_ = NULL;
  mins_ = NULL;
  maxs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_GetEntityInfoResult::~ToolEvent_GetEntityInfoResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfoResult)
  SharedDtor();
}

void ToolEvent_GetEntityInfoResult::SharedDtor() {
  if (cppclass_ != _default_cppclass_) {
    delete cppclass_;
  }
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete origin_;
    delete mins_;
    delete maxs_;
  }
}

void ToolEvent_GetEntityInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_GetEntityInfoResult_descriptor_;
}

const ToolEvent_GetEntityInfoResult& ToolEvent_GetEntityInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_GetEntityInfoResult* ToolEvent_GetEntityInfoResult::default_instance_ = NULL;

ToolEvent_GetEntityInfoResult* ToolEvent_GetEntityInfoResult::New() const {
  return new ToolEvent_GetEntityInfoResult;
}

void ToolEvent_GetEntityInfoResult::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_cppclass()) {
      if (cppclass_ != _default_cppclass_) {
        cppclass_->assign(*_default_cppclass_);
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        classname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
    if (has_mins()) {
      if (mins_ != NULL) mins_->::CMsgVector::Clear();
    }
    if (has_maxs()) {
      if (maxs_ != NULL) maxs_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_GetEntityInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_GetEntityInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cppclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cppclass().data(), this->cppclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cppclass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (tag == 18) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classname().data(), this->classname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "classname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_origin;
        break;
      }

      // optional .CMsgVector origin = 4;
      case 4: {
        if (tag == 34) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mins;
        break;
      }

      // optional .CMsgVector mins = 5;
      case 5: {
        if (tag == 42) {
         parse_mins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_maxs;
        break;
      }

      // optional .CMsgVector maxs = 6;
      case 6: {
        if (tag == 50) {
         parse_maxs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_GetEntityInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_GetEntityInfoResult)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_GetEntityInfoResult)
  // optional string cppclass = 1 [default = "shithead"];
  if (has_cppclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), this->cppclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cppclass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cppclass(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->classname(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .CMsgVector origin = 4;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->origin(), output);
  }

  // optional .CMsgVector mins = 5;
  if (has_mins()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mins(), output);
  }

  // optional .CMsgVector maxs = 6;
  if (has_maxs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maxs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_GetEntityInfoResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfoResult)
  // optional string cppclass = 1 [default = "shithead"];
  if (has_cppclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), this->cppclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cppclass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cppclass(), target);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->classname(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .CMsgVector origin = 4;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->origin(), target);
  }

  // optional .CMsgVector mins = 5;
  if (has_mins()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mins(), target);
  }

  // optional .CMsgVector maxs = 6;
  if (has_maxs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->maxs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfoResult)
  return target;
}

int ToolEvent_GetEntityInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cppclass = 1 [default = "shithead"];
    if (has_cppclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cppclass());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .CMsgVector origin = 4;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .CMsgVector mins = 5;
    if (has_mins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mins());
    }

    // optional .CMsgVector maxs = 6;
    if (has_maxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_GetEntityInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_GetEntityInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ToolEvent_GetEntityInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cppclass()) {
      set_cppclass(from.cppclass());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (from.has_mins()) {
      mutable_mins()->::CMsgVector::MergeFrom(from.mins());
    }
    if (from.has_maxs()) {
      mutable_maxs()->::CMsgVector::MergeFrom(from.maxs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ToolEvent_GetEntityInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfoResult::IsInitialized() const {

  return true;
}

void ToolEvent_GetEntityInfoResult::Swap(ToolEvent_GetEntityInfoResult* other) {
  if (other != this) {
    std::swap(cppclass_, other->cppclass_);
    std::swap(classname_, other->classname_);
    std::swap(name_, other->name_);
    std::swap(origin_, other->origin_);
    std::swap(mins_, other->mins_);
    std::swap(maxs_, other->maxs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_GetEntityInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_GetEntityInfoResult_descriptor_;
  metadata.reflection = ToolEvent_GetEntityInfoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_GetEntityInputs::kEhandleFieldNumber;
const int ToolEvent_GetEntityInputs::kClientsideentityFieldNumber;
#endif  // !_MSC_VER

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_GetEntityInputs)
}

void ToolEvent_GetEntityInputs::InitAsDefaultInstance() {
}

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputs)
}

void ToolEvent_GetEntityInputs::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
  clientsideentity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_GetEntityInputs::~ToolEvent_GetEntityInputs() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputs)
  SharedDtor();
}

void ToolEvent_GetEntityInputs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolEvent_GetEntityInputs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_GetEntityInputs_descriptor_;
}

const ToolEvent_GetEntityInputs& ToolEvent_GetEntityInputs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_GetEntityInputs* ToolEvent_GetEntityInputs::default_instance_ = NULL;

ToolEvent_GetEntityInputs* ToolEvent_GetEntityInputs::New() const {
  return new ToolEvent_GetEntityInputs;
}

void ToolEvent_GetEntityInputs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ToolEvent_GetEntityInputs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ehandle_, clientsideentity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_GetEntityInputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_GetEntityInputs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsideentity;
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsideentity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
          set_has_clientsideentity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_GetEntityInputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_GetEntityInputs)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_GetEntityInputs)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_GetEntityInputs)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputs)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputs)
  return target;
}

int ToolEvent_GetEntityInputs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInputs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_GetEntityInputs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_GetEntityInputs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputs::MergeFrom(const ToolEvent_GetEntityInputs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
    if (from.has_clientsideentity()) {
      set_clientsideentity(from.clientsideentity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_GetEntityInputs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputs::CopyFrom(const ToolEvent_GetEntityInputs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputs::IsInitialized() const {

  return true;
}

void ToolEvent_GetEntityInputs::Swap(ToolEvent_GetEntityInputs* other) {
  if (other != this) {
    std::swap(ehandle_, other->ehandle_);
    std::swap(clientsideentity_, other->clientsideentity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_GetEntityInputs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_GetEntityInputs_descriptor_;
  metadata.reflection = ToolEvent_GetEntityInputs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_GetEntityInputsResult::kInputListFieldNumber;
#endif  // !_MSC_VER

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_GetEntityInputsResult)
}

void ToolEvent_GetEntityInputsResult::InitAsDefaultInstance() {
}

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputsResult)
}

void ToolEvent_GetEntityInputsResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_GetEntityInputsResult::~ToolEvent_GetEntityInputsResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputsResult)
  SharedDtor();
}

void ToolEvent_GetEntityInputsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolEvent_GetEntityInputsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_GetEntityInputsResult_descriptor_;
}

const ToolEvent_GetEntityInputsResult& ToolEvent_GetEntityInputsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_GetEntityInputsResult* ToolEvent_GetEntityInputsResult::default_instance_ = NULL;

ToolEvent_GetEntityInputsResult* ToolEvent_GetEntityInputsResult::New() const {
  return new ToolEvent_GetEntityInputsResult;
}

void ToolEvent_GetEntityInputsResult::Clear() {
  input_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_GetEntityInputsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_GetEntityInputsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input_list = 1;
      case 1: {
        if (tag == 10) {
         parse_input_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_list(this->input_list_size() - 1).data(),
            this->input_list(this->input_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_GetEntityInputsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_GetEntityInputsResult)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInputsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_GetEntityInputsResult)
  // repeated string input_list = 1;
  for (int i = 0; i < this->input_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->input_list(i).data(), this->input_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "input_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_GetEntityInputsResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputsResult)
  // repeated string input_list = 1;
  for (int i = 0; i < this->input_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_list(i).data(), this->input_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputsResult)
  return target;
}

int ToolEvent_GetEntityInputsResult::ByteSize() const {
  int total_size = 0;

  // repeated string input_list = 1;
  total_size += 1 * this->input_list_size();
  for (int i = 0; i < this->input_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_GetEntityInputsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_GetEntityInputsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ToolEvent_GetEntityInputsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_list_.MergeFrom(from.input_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ToolEvent_GetEntityInputsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputsResult::IsInitialized() const {

  return true;
}

void ToolEvent_GetEntityInputsResult::Swap(ToolEvent_GetEntityInputsResult* other) {
  if (other != this) {
    input_list_.Swap(&other->input_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_GetEntityInputsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_GetEntityInputsResult_descriptor_;
  metadata.reflection = ToolEvent_GetEntityInputsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_FireEntityInput::kEhandleFieldNumber;
const int ToolEvent_FireEntityInput::kClientsideentityFieldNumber;
const int ToolEvent_FireEntityInput::kInputNameFieldNumber;
const int ToolEvent_FireEntityInput::kInputParamFieldNumber;
#endif  // !_MSC_VER

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_FireEntityInput)
}

void ToolEvent_FireEntityInput::InitAsDefaultInstance() {
}

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_FireEntityInput)
}

void ToolEvent_FireEntityInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ehandle_ = 0;
  clientsideentity_ = false;
  input_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_FireEntityInput::~ToolEvent_FireEntityInput() {
  // @@protoc_insertion_point(destructor:ToolEvent_FireEntityInput)
  SharedDtor();
}

void ToolEvent_FireEntityInput::SharedDtor() {
  if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_name_;
  }
  if (input_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_param_;
  }
  if (this != default_instance_) {
  }
}

void ToolEvent_FireEntityInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_FireEntityInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_FireEntityInput_descriptor_;
}

const ToolEvent_FireEntityInput& ToolEvent_FireEntityInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_FireEntityInput* ToolEvent_FireEntityInput::default_instance_ = NULL;

ToolEvent_FireEntityInput* ToolEvent_FireEntityInput::New() const {
  return new ToolEvent_FireEntityInput;
}

void ToolEvent_FireEntityInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ToolEvent_FireEntityInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ehandle_, clientsideentity_);
    if (has_input_name()) {
      if (input_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_name_->clear();
      }
    }
    if (has_input_param()) {
      if (input_param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        input_param_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_FireEntityInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_FireEntityInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
          set_has_ehandle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientsideentity;
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (tag == 16) {
         parse_clientsideentity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
          set_has_clientsideentity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_name;
        break;
      }

      // optional string input_name = 3;
      case 3: {
        if (tag == 26) {
         parse_input_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_name().data(), this->input_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_param;
        break;
      }

      // optional string input_param = 4;
      case 4: {
        if (tag == 34) {
         parse_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_param().data(), this->input_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_FireEntityInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_FireEntityInput)
  return false;
#undef DO_
}

void ToolEvent_FireEntityInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_FireEntityInput)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  // optional string input_name = 3;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_name(), output);
  }

  // optional string input_param = 4;
  if (has_input_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), this->input_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->input_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_FireEntityInput)
}

::google::protobuf::uint8* ToolEvent_FireEntityInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_FireEntityInput)
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (has_clientsideentity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  // optional string input_name = 3;
  if (has_input_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_name(), target);
  }

  // optional string input_param = 4;
  if (has_input_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), this->input_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->input_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_FireEntityInput)
  return target;
}

int ToolEvent_FireEntityInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

    // optional string input_name = 3;
    if (has_input_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_name());
    }

    // optional string input_param = 4;
    if (has_input_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_FireEntityInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_FireEntityInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_FireEntityInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_FireEntityInput::MergeFrom(const ToolEvent_FireEntityInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ehandle()) {
      set_ehandle(from.ehandle());
    }
    if (from.has_clientsideentity()) {
      set_clientsideentity(from.clientsideentity());
    }
    if (from.has_input_name()) {
      set_input_name(from.input_name());
    }
    if (from.has_input_param()) {
      set_input_param(from.input_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_FireEntityInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_FireEntityInput::CopyFrom(const ToolEvent_FireEntityInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_FireEntityInput::IsInitialized() const {

  return true;
}

void ToolEvent_FireEntityInput::Swap(ToolEvent_FireEntityInput* other) {
  if (other != this) {
    std::swap(ehandle_, other->ehandle_);
    std::swap(clientsideentity_, other->clientsideentity_);
    std::swap(input_name_, other->input_name_);
    std::swap(input_param_, other->input_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_FireEntityInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_FireEntityInput_descriptor_;
  metadata.reflection = ToolEvent_FireEntityInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_SFMRecordingStateChanged::kIsrecordingFieldNumber;
#endif  // !_MSC_VER

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_SFMRecordingStateChanged)
}

void ToolEvent_SFMRecordingStateChanged::InitAsDefaultInstance() {
}

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMRecordingStateChanged)
}

void ToolEvent_SFMRecordingStateChanged::SharedCtor() {
  _cached_size_ = 0;
  isrecording_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_SFMRecordingStateChanged::~ToolEvent_SFMRecordingStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMRecordingStateChanged)
  SharedDtor();
}

void ToolEvent_SFMRecordingStateChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolEvent_SFMRecordingStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_SFMRecordingStateChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_SFMRecordingStateChanged_descriptor_;
}

const ToolEvent_SFMRecordingStateChanged& ToolEvent_SFMRecordingStateChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_SFMRecordingStateChanged* ToolEvent_SFMRecordingStateChanged::default_instance_ = NULL;

ToolEvent_SFMRecordingStateChanged* ToolEvent_SFMRecordingStateChanged::New() const {
  return new ToolEvent_SFMRecordingStateChanged;
}

void ToolEvent_SFMRecordingStateChanged::Clear() {
  isrecording_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_SFMRecordingStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_SFMRecordingStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isrecording = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecording_)));
          set_has_isrecording();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_SFMRecordingStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_SFMRecordingStateChanged)
  return false;
#undef DO_
}

void ToolEvent_SFMRecordingStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_SFMRecordingStateChanged)
  // optional bool isrecording = 1;
  if (has_isrecording()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrecording(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_SFMRecordingStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMRecordingStateChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMRecordingStateChanged)
  // optional bool isrecording = 1;
  if (has_isrecording()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrecording(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMRecordingStateChanged)
  return target;
}

int ToolEvent_SFMRecordingStateChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isrecording = 1;
    if (has_isrecording()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_SFMRecordingStateChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_SFMRecordingStateChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ToolEvent_SFMRecordingStateChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrecording()) {
      set_isrecording(from.isrecording());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ToolEvent_SFMRecordingStateChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMRecordingStateChanged::IsInitialized() const {

  return true;
}

void ToolEvent_SFMRecordingStateChanged::Swap(ToolEvent_SFMRecordingStateChanged* other) {
  if (other != this) {
    std::swap(isrecording_, other->isrecording_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_SFMRecordingStateChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_SFMRecordingStateChanged_descriptor_;
  metadata.reflection = ToolEvent_SFMRecordingStateChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToolEvent_SFMToolActiveStateChanged::kIsactiveFieldNumber;
#endif  // !_MSC_VER

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ToolEvent_SFMToolActiveStateChanged)
}

void ToolEvent_SFMToolActiveStateChanged::InitAsDefaultInstance() {
}

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMToolActiveStateChanged)
}

void ToolEvent_SFMToolActiveStateChanged::SharedCtor() {
  _cached_size_ = 0;
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolEvent_SFMToolActiveStateChanged::~ToolEvent_SFMToolActiveStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMToolActiveStateChanged)
  SharedDtor();
}

void ToolEvent_SFMToolActiveStateChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolEvent_SFMToolActiveStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_SFMToolActiveStateChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolEvent_SFMToolActiveStateChanged_descriptor_;
}

const ToolEvent_SFMToolActiveStateChanged& ToolEvent_SFMToolActiveStateChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_toolevents_2eproto();
  return *default_instance_;
}

ToolEvent_SFMToolActiveStateChanged* ToolEvent_SFMToolActiveStateChanged::default_instance_ = NULL;

ToolEvent_SFMToolActiveStateChanged* ToolEvent_SFMToolActiveStateChanged::New() const {
  return new ToolEvent_SFMToolActiveStateChanged;
}

void ToolEvent_SFMToolActiveStateChanged::Clear() {
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolEvent_SFMToolActiveStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ToolEvent_SFMToolActiveStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isactive = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ToolEvent_SFMToolActiveStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ToolEvent_SFMToolActiveStateChanged)
  return false;
#undef DO_
}

void ToolEvent_SFMToolActiveStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ToolEvent_SFMToolActiveStateChanged)
  // optional bool isactive = 1;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ToolEvent_SFMToolActiveStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMToolActiveStateChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMToolActiveStateChanged)
  // optional bool isactive = 1;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMToolActiveStateChanged)
  return target;
}

int ToolEvent_SFMToolActiveStateChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isactive = 1;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolEvent_SFMToolActiveStateChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolEvent_SFMToolActiveStateChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMToolActiveStateChanged::IsInitialized() const {

  return true;
}

void ToolEvent_SFMToolActiveStateChanged::Swap(ToolEvent_SFMToolActiveStateChanged* other) {
  if (other != this) {
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolEvent_SFMToolActiveStateChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolEvent_SFMToolActiveStateChanged_descriptor_;
  metadata.reflection = ToolEvent_SFMToolActiveStateChanged_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
