// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: toolevents.proto

#ifndef PROTOBUF_toolevents_2eproto__INCLUDED
#define PROTOBUF_toolevents_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_toolevents_2eproto();
void protobuf_AssignDesc_toolevents_2eproto();
void protobuf_ShutdownFile_toolevents_2eproto();

class ChangeMapToolEvent;
class DestroyAllEntitiesToolEvent;
class DestroyEntityToolEvent;
class RestartMapToolEvent;
class SpawnEntityToolEvent;
class SpawnEntityToolEventResult;
class ToolEvent_FireEntityInput;
class ToolEvent_GetEntityInfo;
class ToolEvent_GetEntityInfoResult;
class ToolEvent_GetEntityInputs;
class ToolEvent_GetEntityInputsResult;
class ToolEvent_SFMRecordingStateChanged;
class ToolEvent_SFMToolActiveStateChanged;
class ToolTraceRayResult;
class TraceRayServerToolEvent;

// ===================================================================

class ChangeMapToolEvent : public ::google::protobuf::Message {
 public:
  ChangeMapToolEvent();
  virtual ~ChangeMapToolEvent();

  ChangeMapToolEvent(const ChangeMapToolEvent& from);

  inline ChangeMapToolEvent& operator=(const ChangeMapToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeMapToolEvent& default_instance();

  void Swap(ChangeMapToolEvent* other);

  // implements Message ----------------------------------------------

  inline ChangeMapToolEvent* New() const { return New(NULL); }

  ChangeMapToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeMapToolEvent& from);
  void MergeFrom(const ChangeMapToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangeMapToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mapname = 1;
  bool has_mapname() const;
  void clear_mapname();
  static const int kMapnameFieldNumber = 1;
  const ::std::string& mapname() const;
  void set_mapname(const ::std::string& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  ::std::string* mutable_mapname();
  ::std::string* release_mapname();
  void set_allocated_mapname(::std::string* mapname);

  // @@protoc_insertion_point(class_scope:ChangeMapToolEvent)
 private:
  inline void set_has_mapname();
  inline void clear_has_mapname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mapname_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ChangeMapToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class TraceRayServerToolEvent : public ::google::protobuf::Message {
 public:
  TraceRayServerToolEvent();
  virtual ~TraceRayServerToolEvent();

  TraceRayServerToolEvent(const TraceRayServerToolEvent& from);

  inline TraceRayServerToolEvent& operator=(const TraceRayServerToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceRayServerToolEvent& default_instance();

  void Swap(TraceRayServerToolEvent* other);

  // implements Message ----------------------------------------------

  inline TraceRayServerToolEvent* New() const { return New(NULL); }

  TraceRayServerToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceRayServerToolEvent& from);
  void MergeFrom(const TraceRayServerToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceRayServerToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVector start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::CMsgVector& start() const;
  ::CMsgVector* mutable_start();
  ::CMsgVector* release_start();
  void set_allocated_start(::CMsgVector* start);

  // optional .CMsgVector end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::CMsgVector& end() const;
  ::CMsgVector* mutable_end();
  ::CMsgVector* release_end();
  void set_allocated_end(::CMsgVector* end);

  // @@protoc_insertion_point(class_scope:TraceRayServerToolEvent)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* start_;
  ::CMsgVector* end_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static TraceRayServerToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class ToolTraceRayResult : public ::google::protobuf::Message {
 public:
  ToolTraceRayResult();
  virtual ~ToolTraceRayResult();

  ToolTraceRayResult(const ToolTraceRayResult& from);

  inline ToolTraceRayResult& operator=(const ToolTraceRayResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolTraceRayResult& default_instance();

  void Swap(ToolTraceRayResult* other);

  // implements Message ----------------------------------------------

  inline ToolTraceRayResult* New() const { return New(NULL); }

  ToolTraceRayResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolTraceRayResult& from);
  void MergeFrom(const ToolTraceRayResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolTraceRayResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hit = 1;
  bool has_hit() const;
  void clear_hit();
  static const int kHitFieldNumber = 1;
  bool hit() const;
  void set_hit(bool value);

  // optional .CMsgVector impact = 2;
  bool has_impact() const;
  void clear_impact();
  static const int kImpactFieldNumber = 2;
  const ::CMsgVector& impact() const;
  ::CMsgVector* mutable_impact();
  ::CMsgVector* release_impact();
  void set_allocated_impact(::CMsgVector* impact);

  // optional .CMsgVector normal = 3;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 3;
  const ::CMsgVector& normal() const;
  ::CMsgVector* mutable_normal();
  ::CMsgVector* release_normal();
  void set_allocated_normal(::CMsgVector* normal);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // optional float fraction = 5;
  bool has_fraction() const;
  void clear_fraction();
  static const int kFractionFieldNumber = 5;
  float fraction() const;
  void set_fraction(float value);

  // optional int32 ehandle = 6;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 6;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ToolTraceRayResult)
 private:
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_impact();
  inline void clear_has_impact();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_fraction();
  inline void clear_has_fraction();
  inline void set_has_ehandle();
  inline void clear_has_ehandle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVector* impact_;
  bool hit_;
  float distance_;
  ::CMsgVector* normal_;
  float fraction_;
  ::google::protobuf::int32 ehandle_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolTraceRayResult* default_instance_;
};
// -------------------------------------------------------------------

class SpawnEntityToolEvent : public ::google::protobuf::Message {
 public:
  SpawnEntityToolEvent();
  virtual ~SpawnEntityToolEvent();

  SpawnEntityToolEvent(const SpawnEntityToolEvent& from);

  inline SpawnEntityToolEvent& operator=(const SpawnEntityToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpawnEntityToolEvent& default_instance();

  void Swap(SpawnEntityToolEvent* other);

  // implements Message ----------------------------------------------

  inline SpawnEntityToolEvent* New() const { return New(NULL); }

  SpawnEntityToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpawnEntityToolEvent& from);
  void MergeFrom(const SpawnEntityToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpawnEntityToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes entity_keyvalues = 1;
  bool has_entity_keyvalues() const;
  void clear_entity_keyvalues();
  static const int kEntityKeyvaluesFieldNumber = 1;
  const ::std::string& entity_keyvalues() const;
  void set_entity_keyvalues(const ::std::string& value);
  void set_entity_keyvalues(const char* value);
  void set_entity_keyvalues(const void* value, size_t size);
  ::std::string* mutable_entity_keyvalues();
  ::std::string* release_entity_keyvalues();
  void set_allocated_entity_keyvalues(::std::string* entity_keyvalues);

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  void clear_clientsideentity();
  static const int kClientsideentityFieldNumber = 2;
  bool clientsideentity() const;
  void set_clientsideentity(bool value);

  // @@protoc_insertion_point(class_scope:SpawnEntityToolEvent)
 private:
  inline void set_has_entity_keyvalues();
  inline void clear_has_entity_keyvalues();
  inline void set_has_clientsideentity();
  inline void clear_has_clientsideentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr entity_keyvalues_;
  bool clientsideentity_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static SpawnEntityToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class SpawnEntityToolEventResult : public ::google::protobuf::Message {
 public:
  SpawnEntityToolEventResult();
  virtual ~SpawnEntityToolEventResult();

  SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from);

  inline SpawnEntityToolEventResult& operator=(const SpawnEntityToolEventResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpawnEntityToolEventResult& default_instance();

  void Swap(SpawnEntityToolEventResult* other);

  // implements Message ----------------------------------------------

  inline SpawnEntityToolEventResult* New() const { return New(NULL); }

  SpawnEntityToolEventResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpawnEntityToolEventResult& from);
  void MergeFrom(const SpawnEntityToolEventResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpawnEntityToolEventResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 1;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SpawnEntityToolEventResult)
 private:
  inline void set_has_ehandle();
  inline void clear_has_ehandle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ehandle_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static SpawnEntityToolEventResult* default_instance_;
};
// -------------------------------------------------------------------

class DestroyEntityToolEvent : public ::google::protobuf::Message {
 public:
  DestroyEntityToolEvent();
  virtual ~DestroyEntityToolEvent();

  DestroyEntityToolEvent(const DestroyEntityToolEvent& from);

  inline DestroyEntityToolEvent& operator=(const DestroyEntityToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyEntityToolEvent& default_instance();

  void Swap(DestroyEntityToolEvent* other);

  // implements Message ----------------------------------------------

  inline DestroyEntityToolEvent* New() const { return New(NULL); }

  DestroyEntityToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyEntityToolEvent& from);
  void MergeFrom(const DestroyEntityToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyEntityToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 1;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DestroyEntityToolEvent)
 private:
  inline void set_has_ehandle();
  inline void clear_has_ehandle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ehandle_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static DestroyEntityToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class DestroyAllEntitiesToolEvent : public ::google::protobuf::Message {
 public:
  DestroyAllEntitiesToolEvent();
  virtual ~DestroyAllEntitiesToolEvent();

  DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from);

  inline DestroyAllEntitiesToolEvent& operator=(const DestroyAllEntitiesToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyAllEntitiesToolEvent& default_instance();

  void Swap(DestroyAllEntitiesToolEvent* other);

  // implements Message ----------------------------------------------

  inline DestroyAllEntitiesToolEvent* New() const { return New(NULL); }

  DestroyAllEntitiesToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DestroyAllEntitiesToolEvent& from);
  void MergeFrom(const DestroyAllEntitiesToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyAllEntitiesToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DestroyAllEntitiesToolEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static DestroyAllEntitiesToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class RestartMapToolEvent : public ::google::protobuf::Message {
 public:
  RestartMapToolEvent();
  virtual ~RestartMapToolEvent();

  RestartMapToolEvent(const RestartMapToolEvent& from);

  inline RestartMapToolEvent& operator=(const RestartMapToolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestartMapToolEvent& default_instance();

  void Swap(RestartMapToolEvent* other);

  // implements Message ----------------------------------------------

  inline RestartMapToolEvent* New() const { return New(NULL); }

  RestartMapToolEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestartMapToolEvent& from);
  void MergeFrom(const RestartMapToolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RestartMapToolEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:RestartMapToolEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static RestartMapToolEvent* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInfo : public ::google::protobuf::Message {
 public:
  ToolEvent_GetEntityInfo();
  virtual ~ToolEvent_GetEntityInfo();

  ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from);

  inline ToolEvent_GetEntityInfo& operator=(const ToolEvent_GetEntityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_GetEntityInfo& default_instance();

  void Swap(ToolEvent_GetEntityInfo* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_GetEntityInfo* New() const { return New(NULL); }

  ToolEvent_GetEntityInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_GetEntityInfo& from);
  void MergeFrom(const ToolEvent_GetEntityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_GetEntityInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 1;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  void clear_clientsideentity();
  static const int kClientsideentityFieldNumber = 2;
  bool clientsideentity() const;
  void set_clientsideentity(bool value);

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInfo)
 private:
  inline void set_has_ehandle();
  inline void clear_has_ehandle();
  inline void set_has_clientsideentity();
  inline void clear_has_clientsideentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ehandle_;
  bool clientsideentity_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_GetEntityInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInfoResult : public ::google::protobuf::Message {
 public:
  ToolEvent_GetEntityInfoResult();
  virtual ~ToolEvent_GetEntityInfoResult();

  ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from);

  inline ToolEvent_GetEntityInfoResult& operator=(const ToolEvent_GetEntityInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_GetEntityInfoResult& default_instance();

  void Swap(ToolEvent_GetEntityInfoResult* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_GetEntityInfoResult* New() const { return New(NULL); }

  ToolEvent_GetEntityInfoResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_GetEntityInfoResult& from);
  void MergeFrom(const ToolEvent_GetEntityInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_GetEntityInfoResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cppclass = 1 [default = "shithead"];
  bool has_cppclass() const;
  void clear_cppclass();
  static const int kCppclassFieldNumber = 1;
  const ::std::string& cppclass() const;
  void set_cppclass(const ::std::string& value);
  void set_cppclass(const char* value);
  void set_cppclass(const char* value, size_t size);
  ::std::string* mutable_cppclass();
  ::std::string* release_cppclass();
  void set_allocated_cppclass(::std::string* cppclass);

  // optional string classname = 2;
  bool has_classname() const;
  void clear_classname();
  static const int kClassnameFieldNumber = 2;
  const ::std::string& classname() const;
  void set_classname(const ::std::string& value);
  void set_classname(const char* value);
  void set_classname(const char* value, size_t size);
  ::std::string* mutable_classname();
  ::std::string* release_classname();
  void set_allocated_classname(::std::string* classname);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .CMsgVector origin = 4;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::CMsgVector& origin() const;
  ::CMsgVector* mutable_origin();
  ::CMsgVector* release_origin();
  void set_allocated_origin(::CMsgVector* origin);

  // optional .CMsgVector mins = 5;
  bool has_mins() const;
  void clear_mins();
  static const int kMinsFieldNumber = 5;
  const ::CMsgVector& mins() const;
  ::CMsgVector* mutable_mins();
  ::CMsgVector* release_mins();
  void set_allocated_mins(::CMsgVector* mins);

  // optional .CMsgVector maxs = 6;
  bool has_maxs() const;
  void clear_maxs();
  static const int kMaxsFieldNumber = 6;
  const ::CMsgVector& maxs() const;
  ::CMsgVector* mutable_maxs();
  ::CMsgVector* release_maxs();
  void set_allocated_maxs(::CMsgVector* maxs);

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInfoResult)
 private:
  inline void set_has_cppclass();
  inline void clear_has_cppclass();
  inline void set_has_classname();
  inline void clear_has_classname();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_mins();
  inline void clear_has_mins();
  inline void set_has_maxs();
  inline void clear_has_maxs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_cppclass_;
  ::google::protobuf::internal::ArenaStringPtr cppclass_;
  ::google::protobuf::internal::ArenaStringPtr classname_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::CMsgVector* origin_;
  ::CMsgVector* mins_;
  ::CMsgVector* maxs_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_GetEntityInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInputs : public ::google::protobuf::Message {
 public:
  ToolEvent_GetEntityInputs();
  virtual ~ToolEvent_GetEntityInputs();

  ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from);

  inline ToolEvent_GetEntityInputs& operator=(const ToolEvent_GetEntityInputs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_GetEntityInputs& default_instance();

  void Swap(ToolEvent_GetEntityInputs* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_GetEntityInputs* New() const { return New(NULL); }

  ToolEvent_GetEntityInputs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_GetEntityInputs& from);
  void MergeFrom(const ToolEvent_GetEntityInputs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_GetEntityInputs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 1;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  void clear_clientsideentity();
  static const int kClientsideentityFieldNumber = 2;
  bool clientsideentity() const;
  void set_clientsideentity(bool value);

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInputs)
 private:
  inline void set_has_ehandle();
  inline void clear_has_ehandle();
  inline void set_has_clientsideentity();
  inline void clear_has_clientsideentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ehandle_;
  bool clientsideentity_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_GetEntityInputs* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_GetEntityInputsResult : public ::google::protobuf::Message {
 public:
  ToolEvent_GetEntityInputsResult();
  virtual ~ToolEvent_GetEntityInputsResult();

  ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from);

  inline ToolEvent_GetEntityInputsResult& operator=(const ToolEvent_GetEntityInputsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_GetEntityInputsResult& default_instance();

  void Swap(ToolEvent_GetEntityInputsResult* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_GetEntityInputsResult* New() const { return New(NULL); }

  ToolEvent_GetEntityInputsResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_GetEntityInputsResult& from);
  void MergeFrom(const ToolEvent_GetEntityInputsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_GetEntityInputsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_list = 1;
  int input_list_size() const;
  void clear_input_list();
  static const int kInputListFieldNumber = 1;
  const ::std::string& input_list(int index) const;
  ::std::string* mutable_input_list(int index);
  void set_input_list(int index, const ::std::string& value);
  void set_input_list(int index, const char* value);
  void set_input_list(int index, const char* value, size_t size);
  ::std::string* add_input_list();
  void add_input_list(const ::std::string& value);
  void add_input_list(const char* value);
  void add_input_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_list();

  // @@protoc_insertion_point(class_scope:ToolEvent_GetEntityInputsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_list_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_GetEntityInputsResult* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_FireEntityInput : public ::google::protobuf::Message {
 public:
  ToolEvent_FireEntityInput();
  virtual ~ToolEvent_FireEntityInput();

  ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from);

  inline ToolEvent_FireEntityInput& operator=(const ToolEvent_FireEntityInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_FireEntityInput& default_instance();

  void Swap(ToolEvent_FireEntityInput* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_FireEntityInput* New() const { return New(NULL); }

  ToolEvent_FireEntityInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_FireEntityInput& from);
  void MergeFrom(const ToolEvent_FireEntityInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_FireEntityInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ehandle = 1;
  bool has_ehandle() const;
  void clear_ehandle();
  static const int kEhandleFieldNumber = 1;
  ::google::protobuf::int32 ehandle() const;
  void set_ehandle(::google::protobuf::int32 value);

  // optional bool clientsideentity = 2;
  bool has_clientsideentity() const;
  void clear_clientsideentity();
  static const int kClientsideentityFieldNumber = 2;
  bool clientsideentity() const;
  void set_clientsideentity(bool value);

  // optional string input_name = 3;
  bool has_input_name() const;
  void clear_input_name();
  static const int kInputNameFieldNumber = 3;
  const ::std::string& input_name() const;
  void set_input_name(const ::std::string& value);
  void set_input_name(const char* value);
  void set_input_name(const char* value, size_t size);
  ::std::string* mutable_input_name();
  ::std::string* release_input_name();
  void set_allocated_input_name(::std::string* input_name);

  // optional string input_param = 4;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 4;
  const ::std::string& input_param() const;
  void set_input_param(const ::std::string& value);
  void set_input_param(const char* value);
  void set_input_param(const char* value, size_t size);
  ::std::string* mutable_input_param();
  ::std::string* release_input_param();
  void set_allocated_input_param(::std::string* input_param);

  // @@protoc_insertion_point(class_scope:ToolEvent_FireEntityInput)
 private:
  inline void set_has_ehandle();
  inline void clear_has_ehandle();
  inline void set_has_clientsideentity();
  inline void clear_has_clientsideentity();
  inline void set_has_input_name();
  inline void clear_has_input_name();
  inline void set_has_input_param();
  inline void clear_has_input_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ehandle_;
  bool clientsideentity_;
  ::google::protobuf::internal::ArenaStringPtr input_name_;
  ::google::protobuf::internal::ArenaStringPtr input_param_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_FireEntityInput* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_SFMRecordingStateChanged : public ::google::protobuf::Message {
 public:
  ToolEvent_SFMRecordingStateChanged();
  virtual ~ToolEvent_SFMRecordingStateChanged();

  ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from);

  inline ToolEvent_SFMRecordingStateChanged& operator=(const ToolEvent_SFMRecordingStateChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_SFMRecordingStateChanged& default_instance();

  void Swap(ToolEvent_SFMRecordingStateChanged* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_SFMRecordingStateChanged* New() const { return New(NULL); }

  ToolEvent_SFMRecordingStateChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_SFMRecordingStateChanged& from);
  void MergeFrom(const ToolEvent_SFMRecordingStateChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_SFMRecordingStateChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isrecording = 1;
  bool has_isrecording() const;
  void clear_isrecording();
  static const int kIsrecordingFieldNumber = 1;
  bool isrecording() const;
  void set_isrecording(bool value);

  // @@protoc_insertion_point(class_scope:ToolEvent_SFMRecordingStateChanged)
 private:
  inline void set_has_isrecording();
  inline void clear_has_isrecording();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isrecording_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_SFMRecordingStateChanged* default_instance_;
};
// -------------------------------------------------------------------

class ToolEvent_SFMToolActiveStateChanged : public ::google::protobuf::Message {
 public:
  ToolEvent_SFMToolActiveStateChanged();
  virtual ~ToolEvent_SFMToolActiveStateChanged();

  ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from);

  inline ToolEvent_SFMToolActiveStateChanged& operator=(const ToolEvent_SFMToolActiveStateChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolEvent_SFMToolActiveStateChanged& default_instance();

  void Swap(ToolEvent_SFMToolActiveStateChanged* other);

  // implements Message ----------------------------------------------

  inline ToolEvent_SFMToolActiveStateChanged* New() const { return New(NULL); }

  ToolEvent_SFMToolActiveStateChanged* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from);
  void MergeFrom(const ToolEvent_SFMToolActiveStateChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ToolEvent_SFMToolActiveStateChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isactive = 1;
  bool has_isactive() const;
  void clear_isactive();
  static const int kIsactiveFieldNumber = 1;
  bool isactive() const;
  void set_isactive(bool value);

  // @@protoc_insertion_point(class_scope:ToolEvent_SFMToolActiveStateChanged)
 private:
  inline void set_has_isactive();
  inline void clear_has_isactive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isactive_;
  friend void  protobuf_AddDesc_toolevents_2eproto();
  friend void protobuf_AssignDesc_toolevents_2eproto();
  friend void protobuf_ShutdownFile_toolevents_2eproto();

  void InitAsDefaultInstance();
  static ToolEvent_SFMToolActiveStateChanged* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeMapToolEvent

// optional string mapname = 1;
inline bool ChangeMapToolEvent::has_mapname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeMapToolEvent::set_has_mapname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeMapToolEvent::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeMapToolEvent::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapname();
}
inline const ::std::string& ChangeMapToolEvent::mapname() const {
  // @@protoc_insertion_point(field_get:ChangeMapToolEvent.mapname)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeMapToolEvent::set_mapname(const ::std::string& value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChangeMapToolEvent.mapname)
}
inline void ChangeMapToolEvent::set_mapname(const char* value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChangeMapToolEvent.mapname)
}
inline void ChangeMapToolEvent::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChangeMapToolEvent.mapname)
}
inline ::std::string* ChangeMapToolEvent::mutable_mapname() {
  set_has_mapname();
  // @@protoc_insertion_point(field_mutable:ChangeMapToolEvent.mapname)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeMapToolEvent::release_mapname() {
  clear_has_mapname();
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeMapToolEvent::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    set_has_mapname();
  } else {
    clear_has_mapname();
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:ChangeMapToolEvent.mapname)
}

// -------------------------------------------------------------------

// TraceRayServerToolEvent

// optional .CMsgVector start = 1;
inline bool TraceRayServerToolEvent::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceRayServerToolEvent::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceRayServerToolEvent::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceRayServerToolEvent::clear_start() {
  if (start_ != NULL) start_->::CMsgVector::Clear();
  clear_has_start();
}
inline const ::CMsgVector& TraceRayServerToolEvent::start() const {
  // @@protoc_insertion_point(field_get:TraceRayServerToolEvent.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::CMsgVector* TraceRayServerToolEvent::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:TraceRayServerToolEvent.start)
  return start_;
}
inline ::CMsgVector* TraceRayServerToolEvent::release_start() {
  clear_has_start();
  ::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void TraceRayServerToolEvent::set_allocated_start(::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:TraceRayServerToolEvent.start)
}

// optional .CMsgVector end = 2;
inline bool TraceRayServerToolEvent::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceRayServerToolEvent::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceRayServerToolEvent::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceRayServerToolEvent::clear_end() {
  if (end_ != NULL) end_->::CMsgVector::Clear();
  clear_has_end();
}
inline const ::CMsgVector& TraceRayServerToolEvent::end() const {
  // @@protoc_insertion_point(field_get:TraceRayServerToolEvent.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::CMsgVector* TraceRayServerToolEvent::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:TraceRayServerToolEvent.end)
  return end_;
}
inline ::CMsgVector* TraceRayServerToolEvent::release_end() {
  clear_has_end();
  ::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
inline void TraceRayServerToolEvent::set_allocated_end(::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:TraceRayServerToolEvent.end)
}

// -------------------------------------------------------------------

// ToolTraceRayResult

// optional bool hit = 1;
inline bool ToolTraceRayResult::has_hit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolTraceRayResult::set_has_hit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolTraceRayResult::clear_has_hit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolTraceRayResult::clear_hit() {
  hit_ = false;
  clear_has_hit();
}
inline bool ToolTraceRayResult::hit() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.hit)
  return hit_;
}
inline void ToolTraceRayResult::set_hit(bool value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.hit)
}

// optional .CMsgVector impact = 2;
inline bool ToolTraceRayResult::has_impact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolTraceRayResult::set_has_impact() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolTraceRayResult::clear_has_impact() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolTraceRayResult::clear_impact() {
  if (impact_ != NULL) impact_->::CMsgVector::Clear();
  clear_has_impact();
}
inline const ::CMsgVector& ToolTraceRayResult::impact() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.impact)
  return impact_ != NULL ? *impact_ : *default_instance_->impact_;
}
inline ::CMsgVector* ToolTraceRayResult::mutable_impact() {
  set_has_impact();
  if (impact_ == NULL) {
    impact_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:ToolTraceRayResult.impact)
  return impact_;
}
inline ::CMsgVector* ToolTraceRayResult::release_impact() {
  clear_has_impact();
  ::CMsgVector* temp = impact_;
  impact_ = NULL;
  return temp;
}
inline void ToolTraceRayResult::set_allocated_impact(::CMsgVector* impact) {
  delete impact_;
  impact_ = impact;
  if (impact) {
    set_has_impact();
  } else {
    clear_has_impact();
  }
  // @@protoc_insertion_point(field_set_allocated:ToolTraceRayResult.impact)
}

// optional .CMsgVector normal = 3;
inline bool ToolTraceRayResult::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToolTraceRayResult::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToolTraceRayResult::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToolTraceRayResult::clear_normal() {
  if (normal_ != NULL) normal_->::CMsgVector::Clear();
  clear_has_normal();
}
inline const ::CMsgVector& ToolTraceRayResult::normal() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::CMsgVector* ToolTraceRayResult::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:ToolTraceRayResult.normal)
  return normal_;
}
inline ::CMsgVector* ToolTraceRayResult::release_normal() {
  clear_has_normal();
  ::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void ToolTraceRayResult::set_allocated_normal(::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:ToolTraceRayResult.normal)
}

// optional float distance = 4;
inline bool ToolTraceRayResult::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToolTraceRayResult::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToolTraceRayResult::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToolTraceRayResult::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float ToolTraceRayResult::distance() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.distance)
  return distance_;
}
inline void ToolTraceRayResult::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.distance)
}

// optional float fraction = 5;
inline bool ToolTraceRayResult::has_fraction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ToolTraceRayResult::set_has_fraction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ToolTraceRayResult::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ToolTraceRayResult::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
inline float ToolTraceRayResult::fraction() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.fraction)
  return fraction_;
}
inline void ToolTraceRayResult::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.fraction)
}

// optional int32 ehandle = 6;
inline bool ToolTraceRayResult::has_ehandle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ToolTraceRayResult::set_has_ehandle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ToolTraceRayResult::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ToolTraceRayResult::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 ToolTraceRayResult::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolTraceRayResult.ehandle)
  return ehandle_;
}
inline void ToolTraceRayResult::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:ToolTraceRayResult.ehandle)
}

// -------------------------------------------------------------------

// SpawnEntityToolEvent

// optional bytes entity_keyvalues = 1;
inline bool SpawnEntityToolEvent::has_entity_keyvalues() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpawnEntityToolEvent::set_has_entity_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpawnEntityToolEvent::clear_has_entity_keyvalues() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpawnEntityToolEvent::clear_entity_keyvalues() {
  entity_keyvalues_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_keyvalues();
}
inline const ::std::string& SpawnEntityToolEvent::entity_keyvalues() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEvent.entity_keyvalues)
  return entity_keyvalues_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnEntityToolEvent::set_entity_keyvalues(const ::std::string& value) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpawnEntityToolEvent.entity_keyvalues)
}
inline void SpawnEntityToolEvent::set_entity_keyvalues(const char* value) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpawnEntityToolEvent.entity_keyvalues)
}
inline void SpawnEntityToolEvent::set_entity_keyvalues(const void* value, size_t size) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpawnEntityToolEvent.entity_keyvalues)
}
inline ::std::string* SpawnEntityToolEvent::mutable_entity_keyvalues() {
  set_has_entity_keyvalues();
  // @@protoc_insertion_point(field_mutable:SpawnEntityToolEvent.entity_keyvalues)
  return entity_keyvalues_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpawnEntityToolEvent::release_entity_keyvalues() {
  clear_has_entity_keyvalues();
  return entity_keyvalues_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnEntityToolEvent::set_allocated_entity_keyvalues(::std::string* entity_keyvalues) {
  if (entity_keyvalues != NULL) {
    set_has_entity_keyvalues();
  } else {
    clear_has_entity_keyvalues();
  }
  entity_keyvalues_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_keyvalues);
  // @@protoc_insertion_point(field_set_allocated:SpawnEntityToolEvent.entity_keyvalues)
}

// optional bool clientsideentity = 2;
inline bool SpawnEntityToolEvent::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpawnEntityToolEvent::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpawnEntityToolEvent::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpawnEntityToolEvent::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
inline bool SpawnEntityToolEvent::clientsideentity() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEvent.clientsideentity)
  return clientsideentity_;
}
inline void SpawnEntityToolEvent::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:SpawnEntityToolEvent.clientsideentity)
}

// -------------------------------------------------------------------

// SpawnEntityToolEventResult

// optional int32 ehandle = 1;
inline bool SpawnEntityToolEventResult::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpawnEntityToolEventResult::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpawnEntityToolEventResult::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpawnEntityToolEventResult::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 SpawnEntityToolEventResult::ehandle() const {
  // @@protoc_insertion_point(field_get:SpawnEntityToolEventResult.ehandle)
  return ehandle_;
}
inline void SpawnEntityToolEventResult::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:SpawnEntityToolEventResult.ehandle)
}

// -------------------------------------------------------------------

// DestroyEntityToolEvent

// optional int32 ehandle = 1;
inline bool DestroyEntityToolEvent::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DestroyEntityToolEvent::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DestroyEntityToolEvent::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DestroyEntityToolEvent::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 DestroyEntityToolEvent::ehandle() const {
  // @@protoc_insertion_point(field_get:DestroyEntityToolEvent.ehandle)
  return ehandle_;
}
inline void DestroyEntityToolEvent::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:DestroyEntityToolEvent.ehandle)
}

// -------------------------------------------------------------------

// DestroyAllEntitiesToolEvent

// -------------------------------------------------------------------

// RestartMapToolEvent

// -------------------------------------------------------------------

// ToolEvent_GetEntityInfo

// optional int32 ehandle = 1;
inline bool ToolEvent_GetEntityInfo::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_GetEntityInfo::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_GetEntityInfo::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_GetEntityInfo::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 ToolEvent_GetEntityInfo::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfo.ehandle)
  return ehandle_;
}
inline void ToolEvent_GetEntityInfo::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfo.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_GetEntityInfo::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolEvent_GetEntityInfo::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolEvent_GetEntityInfo::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolEvent_GetEntityInfo::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
inline bool ToolEvent_GetEntityInfo::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfo.clientsideentity)
  return clientsideentity_;
}
inline void ToolEvent_GetEntityInfo::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfo.clientsideentity)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInfoResult

// optional string cppclass = 1 [default = "shithead"];
inline bool ToolEvent_GetEntityInfoResult::has_cppclass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_cppclass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_cppclass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_GetEntityInfoResult::clear_cppclass() {
  cppclass_.ClearToDefaultNoArena(_default_cppclass_);
  clear_has_cppclass();
}
inline const ::std::string& ToolEvent_GetEntityInfoResult::cppclass() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.cppclass)
  return cppclass_.GetNoArena(_default_cppclass_);
}
inline void ToolEvent_GetEntityInfoResult::set_cppclass(const ::std::string& value) {
  set_has_cppclass();
  cppclass_.SetNoArena(_default_cppclass_, value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.cppclass)
}
inline void ToolEvent_GetEntityInfoResult::set_cppclass(const char* value) {
  set_has_cppclass();
  cppclass_.SetNoArena(_default_cppclass_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToolEvent_GetEntityInfoResult.cppclass)
}
inline void ToolEvent_GetEntityInfoResult::set_cppclass(const char* value, size_t size) {
  set_has_cppclass();
  cppclass_.SetNoArena(_default_cppclass_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_GetEntityInfoResult.cppclass)
}
inline ::std::string* ToolEvent_GetEntityInfoResult::mutable_cppclass() {
  set_has_cppclass();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.cppclass)
  return cppclass_.MutableNoArena(_default_cppclass_);
}
inline ::std::string* ToolEvent_GetEntityInfoResult::release_cppclass() {
  clear_has_cppclass();
  return cppclass_.ReleaseNoArena(_default_cppclass_);
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_cppclass(::std::string* cppclass) {
  if (cppclass != NULL) {
    set_has_cppclass();
  } else {
    clear_has_cppclass();
  }
  cppclass_.SetAllocatedNoArena(_default_cppclass_, cppclass);
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.cppclass)
}

// optional string classname = 2;
inline bool ToolEvent_GetEntityInfoResult::has_classname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_classname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_classname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolEvent_GetEntityInfoResult::clear_classname() {
  classname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classname();
}
inline const ::std::string& ToolEvent_GetEntityInfoResult::classname() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.classname)
  return classname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_GetEntityInfoResult::set_classname(const ::std::string& value) {
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.classname)
}
inline void ToolEvent_GetEntityInfoResult::set_classname(const char* value) {
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToolEvent_GetEntityInfoResult.classname)
}
inline void ToolEvent_GetEntityInfoResult::set_classname(const char* value, size_t size) {
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_GetEntityInfoResult.classname)
}
inline ::std::string* ToolEvent_GetEntityInfoResult::mutable_classname() {
  set_has_classname();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.classname)
  return classname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolEvent_GetEntityInfoResult::release_classname() {
  clear_has_classname();
  return classname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_classname(::std::string* classname) {
  if (classname != NULL) {
    set_has_classname();
  } else {
    clear_has_classname();
  }
  classname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classname);
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.classname)
}

// optional string name = 3;
inline bool ToolEvent_GetEntityInfoResult::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToolEvent_GetEntityInfoResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ToolEvent_GetEntityInfoResult::name() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_GetEntityInfoResult::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInfoResult.name)
}
inline void ToolEvent_GetEntityInfoResult::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToolEvent_GetEntityInfoResult.name)
}
inline void ToolEvent_GetEntityInfoResult::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_GetEntityInfoResult.name)
}
inline ::std::string* ToolEvent_GetEntityInfoResult::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolEvent_GetEntityInfoResult::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.name)
}

// optional .CMsgVector origin = 4;
inline bool ToolEvent_GetEntityInfoResult::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToolEvent_GetEntityInfoResult::clear_origin() {
  if (origin_ != NULL) origin_->::CMsgVector::Clear();
  clear_has_origin();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::origin() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.origin)
  return origin_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_origin() {
  clear_has_origin();
  ::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_origin(::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.origin)
}

// optional .CMsgVector mins = 5;
inline bool ToolEvent_GetEntityInfoResult::has_mins() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_mins() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_mins() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ToolEvent_GetEntityInfoResult::clear_mins() {
  if (mins_ != NULL) mins_->::CMsgVector::Clear();
  clear_has_mins();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::mins() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.mins)
  return mins_ != NULL ? *mins_ : *default_instance_->mins_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.mins)
  return mins_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_mins() {
  clear_has_mins();
  ::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_mins(::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.mins)
}

// optional .CMsgVector maxs = 6;
inline bool ToolEvent_GetEntityInfoResult::has_maxs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ToolEvent_GetEntityInfoResult::set_has_maxs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ToolEvent_GetEntityInfoResult::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ToolEvent_GetEntityInfoResult::clear_maxs() {
  if (maxs_ != NULL) maxs_->::CMsgVector::Clear();
  clear_has_maxs();
}
inline const ::CMsgVector& ToolEvent_GetEntityInfoResult::maxs() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInfoResult.maxs)
  return maxs_ != NULL ? *maxs_ : *default_instance_->maxs_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInfoResult.maxs)
  return maxs_;
}
inline ::CMsgVector* ToolEvent_GetEntityInfoResult::release_maxs() {
  clear_has_maxs();
  ::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
inline void ToolEvent_GetEntityInfoResult::set_allocated_maxs(::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_GetEntityInfoResult.maxs)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInputs

// optional int32 ehandle = 1;
inline bool ToolEvent_GetEntityInputs::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_GetEntityInputs::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_GetEntityInputs::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_GetEntityInputs::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 ToolEvent_GetEntityInputs::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputs.ehandle)
  return ehandle_;
}
inline void ToolEvent_GetEntityInputs::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputs.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_GetEntityInputs::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolEvent_GetEntityInputs::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolEvent_GetEntityInputs::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolEvent_GetEntityInputs::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
inline bool ToolEvent_GetEntityInputs::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputs.clientsideentity)
  return clientsideentity_;
}
inline void ToolEvent_GetEntityInputs::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputs.clientsideentity)
}

// -------------------------------------------------------------------

// ToolEvent_GetEntityInputsResult

// repeated string input_list = 1;
inline int ToolEvent_GetEntityInputsResult::input_list_size() const {
  return input_list_.size();
}
inline void ToolEvent_GetEntityInputsResult::clear_input_list() {
  input_list_.Clear();
}
inline const ::std::string& ToolEvent_GetEntityInputsResult::input_list(int index) const {
  // @@protoc_insertion_point(field_get:ToolEvent_GetEntityInputsResult.input_list)
  return input_list_.Get(index);
}
inline ::std::string* ToolEvent_GetEntityInputsResult::mutable_input_list(int index) {
  // @@protoc_insertion_point(field_mutable:ToolEvent_GetEntityInputsResult.input_list)
  return input_list_.Mutable(index);
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ToolEvent_GetEntityInputsResult.input_list)
  input_list_.Mutable(index)->assign(value);
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value) {
  input_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value, size_t size) {
  input_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_GetEntityInputsResult.input_list)
}
inline ::std::string* ToolEvent_GetEntityInputsResult::add_input_list() {
  return input_list_.Add();
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const ::std::string& value) {
  input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const char* value) {
  input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ToolEvent_GetEntityInputsResult.input_list)
}
inline void ToolEvent_GetEntityInputsResult::add_input_list(const char* value, size_t size) {
  input_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ToolEvent_GetEntityInputsResult.input_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ToolEvent_GetEntityInputsResult::input_list() const {
  // @@protoc_insertion_point(field_list:ToolEvent_GetEntityInputsResult.input_list)
  return input_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ToolEvent_GetEntityInputsResult::mutable_input_list() {
  // @@protoc_insertion_point(field_mutable_list:ToolEvent_GetEntityInputsResult.input_list)
  return &input_list_;
}

// -------------------------------------------------------------------

// ToolEvent_FireEntityInput

// optional int32 ehandle = 1;
inline bool ToolEvent_FireEntityInput::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_FireEntityInput::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_FireEntityInput::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_FireEntityInput::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
inline ::google::protobuf::int32 ToolEvent_FireEntityInput::ehandle() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.ehandle)
  return ehandle_;
}
inline void ToolEvent_FireEntityInput::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.ehandle)
}

// optional bool clientsideentity = 2;
inline bool ToolEvent_FireEntityInput::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolEvent_FireEntityInput::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolEvent_FireEntityInput::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolEvent_FireEntityInput::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
inline bool ToolEvent_FireEntityInput::clientsideentity() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.clientsideentity)
  return clientsideentity_;
}
inline void ToolEvent_FireEntityInput::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.clientsideentity)
}

// optional string input_name = 3;
inline bool ToolEvent_FireEntityInput::has_input_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToolEvent_FireEntityInput::set_has_input_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToolEvent_FireEntityInput::clear_has_input_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToolEvent_FireEntityInput::clear_input_name() {
  input_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_name();
}
inline const ::std::string& ToolEvent_FireEntityInput::input_name() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.input_name)
  return input_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_FireEntityInput::set_input_name(const ::std::string& value) {
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.input_name)
}
inline void ToolEvent_FireEntityInput::set_input_name(const char* value) {
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToolEvent_FireEntityInput.input_name)
}
inline void ToolEvent_FireEntityInput::set_input_name(const char* value, size_t size) {
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_FireEntityInput.input_name)
}
inline ::std::string* ToolEvent_FireEntityInput::mutable_input_name() {
  set_has_input_name();
  // @@protoc_insertion_point(field_mutable:ToolEvent_FireEntityInput.input_name)
  return input_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolEvent_FireEntityInput::release_input_name() {
  clear_has_input_name();
  return input_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_FireEntityInput::set_allocated_input_name(::std::string* input_name) {
  if (input_name != NULL) {
    set_has_input_name();
  } else {
    clear_has_input_name();
  }
  input_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_name);
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_FireEntityInput.input_name)
}

// optional string input_param = 4;
inline bool ToolEvent_FireEntityInput::has_input_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToolEvent_FireEntityInput::set_has_input_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToolEvent_FireEntityInput::clear_has_input_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToolEvent_FireEntityInput::clear_input_param() {
  input_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_param();
}
inline const ::std::string& ToolEvent_FireEntityInput::input_param() const {
  // @@protoc_insertion_point(field_get:ToolEvent_FireEntityInput.input_param)
  return input_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_FireEntityInput::set_input_param(const ::std::string& value) {
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ToolEvent_FireEntityInput.input_param)
}
inline void ToolEvent_FireEntityInput::set_input_param(const char* value) {
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToolEvent_FireEntityInput.input_param)
}
inline void ToolEvent_FireEntityInput::set_input_param(const char* value, size_t size) {
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToolEvent_FireEntityInput.input_param)
}
inline ::std::string* ToolEvent_FireEntityInput::mutable_input_param() {
  set_has_input_param();
  // @@protoc_insertion_point(field_mutable:ToolEvent_FireEntityInput.input_param)
  return input_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolEvent_FireEntityInput::release_input_param() {
  clear_has_input_param();
  return input_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolEvent_FireEntityInput::set_allocated_input_param(::std::string* input_param) {
  if (input_param != NULL) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  input_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_param);
  // @@protoc_insertion_point(field_set_allocated:ToolEvent_FireEntityInput.input_param)
}

// -------------------------------------------------------------------

// ToolEvent_SFMRecordingStateChanged

// optional bool isrecording = 1;
inline bool ToolEvent_SFMRecordingStateChanged::has_isrecording() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_SFMRecordingStateChanged::set_has_isrecording() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_SFMRecordingStateChanged::clear_has_isrecording() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_SFMRecordingStateChanged::clear_isrecording() {
  isrecording_ = false;
  clear_has_isrecording();
}
inline bool ToolEvent_SFMRecordingStateChanged::isrecording() const {
  // @@protoc_insertion_point(field_get:ToolEvent_SFMRecordingStateChanged.isrecording)
  return isrecording_;
}
inline void ToolEvent_SFMRecordingStateChanged::set_isrecording(bool value) {
  set_has_isrecording();
  isrecording_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_SFMRecordingStateChanged.isrecording)
}

// -------------------------------------------------------------------

// ToolEvent_SFMToolActiveStateChanged

// optional bool isactive = 1;
inline bool ToolEvent_SFMToolActiveStateChanged::has_isactive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolEvent_SFMToolActiveStateChanged::set_has_isactive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolEvent_SFMToolActiveStateChanged::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolEvent_SFMToolActiveStateChanged::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool ToolEvent_SFMToolActiveStateChanged::isactive() const {
  // @@protoc_insertion_point(field_get:ToolEvent_SFMToolActiveStateChanged.isactive)
  return isactive_;
}
inline void ToolEvent_SFMToolActiveStateChanged::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
  // @@protoc_insertion_point(field_set:ToolEvent_SFMToolActiveStateChanged.isactive)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_toolevents_2eproto__INCLUDED
