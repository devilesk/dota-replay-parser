// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CUserMessageAchievementEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageAchievementEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCloseCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCloseCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionDirect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCloseCaptionDirect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionPlaceholder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCloseCaptionPlaceholder_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCurrentTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCurrentTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageDesiredTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageDesiredTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageFade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageFade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageShake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageShake_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageShakeDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageShakeDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageScreenTilt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageScreenTilt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageSayText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageSayText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageSayText2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageSayText2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageHudMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageHudMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageHudText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageHudText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageTextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageTextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageGameTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageGameTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageResetHUD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageResetHUD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageSendAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageSendAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageAudioParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageAudioParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageVoiceMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageVoiceMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageRequestState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageRequestState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageKeyHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageKeyHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageVoiceSubtitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageVoiceSubtitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageVGUIMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu_Keys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageVGUIMenu_Keys_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageRumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageRumble_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageTrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageSayTextChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageSayTextChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageColoredText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageColoredText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageItemPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageItemPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageAmmoDenied_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageAmmoDenied_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCrosshairAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCrosshairAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageShowMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageShowMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCreditsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCreditsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessagePlayJingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessagePlayJingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessageScreenOverlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessageScreenOverlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessageRemoveAllDecals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessageRemoveAllDecals_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessagePropagateForce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessagePropagateForce_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessageDoSpark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessageDoSpark_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEntityMessageFixAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEntityMessageFixAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCameraTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCameraTransition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMessageCameraTransition_Transition_DataDriven_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMessageCameraTransition_Transition_DataDriven_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_CreateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_CreateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_DestroyParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleFwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleOrient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleFallback_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleEnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ParticleManager_ChangeControlPointAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_HudError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_HudError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_CustomGameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_CustomGameEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBaseEntityMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRollType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PARTICLE_MESSAGE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_usermessages_2eproto() {
  protobuf_AddDesc_usermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CUserMessageAchievementEvent_descriptor_ = file->message_type(0);
  static const int CUserMessageAchievementEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, achievement_),
  };
  CUserMessageAchievementEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageAchievementEvent_descriptor_,
      CUserMessageAchievementEvent::default_instance_,
      CUserMessageAchievementEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAchievementEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageAchievementEvent));
  CUserMessageCloseCaption_descriptor_ = file->message_type(1);
  static const int CUserMessageCloseCaption_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, from_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, ent_index_),
  };
  CUserMessageCloseCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCloseCaption_descriptor_,
      CUserMessageCloseCaption::default_instance_,
      CUserMessageCloseCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCloseCaption));
  CUserMessageCloseCaptionDirect_descriptor_ = file->message_type(2);
  static const int CUserMessageCloseCaptionDirect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, from_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, ent_index_),
  };
  CUserMessageCloseCaptionDirect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCloseCaptionDirect_descriptor_,
      CUserMessageCloseCaptionDirect::default_instance_,
      CUserMessageCloseCaptionDirect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionDirect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCloseCaptionDirect));
  CUserMessageCloseCaptionPlaceholder_descriptor_ = file->message_type(3);
  static const int CUserMessageCloseCaptionPlaceholder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, from_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, ent_index_),
  };
  CUserMessageCloseCaptionPlaceholder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCloseCaptionPlaceholder_descriptor_,
      CUserMessageCloseCaptionPlaceholder::default_instance_,
      CUserMessageCloseCaptionPlaceholder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCloseCaptionPlaceholder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCloseCaptionPlaceholder));
  CUserMessageCurrentTimescale_descriptor_ = file->message_type(4);
  static const int CUserMessageCurrentTimescale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, current_),
  };
  CUserMessageCurrentTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCurrentTimescale_descriptor_,
      CUserMessageCurrentTimescale::default_instance_,
      CUserMessageCurrentTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCurrentTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCurrentTimescale));
  CUserMessageDesiredTimescale_descriptor_ = file->message_type(5);
  static const int CUserMessageDesiredTimescale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, minblendrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, blenddeltamultiplier_),
  };
  CUserMessageDesiredTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageDesiredTimescale_descriptor_,
      CUserMessageDesiredTimescale::default_instance_,
      CUserMessageDesiredTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageDesiredTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageDesiredTimescale));
  CUserMessageFade_descriptor_ = file->message_type(6);
  static const int CUserMessageFade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, color_),
  };
  CUserMessageFade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageFade_descriptor_,
      CUserMessageFade::default_instance_,
      CUserMessageFade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageFade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageFade));
  CUserMessageShake_descriptor_ = file->message_type(7);
  static const int CUserMessageShake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, duration_),
  };
  CUserMessageShake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageShake_descriptor_,
      CUserMessageShake::default_instance_,
      CUserMessageShake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageShake));
  CUserMessageShakeDir_descriptor_ = file->message_type(8);
  static const int CUserMessageShakeDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, shake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, direction_),
  };
  CUserMessageShakeDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageShakeDir_descriptor_,
      CUserMessageShakeDir::default_instance_,
      CUserMessageShakeDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShakeDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageShakeDir));
  CUserMessageScreenTilt_descriptor_ = file->message_type(9);
  static const int CUserMessageScreenTilt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, ease_in_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, time_),
  };
  CUserMessageScreenTilt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageScreenTilt_descriptor_,
      CUserMessageScreenTilt::default_instance_,
      CUserMessageScreenTilt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageScreenTilt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageScreenTilt));
  CUserMessageSayText_descriptor_ = file->message_type(10);
  static const int CUserMessageSayText_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, playerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, chat_),
  };
  CUserMessageSayText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageSayText_descriptor_,
      CUserMessageSayText::default_instance_,
      CUserMessageSayText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageSayText));
  CUserMessageSayText2_descriptor_ = file->message_type(11);
  static const int CUserMessageSayText2_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, entityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, messagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, param4_),
  };
  CUserMessageSayText2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageSayText2_descriptor_,
      CUserMessageSayText2::default_instance_,
      CUserMessageSayText2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayText2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageSayText2));
  CUserMessageHudMsg_descriptor_ = file->message_type(12);
  static const int CUserMessageHudMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, color1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, color2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fade_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fade_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, fx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, message_),
  };
  CUserMessageHudMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageHudMsg_descriptor_,
      CUserMessageHudMsg::default_instance_,
      CUserMessageHudMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageHudMsg));
  CUserMessageHudText_descriptor_ = file->message_type(13);
  static const int CUserMessageHudText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, message_),
  };
  CUserMessageHudText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageHudText_descriptor_,
      CUserMessageHudText::default_instance_,
      CUserMessageHudText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHudText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageHudText));
  CUserMessageTextMsg_descriptor_ = file->message_type(14);
  static const int CUserMessageTextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, param_),
  };
  CUserMessageTextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageTextMsg_descriptor_,
      CUserMessageTextMsg::default_instance_,
      CUserMessageTextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageTextMsg));
  CUserMessageGameTitle_descriptor_ = file->message_type(15);
  static const int CUserMessageGameTitle_offsets_[1] = {
  };
  CUserMessageGameTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageGameTitle_descriptor_,
      CUserMessageGameTitle::default_instance_,
      CUserMessageGameTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageGameTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageGameTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageGameTitle));
  CUserMessageResetHUD_descriptor_ = file->message_type(16);
  static const int CUserMessageResetHUD_offsets_[1] = {
  };
  CUserMessageResetHUD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageResetHUD_descriptor_,
      CUserMessageResetHUD::default_instance_,
      CUserMessageResetHUD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageResetHUD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageResetHUD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageResetHUD));
  CUserMessageSendAudio_descriptor_ = file->message_type(17);
  static const int CUserMessageSendAudio_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, soundname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, stop_),
  };
  CUserMessageSendAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageSendAudio_descriptor_,
      CUserMessageSendAudio::default_instance_,
      CUserMessageSendAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSendAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageSendAudio));
  CUserMessageAudioParameter_descriptor_ = file->message_type(18);
  static const int CUserMessageAudioParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, parameter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, name_hash_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, value_),
  };
  CUserMessageAudioParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageAudioParameter_descriptor_,
      CUserMessageAudioParameter::default_instance_,
      CUserMessageAudioParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAudioParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageAudioParameter));
  CUserMessageVoiceMask_descriptor_ = file->message_type(19);
  static const int CUserMessageVoiceMask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, gamerules_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, ban_masks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, mod_enable_),
  };
  CUserMessageVoiceMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageVoiceMask_descriptor_,
      CUserMessageVoiceMask::default_instance_,
      CUserMessageVoiceMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageVoiceMask));
  CUserMessageRequestState_descriptor_ = file->message_type(20);
  static const int CUserMessageRequestState_offsets_[1] = {
  };
  CUserMessageRequestState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageRequestState_descriptor_,
      CUserMessageRequestState::default_instance_,
      CUserMessageRequestState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRequestState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRequestState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageRequestState));
  CUserMessageHintText_descriptor_ = file->message_type(21);
  static const int CUserMessageHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, message_),
  };
  CUserMessageHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageHintText_descriptor_,
      CUserMessageHintText::default_instance_,
      CUserMessageHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageHintText));
  CUserMessageKeyHintText_descriptor_ = file->message_type(22);
  static const int CUserMessageKeyHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, messages_),
  };
  CUserMessageKeyHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageKeyHintText_descriptor_,
      CUserMessageKeyHintText::default_instance_,
      CUserMessageKeyHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageKeyHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageKeyHintText));
  CUserMessageVoiceSubtitle_descriptor_ = file->message_type(23);
  static const int CUserMessageVoiceSubtitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, item_),
  };
  CUserMessageVoiceSubtitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageVoiceSubtitle_descriptor_,
      CUserMessageVoiceSubtitle::default_instance_,
      CUserMessageVoiceSubtitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVoiceSubtitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageVoiceSubtitle));
  CUserMessageVGUIMenu_descriptor_ = file->message_type(24);
  static const int CUserMessageVGUIMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, keys_),
  };
  CUserMessageVGUIMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageVGUIMenu_descriptor_,
      CUserMessageVGUIMenu::default_instance_,
      CUserMessageVGUIMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageVGUIMenu));
  CUserMessageVGUIMenu_Keys_descriptor_ = CUserMessageVGUIMenu_descriptor_->nested_type(0);
  static const int CUserMessageVGUIMenu_Keys_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, value_),
  };
  CUserMessageVGUIMenu_Keys_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageVGUIMenu_Keys_descriptor_,
      CUserMessageVGUIMenu_Keys::default_instance_,
      CUserMessageVGUIMenu_Keys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageVGUIMenu_Keys, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageVGUIMenu_Keys));
  CUserMessageRumble_descriptor_ = file->message_type(25);
  static const int CUserMessageRumble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, flags_),
  };
  CUserMessageRumble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageRumble_descriptor_,
      CUserMessageRumble::default_instance_,
      CUserMessageRumble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageRumble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageRumble));
  CUserMessageTrain_descriptor_ = file->message_type(26);
  static const int CUserMessageTrain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, position_),
  };
  CUserMessageTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageTrain_descriptor_,
      CUserMessageTrain::default_instance_,
      CUserMessageTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageTrain));
  CUserMessageSayTextChannel_descriptor_ = file->message_type(27);
  static const int CUserMessageSayTextChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, text_),
  };
  CUserMessageSayTextChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageSayTextChannel_descriptor_,
      CUserMessageSayTextChannel::default_instance_,
      CUserMessageSayTextChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageSayTextChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageSayTextChannel));
  CUserMessageColoredText_descriptor_ = file->message_type(28);
  static const int CUserMessageColoredText_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, context_team_id_),
  };
  CUserMessageColoredText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageColoredText_descriptor_,
      CUserMessageColoredText::default_instance_,
      CUserMessageColoredText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageColoredText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageColoredText));
  CUserMessageItemPickup_descriptor_ = file->message_type(29);
  static const int CUserMessageItemPickup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, itemname_),
  };
  CUserMessageItemPickup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageItemPickup_descriptor_,
      CUserMessageItemPickup::default_instance_,
      CUserMessageItemPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageItemPickup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageItemPickup));
  CUserMessageAmmoDenied_descriptor_ = file->message_type(30);
  static const int CUserMessageAmmoDenied_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, ammo_id_),
  };
  CUserMessageAmmoDenied_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageAmmoDenied_descriptor_,
      CUserMessageAmmoDenied::default_instance_,
      CUserMessageAmmoDenied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageAmmoDenied, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageAmmoDenied));
  CUserMessageCrosshairAngle_descriptor_ = file->message_type(31);
  static const int CUserMessageCrosshairAngle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, angcrosshair_),
  };
  CUserMessageCrosshairAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCrosshairAngle_descriptor_,
      CUserMessageCrosshairAngle::default_instance_,
      CUserMessageCrosshairAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCrosshairAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCrosshairAngle));
  CUserMessageShowMenu_descriptor_ = file->message_type(32);
  static const int CUserMessageShowMenu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, validslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, displaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, needmore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, menustring_),
  };
  CUserMessageShowMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageShowMenu_descriptor_,
      CUserMessageShowMenu::default_instance_,
      CUserMessageShowMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageShowMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageShowMenu));
  CUserMessageCreditsMsg_descriptor_ = file->message_type(33);
  static const int CUserMessageCreditsMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, rolltype_),
  };
  CUserMessageCreditsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCreditsMsg_descriptor_,
      CUserMessageCreditsMsg::default_instance_,
      CUserMessageCreditsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCreditsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCreditsMsg));
  CEntityMessagePlayJingle_descriptor_ = file->message_type(34);
  static const int CEntityMessagePlayJingle_offsets_[1] = {
  };
  CEntityMessagePlayJingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessagePlayJingle_descriptor_,
      CEntityMessagePlayJingle::default_instance_,
      CEntityMessagePlayJingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePlayJingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePlayJingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessagePlayJingle));
  CEntityMessageScreenOverlay_descriptor_ = file->message_type(35);
  static const int CEntityMessageScreenOverlay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, start_effect_),
  };
  CEntityMessageScreenOverlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessageScreenOverlay_descriptor_,
      CEntityMessageScreenOverlay::default_instance_,
      CEntityMessageScreenOverlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageScreenOverlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessageScreenOverlay));
  CEntityMessageRemoveAllDecals_descriptor_ = file->message_type(36);
  static const int CEntityMessageRemoveAllDecals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, remove_decals_),
  };
  CEntityMessageRemoveAllDecals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessageRemoveAllDecals_descriptor_,
      CEntityMessageRemoveAllDecals::default_instance_,
      CEntityMessageRemoveAllDecals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageRemoveAllDecals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessageRemoveAllDecals));
  CEntityMessagePropagateForce_descriptor_ = file->message_type(37);
  static const int CEntityMessagePropagateForce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, impulse_),
  };
  CEntityMessagePropagateForce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessagePropagateForce_descriptor_,
      CEntityMessagePropagateForce::default_instance_,
      CEntityMessagePropagateForce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessagePropagateForce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessagePropagateForce));
  CEntityMessageDoSpark_descriptor_ = file->message_type(38);
  static const int CEntityMessageDoSpark_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, entityindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, beams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, thick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, duration_),
  };
  CEntityMessageDoSpark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessageDoSpark_descriptor_,
      CEntityMessageDoSpark::default_instance_,
      CEntityMessageDoSpark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageDoSpark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessageDoSpark));
  CEntityMessageFixAngle_descriptor_ = file->message_type(39);
  static const int CEntityMessageFixAngle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, relative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, angle_),
  };
  CEntityMessageFixAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CEntityMessageFixAngle_descriptor_,
      CEntityMessageFixAngle::default_instance_,
      CEntityMessageFixAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEntityMessageFixAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CEntityMessageFixAngle));
  CUserMessageCameraTransition_descriptor_ = file->message_type(40);
  static const int CUserMessageCameraTransition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, camera_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, params_data_driven_),
  };
  CUserMessageCameraTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCameraTransition_descriptor_,
      CUserMessageCameraTransition::default_instance_,
      CUserMessageCameraTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCameraTransition));
  CUserMessageCameraTransition_Transition_DataDriven_descriptor_ = CUserMessageCameraTransition_descriptor_->nested_type(0);
  static const int CUserMessageCameraTransition_Transition_DataDriven_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, attach_ent_index_),
  };
  CUserMessageCameraTransition_Transition_DataDriven_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMessageCameraTransition_Transition_DataDriven_descriptor_,
      CUserMessageCameraTransition_Transition_DataDriven::default_instance_,
      CUserMessageCameraTransition_Transition_DataDriven_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMessageCameraTransition_Transition_DataDriven, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMessageCameraTransition_Transition_DataDriven));
  CUserMsg_ParticleManager_descriptor_ = file->message_type(41);
  static const int CUserMsg_ParticleManager_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, release_particle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, create_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, destroy_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, destroy_particle_involving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_fwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_fallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_ent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_should_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, update_particle_set_frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, change_control_point_attachment_),
  };
  CUserMsg_ParticleManager_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_descriptor_,
      CUserMsg_ParticleManager::default_instance_,
      CUserMsg_ParticleManager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager));
  CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(0);
  static const int CUserMsg_ParticleManager_ReleaseParticleIndex_offsets_[1] = {
  };
  CUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_,
      CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_,
      CUserMsg_ParticleManager_ReleaseParticleIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ReleaseParticleIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_ReleaseParticleIndex));
  CUserMsg_ParticleManager_CreateParticle_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(1);
  static const int CUserMsg_ParticleManager_CreateParticle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, particle_name_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, entity_handle_),
  };
  CUserMsg_ParticleManager_CreateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_CreateParticle_descriptor_,
      CUserMsg_ParticleManager_CreateParticle::default_instance_,
      CUserMsg_ParticleManager_CreateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_CreateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_CreateParticle));
  CUserMsg_ParticleManager_DestroyParticle_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(2);
  static const int CUserMsg_ParticleManager_DestroyParticle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  };
  CUserMsg_ParticleManager_DestroyParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_DestroyParticle_descriptor_,
      CUserMsg_ParticleManager_DestroyParticle::default_instance_,
      CUserMsg_ParticleManager_DestroyParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_DestroyParticle));
  CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(3);
  static const int CUserMsg_ParticleManager_DestroyParticleInvolving_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  };
  CUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_,
      CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_,
      CUserMsg_ParticleManager_DestroyParticleInvolving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_DestroyParticleInvolving, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_DestroyParticleInvolving));
  CUserMsg_ParticleManager_UpdateParticle_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(4);
  static const int CUserMsg_ParticleManager_UpdateParticle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, position_),
  };
  CUserMsg_ParticleManager_UpdateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticle_descriptor_,
      CUserMsg_ParticleManager_UpdateParticle::default_instance_,
      CUserMsg_ParticleManager_UpdateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticle));
  CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(5);
  static const int CUserMsg_ParticleManager_UpdateParticleFwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  };
  CUserMsg_ParticleManager_UpdateParticleFwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleFwd::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleFwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleFwd));
  CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(6);
  static const int CUserMsg_ParticleManager_UpdateParticleOrient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, up_),
  };
  CUserMsg_ParticleManager_UpdateParticleOrient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleOrient::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleOrient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOrient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleOrient));
  CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(7);
  static const int CUserMsg_ParticleManager_UpdateParticleFallback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, position_),
  };
  CUserMsg_ParticleManager_UpdateParticleFallback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleFallback::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleFallback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleFallback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleFallback));
  CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(8);
  static const int CUserMsg_ParticleManager_UpdateParticleOffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  };
  CUserMsg_ParticleManager_UpdateParticleOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleOffset::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleOffset));
  CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(9);
  static const int CUserMsg_ParticleManager_UpdateParticleEnt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  };
  CUserMsg_ParticleManager_UpdateParticleEnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleEnt::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleEnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleEnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleEnt));
  CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(10);
  static const int CUserMsg_ParticleManager_UpdateParticleSetFrozen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  };
  CUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleSetFrozen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleSetFrozen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleSetFrozen));
  CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(11);
  static const int CUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  };
  CUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_,
      CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_,
      CUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_UpdateParticleShouldDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_UpdateParticleShouldDraw));
  CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_ = CUserMsg_ParticleManager_descriptor_->nested_type(12);
  static const int CUserMsg_ParticleManager_ChangeControlPointAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_),
  };
  CUserMsg_ParticleManager_ChangeControlPointAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_,
      CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance_,
      CUserMsg_ParticleManager_ChangeControlPointAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ParticleManager_ChangeControlPointAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ParticleManager_ChangeControlPointAttachment));
  CUserMsg_HudError_descriptor_ = file->message_type(42);
  static const int CUserMsg_HudError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, order_id_),
  };
  CUserMsg_HudError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_HudError_descriptor_,
      CUserMsg_HudError::default_instance_,
      CUserMsg_HudError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_HudError));
  CUserMsg_CustomGameEvent_descriptor_ = file->message_type(43);
  static const int CUserMsg_CustomGameEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, data_),
  };
  CUserMsg_CustomGameEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_CustomGameEvent_descriptor_,
      CUserMsg_CustomGameEvent::default_instance_,
      CUserMsg_CustomGameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CustomGameEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_CustomGameEvent));
  EBaseUserMessages_descriptor_ = file->enum_type(0);
  EBaseEntityMessages_descriptor_ = file->enum_type(1);
  eRollType_descriptor_ = file->enum_type(2);
  PARTICLE_MESSAGE_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_usermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageAchievementEvent_descriptor_, &CUserMessageAchievementEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCloseCaption_descriptor_, &CUserMessageCloseCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCloseCaptionDirect_descriptor_, &CUserMessageCloseCaptionDirect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCloseCaptionPlaceholder_descriptor_, &CUserMessageCloseCaptionPlaceholder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCurrentTimescale_descriptor_, &CUserMessageCurrentTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageDesiredTimescale_descriptor_, &CUserMessageDesiredTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageFade_descriptor_, &CUserMessageFade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageShake_descriptor_, &CUserMessageShake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageShakeDir_descriptor_, &CUserMessageShakeDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageScreenTilt_descriptor_, &CUserMessageScreenTilt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageSayText_descriptor_, &CUserMessageSayText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageSayText2_descriptor_, &CUserMessageSayText2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageHudMsg_descriptor_, &CUserMessageHudMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageHudText_descriptor_, &CUserMessageHudText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageTextMsg_descriptor_, &CUserMessageTextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageGameTitle_descriptor_, &CUserMessageGameTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageResetHUD_descriptor_, &CUserMessageResetHUD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageSendAudio_descriptor_, &CUserMessageSendAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageAudioParameter_descriptor_, &CUserMessageAudioParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageVoiceMask_descriptor_, &CUserMessageVoiceMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageRequestState_descriptor_, &CUserMessageRequestState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageHintText_descriptor_, &CUserMessageHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageKeyHintText_descriptor_, &CUserMessageKeyHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageVoiceSubtitle_descriptor_, &CUserMessageVoiceSubtitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageVGUIMenu_descriptor_, &CUserMessageVGUIMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageVGUIMenu_Keys_descriptor_, &CUserMessageVGUIMenu_Keys::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageRumble_descriptor_, &CUserMessageRumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageTrain_descriptor_, &CUserMessageTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageSayTextChannel_descriptor_, &CUserMessageSayTextChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageColoredText_descriptor_, &CUserMessageColoredText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageItemPickup_descriptor_, &CUserMessageItemPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageAmmoDenied_descriptor_, &CUserMessageAmmoDenied::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCrosshairAngle_descriptor_, &CUserMessageCrosshairAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageShowMenu_descriptor_, &CUserMessageShowMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCreditsMsg_descriptor_, &CUserMessageCreditsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessagePlayJingle_descriptor_, &CEntityMessagePlayJingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessageScreenOverlay_descriptor_, &CEntityMessageScreenOverlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessageRemoveAllDecals_descriptor_, &CEntityMessageRemoveAllDecals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessagePropagateForce_descriptor_, &CEntityMessagePropagateForce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessageDoSpark_descriptor_, &CEntityMessageDoSpark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CEntityMessageFixAngle_descriptor_, &CEntityMessageFixAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCameraTransition_descriptor_, &CUserMessageCameraTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMessageCameraTransition_Transition_DataDriven_descriptor_, &CUserMessageCameraTransition_Transition_DataDriven::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_descriptor_, &CUserMsg_ParticleManager::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_, &CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_CreateParticle_descriptor_, &CUserMsg_ParticleManager_CreateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_DestroyParticle_descriptor_, &CUserMsg_ParticleManager_DestroyParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_, &CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticle_descriptor_, &CUserMsg_ParticleManager_UpdateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_, &CUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_, &CUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_, &CUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_, &CUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_, &CUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_, &CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_, &CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_, &CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_HudError_descriptor_, &CUserMsg_HudError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_CustomGameEvent_descriptor_, &CUserMsg_CustomGameEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_usermessages_2eproto() {
  delete CUserMessageAchievementEvent::default_instance_;
  delete CUserMessageAchievementEvent_reflection_;
  delete CUserMessageCloseCaption::default_instance_;
  delete CUserMessageCloseCaption_reflection_;
  delete CUserMessageCloseCaptionDirect::default_instance_;
  delete CUserMessageCloseCaptionDirect_reflection_;
  delete CUserMessageCloseCaptionPlaceholder::default_instance_;
  delete CUserMessageCloseCaptionPlaceholder_reflection_;
  delete CUserMessageCurrentTimescale::default_instance_;
  delete CUserMessageCurrentTimescale_reflection_;
  delete CUserMessageDesiredTimescale::default_instance_;
  delete CUserMessageDesiredTimescale_reflection_;
  delete CUserMessageFade::default_instance_;
  delete CUserMessageFade_reflection_;
  delete CUserMessageShake::default_instance_;
  delete CUserMessageShake_reflection_;
  delete CUserMessageShakeDir::default_instance_;
  delete CUserMessageShakeDir_reflection_;
  delete CUserMessageScreenTilt::default_instance_;
  delete CUserMessageScreenTilt_reflection_;
  delete CUserMessageSayText::default_instance_;
  delete CUserMessageSayText_reflection_;
  delete CUserMessageSayText2::default_instance_;
  delete CUserMessageSayText2_reflection_;
  delete CUserMessageHudMsg::default_instance_;
  delete CUserMessageHudMsg_reflection_;
  delete CUserMessageHudText::default_instance_;
  delete CUserMessageHudText_reflection_;
  delete CUserMessageTextMsg::default_instance_;
  delete CUserMessageTextMsg_reflection_;
  delete CUserMessageGameTitle::default_instance_;
  delete CUserMessageGameTitle_reflection_;
  delete CUserMessageResetHUD::default_instance_;
  delete CUserMessageResetHUD_reflection_;
  delete CUserMessageSendAudio::default_instance_;
  delete CUserMessageSendAudio_reflection_;
  delete CUserMessageAudioParameter::default_instance_;
  delete CUserMessageAudioParameter_reflection_;
  delete CUserMessageVoiceMask::default_instance_;
  delete CUserMessageVoiceMask_reflection_;
  delete CUserMessageRequestState::default_instance_;
  delete CUserMessageRequestState_reflection_;
  delete CUserMessageHintText::default_instance_;
  delete CUserMessageHintText_reflection_;
  delete CUserMessageKeyHintText::default_instance_;
  delete CUserMessageKeyHintText_reflection_;
  delete CUserMessageVoiceSubtitle::default_instance_;
  delete CUserMessageVoiceSubtitle_reflection_;
  delete CUserMessageVGUIMenu::default_instance_;
  delete CUserMessageVGUIMenu_reflection_;
  delete CUserMessageVGUIMenu_Keys::default_instance_;
  delete CUserMessageVGUIMenu_Keys_reflection_;
  delete CUserMessageRumble::default_instance_;
  delete CUserMessageRumble_reflection_;
  delete CUserMessageTrain::default_instance_;
  delete CUserMessageTrain_reflection_;
  delete CUserMessageSayTextChannel::default_instance_;
  delete CUserMessageSayTextChannel_reflection_;
  delete CUserMessageColoredText::default_instance_;
  delete CUserMessageColoredText_reflection_;
  delete CUserMessageItemPickup::default_instance_;
  delete CUserMessageItemPickup_reflection_;
  delete CUserMessageAmmoDenied::default_instance_;
  delete CUserMessageAmmoDenied_reflection_;
  delete CUserMessageCrosshairAngle::default_instance_;
  delete CUserMessageCrosshairAngle_reflection_;
  delete CUserMessageShowMenu::default_instance_;
  delete CUserMessageShowMenu_reflection_;
  delete CUserMessageCreditsMsg::default_instance_;
  delete CUserMessageCreditsMsg_reflection_;
  delete CEntityMessagePlayJingle::default_instance_;
  delete CEntityMessagePlayJingle_reflection_;
  delete CEntityMessageScreenOverlay::default_instance_;
  delete CEntityMessageScreenOverlay_reflection_;
  delete CEntityMessageRemoveAllDecals::default_instance_;
  delete CEntityMessageRemoveAllDecals_reflection_;
  delete CEntityMessagePropagateForce::default_instance_;
  delete CEntityMessagePropagateForce_reflection_;
  delete CEntityMessageDoSpark::default_instance_;
  delete CEntityMessageDoSpark_reflection_;
  delete CEntityMessageFixAngle::default_instance_;
  delete CEntityMessageFixAngle_reflection_;
  delete CUserMessageCameraTransition::default_instance_;
  delete CUserMessageCameraTransition_reflection_;
  delete CUserMessageCameraTransition_Transition_DataDriven::default_instance_;
  delete CUserMessageCameraTransition_Transition_DataDriven_reflection_;
  delete CUserMsg_ParticleManager::default_instance_;
  delete CUserMsg_ParticleManager_reflection_;
  delete CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_;
  delete CUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  delete CUserMsg_ParticleManager_CreateParticle::default_instance_;
  delete CUserMsg_ParticleManager_CreateParticle_reflection_;
  delete CUserMsg_ParticleManager_DestroyParticle::default_instance_;
  delete CUserMsg_ParticleManager_DestroyParticle_reflection_;
  delete CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_;
  delete CUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticle::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticle_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleFwd::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleOrient::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleFallback::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleOffset::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleEnt::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_;
  delete CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_;
  delete CUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  delete CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance_;
  delete CUserMsg_ParticleManager_ChangeControlPointAttachment_reflection_;
  delete CUserMsg_HudError::default_instance_;
  delete CUserMsg_HudError_reflection_;
  delete CUserMsg_CustomGameEvent::default_instance_;
  delete CUserMsg_CustomGameEvent_reflection_;
}

void protobuf_AddDesc_usermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_networkbasetypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022usermessages.proto\032\026networkbasetypes.p"
    "roto\"3\n\034CUserMessageAchievementEvent\022\023\n\013"
    "achievement\030\001 \001(\r\"b\n\030CUserMessageCloseCa"
    "ption\022\014\n\004hash\030\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n"
    "\013from_player\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"h\n"
    "\036CUserMessageCloseCaptionDirect\022\014\n\004hash\030"
    "\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n\013from_player\030\003"
    " \001(\010\022\021\n\tent_index\030\004 \001(\005\"o\n#CUserMessageC"
    "loseCaptionPlaceholder\022\016\n\006string\030\001 \001(\t\022\020"
    "\n\010duration\030\002 \001(\002\022\023\n\013from_player\030\003 \001(\010\022\021\n"
    "\tent_index\030\004 \001(\005\"/\n\034CUserMessageCurrentT"
    "imescale\022\017\n\007current\030\001 \001(\002\"y\n\034CUserMessag"
    "eDesiredTimescale\022\017\n\007desired\030\001 \001(\002\022\024\n\014ac"
    "celeration\030\002 \001(\002\022\024\n\014minblendrate\030\003 \001(\002\022\034"
    "\n\024blenddeltamultiplier\030\004 \001(\002\"U\n\020CUserMes"
    "sageFade\022\020\n\010duration\030\001 \001(\r\022\021\n\thold_time\030"
    "\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005color\030\004 \001(\007\"\\\n\021C"
    "UserMessageShake\022\017\n\007command\030\001 \001(\r\022\021\n\tamp"
    "litude\030\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010durat"
    "ion\030\004 \001(\002\"Y\n\024CUserMessageShakeDir\022!\n\005sha"
    "ke\030\001 \001(\0132\022.CUserMessageShake\022\036\n\tdirectio"
    "n\030\002 \001(\0132\013.CMsgVector\"z\n\026CUserMessageScre"
    "enTilt\022\017\n\007command\030\001 \001(\r\022\023\n\013ease_in_out\030\002"
    " \001(\010\022\032\n\005angle\030\003 \001(\0132\013.CMsgVector\022\020\n\010dura"
    "tion\030\004 \001(\002\022\014\n\004time\030\005 \001(\002\"F\n\023CUserMessage"
    "SayText\022\023\n\013playerindex\030\001 \001(\r\022\014\n\004text\030\002 \001"
    "(\t\022\014\n\004chat\030\003 \001(\010\"\216\001\n\024CUserMessageSayText"
    "2\022\023\n\013entityindex\030\001 \001(\r\022\014\n\004chat\030\002 \001(\010\022\023\n\013"
    "messagename\030\003 \001(\t\022\016\n\006param1\030\004 \001(\t\022\016\n\006par"
    "am2\030\005 \001(\t\022\016\n\006param3\030\006 \001(\t\022\016\n\006param4\030\007 \001("
    "\t\"\315\001\n\022CUserMessageHudMsg\022\017\n\007channel\030\001 \001("
    "\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\016\n\006color1\030\004 \001(\007\022"
    "\016\n\006color2\030\005 \001(\007\022\016\n\006effect\030\006 \001(\r\022\024\n\014fade_"
    "in_time\030\007 \001(\002\022\025\n\rfade_out_time\030\010 \001(\002\022\021\n\t"
    "hold_time\030\t \001(\002\022\017\n\007fx_time\030\n \001(\002\022\017\n\007mess"
    "age\030\013 \001(\t\"&\n\023CUserMessageHudText\022\017\n\007mess"
    "age\030\001 \001(\t\"2\n\023CUserMessageTextMsg\022\014\n\004dest"
    "\030\001 \001(\r\022\r\n\005param\030\002 \003(\t\"\027\n\025CUserMessageGam"
    "eTitle\"\026\n\024CUserMessageResetHUD\"8\n\025CUserM"
    "essageSendAudio\022\021\n\tsoundname\030\001 \001(\t\022\014\n\004st"
    "op\030\002 \001(\010\"[\n\032CUserMessageAudioParameter\022\026"
    "\n\016parameter_type\030\001 \001(\r\022\026\n\016name_hash_code"
    "\030\002 \001(\r\022\r\n\005value\030\003 \001(\002\"W\n\025CUserMessageVoi"
    "ceMask\022\027\n\017gamerules_masks\030\001 \003(\r\022\021\n\tban_m"
    "asks\030\002 \003(\r\022\022\n\nmod_enable\030\003 \001(\010\"\032\n\030CUserM"
    "essageRequestState\"\'\n\024CUserMessageHintTe"
    "xt\022\017\n\007message\030\001 \001(\t\"+\n\027CUserMessageKeyHi"
    "ntText\022\020\n\010messages\030\001 \003(\t\"G\n\031CUserMessage"
    "VoiceSubtitle\022\016\n\006player\030\001 \001(\005\022\014\n\004menu\030\002 "
    "\001(\005\022\014\n\004item\030\003 \001(\005\"\201\001\n\024CUserMessageVGUIMe"
    "nu\022\014\n\004name\030\001 \001(\t\022\014\n\004show\030\002 \001(\010\022(\n\004keys\030\003"
    " \003(\0132\032.CUserMessageVGUIMenu.Keys\032#\n\004Keys"
    "\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CUserMe"
    "ssageRumble\022\r\n\005index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005"
    "\022\r\n\005flags\030\003 \001(\005\"%\n\021CUserMessageTrain\022\020\n\010"
    "position\030\001 \001(\r\"K\n\032CUserMessageSayTextCha"
    "nnel\022\016\n\006player\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\022\014\n"
    "\004text\030\003 \001(\t\"\220\001\n\027CUserMessageColoredText\022"
    "\r\n\005color\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\022\r\n\005reset\030\003 "
    "\001(\010\022\031\n\021context_player_id\030\004 \001(\005\022\025\n\rcontex"
    "t_value\030\005 \001(\005\022\027\n\017context_team_id\030\006 \001(\005\"*"
    "\n\026CUserMessageItemPickup\022\020\n\010itemname\030\001 \001"
    "(\t\")\n\026CUserMessageAmmoDenied\022\017\n\007ammo_id\030"
    "\001 \001(\r\"\?\n\032CUserMessageCrosshairAngle\022!\n\014a"
    "ngcrosshair\030\001 \001(\0132\013.CMsgQAngle\"e\n\024CUserM"
    "essageShowMenu\022\022\n\nvalidslots\030\001 \001(\r\022\023\n\013di"
    "splaytime\030\002 \001(\r\022\020\n\010needmore\030\003 \001(\010\022\022\n\nmen"
    "ustring\030\004 \001(\t\"A\n\026CUserMessageCreditsMsg\022"
    "\'\n\010rolltype\030\001 \001(\0162\n.eRollType:\tROLL_NONE"
    "\"\032\n\030CEntityMessagePlayJingle\"3\n\033CEntityM"
    "essageScreenOverlay\022\024\n\014start_effect\030\001 \001("
    "\010\"6\n\035CEntityMessageRemoveAllDecals\022\025\n\rre"
    "move_decals\030\001 \001(\010\"<\n\034CEntityMessagePropa"
    "gateForce\022\034\n\007impulse\030\001 \001(\0132\013.CMsgVector\""
    "\230\001\n\025CEntityMessageDoSpark\022\033\n\006origin\030\001 \001("
    "\0132\013.CMsgVector\022\023\n\013entityindex\030\002 \001(\r\022\016\n\006r"
    "adius\030\003 \001(\002\022\r\n\005color\030\004 \001(\007\022\r\n\005beams\030\005 \001("
    "\r\022\r\n\005thick\030\006 \001(\002\022\020\n\010duration\030\007 \001(\002\"F\n\026CE"
    "ntityMessageFixAngle\022\020\n\010relative\030\001 \001(\010\022\032"
    "\n\005angle\030\002 \001(\0132\013.CMsgQAngle\"\333\001\n\034CUserMess"
    "ageCameraTransition\022\023\n\013camera_type\030\001 \001(\r"
    "\022\020\n\010duration\030\002 \001(\002\022O\n\022params_data_driven"
    "\030\003 \001(\01323.CUserMessageCameraTransition.Tr"
    "ansition_DataDriven\032C\n\025Transition_DataDr"
    "iven\022\020\n\010filename\030\001 \001(\t\022\030\n\020attach_ent_ind"
    "ex\030\002 \001(\005\"\234\021\n\030CUserMsg_ParticleManager\022C\n"
    "\004type\030\001 \002(\0162\021.PARTICLE_MESSAGE:\"GAME_PAR"
    "TICLE_MANAGER_EVENT_CREATE\022\r\n\005index\030\002 \002("
    "\r\022N\n\026release_particle_index\030\003 \001(\0132..CUse"
    "rMsg_ParticleManager.ReleaseParticleInde"
    "x\022A\n\017create_particle\030\004 \001(\0132(.CUserMsg_Pa"
    "rticleManager.CreateParticle\022C\n\020destroy_"
    "particle\030\005 \001(\0132).CUserMsg_ParticleManage"
    "r.DestroyParticle\022V\n\032destroy_particle_in"
    "volving\030\006 \001(\01322.CUserMsg_ParticleManager"
    ".DestroyParticleInvolving\022A\n\017update_part"
    "icle\030\007 \001(\0132(.CUserMsg_ParticleManager.Up"
    "dateParticle\022H\n\023update_particle_fwd\030\010 \001("
    "\0132+.CUserMsg_ParticleManager.UpdateParti"
    "cleFwd\022N\n\026update_particle_orient\030\t \001(\0132."
    ".CUserMsg_ParticleManager.UpdateParticle"
    "Orient\022R\n\030update_particle_fallback\030\n \001(\013"
    "20.CUserMsg_ParticleManager.UpdatePartic"
    "leFallback\022N\n\026update_particle_offset\030\013 \001"
    "(\0132..CUserMsg_ParticleManager.UpdatePart"
    "icleOffset\022H\n\023update_particle_ent\030\014 \001(\0132"
    "+.CUserMsg_ParticleManager.UpdateParticl"
    "eEnt\022W\n\033update_particle_should_draw\030\016 \001("
    "\01322.CUserMsg_ParticleManager.UpdateParti"
    "cleShouldDraw\022U\n\032update_particle_set_fro"
    "zen\030\017 \001(\01321.CUserMsg_ParticleManager.Upd"
    "ateParticleSetFrozen\022_\n\037change_control_p"
    "oint_attachment\030\020 \001(\01326.CUserMsg_Particl"
    "eManager.ChangeControlPointAttachment\032\026\n"
    "\024ReleaseParticleIndex\032Y\n\016CreateParticle\022"
    "\033\n\023particle_name_index\030\001 \001(\006\022\023\n\013attach_t"
    "ype\030\002 \001(\005\022\025\n\rentity_handle\030\003 \001(\005\032.\n\017Dest"
    "royParticle\022\033\n\023destroy_immediately\030\001 \001(\010"
    "\032N\n\030DestroyParticleInvolving\022\033\n\023destroy_"
    "immediately\030\001 \001(\010\022\025\n\rentity_handle\030\003 \001(\005"
    "\032F\n\016UpdateParticle\022\025\n\rcontrol_point\030\001 \001("
    "\005\022\035\n\010position\030\002 \001(\0132\013.CMsgVector\032H\n\021Upda"
    "teParticleFwd\022\025\n\rcontrol_point\030\001 \001(\005\022\034\n\007"
    "forward\030\002 \001(\0132\013.CMsgVector\032\200\001\n\024UpdatePar"
    "ticleOrient\022\025\n\rcontrol_point\030\001 \001(\005\022\034\n\007fo"
    "rward\030\002 \001(\0132\013.CMsgVector\022\032\n\005right\030\003 \001(\0132"
    "\013.CMsgVector\022\027\n\002up\030\004 \001(\0132\013.CMsgVector\032N\n"
    "\026UpdateParticleFallback\022\025\n\rcontrol_point"
    "\030\001 \001(\005\022\035\n\010position\030\002 \001(\0132\013.CMsgVector\032Q\n"
    "\024UpdateParticleOffset\022\025\n\rcontrol_point\030\001"
    " \001(\005\022\"\n\rorigin_offset\030\002 \001(\0132\013.CMsgVector"
    "\032\255\001\n\021UpdateParticleEnt\022\025\n\rcontrol_point\030"
    "\001 \001(\005\022\025\n\rentity_handle\030\002 \001(\005\022\023\n\013attach_t"
    "ype\030\003 \001(\005\022\022\n\nattachment\030\004 \001(\005\022&\n\021fallbac"
    "k_position\030\005 \001(\0132\013.CMsgVector\022\031\n\021include"
    "_wearables\030\006 \001(\010\032-\n\027UpdateParticleSetFro"
    "zen\022\022\n\nset_frozen\030\001 \001(\010\032/\n\030UpdateParticl"
    "eShouldDraw\022\023\n\013should_draw\030\001 \001(\010\032e\n\034Chan"
    "geControlPointAttachment\022\026\n\016attachment_o"
    "ld\030\001 \001(\005\022\026\n\016attachment_new\030\002 \001(\005\022\025\n\renti"
    "ty_handle\030\003 \001(\005\"%\n\021CUserMsg_HudError\022\020\n\010"
    "order_id\030\001 \001(\005\"<\n\030CUserMsg_CustomGameEve"
    "nt\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014*\237\006\n"
    "\021EBaseUserMessages\022\027\n\023UM_AchievementEven"
    "t\020e\022\023\n\017UM_CloseCaption\020f\022\031\n\025UM_CloseCapt"
    "ionDirect\020g\022\027\n\023UM_CurrentTimescale\020h\022\027\n\023"
    "UM_DesiredTimescale\020i\022\013\n\007UM_Fade\020j\022\020\n\014UM"
    "_GameTitle\020k\022\017\n\013UM_HintText\020m\022\r\n\tUM_HudM"
    "sg\020n\022\016\n\nUM_HudText\020o\022\022\n\016UM_KeyHintText\020p"
    "\022\022\n\016UM_ColoredText\020q\022\023\n\017UM_RequestState\020"
    "r\022\017\n\013UM_ResetHUD\020s\022\r\n\tUM_Rumble\020t\022\016\n\nUM_"
    "SayText\020u\022\017\n\013UM_SayText2\020v\022\025\n\021UM_SayText"
    "Channel\020w\022\014\n\010UM_Shake\020x\022\017\n\013UM_ShakeDir\020y"
    "\022\016\n\nUM_TextMsg\020|\022\021\n\rUM_ScreenTilt\020}\022\014\n\010U"
    "M_Train\020~\022\017\n\013UM_VGUIMenu\020\177\022\021\n\014UM_VoiceMa"
    "sk\020\200\001\022\025\n\020UM_VoiceSubtitle\020\201\001\022\021\n\014UM_SendA"
    "udio\020\202\001\022\022\n\rUM_ItemPickup\020\203\001\022\022\n\rUM_AmmoDe"
    "nied\020\204\001\022\026\n\021UM_CrosshairAngle\020\205\001\022\020\n\013UM_Sh"
    "owMenu\020\206\001\022\022\n\rUM_CreditsMsg\020\207\001\022\037\n\032UM_Clos"
    "eCaptionPlaceholder\020\216\001\022\030\n\023UM_CameraTrans"
    "ition\020\217\001\022\026\n\021UM_AudioParameter\020\220\001\022\027\n\022UM_P"
    "articleManager\020\221\001\022\020\n\013UM_HudError\020\222\001\022\027\n\022U"
    "M_CustomGameEvent\020\224\001\022\020\n\013UM_MAX_BASE\020\310\001*\224"
    "\001\n\023EBaseEntityMessages\022\022\n\rEM_PlayJingle\020"
    "\210\001\022\025\n\020EM_ScreenOverlay\020\211\001\022\027\n\022EM_RemoveAl"
    "lDecals\020\212\001\022\026\n\021EM_PropagateForce\020\213\001\022\017\n\nEM"
    "_DoSpark\020\214\001\022\020\n\013EM_FixAngle\020\215\001*o\n\teRollTy"
    "pe\022\026\n\tROLL_NONE\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nROLL_STATS"
    "\020\000\022\020\n\014ROLL_CREDITS\020\001\022\027\n\023ROLL_LATE_JOIN_L"
    "OGO\020\002\022\017\n\013ROLL_OUTTRO\020\003*\226\005\n\020PARTICLE_MESS"
    "AGE\022&\n\"GAME_PARTICLE_MANAGER_EVENT_CREAT"
    "E\020\000\022&\n\"GAME_PARTICLE_MANAGER_EVENT_UPDAT"
    "E\020\001\022.\n*GAME_PARTICLE_MANAGER_EVENT_UPDAT"
    "E_FORWARD\020\002\0222\n.GAME_PARTICLE_MANAGER_EVE"
    "NT_UPDATE_ORIENTATION\020\003\022/\n+GAME_PARTICLE"
    "_MANAGER_EVENT_UPDATE_FALLBACK\020\004\022*\n&GAME"
    "_PARTICLE_MANAGER_EVENT_UPDATE_ENT\020\005\022-\n)"
    "GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSE"
    "T\020\006\022\'\n#GAME_PARTICLE_MANAGER_EVENT_DESTR"
    "OY\020\007\0221\n-GAME_PARTICLE_MANAGER_EVENT_DEST"
    "ROY_INVOLVING\020\010\022\'\n#GAME_PARTICLE_MANAGER"
    "_EVENT_RELEASE\020\t\022\'\n#GAME_PARTICLE_MANAGE"
    "R_EVENT_LATENCY\020\n\022+\n\'GAME_PARTICLE_MANAG"
    "ER_EVENT_SHOULD_DRAW\020\013\022&\n\"GAME_PARTICLE_"
    "MANAGER_EVENT_FROZEN\020\014\022\?\n;GAME_PARTICLE_"
    "MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTAC"
    "HMENT\020\rB\005H\001\200\001\000", 7454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usermessages.proto", &protobuf_RegisterTypes);
  CUserMessageAchievementEvent::default_instance_ = new CUserMessageAchievementEvent();
  CUserMessageCloseCaption::default_instance_ = new CUserMessageCloseCaption();
  CUserMessageCloseCaptionDirect::default_instance_ = new CUserMessageCloseCaptionDirect();
  CUserMessageCloseCaptionPlaceholder::default_instance_ = new CUserMessageCloseCaptionPlaceholder();
  CUserMessageCurrentTimescale::default_instance_ = new CUserMessageCurrentTimescale();
  CUserMessageDesiredTimescale::default_instance_ = new CUserMessageDesiredTimescale();
  CUserMessageFade::default_instance_ = new CUserMessageFade();
  CUserMessageShake::default_instance_ = new CUserMessageShake();
  CUserMessageShakeDir::default_instance_ = new CUserMessageShakeDir();
  CUserMessageScreenTilt::default_instance_ = new CUserMessageScreenTilt();
  CUserMessageSayText::default_instance_ = new CUserMessageSayText();
  CUserMessageSayText2::default_instance_ = new CUserMessageSayText2();
  CUserMessageHudMsg::default_instance_ = new CUserMessageHudMsg();
  CUserMessageHudText::default_instance_ = new CUserMessageHudText();
  CUserMessageTextMsg::default_instance_ = new CUserMessageTextMsg();
  CUserMessageGameTitle::default_instance_ = new CUserMessageGameTitle();
  CUserMessageResetHUD::default_instance_ = new CUserMessageResetHUD();
  CUserMessageSendAudio::default_instance_ = new CUserMessageSendAudio();
  CUserMessageAudioParameter::default_instance_ = new CUserMessageAudioParameter();
  CUserMessageVoiceMask::default_instance_ = new CUserMessageVoiceMask();
  CUserMessageRequestState::default_instance_ = new CUserMessageRequestState();
  CUserMessageHintText::default_instance_ = new CUserMessageHintText();
  CUserMessageKeyHintText::default_instance_ = new CUserMessageKeyHintText();
  CUserMessageVoiceSubtitle::default_instance_ = new CUserMessageVoiceSubtitle();
  CUserMessageVGUIMenu::default_instance_ = new CUserMessageVGUIMenu();
  CUserMessageVGUIMenu_Keys::default_instance_ = new CUserMessageVGUIMenu_Keys();
  CUserMessageRumble::default_instance_ = new CUserMessageRumble();
  CUserMessageTrain::default_instance_ = new CUserMessageTrain();
  CUserMessageSayTextChannel::default_instance_ = new CUserMessageSayTextChannel();
  CUserMessageColoredText::default_instance_ = new CUserMessageColoredText();
  CUserMessageItemPickup::default_instance_ = new CUserMessageItemPickup();
  CUserMessageAmmoDenied::default_instance_ = new CUserMessageAmmoDenied();
  CUserMessageCrosshairAngle::default_instance_ = new CUserMessageCrosshairAngle();
  CUserMessageShowMenu::default_instance_ = new CUserMessageShowMenu();
  CUserMessageCreditsMsg::default_instance_ = new CUserMessageCreditsMsg();
  CEntityMessagePlayJingle::default_instance_ = new CEntityMessagePlayJingle();
  CEntityMessageScreenOverlay::default_instance_ = new CEntityMessageScreenOverlay();
  CEntityMessageRemoveAllDecals::default_instance_ = new CEntityMessageRemoveAllDecals();
  CEntityMessagePropagateForce::default_instance_ = new CEntityMessagePropagateForce();
  CEntityMessageDoSpark::default_instance_ = new CEntityMessageDoSpark();
  CEntityMessageFixAngle::default_instance_ = new CEntityMessageFixAngle();
  CUserMessageCameraTransition::default_instance_ = new CUserMessageCameraTransition();
  CUserMessageCameraTransition_Transition_DataDriven::default_instance_ = new CUserMessageCameraTransition_Transition_DataDriven();
  CUserMsg_ParticleManager::default_instance_ = new CUserMsg_ParticleManager();
  CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = new CUserMsg_ParticleManager_ReleaseParticleIndex();
  CUserMsg_ParticleManager_CreateParticle::default_instance_ = new CUserMsg_ParticleManager_CreateParticle();
  CUserMsg_ParticleManager_DestroyParticle::default_instance_ = new CUserMsg_ParticleManager_DestroyParticle();
  CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = new CUserMsg_ParticleManager_DestroyParticleInvolving();
  CUserMsg_ParticleManager_UpdateParticle::default_instance_ = new CUserMsg_ParticleManager_UpdateParticle();
  CUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleFwd();
  CUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleOrient();
  CUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleFallback();
  CUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleOffset();
  CUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleEnt();
  CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleSetFrozen();
  CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = new CUserMsg_ParticleManager_UpdateParticleShouldDraw();
  CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance_ = new CUserMsg_ParticleManager_ChangeControlPointAttachment();
  CUserMsg_HudError::default_instance_ = new CUserMsg_HudError();
  CUserMsg_CustomGameEvent::default_instance_ = new CUserMsg_CustomGameEvent();
  CUserMessageAchievementEvent::default_instance_->InitAsDefaultInstance();
  CUserMessageCloseCaption::default_instance_->InitAsDefaultInstance();
  CUserMessageCloseCaptionDirect::default_instance_->InitAsDefaultInstance();
  CUserMessageCloseCaptionPlaceholder::default_instance_->InitAsDefaultInstance();
  CUserMessageCurrentTimescale::default_instance_->InitAsDefaultInstance();
  CUserMessageDesiredTimescale::default_instance_->InitAsDefaultInstance();
  CUserMessageFade::default_instance_->InitAsDefaultInstance();
  CUserMessageShake::default_instance_->InitAsDefaultInstance();
  CUserMessageShakeDir::default_instance_->InitAsDefaultInstance();
  CUserMessageScreenTilt::default_instance_->InitAsDefaultInstance();
  CUserMessageSayText::default_instance_->InitAsDefaultInstance();
  CUserMessageSayText2::default_instance_->InitAsDefaultInstance();
  CUserMessageHudMsg::default_instance_->InitAsDefaultInstance();
  CUserMessageHudText::default_instance_->InitAsDefaultInstance();
  CUserMessageTextMsg::default_instance_->InitAsDefaultInstance();
  CUserMessageGameTitle::default_instance_->InitAsDefaultInstance();
  CUserMessageResetHUD::default_instance_->InitAsDefaultInstance();
  CUserMessageSendAudio::default_instance_->InitAsDefaultInstance();
  CUserMessageAudioParameter::default_instance_->InitAsDefaultInstance();
  CUserMessageVoiceMask::default_instance_->InitAsDefaultInstance();
  CUserMessageRequestState::default_instance_->InitAsDefaultInstance();
  CUserMessageHintText::default_instance_->InitAsDefaultInstance();
  CUserMessageKeyHintText::default_instance_->InitAsDefaultInstance();
  CUserMessageVoiceSubtitle::default_instance_->InitAsDefaultInstance();
  CUserMessageVGUIMenu::default_instance_->InitAsDefaultInstance();
  CUserMessageVGUIMenu_Keys::default_instance_->InitAsDefaultInstance();
  CUserMessageRumble::default_instance_->InitAsDefaultInstance();
  CUserMessageTrain::default_instance_->InitAsDefaultInstance();
  CUserMessageSayTextChannel::default_instance_->InitAsDefaultInstance();
  CUserMessageColoredText::default_instance_->InitAsDefaultInstance();
  CUserMessageItemPickup::default_instance_->InitAsDefaultInstance();
  CUserMessageAmmoDenied::default_instance_->InitAsDefaultInstance();
  CUserMessageCrosshairAngle::default_instance_->InitAsDefaultInstance();
  CUserMessageShowMenu::default_instance_->InitAsDefaultInstance();
  CUserMessageCreditsMsg::default_instance_->InitAsDefaultInstance();
  CEntityMessagePlayJingle::default_instance_->InitAsDefaultInstance();
  CEntityMessageScreenOverlay::default_instance_->InitAsDefaultInstance();
  CEntityMessageRemoveAllDecals::default_instance_->InitAsDefaultInstance();
  CEntityMessagePropagateForce::default_instance_->InitAsDefaultInstance();
  CEntityMessageDoSpark::default_instance_->InitAsDefaultInstance();
  CEntityMessageFixAngle::default_instance_->InitAsDefaultInstance();
  CUserMessageCameraTransition::default_instance_->InitAsDefaultInstance();
  CUserMessageCameraTransition_Transition_DataDriven::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_CreateParticle::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_DestroyParticle::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticle::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleFwd::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleOrient::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleFallback::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleOffset::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleEnt::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_->InitAsDefaultInstance();
  CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance_->InitAsDefaultInstance();
  CUserMsg_HudError::default_instance_->InitAsDefaultInstance();
  CUserMsg_CustomGameEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_usermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_usermessages_2eproto {
  StaticDescriptorInitializer_usermessages_2eproto() {
    protobuf_AddDesc_usermessages_2eproto();
  }
} static_descriptor_initializer_usermessages_2eproto_;
const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBaseUserMessages_descriptor_;
}
bool EBaseUserMessages_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 148:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBaseEntityMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBaseEntityMessages_descriptor_;
}
bool EBaseEntityMessages_IsValid(int value) {
  switch(value) {
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRollType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRollType_descriptor_;
}
bool eRollType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PARTICLE_MESSAGE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PARTICLE_MESSAGE_descriptor_;
}
bool PARTICLE_MESSAGE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageAchievementEvent::kAchievementFieldNumber;
#endif  // !_MSC_VER

CUserMessageAchievementEvent::CUserMessageAchievementEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageAchievementEvent)
}

void CUserMessageAchievementEvent::InitAsDefaultInstance() {
}

CUserMessageAchievementEvent::CUserMessageAchievementEvent(const CUserMessageAchievementEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageAchievementEvent)
}

void CUserMessageAchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageAchievementEvent::~CUserMessageAchievementEvent() {
  // @@protoc_insertion_point(destructor:CUserMessageAchievementEvent)
  SharedDtor();
}

void CUserMessageAchievementEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageAchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAchievementEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageAchievementEvent_descriptor_;
}

const CUserMessageAchievementEvent& CUserMessageAchievementEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageAchievementEvent* CUserMessageAchievementEvent::default_instance_ = NULL;

CUserMessageAchievementEvent* CUserMessageAchievementEvent::New() const {
  return new CUserMessageAchievementEvent;
}

void CUserMessageAchievementEvent::Clear() {
  achievement_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageAchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageAchievementEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageAchievementEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageAchievementEvent)
  return false;
#undef DO_
}

void CUserMessageAchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageAchievementEvent)
  // optional uint32 achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageAchievementEvent)
}

::google::protobuf::uint8* CUserMessageAchievementEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAchievementEvent)
  // optional uint32 achievement = 1;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAchievementEvent)
  return target;
}

int CUserMessageAchievementEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageAchievementEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageAchievementEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageAchievementEvent::MergeFrom(const CUserMessageAchievementEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageAchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAchievementEvent::CopyFrom(const CUserMessageAchievementEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAchievementEvent::IsInitialized() const {

  return true;
}

void CUserMessageAchievementEvent::Swap(CUserMessageAchievementEvent* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageAchievementEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageAchievementEvent_descriptor_;
  metadata.reflection = CUserMessageAchievementEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCloseCaption::kHashFieldNumber;
const int CUserMessageCloseCaption::kDurationFieldNumber;
const int CUserMessageCloseCaption::kFromPlayerFieldNumber;
const int CUserMessageCloseCaption::kEntIndexFieldNumber;
#endif  // !_MSC_VER

CUserMessageCloseCaption::CUserMessageCloseCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCloseCaption)
}

void CUserMessageCloseCaption::InitAsDefaultInstance() {
}

CUserMessageCloseCaption::CUserMessageCloseCaption(const CUserMessageCloseCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaption)
}

void CUserMessageCloseCaption::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ent_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCloseCaption::~CUserMessageCloseCaption() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaption)
  SharedDtor();
}

void CUserMessageCloseCaption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageCloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCloseCaption_descriptor_;
}

const CUserMessageCloseCaption& CUserMessageCloseCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCloseCaption* CUserMessageCloseCaption::default_instance_ = NULL;

CUserMessageCloseCaption* CUserMessageCloseCaption::New() const {
  return new CUserMessageCloseCaption;
}

void CUserMessageCloseCaption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageCloseCaption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hash_, ent_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCloseCaption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (tag == 24) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ent_index;
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (tag == 32) {
         parse_ent_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
          set_has_ent_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCloseCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCloseCaption)
  return false;
#undef DO_
}

void CUserMessageCloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCloseCaption)
  // optional fixed32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCloseCaption)
}

::google::protobuf::uint8* CUserMessageCloseCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaption)
  // optional fixed32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaption)
  return target;
}

int CUserMessageCloseCaption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCloseCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCloseCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaption::MergeFrom(const CUserMessageCloseCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
    if (from.has_ent_index()) {
      set_ent_index(from.ent_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaption::CopyFrom(const CUserMessageCloseCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaption::IsInitialized() const {

  return true;
}

void CUserMessageCloseCaption::Swap(CUserMessageCloseCaption* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(ent_index_, other->ent_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCloseCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCloseCaption_descriptor_;
  metadata.reflection = CUserMessageCloseCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCloseCaptionDirect::kHashFieldNumber;
const int CUserMessageCloseCaptionDirect::kDurationFieldNumber;
const int CUserMessageCloseCaptionDirect::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionDirect::kEntIndexFieldNumber;
#endif  // !_MSC_VER

CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCloseCaptionDirect)
}

void CUserMessageCloseCaptionDirect::InitAsDefaultInstance() {
}

CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(const CUserMessageCloseCaptionDirect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaptionDirect)
}

void CUserMessageCloseCaptionDirect::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ent_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCloseCaptionDirect::~CUserMessageCloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaptionDirect)
  SharedDtor();
}

void CUserMessageCloseCaptionDirect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageCloseCaptionDirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionDirect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCloseCaptionDirect_descriptor_;
}

const CUserMessageCloseCaptionDirect& CUserMessageCloseCaptionDirect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCloseCaptionDirect* CUserMessageCloseCaptionDirect::default_instance_ = NULL;

CUserMessageCloseCaptionDirect* CUserMessageCloseCaptionDirect::New() const {
  return new CUserMessageCloseCaptionDirect;
}

void CUserMessageCloseCaptionDirect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageCloseCaptionDirect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hash_, ent_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCloseCaptionDirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (tag == 24) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ent_index;
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (tag == 32) {
         parse_ent_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
          set_has_ent_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCloseCaptionDirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCloseCaptionDirect)
  return false;
#undef DO_
}

void CUserMessageCloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCloseCaptionDirect)
  // optional fixed32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCloseCaptionDirect)
}

::google::protobuf::uint8* CUserMessageCloseCaptionDirect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaptionDirect)
  // optional fixed32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaptionDirect)
  return target;
}

int CUserMessageCloseCaptionDirect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCloseCaptionDirect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCloseCaptionDirect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionDirect::MergeFrom(const CUserMessageCloseCaptionDirect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
    if (from.has_ent_index()) {
      set_ent_index(from.ent_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionDirect::CopyFrom(const CUserMessageCloseCaptionDirect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionDirect::IsInitialized() const {

  return true;
}

void CUserMessageCloseCaptionDirect::Swap(CUserMessageCloseCaptionDirect* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(ent_index_, other->ent_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCloseCaptionDirect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCloseCaptionDirect_descriptor_;
  metadata.reflection = CUserMessageCloseCaptionDirect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCloseCaptionPlaceholder::kStringFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kDurationFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kEntIndexFieldNumber;
#endif  // !_MSC_VER

CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCloseCaptionPlaceholder)
}

void CUserMessageCloseCaptionPlaceholder::InitAsDefaultInstance() {
}

CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(const CUserMessageCloseCaptionPlaceholder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCloseCaptionPlaceholder)
}

void CUserMessageCloseCaptionPlaceholder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  from_player_ = false;
  ent_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCloseCaptionPlaceholder::~CUserMessageCloseCaptionPlaceholder() {
  // @@protoc_insertion_point(destructor:CUserMessageCloseCaptionPlaceholder)
  SharedDtor();
}

void CUserMessageCloseCaptionPlaceholder::SharedDtor() {
  if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageCloseCaptionPlaceholder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCloseCaptionPlaceholder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCloseCaptionPlaceholder_descriptor_;
}

const CUserMessageCloseCaptionPlaceholder& CUserMessageCloseCaptionPlaceholder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCloseCaptionPlaceholder* CUserMessageCloseCaptionPlaceholder::default_instance_ = NULL;

CUserMessageCloseCaptionPlaceholder* CUserMessageCloseCaptionPlaceholder::New() const {
  return new CUserMessageCloseCaptionPlaceholder;
}

void CUserMessageCloseCaptionPlaceholder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageCloseCaptionPlaceholder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(duration_, ent_index_);
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCloseCaptionPlaceholder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCloseCaptionPlaceholder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (tag == 24) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ent_index;
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (tag == 32) {
         parse_ent_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
          set_has_ent_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCloseCaptionPlaceholder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCloseCaptionPlaceholder)
  return false;
#undef DO_
}

void CUserMessageCloseCaptionPlaceholder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCloseCaptionPlaceholder)
  // optional string string = 1;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCloseCaptionPlaceholder)
}

::google::protobuf::uint8* CUserMessageCloseCaptionPlaceholder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCloseCaptionPlaceholder)
  // optional string string = 1;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (has_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCloseCaptionPlaceholder)
  return target;
}

int CUserMessageCloseCaptionPlaceholder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string = 1;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCloseCaptionPlaceholder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCloseCaptionPlaceholder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const CUserMessageCloseCaptionPlaceholder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string()) {
      set_string(from.string());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
    if (from.has_ent_index()) {
      set_ent_index(from.ent_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const CUserMessageCloseCaptionPlaceholder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionPlaceholder::IsInitialized() const {

  return true;
}

void CUserMessageCloseCaptionPlaceholder::Swap(CUserMessageCloseCaptionPlaceholder* other) {
  if (other != this) {
    std::swap(string_, other->string_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(ent_index_, other->ent_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCloseCaptionPlaceholder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCloseCaptionPlaceholder_descriptor_;
  metadata.reflection = CUserMessageCloseCaptionPlaceholder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCurrentTimescale::kCurrentFieldNumber;
#endif  // !_MSC_VER

CUserMessageCurrentTimescale::CUserMessageCurrentTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCurrentTimescale)
}

void CUserMessageCurrentTimescale::InitAsDefaultInstance() {
}

CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(const CUserMessageCurrentTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCurrentTimescale)
}

void CUserMessageCurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCurrentTimescale::~CUserMessageCurrentTimescale() {
  // @@protoc_insertion_point(destructor:CUserMessageCurrentTimescale)
  SharedDtor();
}

void CUserMessageCurrentTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageCurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCurrentTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCurrentTimescale_descriptor_;
}

const CUserMessageCurrentTimescale& CUserMessageCurrentTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCurrentTimescale* CUserMessageCurrentTimescale::default_instance_ = NULL;

CUserMessageCurrentTimescale* CUserMessageCurrentTimescale::New() const {
  return new CUserMessageCurrentTimescale;
}

void CUserMessageCurrentTimescale::Clear() {
  current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCurrentTimescale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCurrentTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCurrentTimescale)
  return false;
#undef DO_
}

void CUserMessageCurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCurrentTimescale)
  // optional float current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCurrentTimescale)
}

::google::protobuf::uint8* CUserMessageCurrentTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCurrentTimescale)
  // optional float current = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCurrentTimescale)
  return target;
}

int CUserMessageCurrentTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float current = 1;
    if (has_current()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCurrentTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCurrentTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCurrentTimescale::MergeFrom(const CUserMessageCurrentTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCurrentTimescale::CopyFrom(const CUserMessageCurrentTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCurrentTimescale::IsInitialized() const {

  return true;
}

void CUserMessageCurrentTimescale::Swap(CUserMessageCurrentTimescale* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCurrentTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCurrentTimescale_descriptor_;
  metadata.reflection = CUserMessageCurrentTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageDesiredTimescale::kDesiredFieldNumber;
const int CUserMessageDesiredTimescale::kAccelerationFieldNumber;
const int CUserMessageDesiredTimescale::kMinblendrateFieldNumber;
const int CUserMessageDesiredTimescale::kBlenddeltamultiplierFieldNumber;
#endif  // !_MSC_VER

CUserMessageDesiredTimescale::CUserMessageDesiredTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageDesiredTimescale)
}

void CUserMessageDesiredTimescale::InitAsDefaultInstance() {
}

CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(const CUserMessageDesiredTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageDesiredTimescale)
}

void CUserMessageDesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  desired_ = 0;
  acceleration_ = 0;
  minblendrate_ = 0;
  blenddeltamultiplier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageDesiredTimescale::~CUserMessageDesiredTimescale() {
  // @@protoc_insertion_point(destructor:CUserMessageDesiredTimescale)
  SharedDtor();
}

void CUserMessageDesiredTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageDesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageDesiredTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageDesiredTimescale_descriptor_;
}

const CUserMessageDesiredTimescale& CUserMessageDesiredTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageDesiredTimescale* CUserMessageDesiredTimescale::default_instance_ = NULL;

CUserMessageDesiredTimescale* CUserMessageDesiredTimescale::New() const {
  return new CUserMessageDesiredTimescale;
}

void CUserMessageDesiredTimescale::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageDesiredTimescale*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(desired_, blenddeltamultiplier_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageDesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageDesiredTimescale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_)));
          set_has_desired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_acceleration;
        break;
      }

      // optional float acceleration = 2;
      case 2: {
        if (tag == 21) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_minblendrate;
        break;
      }

      // optional float minblendrate = 3;
      case 3: {
        if (tag == 29) {
         parse_minblendrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minblendrate_)));
          set_has_minblendrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_blenddeltamultiplier;
        break;
      }

      // optional float blenddeltamultiplier = 4;
      case 4: {
        if (tag == 37) {
         parse_blenddeltamultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blenddeltamultiplier_)));
          set_has_blenddeltamultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageDesiredTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageDesiredTimescale)
  return false;
#undef DO_
}

void CUserMessageDesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageDesiredTimescale)
  // optional float desired = 1;
  if (has_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired(), output);
  }

  // optional float acceleration = 2;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acceleration(), output);
  }

  // optional float minblendrate = 3;
  if (has_minblendrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minblendrate(), output);
  }

  // optional float blenddeltamultiplier = 4;
  if (has_blenddeltamultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blenddeltamultiplier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageDesiredTimescale)
}

::google::protobuf::uint8* CUserMessageDesiredTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageDesiredTimescale)
  // optional float desired = 1;
  if (has_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired(), target);
  }

  // optional float acceleration = 2;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acceleration(), target);
  }

  // optional float minblendrate = 3;
  if (has_minblendrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minblendrate(), target);
  }

  // optional float blenddeltamultiplier = 4;
  if (has_blenddeltamultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blenddeltamultiplier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageDesiredTimescale)
  return target;
}

int CUserMessageDesiredTimescale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float desired = 1;
    if (has_desired()) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 2;
    if (has_acceleration()) {
      total_size += 1 + 4;
    }

    // optional float minblendrate = 3;
    if (has_minblendrate()) {
      total_size += 1 + 4;
    }

    // optional float blenddeltamultiplier = 4;
    if (has_blenddeltamultiplier()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageDesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageDesiredTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageDesiredTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageDesiredTimescale::MergeFrom(const CUserMessageDesiredTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desired()) {
      set_desired(from.desired());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
    if (from.has_minblendrate()) {
      set_minblendrate(from.minblendrate());
    }
    if (from.has_blenddeltamultiplier()) {
      set_blenddeltamultiplier(from.blenddeltamultiplier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageDesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageDesiredTimescale::CopyFrom(const CUserMessageDesiredTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageDesiredTimescale::IsInitialized() const {

  return true;
}

void CUserMessageDesiredTimescale::Swap(CUserMessageDesiredTimescale* other) {
  if (other != this) {
    std::swap(desired_, other->desired_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(minblendrate_, other->minblendrate_);
    std::swap(blenddeltamultiplier_, other->blenddeltamultiplier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageDesiredTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageDesiredTimescale_descriptor_;
  metadata.reflection = CUserMessageDesiredTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageFade::kDurationFieldNumber;
const int CUserMessageFade::kHoldTimeFieldNumber;
const int CUserMessageFade::kFlagsFieldNumber;
const int CUserMessageFade::kColorFieldNumber;
#endif  // !_MSC_VER

CUserMessageFade::CUserMessageFade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageFade)
}

void CUserMessageFade::InitAsDefaultInstance() {
}

CUserMessageFade::CUserMessageFade(const CUserMessageFade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageFade)
}

void CUserMessageFade::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0u;
  hold_time_ = 0u;
  flags_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageFade::~CUserMessageFade() {
  // @@protoc_insertion_point(destructor:CUserMessageFade)
  SharedDtor();
}

void CUserMessageFade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageFade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageFade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageFade_descriptor_;
}

const CUserMessageFade& CUserMessageFade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageFade* CUserMessageFade::default_instance_ = NULL;

CUserMessageFade* CUserMessageFade::New() const {
  return new CUserMessageFade;
}

void CUserMessageFade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageFade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(duration_, color_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageFade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageFade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }

      // optional uint32 hold_time = 2;
      case 2: {
        if (tag == 16) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (tag == 37) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageFade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageFade)
  return false;
#undef DO_
}

void CUserMessageFade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageFade)
  // optional uint32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  // optional uint32 hold_time = 2;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hold_time(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional fixed32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageFade)
}

::google::protobuf::uint8* CUserMessageFade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageFade)
  // optional uint32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  // optional uint32 hold_time = 2;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hold_time(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional fixed32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageFade)
  return target;
}

int CUserMessageFade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_time());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageFade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageFade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageFade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageFade::MergeFrom(const CUserMessageFade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageFade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageFade::CopyFrom(const CUserMessageFade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageFade::IsInitialized() const {

  return true;
}

void CUserMessageFade::Swap(CUserMessageFade* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(flags_, other->flags_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageFade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageFade_descriptor_;
  metadata.reflection = CUserMessageFade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageShake::kCommandFieldNumber;
const int CUserMessageShake::kAmplitudeFieldNumber;
const int CUserMessageShake::kFrequencyFieldNumber;
const int CUserMessageShake::kDurationFieldNumber;
#endif  // !_MSC_VER

CUserMessageShake::CUserMessageShake()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageShake)
}

void CUserMessageShake::InitAsDefaultInstance() {
}

CUserMessageShake::CUserMessageShake(const CUserMessageShake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageShake)
}

void CUserMessageShake::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0u;
  amplitude_ = 0;
  frequency_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageShake::~CUserMessageShake() {
  // @@protoc_insertion_point(destructor:CUserMessageShake)
  SharedDtor();
}

void CUserMessageShake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageShake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageShake_descriptor_;
}

const CUserMessageShake& CUserMessageShake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageShake* CUserMessageShake::default_instance_ = NULL;

CUserMessageShake* CUserMessageShake::New() const {
  return new CUserMessageShake;
}

void CUserMessageShake::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageShake*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(command_, duration_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageShake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_amplitude;
        break;
      }

      // optional float amplitude = 2;
      case 2: {
        if (tag == 21) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
          set_has_amplitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (tag == 29) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (tag == 37) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageShake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageShake)
  return false;
#undef DO_
}

void CUserMessageShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageShake)
  // optional uint32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional float amplitude = 2;
  if (has_amplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageShake)
}

::google::protobuf::uint8* CUserMessageShake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShake)
  // optional uint32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional float amplitude = 2;
  if (has_amplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amplitude(), target);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShake)
  return target;
}

int CUserMessageShake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional float amplitude = 2;
    if (has_amplitude()) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageShake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageShake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageShake::MergeFrom(const CUserMessageShake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_amplitude()) {
      set_amplitude(from.amplitude());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageShake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShake::CopyFrom(const CUserMessageShake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShake::IsInitialized() const {

  return true;
}

void CUserMessageShake::Swap(CUserMessageShake* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(amplitude_, other->amplitude_);
    std::swap(frequency_, other->frequency_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageShake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageShake_descriptor_;
  metadata.reflection = CUserMessageShake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageShakeDir::kShakeFieldNumber;
const int CUserMessageShakeDir::kDirectionFieldNumber;
#endif  // !_MSC_VER

CUserMessageShakeDir::CUserMessageShakeDir()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageShakeDir)
}

void CUserMessageShakeDir::InitAsDefaultInstance() {
  shake_ = const_cast< ::CUserMessageShake*>(&::CUserMessageShake::default_instance());
  direction_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMessageShakeDir::CUserMessageShakeDir(const CUserMessageShakeDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageShakeDir)
}

void CUserMessageShakeDir::SharedCtor() {
  _cached_size_ = 0;
  shake_ = NULL;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageShakeDir::~CUserMessageShakeDir() {
  // @@protoc_insertion_point(destructor:CUserMessageShakeDir)
  SharedDtor();
}

void CUserMessageShakeDir::SharedDtor() {
  if (this != default_instance_) {
    delete shake_;
    delete direction_;
  }
}

void CUserMessageShakeDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShakeDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageShakeDir_descriptor_;
}

const CUserMessageShakeDir& CUserMessageShakeDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageShakeDir* CUserMessageShakeDir::default_instance_ = NULL;

CUserMessageShakeDir* CUserMessageShakeDir::New() const {
  return new CUserMessageShakeDir;
}

void CUserMessageShakeDir::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_shake()) {
      if (shake_ != NULL) shake_->::CUserMessageShake::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageShakeDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageShakeDir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CUserMessageShake shake = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shake()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_direction;
        break;
      }

      // optional .CMsgVector direction = 2;
      case 2: {
        if (tag == 18) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageShakeDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageShakeDir)
  return false;
#undef DO_
}

void CUserMessageShakeDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageShakeDir)
  // optional .CUserMessageShake shake = 1;
  if (has_shake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shake(), output);
  }

  // optional .CMsgVector direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageShakeDir)
}

::google::protobuf::uint8* CUserMessageShakeDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShakeDir)
  // optional .CUserMessageShake shake = 1;
  if (has_shake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shake(), target);
  }

  // optional .CMsgVector direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShakeDir)
  return target;
}

int CUserMessageShakeDir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CUserMessageShake shake = 1;
    if (has_shake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shake());
    }

    // optional .CMsgVector direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShakeDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageShakeDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageShakeDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageShakeDir::MergeFrom(const CUserMessageShakeDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shake()) {
      mutable_shake()->::CUserMessageShake::MergeFrom(from.shake());
    }
    if (from.has_direction()) {
      mutable_direction()->::CMsgVector::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageShakeDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShakeDir::CopyFrom(const CUserMessageShakeDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShakeDir::IsInitialized() const {

  return true;
}

void CUserMessageShakeDir::Swap(CUserMessageShakeDir* other) {
  if (other != this) {
    std::swap(shake_, other->shake_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageShakeDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageShakeDir_descriptor_;
  metadata.reflection = CUserMessageShakeDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageScreenTilt::kCommandFieldNumber;
const int CUserMessageScreenTilt::kEaseInOutFieldNumber;
const int CUserMessageScreenTilt::kAngleFieldNumber;
const int CUserMessageScreenTilt::kDurationFieldNumber;
const int CUserMessageScreenTilt::kTimeFieldNumber;
#endif  // !_MSC_VER

CUserMessageScreenTilt::CUserMessageScreenTilt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageScreenTilt)
}

void CUserMessageScreenTilt::InitAsDefaultInstance() {
  angle_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMessageScreenTilt::CUserMessageScreenTilt(const CUserMessageScreenTilt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageScreenTilt)
}

void CUserMessageScreenTilt::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0u;
  ease_in_out_ = false;
  angle_ = NULL;
  duration_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageScreenTilt::~CUserMessageScreenTilt() {
  // @@protoc_insertion_point(destructor:CUserMessageScreenTilt)
  SharedDtor();
}

void CUserMessageScreenTilt::SharedDtor() {
  if (this != default_instance_) {
    delete angle_;
  }
}

void CUserMessageScreenTilt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageScreenTilt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageScreenTilt_descriptor_;
}

const CUserMessageScreenTilt& CUserMessageScreenTilt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageScreenTilt* CUserMessageScreenTilt::default_instance_ = NULL;

CUserMessageScreenTilt* CUserMessageScreenTilt::New() const {
  return new CUserMessageScreenTilt;
}

void CUserMessageScreenTilt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageScreenTilt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(command_, ease_in_out_);
    ZR_(duration_, time_);
    if (has_angle()) {
      if (angle_ != NULL) angle_->::CMsgVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageScreenTilt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageScreenTilt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ease_in_out;
        break;
      }

      // optional bool ease_in_out = 2;
      case 2: {
        if (tag == 16) {
         parse_ease_in_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ease_in_out_)));
          set_has_ease_in_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_angle;
        break;
      }

      // optional .CMsgVector angle = 3;
      case 3: {
        if (tag == 26) {
         parse_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (tag == 37) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_time;
        break;
      }

      // optional float time = 5;
      case 5: {
        if (tag == 45) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageScreenTilt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageScreenTilt)
  return false;
#undef DO_
}

void CUserMessageScreenTilt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageScreenTilt)
  // optional uint32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional bool ease_in_out = 2;
  if (has_ease_in_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ease_in_out(), output);
  }

  // optional .CMsgVector angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->angle(), output);
  }

  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional float time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageScreenTilt)
}

::google::protobuf::uint8* CUserMessageScreenTilt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageScreenTilt)
  // optional uint32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional bool ease_in_out = 2;
  if (has_ease_in_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ease_in_out(), target);
  }

  // optional .CMsgVector angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->angle(), target);
  }

  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // optional float time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageScreenTilt)
  return target;
}

int CUserMessageScreenTilt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional bool ease_in_out = 2;
    if (has_ease_in_out()) {
      total_size += 1 + 1;
    }

    // optional .CMsgVector angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional float time = 5;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageScreenTilt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageScreenTilt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageScreenTilt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageScreenTilt::MergeFrom(const CUserMessageScreenTilt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_ease_in_out()) {
      set_ease_in_out(from.ease_in_out());
    }
    if (from.has_angle()) {
      mutable_angle()->::CMsgVector::MergeFrom(from.angle());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageScreenTilt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageScreenTilt::CopyFrom(const CUserMessageScreenTilt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageScreenTilt::IsInitialized() const {

  return true;
}

void CUserMessageScreenTilt::Swap(CUserMessageScreenTilt* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(ease_in_out_, other->ease_in_out_);
    std::swap(angle_, other->angle_);
    std::swap(duration_, other->duration_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageScreenTilt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageScreenTilt_descriptor_;
  metadata.reflection = CUserMessageScreenTilt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageSayText::kPlayerindexFieldNumber;
const int CUserMessageSayText::kTextFieldNumber;
const int CUserMessageSayText::kChatFieldNumber;
#endif  // !_MSC_VER

CUserMessageSayText::CUserMessageSayText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageSayText)
}

void CUserMessageSayText::InitAsDefaultInstance() {
}

CUserMessageSayText::CUserMessageSayText(const CUserMessageSayText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayText)
}

void CUserMessageSayText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerindex_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageSayText::~CUserMessageSayText() {
  // @@protoc_insertion_point(destructor:CUserMessageSayText)
  SharedDtor();
}

void CUserMessageSayText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageSayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageSayText_descriptor_;
}

const CUserMessageSayText& CUserMessageSayText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageSayText* CUserMessageSayText::default_instance_ = NULL;

CUserMessageSayText* CUserMessageSayText::New() const {
  return new CUserMessageSayText;
}

void CUserMessageSayText::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageSayText*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(playerindex_, chat_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageSayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageSayText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));
          set_has_playerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }

      // optional bool chat = 3;
      case 3: {
        if (tag == 24) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageSayText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageSayText)
  return false;
#undef DO_
}

void CUserMessageSayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageSayText)
  // optional uint32 playerindex = 1;
  if (has_playerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageSayText)
}

::google::protobuf::uint8* CUserMessageSayText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayText)
  // optional uint32 playerindex = 1;
  if (has_playerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayText)
  return target;
}

int CUserMessageSayText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerindex = 1;
    if (has_playerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerindex());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageSayText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageSayText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageSayText::MergeFrom(const CUserMessageSayText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerindex()) {
      set_playerindex(from.playerindex());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageSayText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText::CopyFrom(const CUserMessageSayText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText::IsInitialized() const {

  return true;
}

void CUserMessageSayText::Swap(CUserMessageSayText* other) {
  if (other != this) {
    std::swap(playerindex_, other->playerindex_);
    std::swap(text_, other->text_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageSayText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageSayText_descriptor_;
  metadata.reflection = CUserMessageSayText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageSayText2::kEntityindexFieldNumber;
const int CUserMessageSayText2::kChatFieldNumber;
const int CUserMessageSayText2::kMessagenameFieldNumber;
const int CUserMessageSayText2::kParam1FieldNumber;
const int CUserMessageSayText2::kParam2FieldNumber;
const int CUserMessageSayText2::kParam3FieldNumber;
const int CUserMessageSayText2::kParam4FieldNumber;
#endif  // !_MSC_VER

CUserMessageSayText2::CUserMessageSayText2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageSayText2)
}

void CUserMessageSayText2::InitAsDefaultInstance() {
}

CUserMessageSayText2::CUserMessageSayText2(const CUserMessageSayText2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayText2)
}

void CUserMessageSayText2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entityindex_ = 0u;
  chat_ = false;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageSayText2::~CUserMessageSayText2() {
  // @@protoc_insertion_point(destructor:CUserMessageSayText2)
  SharedDtor();
}

void CUserMessageSayText2::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagename_;
  }
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param2_;
  }
  if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param3_;
  }
  if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param4_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageSayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayText2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageSayText2_descriptor_;
}

const CUserMessageSayText2& CUserMessageSayText2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageSayText2* CUserMessageSayText2::default_instance_ = NULL;

CUserMessageSayText2* CUserMessageSayText2::New() const {
  return new CUserMessageSayText2;
}

void CUserMessageSayText2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageSayText2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(entityindex_, chat_);
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagename_->clear();
      }
    }
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param2_->clear();
      }
    }
    if (has_param3()) {
      if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param3_->clear();
      }
    }
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param4_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageSayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageSayText2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entityindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
          set_has_entityindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (tag == 16) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messagename;
        break;
      }

      // optional string messagename = 3;
      case 3: {
        if (tag == 26) {
         parse_messagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param1;
        break;
      }

      // optional string param1 = 4;
      case 4: {
        if (tag == 34) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_param2;
        break;
      }

      // optional string param2 = 5;
      case 5: {
        if (tag == 42) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_param3;
        break;
      }

      // optional string param3 = 6;
      case 6: {
        if (tag == 50) {
         parse_param3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param3().data(), this->param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_param4;
        break;
      }

      // optional string param4 = 7;
      case 7: {
        if (tag == 58) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageSayText2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageSayText2)
  return false;
#undef DO_
}

void CUserMessageSayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageSayText2)
  // optional uint32 entityindex = 1;
  if (has_entityindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entityindex(), output);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional string messagename = 3;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagename(), output);
  }

  // optional string param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param1(), output);
  }

  // optional string param2 = 5;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->param2(), output);
  }

  // optional string param3 = 6;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->param3(), output);
  }

  // optional string param4 = 7;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->param4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageSayText2)
}

::google::protobuf::uint8* CUserMessageSayText2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayText2)
  // optional uint32 entityindex = 1;
  if (has_entityindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entityindex(), target);
  }

  // optional bool chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional string messagename = 3;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagename(), target);
  }

  // optional string param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param1(), target);
  }

  // optional string param2 = 5;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param2(), target);
  }

  // optional string param3 = 6;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param3(), target);
  }

  // optional string param4 = 7;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->param4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayText2)
  return target;
}

int CUserMessageSayText2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 entityindex = 1;
    if (has_entityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }

    // optional string messagename = 3;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }

    // optional string param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 5;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional string param3 = 6;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }

    // optional string param4 = 7;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayText2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageSayText2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageSayText2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageSayText2::MergeFrom(const CUserMessageSayText2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityindex()) {
      set_entityindex(from.entityindex());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageSayText2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText2::CopyFrom(const CUserMessageSayText2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText2::IsInitialized() const {

  return true;
}

void CUserMessageSayText2::Swap(CUserMessageSayText2* other) {
  if (other != this) {
    std::swap(entityindex_, other->entityindex_);
    std::swap(chat_, other->chat_);
    std::swap(messagename_, other->messagename_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageSayText2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageSayText2_descriptor_;
  metadata.reflection = CUserMessageSayText2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageHudMsg::kChannelFieldNumber;
const int CUserMessageHudMsg::kXFieldNumber;
const int CUserMessageHudMsg::kYFieldNumber;
const int CUserMessageHudMsg::kColor1FieldNumber;
const int CUserMessageHudMsg::kColor2FieldNumber;
const int CUserMessageHudMsg::kEffectFieldNumber;
const int CUserMessageHudMsg::kFadeInTimeFieldNumber;
const int CUserMessageHudMsg::kFadeOutTimeFieldNumber;
const int CUserMessageHudMsg::kHoldTimeFieldNumber;
const int CUserMessageHudMsg::kFxTimeFieldNumber;
const int CUserMessageHudMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMessageHudMsg::CUserMessageHudMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageHudMsg)
}

void CUserMessageHudMsg::InitAsDefaultInstance() {
}

CUserMessageHudMsg::CUserMessageHudMsg(const CUserMessageHudMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageHudMsg)
}

void CUserMessageHudMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 0u;
  x_ = 0;
  y_ = 0;
  color1_ = 0u;
  color2_ = 0u;
  effect_ = 0u;
  fade_in_time_ = 0;
  fade_out_time_ = 0;
  hold_time_ = 0;
  fx_time_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageHudMsg::~CUserMessageHudMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageHudMsg)
  SharedDtor();
}

void CUserMessageHudMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageHudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHudMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageHudMsg_descriptor_;
}

const CUserMessageHudMsg& CUserMessageHudMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageHudMsg* CUserMessageHudMsg::default_instance_ = NULL;

CUserMessageHudMsg* CUserMessageHudMsg::New() const {
  return new CUserMessageHudMsg;
}

void CUserMessageHudMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageHudMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(channel_, fade_out_time_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(hold_time_, fx_time_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageHudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageHudMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_color1;
        break;
      }

      // optional fixed32 color1 = 4;
      case 4: {
        if (tag == 37) {
         parse_color1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color1_)));
          set_has_color1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_color2;
        break;
      }

      // optional fixed32 color2 = 5;
      case 5: {
        if (tag == 45) {
         parse_color2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color2_)));
          set_has_color2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_effect;
        break;
      }

      // optional uint32 effect = 6;
      case 6: {
        if (tag == 48) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fade_in_time;
        break;
      }

      // optional float fade_in_time = 7;
      case 7: {
        if (tag == 61) {
         parse_fade_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
          set_has_fade_in_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_fade_out_time;
        break;
      }

      // optional float fade_out_time = 8;
      case 8: {
        if (tag == 69) {
         parse_fade_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
          set_has_fade_out_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_hold_time;
        break;
      }

      // optional float hold_time = 9;
      case 9: {
        if (tag == 77) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_fx_time;
        break;
      }

      // optional float fx_time = 10;
      case 10: {
        if (tag == 85) {
         parse_fx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
          set_has_fx_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_message;
        break;
      }

      // optional string message = 11;
      case 11: {
        if (tag == 90) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageHudMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageHudMsg)
  return false;
#undef DO_
}

void CUserMessageHudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageHudMsg)
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional fixed32 color1 = 4;
  if (has_color1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color1(), output);
  }

  // optional fixed32 color2 = 5;
  if (has_color2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->color2(), output);
  }

  // optional uint32 effect = 6;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect(), output);
  }

  // optional float fade_in_time = 7;
  if (has_fade_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_in_time(), output);
  }

  // optional float fade_out_time = 8;
  if (has_fade_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fade_out_time(), output);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }

  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageHudMsg)
}

::google::protobuf::uint8* CUserMessageHudMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHudMsg)
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional fixed32 color1 = 4;
  if (has_color1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color1(), target);
  }

  // optional fixed32 color2 = 5;
  if (has_color2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->color2(), target);
  }

  // optional uint32 effect = 6;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect(), target);
  }

  // optional float fade_in_time = 7;
  if (has_fade_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_in_time(), target);
  }

  // optional float fade_out_time = 8;
  if (has_fade_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }

  // optional float fx_time = 10;
  if (has_fx_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }

  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHudMsg)
  return target;
}

int CUserMessageHudMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color1 = 4;
    if (has_color1()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color2 = 5;
    if (has_color2()) {
      total_size += 1 + 4;
    }

    // optional uint32 effect = 6;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // optional float fade_in_time = 7;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 8;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }

    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHudMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageHudMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageHudMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageHudMsg::MergeFrom(const CUserMessageHudMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_color1()) {
      set_color1(from.color1());
    }
    if (from.has_color2()) {
      set_color2(from.color2());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_fade_in_time()) {
      set_fade_in_time(from.fade_in_time());
    }
    if (from.has_fade_out_time()) {
      set_fade_out_time(from.fade_out_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_fx_time()) {
      set_fx_time(from.fx_time());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageHudMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudMsg::CopyFrom(const CUserMessageHudMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudMsg::IsInitialized() const {

  return true;
}

void CUserMessageHudMsg::Swap(CUserMessageHudMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(color1_, other->color1_);
    std::swap(color2_, other->color2_);
    std::swap(effect_, other->effect_);
    std::swap(fade_in_time_, other->fade_in_time_);
    std::swap(fade_out_time_, other->fade_out_time_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(fx_time_, other->fx_time_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageHudMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageHudMsg_descriptor_;
  metadata.reflection = CUserMessageHudMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageHudText::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMessageHudText::CUserMessageHudText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageHudText)
}

void CUserMessageHudText::InitAsDefaultInstance() {
}

CUserMessageHudText::CUserMessageHudText(const CUserMessageHudText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageHudText)
}

void CUserMessageHudText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageHudText::~CUserMessageHudText() {
  // @@protoc_insertion_point(destructor:CUserMessageHudText)
  SharedDtor();
}

void CUserMessageHudText::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageHudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHudText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageHudText_descriptor_;
}

const CUserMessageHudText& CUserMessageHudText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageHudText* CUserMessageHudText::default_instance_ = NULL;

CUserMessageHudText* CUserMessageHudText::New() const {
  return new CUserMessageHudText;
}

void CUserMessageHudText::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageHudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageHudText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageHudText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageHudText)
  return false;
#undef DO_
}

void CUserMessageHudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageHudText)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageHudText)
}

::google::protobuf::uint8* CUserMessageHudText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHudText)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHudText)
  return target;
}

int CUserMessageHudText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHudText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageHudText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageHudText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageHudText::MergeFrom(const CUserMessageHudText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageHudText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudText::CopyFrom(const CUserMessageHudText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudText::IsInitialized() const {

  return true;
}

void CUserMessageHudText::Swap(CUserMessageHudText* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageHudText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageHudText_descriptor_;
  metadata.reflection = CUserMessageHudText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageTextMsg::kDestFieldNumber;
const int CUserMessageTextMsg::kParamFieldNumber;
#endif  // !_MSC_VER

CUserMessageTextMsg::CUserMessageTextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageTextMsg)
}

void CUserMessageTextMsg::InitAsDefaultInstance() {
}

CUserMessageTextMsg::CUserMessageTextMsg(const CUserMessageTextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageTextMsg)
}

void CUserMessageTextMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageTextMsg::~CUserMessageTextMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageTextMsg)
  SharedDtor();
}

void CUserMessageTextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageTextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageTextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageTextMsg_descriptor_;
}

const CUserMessageTextMsg& CUserMessageTextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageTextMsg* CUserMessageTextMsg::default_instance_ = NULL;

CUserMessageTextMsg* CUserMessageTextMsg::New() const {
  return new CUserMessageTextMsg;
}

void CUserMessageTextMsg::Clear() {
  dest_ = 0u;
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageTextMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dest = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_)));
          set_has_dest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // repeated string param = 2;
      case 2: {
        if (tag == 18) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageTextMsg)
  return false;
#undef DO_
}

void CUserMessageTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageTextMsg)
  // optional uint32 dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest(), output);
  }

  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageTextMsg)
}

::google::protobuf::uint8* CUserMessageTextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageTextMsg)
  // optional uint32 dest = 1;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest(), target);
  }

  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageTextMsg)
  return target;
}

int CUserMessageTextMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dest = 1;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest());
    }

  }
  // repeated string param = 2;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageTextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageTextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageTextMsg::MergeFrom(const CUserMessageTextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest()) {
      set_dest(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTextMsg::CopyFrom(const CUserMessageTextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTextMsg::IsInitialized() const {

  return true;
}

void CUserMessageTextMsg::Swap(CUserMessageTextMsg* other) {
  if (other != this) {
    std::swap(dest_, other->dest_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageTextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageTextMsg_descriptor_;
  metadata.reflection = CUserMessageTextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMessageGameTitle::CUserMessageGameTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageGameTitle)
}

void CUserMessageGameTitle::InitAsDefaultInstance() {
}

CUserMessageGameTitle::CUserMessageGameTitle(const CUserMessageGameTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageGameTitle)
}

void CUserMessageGameTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageGameTitle::~CUserMessageGameTitle() {
  // @@protoc_insertion_point(destructor:CUserMessageGameTitle)
  SharedDtor();
}

void CUserMessageGameTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageGameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageGameTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageGameTitle_descriptor_;
}

const CUserMessageGameTitle& CUserMessageGameTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageGameTitle* CUserMessageGameTitle::default_instance_ = NULL;

CUserMessageGameTitle* CUserMessageGameTitle::New() const {
  return new CUserMessageGameTitle;
}

void CUserMessageGameTitle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageGameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageGameTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageGameTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageGameTitle)
  return false;
#undef DO_
}

void CUserMessageGameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageGameTitle)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageGameTitle)
}

::google::protobuf::uint8* CUserMessageGameTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageGameTitle)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageGameTitle)
  return target;
}

int CUserMessageGameTitle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageGameTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageGameTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageGameTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageGameTitle::MergeFrom(const CUserMessageGameTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageGameTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageGameTitle::CopyFrom(const CUserMessageGameTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageGameTitle::IsInitialized() const {

  return true;
}

void CUserMessageGameTitle::Swap(CUserMessageGameTitle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageGameTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageGameTitle_descriptor_;
  metadata.reflection = CUserMessageGameTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMessageResetHUD::CUserMessageResetHUD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageResetHUD)
}

void CUserMessageResetHUD::InitAsDefaultInstance() {
}

CUserMessageResetHUD::CUserMessageResetHUD(const CUserMessageResetHUD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageResetHUD)
}

void CUserMessageResetHUD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageResetHUD::~CUserMessageResetHUD() {
  // @@protoc_insertion_point(destructor:CUserMessageResetHUD)
  SharedDtor();
}

void CUserMessageResetHUD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageResetHUD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageResetHUD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageResetHUD_descriptor_;
}

const CUserMessageResetHUD& CUserMessageResetHUD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageResetHUD* CUserMessageResetHUD::default_instance_ = NULL;

CUserMessageResetHUD* CUserMessageResetHUD::New() const {
  return new CUserMessageResetHUD;
}

void CUserMessageResetHUD::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageResetHUD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageResetHUD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageResetHUD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageResetHUD)
  return false;
#undef DO_
}

void CUserMessageResetHUD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageResetHUD)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageResetHUD)
}

::google::protobuf::uint8* CUserMessageResetHUD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageResetHUD)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageResetHUD)
  return target;
}

int CUserMessageResetHUD::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageResetHUD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageResetHUD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageResetHUD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageResetHUD::MergeFrom(const CUserMessageResetHUD& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageResetHUD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageResetHUD::CopyFrom(const CUserMessageResetHUD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageResetHUD::IsInitialized() const {

  return true;
}

void CUserMessageResetHUD::Swap(CUserMessageResetHUD* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageResetHUD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageResetHUD_descriptor_;
  metadata.reflection = CUserMessageResetHUD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageSendAudio::kSoundnameFieldNumber;
const int CUserMessageSendAudio::kStopFieldNumber;
#endif  // !_MSC_VER

CUserMessageSendAudio::CUserMessageSendAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageSendAudio)
}

void CUserMessageSendAudio::InitAsDefaultInstance() {
}

CUserMessageSendAudio::CUserMessageSendAudio(const CUserMessageSendAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageSendAudio)
}

void CUserMessageSendAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  soundname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageSendAudio::~CUserMessageSendAudio() {
  // @@protoc_insertion_point(destructor:CUserMessageSendAudio)
  SharedDtor();
}

void CUserMessageSendAudio::SharedDtor() {
  if (soundname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soundname_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageSendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSendAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageSendAudio_descriptor_;
}

const CUserMessageSendAudio& CUserMessageSendAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageSendAudio* CUserMessageSendAudio::default_instance_ = NULL;

CUserMessageSendAudio* CUserMessageSendAudio::New() const {
  return new CUserMessageSendAudio;
}

void CUserMessageSendAudio::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_soundname()) {
      if (soundname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        soundname_->clear();
      }
    }
    stop_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageSendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageSendAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string soundname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->soundname().data(), this->soundname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "soundname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stop;
        break;
      }

      // optional bool stop = 2;
      case 2: {
        if (tag == 16) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageSendAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageSendAudio)
  return false;
#undef DO_
}

void CUserMessageSendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageSendAudio)
  // optional string soundname = 1;
  if (has_soundname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soundname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->soundname(), output);
  }

  // optional bool stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageSendAudio)
}

::google::protobuf::uint8* CUserMessageSendAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSendAudio)
  // optional string soundname = 1;
  if (has_soundname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "soundname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->soundname(), target);
  }

  // optional bool stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSendAudio)
  return target;
}

int CUserMessageSendAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string soundname = 1;
    if (has_soundname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundname());
    }

    // optional bool stop = 2;
    if (has_stop()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSendAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageSendAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageSendAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageSendAudio::MergeFrom(const CUserMessageSendAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soundname()) {
      set_soundname(from.soundname());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageSendAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSendAudio::CopyFrom(const CUserMessageSendAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSendAudio::IsInitialized() const {

  return true;
}

void CUserMessageSendAudio::Swap(CUserMessageSendAudio* other) {
  if (other != this) {
    std::swap(soundname_, other->soundname_);
    std::swap(stop_, other->stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageSendAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageSendAudio_descriptor_;
  metadata.reflection = CUserMessageSendAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageAudioParameter::kParameterTypeFieldNumber;
const int CUserMessageAudioParameter::kNameHashCodeFieldNumber;
const int CUserMessageAudioParameter::kValueFieldNumber;
#endif  // !_MSC_VER

CUserMessageAudioParameter::CUserMessageAudioParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageAudioParameter)
}

void CUserMessageAudioParameter::InitAsDefaultInstance() {
}

CUserMessageAudioParameter::CUserMessageAudioParameter(const CUserMessageAudioParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageAudioParameter)
}

void CUserMessageAudioParameter::SharedCtor() {
  _cached_size_ = 0;
  parameter_type_ = 0u;
  name_hash_code_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageAudioParameter::~CUserMessageAudioParameter() {
  // @@protoc_insertion_point(destructor:CUserMessageAudioParameter)
  SharedDtor();
}

void CUserMessageAudioParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageAudioParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAudioParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageAudioParameter_descriptor_;
}

const CUserMessageAudioParameter& CUserMessageAudioParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageAudioParameter* CUserMessageAudioParameter::default_instance_ = NULL;

CUserMessageAudioParameter* CUserMessageAudioParameter::New() const {
  return new CUserMessageAudioParameter;
}

void CUserMessageAudioParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageAudioParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(parameter_type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageAudioParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageAudioParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 parameter_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameter_type_)));
          set_has_parameter_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name_hash_code;
        break;
      }

      // optional uint32 name_hash_code = 2;
      case 2: {
        if (tag == 16) {
         parse_name_hash_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_hash_code_)));
          set_has_name_hash_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // optional float value = 3;
      case 3: {
        if (tag == 29) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageAudioParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageAudioParameter)
  return false;
#undef DO_
}

void CUserMessageAudioParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageAudioParameter)
  // optional uint32 parameter_type = 1;
  if (has_parameter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->parameter_type(), output);
  }

  // optional uint32 name_hash_code = 2;
  if (has_name_hash_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name_hash_code(), output);
  }

  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageAudioParameter)
}

::google::protobuf::uint8* CUserMessageAudioParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAudioParameter)
  // optional uint32 parameter_type = 1;
  if (has_parameter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->parameter_type(), target);
  }

  // optional uint32 name_hash_code = 2;
  if (has_name_hash_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name_hash_code(), target);
  }

  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAudioParameter)
  return target;
}

int CUserMessageAudioParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 parameter_type = 1;
    if (has_parameter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parameter_type());
    }

    // optional uint32 name_hash_code = 2;
    if (has_name_hash_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_hash_code());
    }

    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAudioParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageAudioParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageAudioParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageAudioParameter::MergeFrom(const CUserMessageAudioParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameter_type()) {
      set_parameter_type(from.parameter_type());
    }
    if (from.has_name_hash_code()) {
      set_name_hash_code(from.name_hash_code());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageAudioParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAudioParameter::CopyFrom(const CUserMessageAudioParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAudioParameter::IsInitialized() const {

  return true;
}

void CUserMessageAudioParameter::Swap(CUserMessageAudioParameter* other) {
  if (other != this) {
    std::swap(parameter_type_, other->parameter_type_);
    std::swap(name_hash_code_, other->name_hash_code_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageAudioParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageAudioParameter_descriptor_;
  metadata.reflection = CUserMessageAudioParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageVoiceMask::kGamerulesMasksFieldNumber;
const int CUserMessageVoiceMask::kBanMasksFieldNumber;
const int CUserMessageVoiceMask::kModEnableFieldNumber;
#endif  // !_MSC_VER

CUserMessageVoiceMask::CUserMessageVoiceMask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageVoiceMask)
}

void CUserMessageVoiceMask::InitAsDefaultInstance() {
}

CUserMessageVoiceMask::CUserMessageVoiceMask(const CUserMessageVoiceMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageVoiceMask)
}

void CUserMessageVoiceMask::SharedCtor() {
  _cached_size_ = 0;
  mod_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageVoiceMask::~CUserMessageVoiceMask() {
  // @@protoc_insertion_point(destructor:CUserMessageVoiceMask)
  SharedDtor();
}

void CUserMessageVoiceMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageVoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVoiceMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageVoiceMask_descriptor_;
}

const CUserMessageVoiceMask& CUserMessageVoiceMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageVoiceMask* CUserMessageVoiceMask::default_instance_ = NULL;

CUserMessageVoiceMask* CUserMessageVoiceMask::New() const {
  return new CUserMessageVoiceMask;
}

void CUserMessageVoiceMask::Clear() {
  mod_enable_ = false;
  gamerules_masks_.Clear();
  ban_masks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageVoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageVoiceMask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gamerules_masks = 1;
      case 1: {
        if (tag == 8) {
         parse_gamerules_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_gamerules_masks())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gamerules_masks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_gamerules_masks;
        if (input->ExpectTag(16)) goto parse_ban_masks;
        break;
      }

      // repeated uint32 ban_masks = 2;
      case 2: {
        if (tag == 16) {
         parse_ban_masks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_ban_masks())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ban_masks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ban_masks;
        if (input->ExpectTag(24)) goto parse_mod_enable;
        break;
      }

      // optional bool mod_enable = 3;
      case 3: {
        if (tag == 24) {
         parse_mod_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mod_enable_)));
          set_has_mod_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageVoiceMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageVoiceMask)
  return false;
#undef DO_
}

void CUserMessageVoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageVoiceMask)
  // repeated uint32 gamerules_masks = 1;
  for (int i = 0; i < this->gamerules_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gamerules_masks(i), output);
  }

  // repeated uint32 ban_masks = 2;
  for (int i = 0; i < this->ban_masks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ban_masks(i), output);
  }

  // optional bool mod_enable = 3;
  if (has_mod_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mod_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageVoiceMask)
}

::google::protobuf::uint8* CUserMessageVoiceMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVoiceMask)
  // repeated uint32 gamerules_masks = 1;
  for (int i = 0; i < this->gamerules_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->gamerules_masks(i), target);
  }

  // repeated uint32 ban_masks = 2;
  for (int i = 0; i < this->ban_masks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->ban_masks(i), target);
  }

  // optional bool mod_enable = 3;
  if (has_mod_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mod_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVoiceMask)
  return target;
}

int CUserMessageVoiceMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool mod_enable = 3;
    if (has_mod_enable()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 gamerules_masks = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gamerules_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gamerules_masks(i));
    }
    total_size += 1 * this->gamerules_masks_size() + data_size;
  }

  // repeated uint32 ban_masks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ban_masks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ban_masks(i));
    }
    total_size += 1 * this->ban_masks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageVoiceMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageVoiceMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageVoiceMask::MergeFrom(const CUserMessageVoiceMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamerules_masks_.MergeFrom(from.gamerules_masks_);
  ban_masks_.MergeFrom(from.ban_masks_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_mod_enable()) {
      set_mod_enable(from.mod_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageVoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceMask::CopyFrom(const CUserMessageVoiceMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceMask::IsInitialized() const {

  return true;
}

void CUserMessageVoiceMask::Swap(CUserMessageVoiceMask* other) {
  if (other != this) {
    gamerules_masks_.Swap(&other->gamerules_masks_);
    ban_masks_.Swap(&other->ban_masks_);
    std::swap(mod_enable_, other->mod_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageVoiceMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageVoiceMask_descriptor_;
  metadata.reflection = CUserMessageVoiceMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMessageRequestState::CUserMessageRequestState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageRequestState)
}

void CUserMessageRequestState::InitAsDefaultInstance() {
}

CUserMessageRequestState::CUserMessageRequestState(const CUserMessageRequestState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageRequestState)
}

void CUserMessageRequestState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageRequestState::~CUserMessageRequestState() {
  // @@protoc_insertion_point(destructor:CUserMessageRequestState)
  SharedDtor();
}

void CUserMessageRequestState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageRequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageRequestState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageRequestState_descriptor_;
}

const CUserMessageRequestState& CUserMessageRequestState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageRequestState* CUserMessageRequestState::default_instance_ = NULL;

CUserMessageRequestState* CUserMessageRequestState::New() const {
  return new CUserMessageRequestState;
}

void CUserMessageRequestState::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageRequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageRequestState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageRequestState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageRequestState)
  return false;
#undef DO_
}

void CUserMessageRequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageRequestState)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageRequestState)
}

::google::protobuf::uint8* CUserMessageRequestState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageRequestState)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageRequestState)
  return target;
}

int CUserMessageRequestState::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageRequestState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageRequestState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageRequestState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageRequestState::MergeFrom(const CUserMessageRequestState& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageRequestState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRequestState::CopyFrom(const CUserMessageRequestState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRequestState::IsInitialized() const {

  return true;
}

void CUserMessageRequestState::Swap(CUserMessageRequestState* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageRequestState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageRequestState_descriptor_;
  metadata.reflection = CUserMessageRequestState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageHintText::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMessageHintText::CUserMessageHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageHintText)
}

void CUserMessageHintText::InitAsDefaultInstance() {
}

CUserMessageHintText::CUserMessageHintText(const CUserMessageHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageHintText)
}

void CUserMessageHintText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageHintText::~CUserMessageHintText() {
  // @@protoc_insertion_point(destructor:CUserMessageHintText)
  SharedDtor();
}

void CUserMessageHintText::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageHintText_descriptor_;
}

const CUserMessageHintText& CUserMessageHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageHintText* CUserMessageHintText::default_instance_ = NULL;

CUserMessageHintText* CUserMessageHintText::New() const {
  return new CUserMessageHintText;
}

void CUserMessageHintText::Clear() {
  if (has_message()) {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      message_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageHintText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageHintText)
  return false;
#undef DO_
}

void CUserMessageHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageHintText)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageHintText)
}

::google::protobuf::uint8* CUserMessageHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageHintText)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageHintText)
  return target;
}

int CUserMessageHintText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageHintText::MergeFrom(const CUserMessageHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHintText::CopyFrom(const CUserMessageHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHintText::IsInitialized() const {

  return true;
}

void CUserMessageHintText::Swap(CUserMessageHintText* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageHintText_descriptor_;
  metadata.reflection = CUserMessageHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageKeyHintText::kMessagesFieldNumber;
#endif  // !_MSC_VER

CUserMessageKeyHintText::CUserMessageKeyHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageKeyHintText)
}

void CUserMessageKeyHintText::InitAsDefaultInstance() {
}

CUserMessageKeyHintText::CUserMessageKeyHintText(const CUserMessageKeyHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageKeyHintText)
}

void CUserMessageKeyHintText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageKeyHintText::~CUserMessageKeyHintText() {
  // @@protoc_insertion_point(destructor:CUserMessageKeyHintText)
  SharedDtor();
}

void CUserMessageKeyHintText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageKeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageKeyHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageKeyHintText_descriptor_;
}

const CUserMessageKeyHintText& CUserMessageKeyHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageKeyHintText* CUserMessageKeyHintText::default_instance_ = NULL;

CUserMessageKeyHintText* CUserMessageKeyHintText::New() const {
  return new CUserMessageKeyHintText;
}

void CUserMessageKeyHintText::Clear() {
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageKeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageKeyHintText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string messages = 1;
      case 1: {
        if (tag == 10) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messages(this->messages_size() - 1).data(),
            this->messages(this->messages_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messages");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageKeyHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageKeyHintText)
  return false;
#undef DO_
}

void CUserMessageKeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageKeyHintText)
  // repeated string messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->messages(i).data(), this->messages(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "messages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageKeyHintText)
}

::google::protobuf::uint8* CUserMessageKeyHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageKeyHintText)
  // repeated string messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages(i).data(), this->messages(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageKeyHintText)
  return target;
}

int CUserMessageKeyHintText::ByteSize() const {
  int total_size = 0;

  // repeated string messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageKeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageKeyHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageKeyHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageKeyHintText::MergeFrom(const CUserMessageKeyHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageKeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageKeyHintText::CopyFrom(const CUserMessageKeyHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageKeyHintText::IsInitialized() const {

  return true;
}

void CUserMessageKeyHintText::Swap(CUserMessageKeyHintText* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageKeyHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageKeyHintText_descriptor_;
  metadata.reflection = CUserMessageKeyHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageVoiceSubtitle::kPlayerFieldNumber;
const int CUserMessageVoiceSubtitle::kMenuFieldNumber;
const int CUserMessageVoiceSubtitle::kItemFieldNumber;
#endif  // !_MSC_VER

CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageVoiceSubtitle)
}

void CUserMessageVoiceSubtitle::InitAsDefaultInstance() {
}

CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(const CUserMessageVoiceSubtitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageVoiceSubtitle)
}

void CUserMessageVoiceSubtitle::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  menu_ = 0;
  item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageVoiceSubtitle::~CUserMessageVoiceSubtitle() {
  // @@protoc_insertion_point(destructor:CUserMessageVoiceSubtitle)
  SharedDtor();
}

void CUserMessageVoiceSubtitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageVoiceSubtitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVoiceSubtitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageVoiceSubtitle_descriptor_;
}

const CUserMessageVoiceSubtitle& CUserMessageVoiceSubtitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageVoiceSubtitle* CUserMessageVoiceSubtitle::default_instance_ = NULL;

CUserMessageVoiceSubtitle* CUserMessageVoiceSubtitle::New() const {
  return new CUserMessageVoiceSubtitle;
}

void CUserMessageVoiceSubtitle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageVoiceSubtitle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_, item_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageVoiceSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageVoiceSubtitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_menu;
        break;
      }

      // optional int32 menu = 2;
      case 2: {
        if (tag == 16) {
         parse_menu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menu_)));
          set_has_menu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional int32 item = 3;
      case 3: {
        if (tag == 24) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageVoiceSubtitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageVoiceSubtitle)
  return false;
#undef DO_
}

void CUserMessageVoiceSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageVoiceSubtitle)
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 menu = 2;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->menu(), output);
  }

  // optional int32 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageVoiceSubtitle)
}

::google::protobuf::uint8* CUserMessageVoiceSubtitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVoiceSubtitle)
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 menu = 2;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->menu(), target);
  }

  // optional int32 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVoiceSubtitle)
  return target;
}

int CUserMessageVoiceSubtitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 menu = 2;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menu());
    }

    // optional int32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVoiceSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageVoiceSubtitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageVoiceSubtitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageVoiceSubtitle::MergeFrom(const CUserMessageVoiceSubtitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_menu()) {
      set_menu(from.menu());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageVoiceSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceSubtitle::CopyFrom(const CUserMessageVoiceSubtitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceSubtitle::IsInitialized() const {

  return true;
}

void CUserMessageVoiceSubtitle::Swap(CUserMessageVoiceSubtitle* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(menu_, other->menu_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageVoiceSubtitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageVoiceSubtitle_descriptor_;
  metadata.reflection = CUserMessageVoiceSubtitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageVGUIMenu_Keys::kNameFieldNumber;
const int CUserMessageVGUIMenu_Keys::kValueFieldNumber;
#endif  // !_MSC_VER

CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageVGUIMenu.Keys)
}

void CUserMessageVGUIMenu_Keys::InitAsDefaultInstance() {
}

CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(const CUserMessageVGUIMenu_Keys& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageVGUIMenu.Keys)
}

void CUserMessageVGUIMenu_Keys::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageVGUIMenu_Keys::~CUserMessageVGUIMenu_Keys() {
  // @@protoc_insertion_point(destructor:CUserMessageVGUIMenu.Keys)
  SharedDtor();
}

void CUserMessageVGUIMenu_Keys::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageVGUIMenu_Keys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu_Keys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageVGUIMenu_Keys_descriptor_;
}

const CUserMessageVGUIMenu_Keys& CUserMessageVGUIMenu_Keys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageVGUIMenu_Keys* CUserMessageVGUIMenu_Keys::default_instance_ = NULL;

CUserMessageVGUIMenu_Keys* CUserMessageVGUIMenu_Keys::New() const {
  return new CUserMessageVGUIMenu_Keys;
}

void CUserMessageVGUIMenu_Keys::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageVGUIMenu_Keys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageVGUIMenu.Keys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageVGUIMenu.Keys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageVGUIMenu.Keys)
  return false;
#undef DO_
}

void CUserMessageVGUIMenu_Keys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageVGUIMenu.Keys)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageVGUIMenu.Keys)
}

::google::protobuf::uint8* CUserMessageVGUIMenu_Keys::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVGUIMenu.Keys)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVGUIMenu.Keys)
  return target;
}

int CUserMessageVGUIMenu_Keys::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageVGUIMenu_Keys* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageVGUIMenu_Keys*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const CUserMessageVGUIMenu_Keys& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const CUserMessageVGUIMenu_Keys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu_Keys::IsInitialized() const {

  return true;
}

void CUserMessageVGUIMenu_Keys::Swap(CUserMessageVGUIMenu_Keys* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageVGUIMenu_Keys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageVGUIMenu_Keys_descriptor_;
  metadata.reflection = CUserMessageVGUIMenu_Keys_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMessageVGUIMenu::kNameFieldNumber;
const int CUserMessageVGUIMenu::kShowFieldNumber;
const int CUserMessageVGUIMenu::kKeysFieldNumber;
#endif  // !_MSC_VER

CUserMessageVGUIMenu::CUserMessageVGUIMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageVGUIMenu)
}

void CUserMessageVGUIMenu::InitAsDefaultInstance() {
}

CUserMessageVGUIMenu::CUserMessageVGUIMenu(const CUserMessageVGUIMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageVGUIMenu)
}

void CUserMessageVGUIMenu::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageVGUIMenu::~CUserMessageVGUIMenu() {
  // @@protoc_insertion_point(destructor:CUserMessageVGUIMenu)
  SharedDtor();
}

void CUserMessageVGUIMenu::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageVGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageVGUIMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageVGUIMenu_descriptor_;
}

const CUserMessageVGUIMenu& CUserMessageVGUIMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageVGUIMenu* CUserMessageVGUIMenu::default_instance_ = NULL;

CUserMessageVGUIMenu* CUserMessageVGUIMenu::New() const {
  return new CUserMessageVGUIMenu;
}

void CUserMessageVGUIMenu::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    show_ = false;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageVGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageVGUIMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (tag == 16) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .CUserMessageVGUIMenu.Keys keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageVGUIMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageVGUIMenu)
  return false;
#undef DO_
}

void CUserMessageVGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageVGUIMenu)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // repeated .CUserMessageVGUIMenu.Keys keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageVGUIMenu)
}

::google::protobuf::uint8* CUserMessageVGUIMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageVGUIMenu)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // repeated .CUserMessageVGUIMenu.Keys keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageVGUIMenu)
  return target;
}

int CUserMessageVGUIMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CUserMessageVGUIMenu.Keys keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageVGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageVGUIMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageVGUIMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu::MergeFrom(const CUserMessageVGUIMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageVGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu::CopyFrom(const CUserMessageVGUIMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu::IsInitialized() const {

  return true;
}

void CUserMessageVGUIMenu::Swap(CUserMessageVGUIMenu* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(show_, other->show_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageVGUIMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageVGUIMenu_descriptor_;
  metadata.reflection = CUserMessageVGUIMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageRumble::kIndexFieldNumber;
const int CUserMessageRumble::kDataFieldNumber;
const int CUserMessageRumble::kFlagsFieldNumber;
#endif  // !_MSC_VER

CUserMessageRumble::CUserMessageRumble()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageRumble)
}

void CUserMessageRumble::InitAsDefaultInstance() {
}

CUserMessageRumble::CUserMessageRumble(const CUserMessageRumble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageRumble)
}

void CUserMessageRumble::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  data_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageRumble::~CUserMessageRumble() {
  // @@protoc_insertion_point(destructor:CUserMessageRumble)
  SharedDtor();
}

void CUserMessageRumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageRumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageRumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageRumble_descriptor_;
}

const CUserMessageRumble& CUserMessageRumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageRumble* CUserMessageRumble::default_instance_ = NULL;

CUserMessageRumble* CUserMessageRumble::New() const {
  return new CUserMessageRumble;
}

void CUserMessageRumble::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageRumble*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageRumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageRumble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int32 data = 2;
      case 2: {
        if (tag == 16) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageRumble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageRumble)
  return false;
#undef DO_
}

void CUserMessageRumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageRumble)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageRumble)
}

::google::protobuf::uint8* CUserMessageRumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageRumble)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageRumble)
  return target;
}

int CUserMessageRumble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageRumble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageRumble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageRumble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageRumble::MergeFrom(const CUserMessageRumble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageRumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRumble::CopyFrom(const CUserMessageRumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRumble::IsInitialized() const {

  return true;
}

void CUserMessageRumble::Swap(CUserMessageRumble* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageRumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageRumble_descriptor_;
  metadata.reflection = CUserMessageRumble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageTrain::kPositionFieldNumber;
#endif  // !_MSC_VER

CUserMessageTrain::CUserMessageTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageTrain)
}

void CUserMessageTrain::InitAsDefaultInstance() {
}

CUserMessageTrain::CUserMessageTrain(const CUserMessageTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageTrain)
}

void CUserMessageTrain::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageTrain::~CUserMessageTrain() {
  // @@protoc_insertion_point(destructor:CUserMessageTrain)
  SharedDtor();
}

void CUserMessageTrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageTrain_descriptor_;
}

const CUserMessageTrain& CUserMessageTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageTrain* CUserMessageTrain::default_instance_ = NULL;

CUserMessageTrain* CUserMessageTrain::New() const {
  return new CUserMessageTrain;
}

void CUserMessageTrain::Clear() {
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageTrain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageTrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageTrain)
  return false;
#undef DO_
}

void CUserMessageTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageTrain)
  // optional uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageTrain)
}

::google::protobuf::uint8* CUserMessageTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageTrain)
  // optional uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageTrain)
  return target;
}

int CUserMessageTrain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageTrain::MergeFrom(const CUserMessageTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTrain::CopyFrom(const CUserMessageTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTrain::IsInitialized() const {

  return true;
}

void CUserMessageTrain::Swap(CUserMessageTrain* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageTrain_descriptor_;
  metadata.reflection = CUserMessageTrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageSayTextChannel::kPlayerFieldNumber;
const int CUserMessageSayTextChannel::kChannelFieldNumber;
const int CUserMessageSayTextChannel::kTextFieldNumber;
#endif  // !_MSC_VER

CUserMessageSayTextChannel::CUserMessageSayTextChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageSayTextChannel)
}

void CUserMessageSayTextChannel::InitAsDefaultInstance() {
}

CUserMessageSayTextChannel::CUserMessageSayTextChannel(const CUserMessageSayTextChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageSayTextChannel)
}

void CUserMessageSayTextChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_ = 0;
  channel_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageSayTextChannel::~CUserMessageSayTextChannel() {
  // @@protoc_insertion_point(destructor:CUserMessageSayTextChannel)
  SharedDtor();
}

void CUserMessageSayTextChannel::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageSayTextChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageSayTextChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageSayTextChannel_descriptor_;
}

const CUserMessageSayTextChannel& CUserMessageSayTextChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageSayTextChannel* CUserMessageSayTextChannel::default_instance_ = NULL;

CUserMessageSayTextChannel* CUserMessageSayTextChannel::New() const {
  return new CUserMessageSayTextChannel;
}

void CUserMessageSayTextChannel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageSayTextChannel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_, channel_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageSayTextChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageSayTextChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (tag == 16) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageSayTextChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageSayTextChannel)
  return false;
#undef DO_
}

void CUserMessageSayTextChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageSayTextChannel)
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageSayTextChannel)
}

::google::protobuf::uint8* CUserMessageSayTextChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageSayTextChannel)
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageSayTextChannel)
  return target;
}

int CUserMessageSayTextChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageSayTextChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageSayTextChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageSayTextChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageSayTextChannel::MergeFrom(const CUserMessageSayTextChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageSayTextChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayTextChannel::CopyFrom(const CUserMessageSayTextChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayTextChannel::IsInitialized() const {

  return true;
}

void CUserMessageSayTextChannel::Swap(CUserMessageSayTextChannel* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(channel_, other->channel_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageSayTextChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageSayTextChannel_descriptor_;
  metadata.reflection = CUserMessageSayTextChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageColoredText::kColorFieldNumber;
const int CUserMessageColoredText::kTextFieldNumber;
const int CUserMessageColoredText::kResetFieldNumber;
const int CUserMessageColoredText::kContextPlayerIdFieldNumber;
const int CUserMessageColoredText::kContextValueFieldNumber;
const int CUserMessageColoredText::kContextTeamIdFieldNumber;
#endif  // !_MSC_VER

CUserMessageColoredText::CUserMessageColoredText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageColoredText)
}

void CUserMessageColoredText::InitAsDefaultInstance() {
}

CUserMessageColoredText::CUserMessageColoredText(const CUserMessageColoredText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageColoredText)
}

void CUserMessageColoredText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reset_ = false;
  context_player_id_ = 0;
  context_value_ = 0;
  context_team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageColoredText::~CUserMessageColoredText() {
  // @@protoc_insertion_point(destructor:CUserMessageColoredText)
  SharedDtor();
}

void CUserMessageColoredText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageColoredText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageColoredText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageColoredText_descriptor_;
}

const CUserMessageColoredText& CUserMessageColoredText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageColoredText* CUserMessageColoredText::default_instance_ = NULL;

CUserMessageColoredText* CUserMessageColoredText::New() const {
  return new CUserMessageColoredText;
}

void CUserMessageColoredText::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageColoredText*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(color_, context_team_id_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageColoredText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageColoredText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reset;
        break;
      }

      // optional bool reset = 3;
      case 3: {
        if (tag == 24) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_context_player_id;
        break;
      }

      // optional int32 context_player_id = 4;
      case 4: {
        if (tag == 32) {
         parse_context_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_player_id_)));
          set_has_context_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_context_value;
        break;
      }

      // optional int32 context_value = 5;
      case 5: {
        if (tag == 40) {
         parse_context_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_value_)));
          set_has_context_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_context_team_id;
        break;
      }

      // optional int32 context_team_id = 6;
      case 6: {
        if (tag == 48) {
         parse_context_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_team_id_)));
          set_has_context_team_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageColoredText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageColoredText)
  return false;
#undef DO_
}

void CUserMessageColoredText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageColoredText)
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool reset = 3;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reset(), output);
  }

  // optional int32 context_player_id = 4;
  if (has_context_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->context_player_id(), output);
  }

  // optional int32 context_value = 5;
  if (has_context_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->context_value(), output);
  }

  // optional int32 context_team_id = 6;
  if (has_context_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->context_team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageColoredText)
}

::google::protobuf::uint8* CUserMessageColoredText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageColoredText)
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool reset = 3;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reset(), target);
  }

  // optional int32 context_player_id = 4;
  if (has_context_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->context_player_id(), target);
  }

  // optional int32 context_value = 5;
  if (has_context_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->context_value(), target);
  }

  // optional int32 context_team_id = 6;
  if (has_context_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->context_team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageColoredText)
  return target;
}

int CUserMessageColoredText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool reset = 3;
    if (has_reset()) {
      total_size += 1 + 1;
    }

    // optional int32 context_player_id = 4;
    if (has_context_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_player_id());
    }

    // optional int32 context_value = 5;
    if (has_context_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_value());
    }

    // optional int32 context_team_id = 6;
    if (has_context_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageColoredText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageColoredText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageColoredText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageColoredText::MergeFrom(const CUserMessageColoredText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
    if (from.has_context_player_id()) {
      set_context_player_id(from.context_player_id());
    }
    if (from.has_context_value()) {
      set_context_value(from.context_value());
    }
    if (from.has_context_team_id()) {
      set_context_team_id(from.context_team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageColoredText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageColoredText::CopyFrom(const CUserMessageColoredText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageColoredText::IsInitialized() const {

  return true;
}

void CUserMessageColoredText::Swap(CUserMessageColoredText* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(text_, other->text_);
    std::swap(reset_, other->reset_);
    std::swap(context_player_id_, other->context_player_id_);
    std::swap(context_value_, other->context_value_);
    std::swap(context_team_id_, other->context_team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageColoredText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageColoredText_descriptor_;
  metadata.reflection = CUserMessageColoredText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageItemPickup::kItemnameFieldNumber;
#endif  // !_MSC_VER

CUserMessageItemPickup::CUserMessageItemPickup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageItemPickup)
}

void CUserMessageItemPickup::InitAsDefaultInstance() {
}

CUserMessageItemPickup::CUserMessageItemPickup(const CUserMessageItemPickup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageItemPickup)
}

void CUserMessageItemPickup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageItemPickup::~CUserMessageItemPickup() {
  // @@protoc_insertion_point(destructor:CUserMessageItemPickup)
  SharedDtor();
}

void CUserMessageItemPickup::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageItemPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageItemPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageItemPickup_descriptor_;
}

const CUserMessageItemPickup& CUserMessageItemPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageItemPickup* CUserMessageItemPickup::default_instance_ = NULL;

CUserMessageItemPickup* CUserMessageItemPickup::New() const {
  return new CUserMessageItemPickup;
}

void CUserMessageItemPickup::Clear() {
  if (has_itemname()) {
    if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      itemname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageItemPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageItemPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string itemname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageItemPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageItemPickup)
  return false;
#undef DO_
}

void CUserMessageItemPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageItemPickup)
  // optional string itemname = 1;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->itemname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageItemPickup)
}

::google::protobuf::uint8* CUserMessageItemPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageItemPickup)
  // optional string itemname = 1;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->itemname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageItemPickup)
  return target;
}

int CUserMessageItemPickup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string itemname = 1;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageItemPickup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageItemPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageItemPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageItemPickup::MergeFrom(const CUserMessageItemPickup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageItemPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageItemPickup::CopyFrom(const CUserMessageItemPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageItemPickup::IsInitialized() const {

  return true;
}

void CUserMessageItemPickup::Swap(CUserMessageItemPickup* other) {
  if (other != this) {
    std::swap(itemname_, other->itemname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageItemPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageItemPickup_descriptor_;
  metadata.reflection = CUserMessageItemPickup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageAmmoDenied::kAmmoIdFieldNumber;
#endif  // !_MSC_VER

CUserMessageAmmoDenied::CUserMessageAmmoDenied()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageAmmoDenied)
}

void CUserMessageAmmoDenied::InitAsDefaultInstance() {
}

CUserMessageAmmoDenied::CUserMessageAmmoDenied(const CUserMessageAmmoDenied& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageAmmoDenied)
}

void CUserMessageAmmoDenied::SharedCtor() {
  _cached_size_ = 0;
  ammo_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageAmmoDenied::~CUserMessageAmmoDenied() {
  // @@protoc_insertion_point(destructor:CUserMessageAmmoDenied)
  SharedDtor();
}

void CUserMessageAmmoDenied::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageAmmoDenied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageAmmoDenied::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageAmmoDenied_descriptor_;
}

const CUserMessageAmmoDenied& CUserMessageAmmoDenied::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageAmmoDenied* CUserMessageAmmoDenied::default_instance_ = NULL;

CUserMessageAmmoDenied* CUserMessageAmmoDenied::New() const {
  return new CUserMessageAmmoDenied;
}

void CUserMessageAmmoDenied::Clear() {
  ammo_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageAmmoDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageAmmoDenied)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ammo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo_id_)));
          set_has_ammo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageAmmoDenied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageAmmoDenied)
  return false;
#undef DO_
}

void CUserMessageAmmoDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageAmmoDenied)
  // optional uint32 ammo_id = 1;
  if (has_ammo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ammo_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageAmmoDenied)
}

::google::protobuf::uint8* CUserMessageAmmoDenied::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageAmmoDenied)
  // optional uint32 ammo_id = 1;
  if (has_ammo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ammo_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageAmmoDenied)
  return target;
}

int CUserMessageAmmoDenied::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ammo_id = 1;
    if (has_ammo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageAmmoDenied::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageAmmoDenied* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageAmmoDenied*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageAmmoDenied::MergeFrom(const CUserMessageAmmoDenied& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ammo_id()) {
      set_ammo_id(from.ammo_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageAmmoDenied::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAmmoDenied::CopyFrom(const CUserMessageAmmoDenied& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAmmoDenied::IsInitialized() const {

  return true;
}

void CUserMessageAmmoDenied::Swap(CUserMessageAmmoDenied* other) {
  if (other != this) {
    std::swap(ammo_id_, other->ammo_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageAmmoDenied::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageAmmoDenied_descriptor_;
  metadata.reflection = CUserMessageAmmoDenied_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCrosshairAngle::kAngcrosshairFieldNumber;
#endif  // !_MSC_VER

CUserMessageCrosshairAngle::CUserMessageCrosshairAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCrosshairAngle)
}

void CUserMessageCrosshairAngle::InitAsDefaultInstance() {
  angcrosshair_ = const_cast< ::CMsgQAngle*>(&::CMsgQAngle::default_instance());
}

CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(const CUserMessageCrosshairAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCrosshairAngle)
}

void CUserMessageCrosshairAngle::SharedCtor() {
  _cached_size_ = 0;
  angcrosshair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCrosshairAngle::~CUserMessageCrosshairAngle() {
  // @@protoc_insertion_point(destructor:CUserMessageCrosshairAngle)
  SharedDtor();
}

void CUserMessageCrosshairAngle::SharedDtor() {
  if (this != default_instance_) {
    delete angcrosshair_;
  }
}

void CUserMessageCrosshairAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCrosshairAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCrosshairAngle_descriptor_;
}

const CUserMessageCrosshairAngle& CUserMessageCrosshairAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCrosshairAngle* CUserMessageCrosshairAngle::default_instance_ = NULL;

CUserMessageCrosshairAngle* CUserMessageCrosshairAngle::New() const {
  return new CUserMessageCrosshairAngle;
}

void CUserMessageCrosshairAngle::Clear() {
  if (has_angcrosshair()) {
    if (angcrosshair_ != NULL) angcrosshair_->::CMsgQAngle::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCrosshairAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCrosshairAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgQAngle angcrosshair = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angcrosshair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCrosshairAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCrosshairAngle)
  return false;
#undef DO_
}

void CUserMessageCrosshairAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCrosshairAngle)
  // optional .CMsgQAngle angcrosshair = 1;
  if (has_angcrosshair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->angcrosshair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCrosshairAngle)
}

::google::protobuf::uint8* CUserMessageCrosshairAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCrosshairAngle)
  // optional .CMsgQAngle angcrosshair = 1;
  if (has_angcrosshair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->angcrosshair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCrosshairAngle)
  return target;
}

int CUserMessageCrosshairAngle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgQAngle angcrosshair = 1;
    if (has_angcrosshair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angcrosshair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCrosshairAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCrosshairAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCrosshairAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCrosshairAngle::MergeFrom(const CUserMessageCrosshairAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angcrosshair()) {
      mutable_angcrosshair()->::CMsgQAngle::MergeFrom(from.angcrosshair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCrosshairAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCrosshairAngle::CopyFrom(const CUserMessageCrosshairAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCrosshairAngle::IsInitialized() const {

  return true;
}

void CUserMessageCrosshairAngle::Swap(CUserMessageCrosshairAngle* other) {
  if (other != this) {
    std::swap(angcrosshair_, other->angcrosshair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCrosshairAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCrosshairAngle_descriptor_;
  metadata.reflection = CUserMessageCrosshairAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageShowMenu::kValidslotsFieldNumber;
const int CUserMessageShowMenu::kDisplaytimeFieldNumber;
const int CUserMessageShowMenu::kNeedmoreFieldNumber;
const int CUserMessageShowMenu::kMenustringFieldNumber;
#endif  // !_MSC_VER

CUserMessageShowMenu::CUserMessageShowMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageShowMenu)
}

void CUserMessageShowMenu::InitAsDefaultInstance() {
}

CUserMessageShowMenu::CUserMessageShowMenu(const CUserMessageShowMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageShowMenu)
}

void CUserMessageShowMenu::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  validslots_ = 0u;
  displaytime_ = 0u;
  needmore_ = false;
  menustring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageShowMenu::~CUserMessageShowMenu() {
  // @@protoc_insertion_point(destructor:CUserMessageShowMenu)
  SharedDtor();
}

void CUserMessageShowMenu::SharedDtor() {
  if (menustring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete menustring_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageShowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageShowMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageShowMenu_descriptor_;
}

const CUserMessageShowMenu& CUserMessageShowMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageShowMenu* CUserMessageShowMenu::default_instance_ = NULL;

CUserMessageShowMenu* CUserMessageShowMenu::New() const {
  return new CUserMessageShowMenu;
}

void CUserMessageShowMenu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageShowMenu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(validslots_, displaytime_);
    needmore_ = false;
    if (has_menustring()) {
      if (menustring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        menustring_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageShowMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 validslots = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validslots_)));
          set_has_validslots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_displaytime;
        break;
      }

      // optional uint32 displaytime = 2;
      case 2: {
        if (tag == 16) {
         parse_displaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displaytime_)));
          set_has_displaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_needmore;
        break;
      }

      // optional bool needmore = 3;
      case 3: {
        if (tag == 24) {
         parse_needmore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needmore_)));
          set_has_needmore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_menustring;
        break;
      }

      // optional string menustring = 4;
      case 4: {
        if (tag == 34) {
         parse_menustring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menustring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->menustring().data(), this->menustring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "menustring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageShowMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageShowMenu)
  return false;
#undef DO_
}

void CUserMessageShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageShowMenu)
  // optional uint32 validslots = 1;
  if (has_validslots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validslots(), output);
  }

  // optional uint32 displaytime = 2;
  if (has_displaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->displaytime(), output);
  }

  // optional bool needmore = 3;
  if (has_needmore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needmore(), output);
  }

  // optional string menustring = 4;
  if (has_menustring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), this->menustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "menustring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->menustring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageShowMenu)
}

::google::protobuf::uint8* CUserMessageShowMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageShowMenu)
  // optional uint32 validslots = 1;
  if (has_validslots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validslots(), target);
  }

  // optional uint32 displaytime = 2;
  if (has_displaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->displaytime(), target);
  }

  // optional bool needmore = 3;
  if (has_needmore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needmore(), target);
  }

  // optional string menustring = 4;
  if (has_menustring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), this->menustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "menustring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->menustring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageShowMenu)
  return target;
}

int CUserMessageShowMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 validslots = 1;
    if (has_validslots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validslots());
    }

    // optional uint32 displaytime = 2;
    if (has_displaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displaytime());
    }

    // optional bool needmore = 3;
    if (has_needmore()) {
      total_size += 1 + 1;
    }

    // optional string menustring = 4;
    if (has_menustring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menustring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageShowMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageShowMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageShowMenu::MergeFrom(const CUserMessageShowMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_validslots()) {
      set_validslots(from.validslots());
    }
    if (from.has_displaytime()) {
      set_displaytime(from.displaytime());
    }
    if (from.has_needmore()) {
      set_needmore(from.needmore());
    }
    if (from.has_menustring()) {
      set_menustring(from.menustring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShowMenu::CopyFrom(const CUserMessageShowMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShowMenu::IsInitialized() const {

  return true;
}

void CUserMessageShowMenu::Swap(CUserMessageShowMenu* other) {
  if (other != this) {
    std::swap(validslots_, other->validslots_);
    std::swap(displaytime_, other->displaytime_);
    std::swap(needmore_, other->needmore_);
    std::swap(menustring_, other->menustring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageShowMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageShowMenu_descriptor_;
  metadata.reflection = CUserMessageShowMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCreditsMsg::kRolltypeFieldNumber;
#endif  // !_MSC_VER

CUserMessageCreditsMsg::CUserMessageCreditsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCreditsMsg)
}

void CUserMessageCreditsMsg::InitAsDefaultInstance() {
}

CUserMessageCreditsMsg::CUserMessageCreditsMsg(const CUserMessageCreditsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCreditsMsg)
}

void CUserMessageCreditsMsg::SharedCtor() {
  _cached_size_ = 0;
  rolltype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCreditsMsg::~CUserMessageCreditsMsg() {
  // @@protoc_insertion_point(destructor:CUserMessageCreditsMsg)
  SharedDtor();
}

void CUserMessageCreditsMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMessageCreditsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCreditsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCreditsMsg_descriptor_;
}

const CUserMessageCreditsMsg& CUserMessageCreditsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCreditsMsg* CUserMessageCreditsMsg::default_instance_ = NULL;

CUserMessageCreditsMsg* CUserMessageCreditsMsg::New() const {
  return new CUserMessageCreditsMsg;
}

void CUserMessageCreditsMsg::Clear() {
  rolltype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCreditsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCreditsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eRollType rolltype = 1 [default = ROLL_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eRollType_IsValid(value)) {
            set_rolltype(static_cast< ::eRollType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCreditsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCreditsMsg)
  return false;
#undef DO_
}

void CUserMessageCreditsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCreditsMsg)
  // optional .eRollType rolltype = 1 [default = ROLL_NONE];
  if (has_rolltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rolltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCreditsMsg)
}

::google::protobuf::uint8* CUserMessageCreditsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCreditsMsg)
  // optional .eRollType rolltype = 1 [default = ROLL_NONE];
  if (has_rolltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rolltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCreditsMsg)
  return target;
}

int CUserMessageCreditsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .eRollType rolltype = 1 [default = ROLL_NONE];
    if (has_rolltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCreditsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCreditsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCreditsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCreditsMsg::MergeFrom(const CUserMessageCreditsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolltype()) {
      set_rolltype(from.rolltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCreditsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCreditsMsg::CopyFrom(const CUserMessageCreditsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCreditsMsg::IsInitialized() const {

  return true;
}

void CUserMessageCreditsMsg::Swap(CUserMessageCreditsMsg* other) {
  if (other != this) {
    std::swap(rolltype_, other->rolltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCreditsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCreditsMsg_descriptor_;
  metadata.reflection = CUserMessageCreditsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CEntityMessagePlayJingle::CEntityMessagePlayJingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessagePlayJingle)
}

void CEntityMessagePlayJingle::InitAsDefaultInstance() {
}

CEntityMessagePlayJingle::CEntityMessagePlayJingle(const CEntityMessagePlayJingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessagePlayJingle)
}

void CEntityMessagePlayJingle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessagePlayJingle::~CEntityMessagePlayJingle() {
  // @@protoc_insertion_point(destructor:CEntityMessagePlayJingle)
  SharedDtor();
}

void CEntityMessagePlayJingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CEntityMessagePlayJingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessagePlayJingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessagePlayJingle_descriptor_;
}

const CEntityMessagePlayJingle& CEntityMessagePlayJingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessagePlayJingle* CEntityMessagePlayJingle::default_instance_ = NULL;

CEntityMessagePlayJingle* CEntityMessagePlayJingle::New() const {
  return new CEntityMessagePlayJingle;
}

void CEntityMessagePlayJingle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessagePlayJingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessagePlayJingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessagePlayJingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessagePlayJingle)
  return false;
#undef DO_
}

void CEntityMessagePlayJingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessagePlayJingle)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessagePlayJingle)
}

::google::protobuf::uint8* CEntityMessagePlayJingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessagePlayJingle)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessagePlayJingle)
  return target;
}

int CEntityMessagePlayJingle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessagePlayJingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessagePlayJingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessagePlayJingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessagePlayJingle::MergeFrom(const CEntityMessagePlayJingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessagePlayJingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePlayJingle::CopyFrom(const CEntityMessagePlayJingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePlayJingle::IsInitialized() const {

  return true;
}

void CEntityMessagePlayJingle::Swap(CEntityMessagePlayJingle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessagePlayJingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessagePlayJingle_descriptor_;
  metadata.reflection = CEntityMessagePlayJingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEntityMessageScreenOverlay::kStartEffectFieldNumber;
#endif  // !_MSC_VER

CEntityMessageScreenOverlay::CEntityMessageScreenOverlay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessageScreenOverlay)
}

void CEntityMessageScreenOverlay::InitAsDefaultInstance() {
}

CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(const CEntityMessageScreenOverlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessageScreenOverlay)
}

void CEntityMessageScreenOverlay::SharedCtor() {
  _cached_size_ = 0;
  start_effect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessageScreenOverlay::~CEntityMessageScreenOverlay() {
  // @@protoc_insertion_point(destructor:CEntityMessageScreenOverlay)
  SharedDtor();
}

void CEntityMessageScreenOverlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CEntityMessageScreenOverlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageScreenOverlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessageScreenOverlay_descriptor_;
}

const CEntityMessageScreenOverlay& CEntityMessageScreenOverlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessageScreenOverlay* CEntityMessageScreenOverlay::default_instance_ = NULL;

CEntityMessageScreenOverlay* CEntityMessageScreenOverlay::New() const {
  return new CEntityMessageScreenOverlay;
}

void CEntityMessageScreenOverlay::Clear() {
  start_effect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessageScreenOverlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessageScreenOverlay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool start_effect = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_effect_)));
          set_has_start_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessageScreenOverlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessageScreenOverlay)
  return false;
#undef DO_
}

void CEntityMessageScreenOverlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessageScreenOverlay)
  // optional bool start_effect = 1;
  if (has_start_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->start_effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessageScreenOverlay)
}

::google::protobuf::uint8* CEntityMessageScreenOverlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageScreenOverlay)
  // optional bool start_effect = 1;
  if (has_start_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->start_effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageScreenOverlay)
  return target;
}

int CEntityMessageScreenOverlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool start_effect = 1;
    if (has_start_effect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageScreenOverlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessageScreenOverlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessageScreenOverlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessageScreenOverlay::MergeFrom(const CEntityMessageScreenOverlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_effect()) {
      set_start_effect(from.start_effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessageScreenOverlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageScreenOverlay::CopyFrom(const CEntityMessageScreenOverlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageScreenOverlay::IsInitialized() const {

  return true;
}

void CEntityMessageScreenOverlay::Swap(CEntityMessageScreenOverlay* other) {
  if (other != this) {
    std::swap(start_effect_, other->start_effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessageScreenOverlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessageScreenOverlay_descriptor_;
  metadata.reflection = CEntityMessageScreenOverlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEntityMessageRemoveAllDecals::kRemoveDecalsFieldNumber;
#endif  // !_MSC_VER

CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessageRemoveAllDecals)
}

void CEntityMessageRemoveAllDecals::InitAsDefaultInstance() {
}

CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(const CEntityMessageRemoveAllDecals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessageRemoveAllDecals)
}

void CEntityMessageRemoveAllDecals::SharedCtor() {
  _cached_size_ = 0;
  remove_decals_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessageRemoveAllDecals::~CEntityMessageRemoveAllDecals() {
  // @@protoc_insertion_point(destructor:CEntityMessageRemoveAllDecals)
  SharedDtor();
}

void CEntityMessageRemoveAllDecals::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CEntityMessageRemoveAllDecals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageRemoveAllDecals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessageRemoveAllDecals_descriptor_;
}

const CEntityMessageRemoveAllDecals& CEntityMessageRemoveAllDecals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessageRemoveAllDecals* CEntityMessageRemoveAllDecals::default_instance_ = NULL;

CEntityMessageRemoveAllDecals* CEntityMessageRemoveAllDecals::New() const {
  return new CEntityMessageRemoveAllDecals;
}

void CEntityMessageRemoveAllDecals::Clear() {
  remove_decals_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessageRemoveAllDecals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessageRemoveAllDecals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool remove_decals = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_decals_)));
          set_has_remove_decals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessageRemoveAllDecals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessageRemoveAllDecals)
  return false;
#undef DO_
}

void CEntityMessageRemoveAllDecals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessageRemoveAllDecals)
  // optional bool remove_decals = 1;
  if (has_remove_decals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->remove_decals(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessageRemoveAllDecals)
}

::google::protobuf::uint8* CEntityMessageRemoveAllDecals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageRemoveAllDecals)
  // optional bool remove_decals = 1;
  if (has_remove_decals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->remove_decals(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageRemoveAllDecals)
  return target;
}

int CEntityMessageRemoveAllDecals::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool remove_decals = 1;
    if (has_remove_decals()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageRemoveAllDecals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessageRemoveAllDecals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessageRemoveAllDecals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessageRemoveAllDecals::MergeFrom(const CEntityMessageRemoveAllDecals& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remove_decals()) {
      set_remove_decals(from.remove_decals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessageRemoveAllDecals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageRemoveAllDecals::CopyFrom(const CEntityMessageRemoveAllDecals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageRemoveAllDecals::IsInitialized() const {

  return true;
}

void CEntityMessageRemoveAllDecals::Swap(CEntityMessageRemoveAllDecals* other) {
  if (other != this) {
    std::swap(remove_decals_, other->remove_decals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessageRemoveAllDecals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessageRemoveAllDecals_descriptor_;
  metadata.reflection = CEntityMessageRemoveAllDecals_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEntityMessagePropagateForce::kImpulseFieldNumber;
#endif  // !_MSC_VER

CEntityMessagePropagateForce::CEntityMessagePropagateForce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessagePropagateForce)
}

void CEntityMessagePropagateForce::InitAsDefaultInstance() {
  impulse_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CEntityMessagePropagateForce::CEntityMessagePropagateForce(const CEntityMessagePropagateForce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessagePropagateForce)
}

void CEntityMessagePropagateForce::SharedCtor() {
  _cached_size_ = 0;
  impulse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessagePropagateForce::~CEntityMessagePropagateForce() {
  // @@protoc_insertion_point(destructor:CEntityMessagePropagateForce)
  SharedDtor();
}

void CEntityMessagePropagateForce::SharedDtor() {
  if (this != default_instance_) {
    delete impulse_;
  }
}

void CEntityMessagePropagateForce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessagePropagateForce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessagePropagateForce_descriptor_;
}

const CEntityMessagePropagateForce& CEntityMessagePropagateForce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessagePropagateForce* CEntityMessagePropagateForce::default_instance_ = NULL;

CEntityMessagePropagateForce* CEntityMessagePropagateForce::New() const {
  return new CEntityMessagePropagateForce;
}

void CEntityMessagePropagateForce::Clear() {
  if (has_impulse()) {
    if (impulse_ != NULL) impulse_->::CMsgVector::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessagePropagateForce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessagePropagateForce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector impulse = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impulse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessagePropagateForce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessagePropagateForce)
  return false;
#undef DO_
}

void CEntityMessagePropagateForce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessagePropagateForce)
  // optional .CMsgVector impulse = 1;
  if (has_impulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impulse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessagePropagateForce)
}

::google::protobuf::uint8* CEntityMessagePropagateForce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessagePropagateForce)
  // optional .CMsgVector impulse = 1;
  if (has_impulse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->impulse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessagePropagateForce)
  return target;
}

int CEntityMessagePropagateForce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector impulse = 1;
    if (has_impulse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impulse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessagePropagateForce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessagePropagateForce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessagePropagateForce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessagePropagateForce::MergeFrom(const CEntityMessagePropagateForce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impulse()) {
      mutable_impulse()->::CMsgVector::MergeFrom(from.impulse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessagePropagateForce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePropagateForce::CopyFrom(const CEntityMessagePropagateForce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePropagateForce::IsInitialized() const {

  return true;
}

void CEntityMessagePropagateForce::Swap(CEntityMessagePropagateForce* other) {
  if (other != this) {
    std::swap(impulse_, other->impulse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessagePropagateForce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessagePropagateForce_descriptor_;
  metadata.reflection = CEntityMessagePropagateForce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEntityMessageDoSpark::kOriginFieldNumber;
const int CEntityMessageDoSpark::kEntityindexFieldNumber;
const int CEntityMessageDoSpark::kRadiusFieldNumber;
const int CEntityMessageDoSpark::kColorFieldNumber;
const int CEntityMessageDoSpark::kBeamsFieldNumber;
const int CEntityMessageDoSpark::kThickFieldNumber;
const int CEntityMessageDoSpark::kDurationFieldNumber;
#endif  // !_MSC_VER

CEntityMessageDoSpark::CEntityMessageDoSpark()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessageDoSpark)
}

void CEntityMessageDoSpark::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CEntityMessageDoSpark::CEntityMessageDoSpark(const CEntityMessageDoSpark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessageDoSpark)
}

void CEntityMessageDoSpark::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  entityindex_ = 0u;
  radius_ = 0;
  color_ = 0u;
  beams_ = 0u;
  thick_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessageDoSpark::~CEntityMessageDoSpark() {
  // @@protoc_insertion_point(destructor:CEntityMessageDoSpark)
  SharedDtor();
}

void CEntityMessageDoSpark::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void CEntityMessageDoSpark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageDoSpark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessageDoSpark_descriptor_;
}

const CEntityMessageDoSpark& CEntityMessageDoSpark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessageDoSpark* CEntityMessageDoSpark::default_instance_ = NULL;

CEntityMessageDoSpark* CEntityMessageDoSpark::New() const {
  return new CEntityMessageDoSpark;
}

void CEntityMessageDoSpark::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CEntityMessageDoSpark*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(entityindex_, duration_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessageDoSpark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessageDoSpark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entityindex;
        break;
      }

      // optional uint32 entityindex = 2;
      case 2: {
        if (tag == 16) {
         parse_entityindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
          set_has_entityindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_radius;
        break;
      }

      // optional float radius = 3;
      case 3: {
        if (tag == 29) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (tag == 37) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_beams;
        break;
      }

      // optional uint32 beams = 5;
      case 5: {
        if (tag == 40) {
         parse_beams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beams_)));
          set_has_beams();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_thick;
        break;
      }

      // optional float thick = 6;
      case 6: {
        if (tag == 53) {
         parse_thick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thick_)));
          set_has_thick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_duration;
        break;
      }

      // optional float duration = 7;
      case 7: {
        if (tag == 61) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessageDoSpark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessageDoSpark)
  return false;
#undef DO_
}

void CEntityMessageDoSpark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessageDoSpark)
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }

  // optional uint32 entityindex = 2;
  if (has_entityindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entityindex(), output);
  }

  // optional float radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // optional fixed32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  // optional uint32 beams = 5;
  if (has_beams()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->beams(), output);
  }

  // optional float thick = 6;
  if (has_thick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thick(), output);
  }

  // optional float duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessageDoSpark)
}

::google::protobuf::uint8* CEntityMessageDoSpark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageDoSpark)
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }

  // optional uint32 entityindex = 2;
  if (has_entityindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entityindex(), target);
  }

  // optional float radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // optional fixed32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  // optional uint32 beams = 5;
  if (has_beams()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->beams(), target);
  }

  // optional float thick = 6;
  if (has_thick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thick(), target);
  }

  // optional float duration = 7;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageDoSpark)
  return target;
}

int CEntityMessageDoSpark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional uint32 entityindex = 2;
    if (has_entityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional float radius = 3;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional fixed32 color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }

    // optional uint32 beams = 5;
    if (has_beams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beams());
    }

    // optional float thick = 6;
    if (has_thick()) {
      total_size += 1 + 4;
    }

    // optional float duration = 7;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageDoSpark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessageDoSpark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessageDoSpark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessageDoSpark::MergeFrom(const CEntityMessageDoSpark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (from.has_entityindex()) {
      set_entityindex(from.entityindex());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_beams()) {
      set_beams(from.beams());
    }
    if (from.has_thick()) {
      set_thick(from.thick());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessageDoSpark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageDoSpark::CopyFrom(const CEntityMessageDoSpark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageDoSpark::IsInitialized() const {

  return true;
}

void CEntityMessageDoSpark::Swap(CEntityMessageDoSpark* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(entityindex_, other->entityindex_);
    std::swap(radius_, other->radius_);
    std::swap(color_, other->color_);
    std::swap(beams_, other->beams_);
    std::swap(thick_, other->thick_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessageDoSpark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessageDoSpark_descriptor_;
  metadata.reflection = CEntityMessageDoSpark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CEntityMessageFixAngle::kRelativeFieldNumber;
const int CEntityMessageFixAngle::kAngleFieldNumber;
#endif  // !_MSC_VER

CEntityMessageFixAngle::CEntityMessageFixAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEntityMessageFixAngle)
}

void CEntityMessageFixAngle::InitAsDefaultInstance() {
  angle_ = const_cast< ::CMsgQAngle*>(&::CMsgQAngle::default_instance());
}

CEntityMessageFixAngle::CEntityMessageFixAngle(const CEntityMessageFixAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEntityMessageFixAngle)
}

void CEntityMessageFixAngle::SharedCtor() {
  _cached_size_ = 0;
  relative_ = false;
  angle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CEntityMessageFixAngle::~CEntityMessageFixAngle() {
  // @@protoc_insertion_point(destructor:CEntityMessageFixAngle)
  SharedDtor();
}

void CEntityMessageFixAngle::SharedDtor() {
  if (this != default_instance_) {
    delete angle_;
  }
}

void CEntityMessageFixAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEntityMessageFixAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEntityMessageFixAngle_descriptor_;
}

const CEntityMessageFixAngle& CEntityMessageFixAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CEntityMessageFixAngle* CEntityMessageFixAngle::default_instance_ = NULL;

CEntityMessageFixAngle* CEntityMessageFixAngle::New() const {
  return new CEntityMessageFixAngle;
}

void CEntityMessageFixAngle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    relative_ = false;
    if (has_angle()) {
      if (angle_ != NULL) angle_->::CMsgQAngle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CEntityMessageFixAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEntityMessageFixAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relative = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relative_)));
          set_has_relative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angle;
        break;
      }

      // optional .CMsgQAngle angle = 2;
      case 2: {
        if (tag == 18) {
         parse_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEntityMessageFixAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEntityMessageFixAngle)
  return false;
#undef DO_
}

void CEntityMessageFixAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEntityMessageFixAngle)
  // optional bool relative = 1;
  if (has_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relative(), output);
  }

  // optional .CMsgQAngle angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CEntityMessageFixAngle)
}

::google::protobuf::uint8* CEntityMessageFixAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMessageFixAngle)
  // optional bool relative = 1;
  if (has_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relative(), target);
  }

  // optional .CMsgQAngle angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMessageFixAngle)
  return target;
}

int CEntityMessageFixAngle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool relative = 1;
    if (has_relative()) {
      total_size += 1 + 1;
    }

    // optional .CMsgQAngle angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEntityMessageFixAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CEntityMessageFixAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CEntityMessageFixAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CEntityMessageFixAngle::MergeFrom(const CEntityMessageFixAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relative()) {
      set_relative(from.relative());
    }
    if (from.has_angle()) {
      mutable_angle()->::CMsgQAngle::MergeFrom(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CEntityMessageFixAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageFixAngle::CopyFrom(const CEntityMessageFixAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageFixAngle::IsInitialized() const {

  return true;
}

void CEntityMessageFixAngle::Swap(CEntityMessageFixAngle* other) {
  if (other != this) {
    std::swap(relative_, other->relative_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CEntityMessageFixAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEntityMessageFixAngle_descriptor_;
  metadata.reflection = CEntityMessageFixAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMessageCameraTransition_Transition_DataDriven::kFilenameFieldNumber;
const int CUserMessageCameraTransition_Transition_DataDriven::kAttachEntIndexFieldNumber;
#endif  // !_MSC_VER

CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCameraTransition.Transition_DataDriven)
}

void CUserMessageCameraTransition_Transition_DataDriven::InitAsDefaultInstance() {
}

CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(const CUserMessageCameraTransition_Transition_DataDriven& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCameraTransition.Transition_DataDriven)
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_ent_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCameraTransition_Transition_DataDriven::~CUserMessageCameraTransition_Transition_DataDriven() {
  // @@protoc_insertion_point(destructor:CUserMessageCameraTransition.Transition_DataDriven)
  SharedDtor();
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCameraTransition_Transition_DataDriven::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCameraTransition_Transition_DataDriven_descriptor_;
}

const CUserMessageCameraTransition_Transition_DataDriven& CUserMessageCameraTransition_Transition_DataDriven::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCameraTransition_Transition_DataDriven* CUserMessageCameraTransition_Transition_DataDriven::default_instance_ = NULL;

CUserMessageCameraTransition_Transition_DataDriven* CUserMessageCameraTransition_Transition_DataDriven::New() const {
  return new CUserMessageCameraTransition_Transition_DataDriven;
}

void CUserMessageCameraTransition_Transition_DataDriven::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    attach_ent_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCameraTransition_Transition_DataDriven::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCameraTransition.Transition_DataDriven)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attach_ent_index;
        break;
      }

      // optional int32 attach_ent_index = 2;
      case 2: {
        if (tag == 16) {
         parse_attach_ent_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_ent_index_)));
          set_has_attach_ent_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCameraTransition.Transition_DataDriven)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCameraTransition.Transition_DataDriven)
  return false;
#undef DO_
}

void CUserMessageCameraTransition_Transition_DataDriven::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCameraTransition.Transition_DataDriven)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional int32 attach_ent_index = 2;
  if (has_attach_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_ent_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCameraTransition.Transition_DataDriven)
}

::google::protobuf::uint8* CUserMessageCameraTransition_Transition_DataDriven::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCameraTransition.Transition_DataDriven)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional int32 attach_ent_index = 2;
  if (has_attach_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_ent_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCameraTransition.Transition_DataDriven)
  return target;
}

int CUserMessageCameraTransition_Transition_DataDriven::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 attach_ent_index = 2;
    if (has_attach_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_ent_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCameraTransition_Transition_DataDriven* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCameraTransition_Transition_DataDriven*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_attach_ent_index()) {
      set_attach_ent_index(from.attach_ent_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition_Transition_DataDriven::IsInitialized() const {

  return true;
}

void CUserMessageCameraTransition_Transition_DataDriven::Swap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(attach_ent_index_, other->attach_ent_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCameraTransition_Transition_DataDriven::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCameraTransition_Transition_DataDriven_descriptor_;
  metadata.reflection = CUserMessageCameraTransition_Transition_DataDriven_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMessageCameraTransition::kCameraTypeFieldNumber;
const int CUserMessageCameraTransition::kDurationFieldNumber;
const int CUserMessageCameraTransition::kParamsDataDrivenFieldNumber;
#endif  // !_MSC_VER

CUserMessageCameraTransition::CUserMessageCameraTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMessageCameraTransition)
}

void CUserMessageCameraTransition::InitAsDefaultInstance() {
  params_data_driven_ = const_cast< ::CUserMessageCameraTransition_Transition_DataDriven*>(&::CUserMessageCameraTransition_Transition_DataDriven::default_instance());
}

CUserMessageCameraTransition::CUserMessageCameraTransition(const CUserMessageCameraTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMessageCameraTransition)
}

void CUserMessageCameraTransition::SharedCtor() {
  _cached_size_ = 0;
  camera_type_ = 0u;
  duration_ = 0;
  params_data_driven_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMessageCameraTransition::~CUserMessageCameraTransition() {
  // @@protoc_insertion_point(destructor:CUserMessageCameraTransition)
  SharedDtor();
}

void CUserMessageCameraTransition::SharedDtor() {
  if (this != default_instance_) {
    delete params_data_driven_;
  }
}

void CUserMessageCameraTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMessageCameraTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMessageCameraTransition_descriptor_;
}

const CUserMessageCameraTransition& CUserMessageCameraTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMessageCameraTransition* CUserMessageCameraTransition::default_instance_ = NULL;

CUserMessageCameraTransition* CUserMessageCameraTransition::New() const {
  return new CUserMessageCameraTransition;
}

void CUserMessageCameraTransition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMessageCameraTransition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(camera_type_, duration_);
    if (has_params_data_driven()) {
      if (params_data_driven_ != NULL) params_data_driven_->::CUserMessageCameraTransition_Transition_DataDriven::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMessageCameraTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMessageCameraTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_type_)));
          set_has_camera_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (tag == 21) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params_data_driven;
        break;
      }

      // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
      case 3: {
        if (tag == 26) {
         parse_params_data_driven:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params_data_driven()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMessageCameraTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMessageCameraTransition)
  return false;
#undef DO_
}

void CUserMessageCameraTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMessageCameraTransition)
  // optional uint32 camera_type = 1;
  if (has_camera_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_type(), output);
  }

  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (has_params_data_driven()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params_data_driven(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMessageCameraTransition)
}

::google::protobuf::uint8* CUserMessageCameraTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMessageCameraTransition)
  // optional uint32 camera_type = 1;
  if (has_camera_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_type(), target);
  }

  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (has_params_data_driven()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params_data_driven(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMessageCameraTransition)
  return target;
}

int CUserMessageCameraTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camera_type = 1;
    if (has_camera_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_type());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
    if (has_params_data_driven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params_data_driven());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMessageCameraTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMessageCameraTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMessageCameraTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition::MergeFrom(const CUserMessageCameraTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_type()) {
      set_camera_type(from.camera_type());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_params_data_driven()) {
      mutable_params_data_driven()->::CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(from.params_data_driven());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMessageCameraTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition::CopyFrom(const CUserMessageCameraTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition::IsInitialized() const {

  return true;
}

void CUserMessageCameraTransition::Swap(CUserMessageCameraTransition* other) {
  if (other != this) {
    std::swap(camera_type_, other->camera_type_);
    std::swap(duration_, other->duration_);
    std::swap(params_data_driven_, other->params_data_driven_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMessageCameraTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMessageCameraTransition_descriptor_;
  metadata.reflection = CUserMessageCameraTransition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(const CUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_ReleaseParticleIndex::~CUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ReleaseParticleIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
}

const CUserMsg_ParticleManager_ReleaseParticleIndex& CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_ReleaseParticleIndex* CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = NULL;

CUserMsg_ParticleManager_ReleaseParticleIndex* CUserMsg_ParticleManager_ReleaseParticleIndex::New() const {
  return new CUserMsg_ParticleManager_ReleaseParticleIndex;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.ReleaseParticleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.ReleaseParticleIndex)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.ReleaseParticleIndex)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

int CUserMsg_ParticleManager_ReleaseParticleIndex::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ReleaseParticleIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_ReleaseParticleIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.CreateParticle)
}

void CUserMsg_ParticleManager_CreateParticle::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(const CUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.CreateParticle)
}

void CUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  _cached_size_ = 0;
  particle_name_index_ = GOOGLE_ULONGLONG(0);
  attach_type_ = 0;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_CreateParticle::~CUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_CreateParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_CreateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_CreateParticle_descriptor_;
}

const CUserMsg_ParticleManager_CreateParticle& CUserMsg_ParticleManager_CreateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_CreateParticle* CUserMsg_ParticleManager_CreateParticle::default_instance_ = NULL;

CUserMsg_ParticleManager_CreateParticle* CUserMsg_ParticleManager_CreateParticle::New() const {
  return new CUserMsg_ParticleManager_CreateParticle;
}

void CUserMsg_ParticleManager_CreateParticle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMsg_ParticleManager_CreateParticle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(particle_name_index_, entity_handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.CreateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 particle_name_index = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &particle_name_index_)));
          set_has_particle_name_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attach_type;
        break;
      }

      // optional int32 attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.CreateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.CreateParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.CreateParticle)
  // optional fixed64 particle_name_index = 1;
  if (has_particle_name_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->particle_name_index(), output);
  }

  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.CreateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.CreateParticle)
  // optional fixed64 particle_name_index = 1;
  if (has_particle_name_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.CreateParticle)
  return target;
}

int CUserMsg_ParticleManager_CreateParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 particle_name_index = 1;
    if (has_particle_name_index()) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_CreateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_CreateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_particle_name_index()) {
      set_particle_name_index(from.particle_name_index());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_CreateParticle::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_CreateParticle::Swap(CUserMsg_ParticleManager_CreateParticle* other) {
  if (other != this) {
    std::swap(particle_name_index_, other->particle_name_index_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_CreateParticle_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_CreateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.DestroyParticle)
}

void CUserMsg_ParticleManager_DestroyParticle::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(const CUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.DestroyParticle)
}

void CUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_DestroyParticle::~CUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_DestroyParticle_descriptor_;
}

const CUserMsg_ParticleManager_DestroyParticle& CUserMsg_ParticleManager_DestroyParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_DestroyParticle* CUserMsg_ParticleManager_DestroyParticle::default_instance_ = NULL;

CUserMsg_ParticleManager_DestroyParticle* CUserMsg_ParticleManager_DestroyParticle::New() const {
  return new CUserMsg_ParticleManager_DestroyParticle;
}

void CUserMsg_ParticleManager_DestroyParticle::Clear() {
  destroy_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.DestroyParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.DestroyParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.DestroyParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.DestroyParticle)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.DestroyParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.DestroyParticle)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.DestroyParticle)
  return target;
}

int CUserMsg_ParticleManager_DestroyParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_DestroyParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_DestroyParticle::Swap(CUserMsg_ParticleManager_DestroyParticle* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_DestroyParticle_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_DestroyParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(const CUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_DestroyParticleInvolving::~CUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_DestroyParticleInvolving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
}

const CUserMsg_ParticleManager_DestroyParticleInvolving& CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_DestroyParticleInvolving* CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = NULL;

CUserMsg_ParticleManager_DestroyParticleInvolving* CUserMsg_ParticleManager_DestroyParticleInvolving::New() const {
  return new CUserMsg_ParticleManager_DestroyParticleInvolving;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMsg_ParticleManager_DestroyParticleInvolving*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(destroy_immediately_, entity_handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.DestroyParticleInvolving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.DestroyParticleInvolving)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.DestroyParticleInvolving)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.DestroyParticleInvolving)
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

int CUserMsg_ParticleManager_DestroyParticleInvolving::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticleInvolving* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_DestroyParticleInvolving*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticle)
}

void CUserMsg_ParticleManager_UpdateParticle::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(const CUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticle)
}

void CUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticle::~CUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticle_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticle& CUserMsg_ParticleManager_UpdateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticle* CUserMsg_ParticleManager_UpdateParticle::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticle* CUserMsg_ParticleManager_UpdateParticle::New() const {
  return new CUserMsg_ParticleManager_UpdateParticle;
}

void CUserMsg_ParticleManager_UpdateParticle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .CMsgVector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticle)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticle)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticle)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticle)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticle::Swap(CUserMsg_ParticleManager_UpdateParticle* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticle_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleFwd)
}

void CUserMsg_ParticleManager_UpdateParticleFwd::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(const CUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleFwd)
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleFwd::~CUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleFwd& CUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleFwd* CUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleFwd* CUserMsg_ParticleManager_UpdateParticleFwd::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleFwd;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }

      // optional .CMsgVector forward = 2;
      case 2: {
        if (tag == 18) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleFwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleFwd)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleFwd)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleFwd)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleFwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleFwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Swap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleOrient)
}

void CUserMsg_ParticleManager_UpdateParticleOrient::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  right_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  up_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(const CUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleOrient)
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  right_ = NULL;
  up_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleOrient::~CUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
    delete right_;
    delete up_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOrient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleOrient& CUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleOrient* CUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleOrient* CUserMsg_ParticleManager_UpdateParticleOrient::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleOrient;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::CMsgVector::Clear();
    }
    if (has_up()) {
      if (up_ != NULL) up_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }

      // optional .CMsgVector forward = 2;
      case 2: {
        if (tag == 18) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }

      // optional .CMsgVector right = 3;
      case 3: {
        if (tag == 26) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_up;
        break;
      }

      // optional .CMsgVector up = 4;
      case 4: {
        if (tag == 34) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleOrient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleOrient)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }

  // optional .CMsgVector right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right(), output);
  }

  // optional .CMsgVector up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleOrient)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleOrient)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }

  // optional .CMsgVector right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right(), target);
  }

  // optional .CMsgVector up = 4;
  if (has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleOrient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }

    // optional .CMsgVector right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

    // optional .CMsgVector up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOrient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleOrient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
    if (from.has_right()) {
      mutable_right()->::CMsgVector::MergeFrom(from.right());
    }
    if (from.has_up()) {
      mutable_up()->::CMsgVector::MergeFrom(from.up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Swap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(right_, other->right_);
    std::swap(up_, other->up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleFallback)
}

void CUserMsg_ParticleManager_UpdateParticleFallback::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(const CUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleFallback)
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleFallback::~CUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleFallback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleFallback& CUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleFallback* CUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleFallback* CUserMsg_ParticleManager_UpdateParticleFallback::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleFallback;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .CMsgVector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleFallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleFallback)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleFallback)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleFallback)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleFallback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFallback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleFallback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Swap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleOffset)
}

void CUserMsg_ParticleManager_UpdateParticleOffset::InitAsDefaultInstance() {
  origin_offset_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(const CUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleOffset)
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  origin_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleOffset::~CUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != default_instance_) {
    delete origin_offset_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleOffset& CUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleOffset* CUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleOffset* CUserMsg_ParticleManager_UpdateParticleOffset::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleOffset;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    control_point_ = 0;
    if (has_origin_offset()) {
      if (origin_offset_ != NULL) origin_offset_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_origin_offset;
        break;
      }

      // optional .CMsgVector origin_offset = 2;
      case 2: {
        if (tag == 18) {
         parse_origin_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleOffset)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->origin_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleOffset)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleOffset)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->origin_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional .CMsgVector origin_offset = 2;
    if (has_origin_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_origin_offset()) {
      mutable_origin_offset()->::CMsgVector::MergeFrom(from.origin_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Swap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(origin_offset_, other->origin_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kIncludeWearablesFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleEnt)
}

void CUserMsg_ParticleManager_UpdateParticleEnt::InitAsDefaultInstance() {
  fallback_position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(const CUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleEnt)
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  entity_handle_ = 0;
  attach_type_ = 0;
  attachment_ = 0;
  fallback_position_ = NULL;
  include_wearables_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleEnt::~CUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != default_instance_) {
    delete fallback_position_;
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleEnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleEnt& CUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleEnt* CUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleEnt* CUserMsg_ParticleManager_UpdateParticleEnt::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleEnt;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMsg_ParticleManager_UpdateParticleEnt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(control_point_, attachment_);
    if (has_fallback_position()) {
      if (fallback_position_ != NULL) fallback_position_->::CMsgVector::Clear();
    }
    include_wearables_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (tag == 16) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attach_type;
        break;
      }

      // optional int32 attach_type = 3;
      case 3: {
        if (tag == 24) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attachment;
        break;
      }

      // optional int32 attachment = 4;
      case 4: {
        if (tag == 32) {
         parse_attachment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
          set_has_attachment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fallback_position;
        break;
      }

      // optional .CMsgVector fallback_position = 5;
      case 5: {
        if (tag == 42) {
         parse_fallback_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_include_wearables;
        break;
      }

      // optional bool include_wearables = 6;
      case 6: {
        if (tag == 48) {
         parse_include_wearables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_wearables_)));
          set_has_include_wearables();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleEnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleEnt)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }

  // optional int32 attachment = 4;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }

  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fallback_position(), output);
  }

  // optional bool include_wearables = 6;
  if (has_include_wearables()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_wearables(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleEnt)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleEnt)
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }

  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fallback_position(), target);
  }

  // optional bool include_wearables = 6;
  if (has_include_wearables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_wearables(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleEnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 attach_type = 3;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }

    // optional .CMsgVector fallback_position = 5;
    if (has_fallback_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fallback_position());
    }

    // optional bool include_wearables = 6;
    if (has_include_wearables()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleEnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleEnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
    if (from.has_fallback_position()) {
      mutable_fallback_position()->::CMsgVector::MergeFrom(from.fallback_position());
    }
    if (from.has_include_wearables()) {
      set_include_wearables(from.include_wearables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Swap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(attachment_, other->attachment_);
    std::swap(fallback_position_, other->fallback_position_);
    std::swap(include_wearables_, other->include_wearables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleSetFrozen::kSetFrozenFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
  _cached_size_ = 0;
  set_frozen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen::~CUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleSetFrozen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleSetFrozen& CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen* CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleSetFrozen* CUserMsg_ParticleManager_UpdateParticleSetFrozen::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleSetFrozen;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
  set_frozen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_frozen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_frozen_)));
          set_has_set_frozen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set_frozen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set_frozen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool set_frozen = 1;
    if (has_set_frozen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleSetFrozen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_frozen()) {
      set_set_frozen(from.set_frozen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Swap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  if (other != this) {
    std::swap(set_frozen_, other->set_frozen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleSetFrozen_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleSetFrozen_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  _cached_size_ = 0;
  should_draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw::~CUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_UpdateParticleShouldDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
}

const CUserMsg_ParticleManager_UpdateParticleShouldDraw& CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw* CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = NULL;

CUserMsg_ParticleManager_UpdateParticleShouldDraw* CUserMsg_ParticleManager_UpdateParticleShouldDraw::New() const {
  return new CUserMsg_ParticleManager_UpdateParticleShouldDraw;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
  should_draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
          set_has_should_draw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

int CUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool should_draw = 1;
    if (has_should_draw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_should_draw()) {
      set_should_draw(from.should_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other != this) {
    std::swap(should_draw_, other->should_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentOldFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentNewFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::InitAsDefaultInstance() {
}

CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedCtor() {
  _cached_size_ = 0;
  attachment_old_ = 0;
  attachment_new_ = 0;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager_ChangeControlPointAttachment::~CUserMsg_ParticleManager_ChangeControlPointAttachment() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  SharedDtor();
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager_ChangeControlPointAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_;
}

const CUserMsg_ParticleManager_ChangeControlPointAttachment& CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager_ChangeControlPointAttachment* CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance_ = NULL;

CUserMsg_ParticleManager_ChangeControlPointAttachment* CUserMsg_ParticleManager_ChangeControlPointAttachment::New() const {
  return new CUserMsg_ParticleManager_ChangeControlPointAttachment;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMsg_ParticleManager_ChangeControlPointAttachment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attachment_old_, entity_handle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attachment_old = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_old_)));
          set_has_attachment_old();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attachment_new;
        break;
      }

      // optional int32 attachment_new = 2;
      case 2: {
        if (tag == 16) {
         parse_attachment_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_new_)));
          set_has_attachment_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  // optional int32 attachment_old = 1;
  if (has_attachment_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attachment_old(), output);
  }

  // optional int32 attachment_new = 2;
  if (has_attachment_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attachment_new(), output);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ChangeControlPointAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  // optional int32 attachment_old = 1;
  if (has_attachment_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attachment_old(), target);
  }

  // optional int32 attachment_new = 2;
  if (has_attachment_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attachment_new(), target);
  }

  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return target;
}

int CUserMsg_ParticleManager_ChangeControlPointAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attachment_old = 1;
    if (has_attachment_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_old());
    }

    // optional int32 attachment_new = 2;
    if (has_attachment_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_new());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ChangeControlPointAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager_ChangeControlPointAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachment_old()) {
      set_attachment_old(from.attachment_old());
    }
    if (from.has_attachment_new()) {
      set_attachment_new(from.attachment_new());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::IsInitialized() const {

  return true;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Swap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  if (other != this) {
    std::swap(attachment_old_, other->attachment_old_);
    std::swap(attachment_new_, other->attachment_new_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ChangeControlPointAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_ChangeControlPointAttachment_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_ChangeControlPointAttachment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_ParticleManager::kTypeFieldNumber;
const int CUserMsg_ParticleManager::kIndexFieldNumber;
const int CUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleSetFrozenFieldNumber;
const int CUserMsg_ParticleManager::kChangeControlPointAttachmentFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ParticleManager::CUserMsg_ParticleManager()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_ParticleManager)
}

void CUserMsg_ParticleManager::InitAsDefaultInstance() {
  release_particle_index_ = const_cast< ::CUserMsg_ParticleManager_ReleaseParticleIndex*>(&::CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  create_particle_ = const_cast< ::CUserMsg_ParticleManager_CreateParticle*>(&::CUserMsg_ParticleManager_CreateParticle::default_instance());
  destroy_particle_ = const_cast< ::CUserMsg_ParticleManager_DestroyParticle*>(&::CUserMsg_ParticleManager_DestroyParticle::default_instance());
  destroy_particle_involving_ = const_cast< ::CUserMsg_ParticleManager_DestroyParticleInvolving*>(&::CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  update_particle_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticle*>(&::CUserMsg_ParticleManager_UpdateParticle::default_instance());
  update_particle_fwd_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleFwd*>(&::CUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  update_particle_orient_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleOrient*>(&::CUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  update_particle_fallback_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleFallback*>(&::CUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  update_particle_offset_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleOffset*>(&::CUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  update_particle_ent_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleEnt*>(&::CUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  update_particle_should_draw_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleShouldDraw*>(&::CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
  update_particle_set_frozen_ = const_cast< ::CUserMsg_ParticleManager_UpdateParticleSetFrozen*>(&::CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance());
  change_control_point_attachment_ = const_cast< ::CUserMsg_ParticleManager_ChangeControlPointAttachment*>(&::CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance());
}

CUserMsg_ParticleManager::CUserMsg_ParticleManager(const CUserMsg_ParticleManager& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_ParticleManager)
}

void CUserMsg_ParticleManager::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0u;
  release_particle_index_ = NULL;
  create_particle_ = NULL;
  destroy_particle_ = NULL;
  destroy_particle_involving_ = NULL;
  update_particle_ = NULL;
  update_particle_fwd_ = NULL;
  update_particle_orient_ = NULL;
  update_particle_fallback_ = NULL;
  update_particle_offset_ = NULL;
  update_particle_ent_ = NULL;
  update_particle_should_draw_ = NULL;
  update_particle_set_frozen_ = NULL;
  change_control_point_attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ParticleManager::~CUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:CUserMsg_ParticleManager)
  SharedDtor();
}

void CUserMsg_ParticleManager::SharedDtor() {
  if (this != default_instance_) {
    delete release_particle_index_;
    delete create_particle_;
    delete destroy_particle_;
    delete destroy_particle_involving_;
    delete update_particle_;
    delete update_particle_fwd_;
    delete update_particle_orient_;
    delete update_particle_fallback_;
    delete update_particle_offset_;
    delete update_particle_ent_;
    delete update_particle_should_draw_;
    delete update_particle_set_frozen_;
    delete change_control_point_attachment_;
  }
}

void CUserMsg_ParticleManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ParticleManager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ParticleManager_descriptor_;
}

const CUserMsg_ParticleManager& CUserMsg_ParticleManager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_ParticleManager* CUserMsg_ParticleManager::default_instance_ = NULL;

CUserMsg_ParticleManager* CUserMsg_ParticleManager::New() const {
  return new CUserMsg_ParticleManager;
}

void CUserMsg_ParticleManager::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CUserMsg_ParticleManager*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, index_);
    if (has_release_particle_index()) {
      if (release_particle_index_ != NULL) release_particle_index_->::CUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
    }
    if (has_create_particle()) {
      if (create_particle_ != NULL) create_particle_->::CUserMsg_ParticleManager_CreateParticle::Clear();
    }
    if (has_destroy_particle()) {
      if (destroy_particle_ != NULL) destroy_particle_->::CUserMsg_ParticleManager_DestroyParticle::Clear();
    }
    if (has_destroy_particle_involving()) {
      if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::CUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
    }
    if (has_update_particle()) {
      if (update_particle_ != NULL) update_particle_->::CUserMsg_ParticleManager_UpdateParticle::Clear();
    }
    if (has_update_particle_fwd()) {
      if (update_particle_fwd_ != NULL) update_particle_fwd_->::CUserMsg_ParticleManager_UpdateParticleFwd::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_update_particle_orient()) {
      if (update_particle_orient_ != NULL) update_particle_orient_->::CUserMsg_ParticleManager_UpdateParticleOrient::Clear();
    }
    if (has_update_particle_fallback()) {
      if (update_particle_fallback_ != NULL) update_particle_fallback_->::CUserMsg_ParticleManager_UpdateParticleFallback::Clear();
    }
    if (has_update_particle_offset()) {
      if (update_particle_offset_ != NULL) update_particle_offset_->::CUserMsg_ParticleManager_UpdateParticleOffset::Clear();
    }
    if (has_update_particle_ent()) {
      if (update_particle_ent_ != NULL) update_particle_ent_->::CUserMsg_ParticleManager_UpdateParticleEnt::Clear();
    }
    if (has_update_particle_should_draw()) {
      if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
    }
    if (has_update_particle_set_frozen()) {
      if (update_particle_set_frozen_ != NULL) update_particle_set_frozen_->::CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
    }
    if (has_change_control_point_attachment()) {
      if (change_control_point_attachment_ != NULL) change_control_point_attachment_->::CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_ParticleManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_release_particle_index;
        break;
      }

      // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (tag == 26) {
         parse_release_particle_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_particle_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_particle;
        break;
      }

      // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (tag == 34) {
         parse_create_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destroy_particle;
        break;
      }

      // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (tag == 42) {
         parse_destroy_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_destroy_particle_involving;
        break;
      }

      // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (tag == 50) {
         parse_destroy_particle_involving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_particle;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (tag == 58) {
         parse_update_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_update_particle_fwd;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (tag == 66) {
         parse_update_particle_fwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_update_particle_orient;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (tag == 74) {
         parse_update_particle_orient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_update_particle_fallback;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (tag == 82) {
         parse_update_particle_fallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_update_particle_offset;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (tag == 90) {
         parse_update_particle_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_update_particle_ent;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (tag == 98) {
         parse_update_particle_ent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_update_particle_should_draw;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (tag == 114) {
         parse_update_particle_should_draw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_update_particle_set_frozen;
        break;
      }

      // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (tag == 122) {
         parse_update_particle_set_frozen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_set_frozen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_change_control_point_attachment;
        break;
      }

      // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16: {
        if (tag == 130) {
         parse_change_control_point_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_control_point_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_ParticleManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_ParticleManager)
  return false;
#undef DO_
}

void CUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_ParticleManager)
  // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->release_particle_index(), output);
  }

  // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->create_particle(), output);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->destroy_particle(), output);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->destroy_particle_involving(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->update_particle(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->update_particle_fwd(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->update_particle_orient(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->update_particle_fallback(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->update_particle_offset(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->update_particle_ent(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->update_particle_should_draw(), output);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (has_update_particle_set_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->update_particle_set_frozen(), output);
  }

  // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (has_change_control_point_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->change_control_point_attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_ParticleManager)
}

::google::protobuf::uint8* CUserMsg_ParticleManager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_ParticleManager)
  // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->release_particle_index(), target);
  }

  // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->create_particle(), target);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->destroy_particle(), target);
  }

  // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->destroy_particle_involving(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->update_particle(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->update_particle_fwd(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->update_particle_orient(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->update_particle_fallback(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->update_particle_offset(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->update_particle_ent(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->update_particle_should_draw(), target);
  }

  // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (has_update_particle_set_frozen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->update_particle_set_frozen(), target);
  }

  // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (has_change_control_point_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->change_control_point_attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_ParticleManager)
  return target;
}

int CUserMsg_ParticleManager::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (has_release_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_particle_index());
    }

    // optional .CUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (has_create_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_particle());
    }

    // optional .CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (has_destroy_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle());
    }

    // optional .CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (has_destroy_particle_involving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle_involving());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (has_update_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (has_update_particle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fwd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (has_update_particle_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_orient());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (has_update_particle_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fallback());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (has_update_particle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_offset());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (has_update_particle_ent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_ent());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (has_update_particle_should_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_should_draw());
    }

    // optional .CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (has_update_particle_set_frozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_set_frozen());
    }

    // optional .CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    if (has_change_control_point_attachment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_control_point_attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ParticleManager* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ParticleManager*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager::MergeFrom(const CUserMsg_ParticleManager& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_release_particle_index()) {
      mutable_release_particle_index()->::CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (from.has_create_particle()) {
      mutable_create_particle()->::CUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (from.has_destroy_particle()) {
      mutable_destroy_particle()->::CUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (from.has_destroy_particle_involving()) {
      mutable_destroy_particle_involving()->::CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (from.has_update_particle()) {
      mutable_update_particle()->::CUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (from.has_update_particle_fwd()) {
      mutable_update_particle_fwd()->::CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_particle_orient()) {
      mutable_update_particle_orient()->::CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (from.has_update_particle_fallback()) {
      mutable_update_particle_fallback()->::CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
    if (from.has_update_particle_offset()) {
      mutable_update_particle_offset()->::CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (from.has_update_particle_ent()) {
      mutable_update_particle_ent()->::CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (from.has_update_particle_should_draw()) {
      mutable_update_particle_should_draw()->::CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
    if (from.has_update_particle_set_frozen()) {
      mutable_update_particle_set_frozen()->::CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from.update_particle_set_frozen());
    }
    if (from.has_change_control_point_attachment()) {
      mutable_change_control_point_attachment()->::CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(from.change_control_point_attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager::CopyFrom(const CUserMsg_ParticleManager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CUserMsg_ParticleManager::Swap(CUserMsg_ParticleManager* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(release_particle_index_, other->release_particle_index_);
    std::swap(create_particle_, other->create_particle_);
    std::swap(destroy_particle_, other->destroy_particle_);
    std::swap(destroy_particle_involving_, other->destroy_particle_involving_);
    std::swap(update_particle_, other->update_particle_);
    std::swap(update_particle_fwd_, other->update_particle_fwd_);
    std::swap(update_particle_orient_, other->update_particle_orient_);
    std::swap(update_particle_fallback_, other->update_particle_fallback_);
    std::swap(update_particle_offset_, other->update_particle_offset_);
    std::swap(update_particle_ent_, other->update_particle_ent_);
    std::swap(update_particle_should_draw_, other->update_particle_should_draw_);
    std::swap(update_particle_set_frozen_, other->update_particle_set_frozen_);
    std::swap(change_control_point_attachment_, other->change_control_point_attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ParticleManager::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ParticleManager_descriptor_;
  metadata.reflection = CUserMsg_ParticleManager_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !_MSC_VER

CUserMsg_HudError::CUserMsg_HudError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_HudError)
}

void CUserMsg_HudError::InitAsDefaultInstance() {
}

CUserMsg_HudError::CUserMsg_HudError(const CUserMsg_HudError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_HudError)
}

void CUserMsg_HudError::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_HudError::~CUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:CUserMsg_HudError)
  SharedDtor();
}

void CUserMsg_HudError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_HudError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_HudError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_HudError_descriptor_;
}

const CUserMsg_HudError& CUserMsg_HudError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_HudError* CUserMsg_HudError::default_instance_ = NULL;

CUserMsg_HudError* CUserMsg_HudError::New() const {
  return new CUserMsg_HudError;
}

void CUserMsg_HudError::Clear() {
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_HudError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_HudError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_HudError)
  return false;
#undef DO_
}

void CUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_HudError)
  // optional int32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_HudError)
}

::google::protobuf::uint8* CUserMsg_HudError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_HudError)
  // optional int32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_HudError)
  return target;
}

int CUserMsg_HudError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_HudError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_HudError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_HudError::MergeFrom(const CUserMsg_HudError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudError::CopyFrom(const CUserMsg_HudError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudError::IsInitialized() const {

  return true;
}

void CUserMsg_HudError::Swap(CUserMsg_HudError* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_HudError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_HudError_descriptor_;
  metadata.reflection = CUserMsg_HudError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_CustomGameEvent::kEventNameFieldNumber;
const int CUserMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !_MSC_VER

CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUserMsg_CustomGameEvent)
}

void CUserMsg_CustomGameEvent::InitAsDefaultInstance() {
}

CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(const CUserMsg_CustomGameEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUserMsg_CustomGameEvent)
}

void CUserMsg_CustomGameEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_CustomGameEvent::~CUserMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:CUserMsg_CustomGameEvent)
  SharedDtor();
}

void CUserMsg_CustomGameEvent::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_CustomGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_CustomGameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_CustomGameEvent_descriptor_;
}

const CUserMsg_CustomGameEvent& CUserMsg_CustomGameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();
  return *default_instance_;
}

CUserMsg_CustomGameEvent* CUserMsg_CustomGameEvent::default_instance_ = NULL;

CUserMsg_CustomGameEvent* CUserMsg_CustomGameEvent::New() const {
  return new CUserMsg_CustomGameEvent;
}

void CUserMsg_CustomGameEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUserMsg_CustomGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUserMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUserMsg_CustomGameEvent)
  return false;
#undef DO_
}

void CUserMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUserMsg_CustomGameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CUserMsg_CustomGameEvent)
}

::google::protobuf::uint8* CUserMsg_CustomGameEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserMsg_CustomGameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserMsg_CustomGameEvent)
  return target;
}

int CUserMsg_CustomGameEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_CustomGameEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_CustomGameEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_CustomGameEvent::MergeFrom(const CUserMsg_CustomGameEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CustomGameEvent::CopyFrom(const CUserMsg_CustomGameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CustomGameEvent::IsInitialized() const {

  return true;
}

void CUserMsg_CustomGameEvent::Swap(CUserMsg_CustomGameEvent* other) {
  if (other != this) {
    std::swap(event_name_, other->event_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_CustomGameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_CustomGameEvent_descriptor_;
  metadata.reflection = CUserMsg_CustomGameEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
